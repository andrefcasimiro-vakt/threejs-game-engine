!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e){t.exports=function(t){function e(e,n){this.object=e,this.domElement=void 0!==n?n:document,this.enabled=!0,this.target=new t.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:t.MOUSE.LEFT,ZOOM:t.MOUSE.MIDDLE,PAN:t.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return h.phi},this.getAzimuthalAngle=function(){return h.theta},this.reset=function(){r.target.copy(r.target0),r.object.position.copy(r.position0),r.object.zoom=r.zoom0,r.object.updateProjectionMatrix(),r.dispatchEvent(i),r.update(),c=s.NONE},this.update=function(){var n=new t.Vector3,o=(new t.Quaternion).setFromUnitVectors(e.up,new t.Vector3(0,1,0)),a=o.clone().inverse(),m=new t.Vector3,g=new t.Quaternion;return function(){var t=r.object.position;return n.copy(t).sub(r.target),n.applyQuaternion(o),h.setFromVector3(n),r.autoRotate&&c===s.NONE&&T(2*Math.PI/60/60*r.autoRotateSpeed),h.theta+=l.theta,h.phi+=l.phi,h.theta=Math.max(r.minAzimuthAngle,Math.min(r.maxAzimuthAngle,h.theta)),h.phi=Math.max(r.minPolarAngle,Math.min(r.maxPolarAngle,h.phi)),h.makeSafe(),h.radius*=d,h.radius=Math.max(r.minDistance,Math.min(r.maxDistance,h.radius)),r.target.add(p),n.setFromSpherical(h),n.applyQuaternion(a),t.copy(r.target).add(n),r.object.lookAt(r.target),!0===r.enableDamping?(l.theta*=1-r.dampingFactor,l.phi*=1-r.dampingFactor):l.set(0,0,0),d=1,p.set(0,0,0),!!(f||m.distanceToSquared(r.object.position)>u||8*(1-g.dot(r.object.quaternion))>u)&&(r.dispatchEvent(i),m.copy(r.object.position),g.copy(r.object.quaternion),f=!1,!0)}}(),this.dispose=function(){r.domElement.removeEventListener("contextmenu",G,!1),r.domElement.removeEventListener("mousedown",O,!1),r.domElement.removeEventListener("wheel",D,!1),r.domElement.removeEventListener("touchstart",B,!1),r.domElement.removeEventListener("touchend",z,!1),r.domElement.removeEventListener("touchmove",F,!1),document.removeEventListener("mousemove",I,!1),document.removeEventListener("mouseup",N,!1),window.removeEventListener("keydown",U,!1)};var r=this,i={type:"change"},o={type:"start"},a={type:"end"},s={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY:4,TOUCH_PAN:5},c=s.NONE,u=1e-6,h=new t.Spherical,l=new t.Spherical,d=1,p=new t.Vector3,f=!1,m=new t.Vector2,g=new t.Vector2,v=new t.Vector2,y=new t.Vector2,x=new t.Vector2,b=new t.Vector2,_=new t.Vector2,w=new t.Vector2,M=new t.Vector2;function E(){return Math.pow(.95,r.zoomSpeed)}function T(t){l.theta-=t}function S(t){l.phi-=t}var A=function(){var e=new t.Vector3;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),p.add(e)}}(),R=function(){var e=new t.Vector3;return function(t,n){e.setFromMatrixColumn(n,1),e.multiplyScalar(t),p.add(e)}}(),L=function(){var e=new t.Vector3;return function(n,i){var o=r.domElement===document?r.domElement.body:r.domElement;if(r.object instanceof t.PerspectiveCamera){var a=r.object.position;e.copy(a).sub(r.target);var s=e.length();s*=Math.tan(r.object.fov/2*Math.PI/180),A(2*n*s/o.clientHeight,r.object.matrix),R(2*i*s/o.clientHeight,r.object.matrix)}else r.object instanceof t.OrthographicCamera?(A(n*(r.object.right-r.object.left)/r.object.zoom/o.clientWidth,r.object.matrix),R(i*(r.object.top-r.object.bottom)/r.object.zoom/o.clientHeight,r.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),r.enablePan=!1)}}();function C(e){r.object instanceof t.PerspectiveCamera?d/=e:r.object instanceof t.OrthographicCamera?(r.object.zoom=Math.max(r.minZoom,Math.min(r.maxZoom,r.object.zoom*e)),r.object.updateProjectionMatrix(),f=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),r.enableZoom=!1)}function P(e){r.object instanceof t.PerspectiveCamera?d*=e:r.object instanceof t.OrthographicCamera?(r.object.zoom=Math.max(r.minZoom,Math.min(r.maxZoom,r.object.zoom/e)),r.object.updateProjectionMatrix(),f=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),r.enableZoom=!1)}function O(t){if(!1!==r.enabled){if(t.preventDefault(),t.button===r.mouseButtons.ORBIT){if(!1===r.enableRotate)return;!function(t){m.set(t.clientX,t.clientY)}(t),c=s.ROTATE}else if(t.button===r.mouseButtons.ZOOM){if(!1===r.enableZoom)return;!function(t){_.set(t.clientX,t.clientY)}(t),c=s.DOLLY}else if(t.button===r.mouseButtons.PAN){if(!1===r.enablePan)return;!function(t){y.set(t.clientX,t.clientY)}(t),c=s.PAN}c!==s.NONE&&(document.addEventListener("mousemove",I,!1),document.addEventListener("mouseup",N,!1),r.dispatchEvent(o))}}function I(t){if(!1!==r.enabled)if(t.preventDefault(),c===s.ROTATE){if(!1===r.enableRotate)return;!function(t){g.set(t.clientX,t.clientY),v.subVectors(g,m);var e=r.domElement===document?r.domElement.body:r.domElement;T(2*Math.PI*v.x/e.clientWidth*r.rotateSpeed),S(2*Math.PI*v.y/e.clientHeight*r.rotateSpeed),m.copy(g),r.update()}(t)}else if(c===s.DOLLY){if(!1===r.enableZoom)return;!function(t){w.set(t.clientX,t.clientY),M.subVectors(w,_),M.y>0?C(E()):M.y<0&&P(E()),_.copy(w),r.update()}(t)}else if(c===s.PAN){if(!1===r.enablePan)return;!function(t){x.set(t.clientX,t.clientY),b.subVectors(x,y),L(b.x,b.y),y.copy(x),r.update()}(t)}}function N(t){!1!==r.enabled&&(document.removeEventListener("mousemove",I,!1),document.removeEventListener("mouseup",N,!1),r.dispatchEvent(a),c=s.NONE)}function D(t){!1===r.enabled||!1===r.enableZoom||c!==s.NONE&&c!==s.ROTATE||(t.preventDefault(),t.stopPropagation(),function(t){t.deltaY<0?P(E()):t.deltaY>0&&C(E()),r.update()}(t),r.dispatchEvent(o),r.dispatchEvent(a))}function U(t){!1!==r.enabled&&!1!==r.enableKeys&&!1!==r.enablePan&&function(t){switch(t.keyCode){case r.keys.UP:L(0,r.keyPanSpeed),r.update();break;case r.keys.BOTTOM:L(0,-r.keyPanSpeed),r.update();break;case r.keys.LEFT:L(r.keyPanSpeed,0),r.update();break;case r.keys.RIGHT:L(-r.keyPanSpeed,0),r.update()}}(t)}function B(t){if(!1!==r.enabled){switch(t.touches.length){case 1:if(!1===r.enableRotate)return;!function(t){m.set(t.touches[0].pageX,t.touches[0].pageY)}(t),c=s.TOUCH_ROTATE;break;case 2:if(!1===r.enableZoom)return;!function(t){var e=t.touches[0].pageX-t.touches[1].pageX,n=t.touches[0].pageY-t.touches[1].pageY,r=Math.sqrt(e*e+n*n);_.set(0,r)}(t),c=s.TOUCH_DOLLY;break;case 3:if(!1===r.enablePan)return;!function(t){y.set(t.touches[0].pageX,t.touches[0].pageY)}(t),c=s.TOUCH_PAN;break;default:c=s.NONE}c!==s.NONE&&r.dispatchEvent(o)}}function F(t){if(!1!==r.enabled)switch(t.preventDefault(),t.stopPropagation(),t.touches.length){case 1:if(!1===r.enableRotate)return;if(c!==s.TOUCH_ROTATE)return;!function(t){g.set(t.touches[0].pageX,t.touches[0].pageY),v.subVectors(g,m);var e=r.domElement===document?r.domElement.body:r.domElement;T(2*Math.PI*v.x/e.clientWidth*r.rotateSpeed),S(2*Math.PI*v.y/e.clientHeight*r.rotateSpeed),m.copy(g),r.update()}(t);break;case 2:if(!1===r.enableZoom)return;if(c!==s.TOUCH_DOLLY)return;!function(t){var e=t.touches[0].pageX-t.touches[1].pageX,n=t.touches[0].pageY-t.touches[1].pageY,i=Math.sqrt(e*e+n*n);w.set(0,i),M.subVectors(w,_),M.y>0?P(E()):M.y<0&&C(E()),_.copy(w),r.update()}(t);break;case 3:if(!1===r.enablePan)return;if(c!==s.TOUCH_PAN)return;!function(t){x.set(t.touches[0].pageX,t.touches[0].pageY),b.subVectors(x,y),L(b.x,b.y),y.copy(x),r.update()}(t);break;default:c=s.NONE}}function z(t){!1!==r.enabled&&(r.dispatchEvent(a),c=s.NONE)}function G(t){t.preventDefault()}r.domElement.addEventListener("contextmenu",G,!1),r.domElement.addEventListener("mousedown",O,!1),r.domElement.addEventListener("wheel",D,!1),r.domElement.addEventListener("touchstart",B,!1),r.domElement.addEventListener("touchend",z,!1),r.domElement.addEventListener("touchmove",F,!1),window.addEventListener("keydown",U,!1),this.update()}return e.prototype=Object.create(t.EventDispatcher.prototype),e.prototype.constructor=e,Object.defineProperties(e.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(t){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!t}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(t){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!t}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(t){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!t}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(t){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!t}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(t){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!t}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(t){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=t}}}),e}},function(t,e,n){"use strict";n.r(e);var r={};function i(){}n.r(r),n.d(r,"WebGLRenderTargetCube",function(){return Ye}),n.d(r,"WebGLRenderTarget",function(){return qe}),n.d(r,"WebGLRenderer",function(){return ci}),n.d(r,"ShaderLib",function(){return an}),n.d(r,"UniformsLib",function(){return on}),n.d(r,"UniformsUtils",function(){return en}),n.d(r,"ShaderChunk",function(){return tn}),n.d(r,"FogExp2",function(){return ui}),n.d(r,"Fog",function(){return hi}),n.d(r,"Scene",function(){return li}),n.d(r,"Sprite",function(){return pi}),n.d(r,"LOD",function(){return fi}),n.d(r,"SkinnedMesh",function(){return vi}),n.d(r,"Skeleton",function(){return mi}),n.d(r,"Bone",function(){return gi}),n.d(r,"Mesh",function(){return kn}),n.d(r,"LineSegments",function(){return bi}),n.d(r,"LineLoop",function(){return _i}),n.d(r,"Line",function(){return xi}),n.d(r,"Points",function(){return Mi}),n.d(r,"Group",function(){return ii}),n.d(r,"VideoTexture",function(){return Ei}),n.d(r,"DataTexture",function(){return Ze}),n.d(r,"CompressedTexture",function(){return Ti}),n.d(r,"CubeTexture",function(){return Wn}),n.d(r,"CanvasTexture",function(){return ti}),n.d(r,"DepthTexture",function(){return Si}),n.d(r,"Texture",function(){return We}),n.d(r,"CompressedTextureLoader",function(){return na}),n.d(r,"DataTextureLoader",function(){return ra}),n.d(r,"CubeTextureLoader",function(){return oa}),n.d(r,"TextureLoader",function(){return aa}),n.d(r,"ObjectLoader",function(){return as}),n.d(r,"MaterialLoader",function(){return ts}),n.d(r,"BufferGeometryLoader",function(){return es}),n.d(r,"DefaultLoadingManager",function(){return $o}),n.d(r,"LoadingManager",function(){return Ko}),n.d(r,"JSONLoader",function(){return os}),n.d(r,"ImageLoader",function(){return ia}),n.d(r,"ImageBitmapLoader",function(){return ls}),n.d(r,"FontLoader",function(){return ms}),n.d(r,"FileLoader",function(){return ea}),n.d(r,"Loader",function(){return rs}),n.d(r,"LoaderUtils",function(){return is}),n.d(r,"Cache",function(){return Qo}),n.d(r,"AudioLoader",function(){return vs}),n.d(r,"SpotLightShadow",function(){return Ia}),n.d(r,"SpotLight",function(){return Na}),n.d(r,"PointLight",function(){return Da}),n.d(r,"RectAreaLight",function(){return za}),n.d(r,"HemisphereLight",function(){return Pa}),n.d(r,"DirectionalLightShadow",function(){return Ua}),n.d(r,"DirectionalLight",function(){return Ba}),n.d(r,"AmbientLight",function(){return Fa}),n.d(r,"LightShadow",function(){return Oa}),n.d(r,"Light",function(){return Ca}),n.d(r,"StereoCamera",function(){return ys}),n.d(r,"PerspectiveCamera",function(){return oi}),n.d(r,"OrthographicCamera",function(){return fn}),n.d(r,"CubeCamera",function(){return xs}),n.d(r,"ArrayCamera",function(){return ai}),n.d(r,"Camera",function(){return pn}),n.d(r,"AudioListener",function(){return bs}),n.d(r,"PositionalAudio",function(){return ws}),n.d(r,"AudioContext",function(){return gs}),n.d(r,"AudioAnalyser",function(){return Ms}),n.d(r,"Audio",function(){return _s}),n.d(r,"VectorKeyframeTrack",function(){return Ka}),n.d(r,"StringKeyframeTrack",function(){return Ga}),n.d(r,"QuaternionKeyframeTrack",function(){return ja}),n.d(r,"NumberKeyframeTrack",function(){return Xa}),n.d(r,"ColorKeyframeTrack",function(){return Wa}),n.d(r,"BooleanKeyframeTrack",function(){return Ha}),n.d(r,"PropertyMixer",function(){return Es}),n.d(r,"PropertyBinding",function(){return Rs}),n.d(r,"KeyframeTrack",function(){return Qa}),n.d(r,"AnimationUtils",function(){return Ja}),n.d(r,"AnimationObjectGroup",function(){return Ls}),n.d(r,"AnimationMixer",function(){return Ps}),n.d(r,"AnimationClip",function(){return $a}),n.d(r,"Uniform",function(){return Os}),n.d(r,"InstancedBufferGeometry",function(){return Is}),n.d(r,"BufferGeometry",function(){return Pn}),n.d(r,"Geometry",function(){return vn}),n.d(r,"InterleavedBufferAttribute",function(){return Ns}),n.d(r,"InstancedInterleavedBuffer",function(){return Us}),n.d(r,"InterleavedBuffer",function(){return Ds}),n.d(r,"InstancedBufferAttribute",function(){return Bs}),n.d(r,"Face3",function(){return mn}),n.d(r,"Object3D",function(){return dn}),n.d(r,"Raycaster",function(){return Fs}),n.d(r,"Layers",function(){return hn}),n.d(r,"EventDispatcher",function(){return i}),n.d(r,"Clock",function(){return Hs}),n.d(r,"QuaternionLinearInterpolant",function(){return ka}),n.d(r,"LinearInterpolant",function(){return Ya}),n.d(r,"DiscreteInterpolant",function(){return Za}),n.d(r,"CubicInterpolant",function(){return qa}),n.d(r,"Interpolant",function(){return Va}),n.d(r,"Triangle",function(){return Vn}),n.d(r,"Math",function(){return Fe}),n.d(r,"Spherical",function(){return Vs}),n.d(r,"Cylindrical",function(){return ks}),n.d(r,"Plane",function(){return Ke}),n.d(r,"Frustum",function(){return $e}),n.d(r,"Sphere",function(){return Qe}),n.d(r,"Ray",function(){return Gn}),n.d(r,"Matrix4",function(){return Ge}),n.d(r,"Matrix3",function(){return ke}),n.d(r,"Box3",function(){return Je}),n.d(r,"Box2",function(){return js}),n.d(r,"Line3",function(){return Hn}),n.d(r,"Euler",function(){return un}),n.d(r,"Vector4",function(){return Xe}),n.d(r,"Vector3",function(){return Ve}),n.d(r,"Vector2",function(){return ze}),n.d(r,"Quaternion",function(){return He}),n.d(r,"Color",function(){return rn}),n.d(r,"ImmediateRenderObject",function(){return Ws}),n.d(r,"VertexNormalsHelper",function(){return Xs}),n.d(r,"SpotLightHelper",function(){return qs}),n.d(r,"SkeletonHelper",function(){return Ys}),n.d(r,"PointLightHelper",function(){return Zs}),n.d(r,"RectAreaLightHelper",function(){return Js}),n.d(r,"HemisphereLightHelper",function(){return Qs}),n.d(r,"GridHelper",function(){return Ks}),n.d(r,"PolarGridHelper",function(){return $s}),n.d(r,"FaceNormalsHelper",function(){return tc}),n.d(r,"DirectionalLightHelper",function(){return ec}),n.d(r,"CameraHelper",function(){return nc}),n.d(r,"BoxHelper",function(){return rc}),n.d(r,"Box3Helper",function(){return ic}),n.d(r,"PlaneHelper",function(){return oc}),n.d(r,"ArrowHelper",function(){return ac}),n.d(r,"AxesHelper",function(){return sc}),n.d(r,"Shape",function(){return La}),n.d(r,"Path",function(){return Ra}),n.d(r,"ShapePath",function(){return ds}),n.d(r,"Font",function(){return ps}),n.d(r,"CurvePath",function(){return Aa}),n.d(r,"Curve",function(){return sa}),n.d(r,"ShapeUtils",function(){return mo}),n.d(r,"WebGLUtils",function(){return ri}),n.d(r,"WireframeGeometry",function(){return Ai}),n.d(r,"ParametricGeometry",function(){return Ri}),n.d(r,"ParametricBufferGeometry",function(){return Li}),n.d(r,"TetrahedronGeometry",function(){return Oi}),n.d(r,"TetrahedronBufferGeometry",function(){return Ii}),n.d(r,"OctahedronGeometry",function(){return Ni}),n.d(r,"OctahedronBufferGeometry",function(){return Di}),n.d(r,"IcosahedronGeometry",function(){return Ui}),n.d(r,"IcosahedronBufferGeometry",function(){return Bi}),n.d(r,"DodecahedronGeometry",function(){return Fi}),n.d(r,"DodecahedronBufferGeometry",function(){return zi}),n.d(r,"PolyhedronGeometry",function(){return Ci}),n.d(r,"PolyhedronBufferGeometry",function(){return Pi}),n.d(r,"TubeGeometry",function(){return Gi}),n.d(r,"TubeBufferGeometry",function(){return Hi}),n.d(r,"TorusKnotGeometry",function(){return Vi}),n.d(r,"TorusKnotBufferGeometry",function(){return ki}),n.d(r,"TorusGeometry",function(){return ji}),n.d(r,"TorusBufferGeometry",function(){return Wi}),n.d(r,"TextGeometry",function(){return wo}),n.d(r,"TextBufferGeometry",function(){return Mo}),n.d(r,"SphereGeometry",function(){return Eo}),n.d(r,"SphereBufferGeometry",function(){return To}),n.d(r,"RingGeometry",function(){return So}),n.d(r,"RingBufferGeometry",function(){return Ao}),n.d(r,"PlaneGeometry",function(){return Nn}),n.d(r,"PlaneBufferGeometry",function(){return Dn}),n.d(r,"LatheGeometry",function(){return Ro}),n.d(r,"LatheBufferGeometry",function(){return Lo}),n.d(r,"ShapeGeometry",function(){return Co}),n.d(r,"ShapeBufferGeometry",function(){return Po}),n.d(r,"ExtrudeGeometry",function(){return yo}),n.d(r,"ExtrudeBufferGeometry",function(){return xo}),n.d(r,"EdgesGeometry",function(){return Io}),n.d(r,"ConeGeometry",function(){return Uo}),n.d(r,"ConeBufferGeometry",function(){return Bo}),n.d(r,"CylinderGeometry",function(){return No}),n.d(r,"CylinderBufferGeometry",function(){return Do}),n.d(r,"CircleGeometry",function(){return Fo}),n.d(r,"CircleBufferGeometry",function(){return zo}),n.d(r,"BoxGeometry",function(){return On}),n.d(r,"BoxBufferGeometry",function(){return In}),n.d(r,"ShadowMaterial",function(){return Ho}),n.d(r,"SpriteMaterial",function(){return di}),n.d(r,"RawShaderMaterial",function(){return Vo}),n.d(r,"ShaderMaterial",function(){return zn}),n.d(r,"PointsMaterial",function(){return wi}),n.d(r,"MeshPhysicalMaterial",function(){return jo}),n.d(r,"MeshStandardMaterial",function(){return ko}),n.d(r,"MeshPhongMaterial",function(){return Wo}),n.d(r,"MeshToonMaterial",function(){return Xo}),n.d(r,"MeshNormalMaterial",function(){return qo}),n.d(r,"MeshLambertMaterial",function(){return Yo}),n.d(r,"MeshDepthMaterial",function(){return Qr}),n.d(r,"MeshDistanceMaterial",function(){return Kr}),n.d(r,"MeshBasicMaterial",function(){return Fn}),n.d(r,"LineDashedMaterial",function(){return Zo}),n.d(r,"LineBasicMaterial",function(){return yi}),n.d(r,"Material",function(){return Bn}),n.d(r,"Float64BufferAttribute",function(){return An}),n.d(r,"Float32BufferAttribute",function(){return Sn}),n.d(r,"Uint32BufferAttribute",function(){return Tn}),n.d(r,"Int32BufferAttribute",function(){return En}),n.d(r,"Uint16BufferAttribute",function(){return Mn}),n.d(r,"Int16BufferAttribute",function(){return wn}),n.d(r,"Uint8ClampedBufferAttribute",function(){return _n}),n.d(r,"Uint8BufferAttribute",function(){return bn}),n.d(r,"Int8BufferAttribute",function(){return xn}),n.d(r,"BufferAttribute",function(){return yn}),n.d(r,"ArcCurve",function(){return ua}),n.d(r,"CatmullRomCurve3",function(){return ma}),n.d(r,"CubicBezierCurve",function(){return xa}),n.d(r,"CubicBezierCurve3",function(){return ba}),n.d(r,"EllipseCurve",function(){return ca}),n.d(r,"LineCurve",function(){return _a}),n.d(r,"LineCurve3",function(){return wa}),n.d(r,"QuadraticBezierCurve",function(){return Ma}),n.d(r,"QuadraticBezierCurve3",function(){return Ea}),n.d(r,"SplineCurve",function(){return Ta}),n.d(r,"REVISION",function(){return o}),n.d(r,"MOUSE",function(){return a}),n.d(r,"CullFaceNone",function(){return s}),n.d(r,"CullFaceBack",function(){return c}),n.d(r,"CullFaceFront",function(){return u}),n.d(r,"CullFaceFrontBack",function(){return h}),n.d(r,"FrontFaceDirectionCW",function(){return l}),n.d(r,"FrontFaceDirectionCCW",function(){return d}),n.d(r,"BasicShadowMap",function(){return p}),n.d(r,"PCFShadowMap",function(){return f}),n.d(r,"PCFSoftShadowMap",function(){return m}),n.d(r,"FrontSide",function(){return g}),n.d(r,"BackSide",function(){return v}),n.d(r,"DoubleSide",function(){return y}),n.d(r,"FlatShading",function(){return x}),n.d(r,"SmoothShading",function(){return b}),n.d(r,"NoColors",function(){return _}),n.d(r,"FaceColors",function(){return w}),n.d(r,"VertexColors",function(){return M}),n.d(r,"NoBlending",function(){return E}),n.d(r,"NormalBlending",function(){return T}),n.d(r,"AdditiveBlending",function(){return S}),n.d(r,"SubtractiveBlending",function(){return A}),n.d(r,"MultiplyBlending",function(){return R}),n.d(r,"CustomBlending",function(){return L}),n.d(r,"AddEquation",function(){return C}),n.d(r,"SubtractEquation",function(){return P}),n.d(r,"ReverseSubtractEquation",function(){return O}),n.d(r,"MinEquation",function(){return I}),n.d(r,"MaxEquation",function(){return N}),n.d(r,"ZeroFactor",function(){return D}),n.d(r,"OneFactor",function(){return U}),n.d(r,"SrcColorFactor",function(){return B}),n.d(r,"OneMinusSrcColorFactor",function(){return F}),n.d(r,"SrcAlphaFactor",function(){return z}),n.d(r,"OneMinusSrcAlphaFactor",function(){return G}),n.d(r,"DstAlphaFactor",function(){return H}),n.d(r,"OneMinusDstAlphaFactor",function(){return V}),n.d(r,"DstColorFactor",function(){return k}),n.d(r,"OneMinusDstColorFactor",function(){return j}),n.d(r,"SrcAlphaSaturateFactor",function(){return W}),n.d(r,"NeverDepth",function(){return X}),n.d(r,"AlwaysDepth",function(){return q}),n.d(r,"LessDepth",function(){return Y}),n.d(r,"LessEqualDepth",function(){return Z}),n.d(r,"EqualDepth",function(){return J}),n.d(r,"GreaterEqualDepth",function(){return Q}),n.d(r,"GreaterDepth",function(){return K}),n.d(r,"NotEqualDepth",function(){return $}),n.d(r,"MultiplyOperation",function(){return tt}),n.d(r,"MixOperation",function(){return et}),n.d(r,"AddOperation",function(){return nt}),n.d(r,"NoToneMapping",function(){return rt}),n.d(r,"LinearToneMapping",function(){return it}),n.d(r,"ReinhardToneMapping",function(){return ot}),n.d(r,"Uncharted2ToneMapping",function(){return at}),n.d(r,"CineonToneMapping",function(){return st}),n.d(r,"UVMapping",function(){return ct}),n.d(r,"CubeReflectionMapping",function(){return ut}),n.d(r,"CubeRefractionMapping",function(){return ht}),n.d(r,"EquirectangularReflectionMapping",function(){return lt}),n.d(r,"EquirectangularRefractionMapping",function(){return dt}),n.d(r,"SphericalReflectionMapping",function(){return pt}),n.d(r,"CubeUVReflectionMapping",function(){return ft}),n.d(r,"CubeUVRefractionMapping",function(){return mt}),n.d(r,"RepeatWrapping",function(){return gt}),n.d(r,"ClampToEdgeWrapping",function(){return vt}),n.d(r,"MirroredRepeatWrapping",function(){return yt}),n.d(r,"NearestFilter",function(){return xt}),n.d(r,"NearestMipMapNearestFilter",function(){return bt}),n.d(r,"NearestMipMapLinearFilter",function(){return _t}),n.d(r,"LinearFilter",function(){return wt}),n.d(r,"LinearMipMapNearestFilter",function(){return Mt}),n.d(r,"LinearMipMapLinearFilter",function(){return Et}),n.d(r,"UnsignedByteType",function(){return Tt}),n.d(r,"ByteType",function(){return St}),n.d(r,"ShortType",function(){return At}),n.d(r,"UnsignedShortType",function(){return Rt}),n.d(r,"IntType",function(){return Lt}),n.d(r,"UnsignedIntType",function(){return Ct}),n.d(r,"FloatType",function(){return Pt}),n.d(r,"HalfFloatType",function(){return Ot}),n.d(r,"UnsignedShort4444Type",function(){return It}),n.d(r,"UnsignedShort5551Type",function(){return Nt}),n.d(r,"UnsignedShort565Type",function(){return Dt}),n.d(r,"UnsignedInt248Type",function(){return Ut}),n.d(r,"AlphaFormat",function(){return Bt}),n.d(r,"RGBFormat",function(){return Ft}),n.d(r,"RGBAFormat",function(){return zt}),n.d(r,"LuminanceFormat",function(){return Gt}),n.d(r,"LuminanceAlphaFormat",function(){return Ht}),n.d(r,"RGBEFormat",function(){return Vt}),n.d(r,"DepthFormat",function(){return kt}),n.d(r,"DepthStencilFormat",function(){return jt}),n.d(r,"RGB_S3TC_DXT1_Format",function(){return Wt}),n.d(r,"RGBA_S3TC_DXT1_Format",function(){return Xt}),n.d(r,"RGBA_S3TC_DXT3_Format",function(){return qt}),n.d(r,"RGBA_S3TC_DXT5_Format",function(){return Yt}),n.d(r,"RGB_PVRTC_4BPPV1_Format",function(){return Zt}),n.d(r,"RGB_PVRTC_2BPPV1_Format",function(){return Jt}),n.d(r,"RGBA_PVRTC_4BPPV1_Format",function(){return Qt}),n.d(r,"RGBA_PVRTC_2BPPV1_Format",function(){return Kt}),n.d(r,"RGB_ETC1_Format",function(){return $t}),n.d(r,"RGBA_ASTC_4x4_Format",function(){return te}),n.d(r,"RGBA_ASTC_5x4_Format",function(){return ee}),n.d(r,"RGBA_ASTC_5x5_Format",function(){return ne}),n.d(r,"RGBA_ASTC_6x5_Format",function(){return re}),n.d(r,"RGBA_ASTC_6x6_Format",function(){return ie}),n.d(r,"RGBA_ASTC_8x5_Format",function(){return oe}),n.d(r,"RGBA_ASTC_8x6_Format",function(){return ae}),n.d(r,"RGBA_ASTC_8x8_Format",function(){return se}),n.d(r,"RGBA_ASTC_10x5_Format",function(){return ce}),n.d(r,"RGBA_ASTC_10x6_Format",function(){return ue}),n.d(r,"RGBA_ASTC_10x8_Format",function(){return he}),n.d(r,"RGBA_ASTC_10x10_Format",function(){return le}),n.d(r,"RGBA_ASTC_12x10_Format",function(){return de}),n.d(r,"RGBA_ASTC_12x12_Format",function(){return pe}),n.d(r,"LoopOnce",function(){return fe}),n.d(r,"LoopRepeat",function(){return me}),n.d(r,"LoopPingPong",function(){return ge}),n.d(r,"InterpolateDiscrete",function(){return ve}),n.d(r,"InterpolateLinear",function(){return ye}),n.d(r,"InterpolateSmooth",function(){return xe}),n.d(r,"ZeroCurvatureEnding",function(){return be}),n.d(r,"ZeroSlopeEnding",function(){return _e}),n.d(r,"WrapAroundEnding",function(){return we}),n.d(r,"TrianglesDrawMode",function(){return Me}),n.d(r,"TriangleStripDrawMode",function(){return Ee}),n.d(r,"TriangleFanDrawMode",function(){return Te}),n.d(r,"LinearEncoding",function(){return Se}),n.d(r,"sRGBEncoding",function(){return Ae}),n.d(r,"GammaEncoding",function(){return Re}),n.d(r,"RGBEEncoding",function(){return Le}),n.d(r,"LogLuvEncoding",function(){return Ce}),n.d(r,"RGBM7Encoding",function(){return Pe}),n.d(r,"RGBM16Encoding",function(){return Oe}),n.d(r,"RGBDEncoding",function(){return Ie}),n.d(r,"BasicDepthPacking",function(){return Ne}),n.d(r,"RGBADepthPacking",function(){return De}),n.d(r,"TangentSpaceNormalMap",function(){return Ue}),n.d(r,"ObjectSpaceNormalMap",function(){return Be}),n.d(r,"CubeGeometry",function(){return On}),n.d(r,"Face4",function(){return cc}),n.d(r,"LineStrip",function(){return uc}),n.d(r,"LinePieces",function(){return hc}),n.d(r,"MeshFaceMaterial",function(){return lc}),n.d(r,"MultiMaterial",function(){return dc}),n.d(r,"PointCloud",function(){return pc}),n.d(r,"Particle",function(){return fc}),n.d(r,"ParticleSystem",function(){return mc}),n.d(r,"PointCloudMaterial",function(){return gc}),n.d(r,"ParticleBasicMaterial",function(){return vc}),n.d(r,"ParticleSystemMaterial",function(){return yc}),n.d(r,"Vertex",function(){return xc}),n.d(r,"DynamicBufferAttribute",function(){return bc}),n.d(r,"Int8Attribute",function(){return _c}),n.d(r,"Uint8Attribute",function(){return wc}),n.d(r,"Uint8ClampedAttribute",function(){return Mc}),n.d(r,"Int16Attribute",function(){return Ec}),n.d(r,"Uint16Attribute",function(){return Tc}),n.d(r,"Int32Attribute",function(){return Sc}),n.d(r,"Uint32Attribute",function(){return Ac}),n.d(r,"Float32Attribute",function(){return Rc}),n.d(r,"Float64Attribute",function(){return Lc}),n.d(r,"ClosedSplineCurve3",function(){return Cc}),n.d(r,"SplineCurve3",function(){return Pc}),n.d(r,"Spline",function(){return Oc}),n.d(r,"AxisHelper",function(){return Ic}),n.d(r,"BoundingBoxHelper",function(){return Nc}),n.d(r,"EdgesHelper",function(){return Dc}),n.d(r,"WireframeHelper",function(){return Uc}),n.d(r,"XHRLoader",function(){return Bc}),n.d(r,"BinaryTextureLoader",function(){return Fc}),n.d(r,"GeometryUtils",function(){return zc}),n.d(r,"ImageUtils",function(){return Gc}),n.d(r,"Projector",function(){return Hc}),n.d(r,"CanvasRenderer",function(){return Vc}),n.d(r,"SceneUtils",function(){return kc}),n.d(r,"LensFlare",function(){return jc}),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t}),void 0===Math.sign&&(Math.sign=function(t){return t<0?-1:t>0?1:+t}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(t){if(void 0===t||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var r=arguments[n];if(void 0!==r&&null!==r)for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e}),Object.assign(i.prototype,{addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)},removeEventListener:function(t,e){if(void 0!==this._listeners){var n=this._listeners[t];if(void 0!==n){var r=n.indexOf(e);-1!==r&&n.splice(r,1)}}},dispatchEvent:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var n=e.slice(0),r=0,i=n.length;r<i;r++)n[r].call(this,t)}}}});var o="94",a={LEFT:0,MIDDLE:1,RIGHT:2},s=0,c=1,u=2,h=3,l=0,d=1,p=0,f=1,m=2,g=0,v=1,y=2,x=1,b=2,_=0,w=1,M=2,E=0,T=1,S=2,A=3,R=4,L=5,C=100,P=101,O=102,I=103,N=104,D=200,U=201,B=202,F=203,z=204,G=205,H=206,V=207,k=208,j=209,W=210,X=0,q=1,Y=2,Z=3,J=4,Q=5,K=6,$=7,tt=0,et=1,nt=2,rt=0,it=1,ot=2,at=3,st=4,ct=300,ut=301,ht=302,lt=303,dt=304,pt=305,ft=306,mt=307,gt=1e3,vt=1001,yt=1002,xt=1003,bt=1004,_t=1005,wt=1006,Mt=1007,Et=1008,Tt=1009,St=1010,At=1011,Rt=1012,Lt=1013,Ct=1014,Pt=1015,Ot=1016,It=1017,Nt=1018,Dt=1019,Ut=1020,Bt=1021,Ft=1022,zt=1023,Gt=1024,Ht=1025,Vt=zt,kt=1026,jt=1027,Wt=33776,Xt=33777,qt=33778,Yt=33779,Zt=35840,Jt=35841,Qt=35842,Kt=35843,$t=36196,te=37808,ee=37809,ne=37810,re=37811,ie=37812,oe=37813,ae=37814,se=37815,ce=37816,ue=37817,he=37818,le=37819,de=37820,pe=37821,fe=2200,me=2201,ge=2202,ve=2300,ye=2301,xe=2302,be=2400,_e=2401,we=2402,Me=0,Ee=1,Te=2,Se=3e3,Ae=3001,Re=3007,Le=3002,Ce=3003,Pe=3004,Oe=3005,Ie=3006,Ne=3200,De=3201,Ue=0,Be=1,Fe={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var t=[],e=0;e<256;e++)t[e]=(e<16?"0":"")+e.toString(16);return function(){var e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+"-"+t[255&n]+t[n>>8&255]+"-"+t[n>>16&15|64]+t[n>>24&255]+"-"+t[63&r|128]+t[r>>8&255]+"-"+t[r>>16&255]+t[r>>24&255]+t[255&i]+t[i>>8&255]+t[i>>16&255]+t[i>>24&255]).toUpperCase()}}(),clamp:function(t,e,n){return Math.max(e,Math.min(n,t))},euclideanModulo:function(t,e){return(t%e+e)%e},mapLinear:function(t,e,n,r,i){return r+(t-e)*(i-r)/(n-e)},lerp:function(t,e,n){return(1-n)*t+n*e},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},degToRad:function(t){return t*Fe.DEG2RAD},radToDeg:function(t){return t*Fe.RAD2DEG},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}};function ze(t,e){this.x=t||0,this.y=e||0}function Ge(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function He(t,e,n,r){this._x=t||0,this._y=e||0,this._z=n||0,this._w=void 0!==r?r:1}function Ve(t,e,n){this.x=t||0,this.y=e||0,this.z=n||0}function ke(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.defineProperties(ze.prototype,{width:{get:function(){return this.x},set:function(t){this.x=t}},height:{get:function(){return this.y},set:function(t){this.y=t}}}),Object.assign(ze.prototype,{isVector2:!0,set:function(t,e){return this.x=t,this.y=e,this},setScalar:function(t){return this.x=t,this.y=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(t){return this.x=t.x,this.y=t.y,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)},addScalar:function(t){return this.x+=t,this.y+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)},subScalar:function(t){return this.x-=t,this.y-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return this.x/=t.x,this.y/=t.y,this},divideScalar:function(t){return this.multiplyScalar(1/t)},applyMatrix3:function(t){var e=this.x,n=this.y,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6],this.y=r[1]*e+r[4]*n+r[7],this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this},clampScalar:function(){var t=new ze,e=new ze;return function(n,r){return t.set(n,n),e.set(r,r),this.clamp(t,e)}}(),clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(t){return this.x*t.x+this.y*t.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var t=Math.atan2(this.y,this.x);return t<0&&(t+=2*Math.PI),t},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y;return e*e+n*n},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this},rotateAround:function(t,e){var n=Math.cos(e),r=Math.sin(e),i=this.x-t.x,o=this.y-t.y;return this.x=i*n-o*r+t.x,this.y=i*r+o*n+t.y,this}}),Object.assign(Ge.prototype,{isMatrix4:!0,set:function(t,e,n,r,i,o,a,s,c,u,h,l,d,p,f,m){var g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=r,g[1]=i,g[5]=o,g[9]=a,g[13]=s,g[2]=c,g[6]=u,g[10]=h,g[14]=l,g[3]=d,g[7]=p,g[11]=f,g[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new Ge).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this},copyPosition:function(t){var e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this},extractBasis:function(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this},makeBasis:function(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this},extractRotation:function(){var t=new Ve;return function(e){var n=this.elements,r=e.elements,i=1/t.setFromMatrixColumn(e,0).length(),o=1/t.setFromMatrixColumn(e,1).length(),a=1/t.setFromMatrixColumn(e,2).length();return n[0]=r[0]*i,n[1]=r[1]*i,n[2]=r[2]*i,n[3]=0,n[4]=r[4]*o,n[5]=r[5]*o,n[6]=r[6]*o,n[7]=0,n[8]=r[8]*a,n[9]=r[9]*a,n[10]=r[10]*a,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,this}}(),makeRotationFromEuler:function(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var e=this.elements,n=t.x,r=t.y,i=t.z,o=Math.cos(n),a=Math.sin(n),s=Math.cos(r),c=Math.sin(r),u=Math.cos(i),h=Math.sin(i);if("XYZ"===t.order){var l=o*u,d=o*h,p=a*u,f=a*h;e[0]=s*u,e[4]=-s*h,e[8]=c,e[1]=d+p*c,e[5]=l-f*c,e[9]=-a*s,e[2]=f-l*c,e[6]=p+d*c,e[10]=o*s}else if("YXZ"===t.order){var m=s*u,g=s*h,v=c*u,y=c*h;e[0]=m+y*a,e[4]=v*a-g,e[8]=o*c,e[1]=o*h,e[5]=o*u,e[9]=-a,e[2]=g*a-v,e[6]=y+m*a,e[10]=o*s}else if("ZXY"===t.order){m=s*u,g=s*h,v=c*u,y=c*h;e[0]=m-y*a,e[4]=-o*h,e[8]=v+g*a,e[1]=g+v*a,e[5]=o*u,e[9]=y-m*a,e[2]=-o*c,e[6]=a,e[10]=o*s}else if("ZYX"===t.order){l=o*u,d=o*h,p=a*u,f=a*h;e[0]=s*u,e[4]=p*c-d,e[8]=l*c+f,e[1]=s*h,e[5]=f*c+l,e[9]=d*c-p,e[2]=-c,e[6]=a*s,e[10]=o*s}else if("YZX"===t.order){var x=o*s,b=o*c,_=a*s,w=a*c;e[0]=s*u,e[4]=w-x*h,e[8]=_*h+b,e[1]=h,e[5]=o*u,e[9]=-a*u,e[2]=-c*u,e[6]=b*h+_,e[10]=x-w*h}else if("XZY"===t.order){x=o*s,b=o*c,_=a*s,w=a*c;e[0]=s*u,e[4]=-h,e[8]=c*u,e[1]=x*h+w,e[5]=o*u,e[9]=b*h-_,e[2]=_*h-b,e[6]=a*u,e[10]=w*h+x}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromQuaternion:function(){var t=new Ve(0,0,0),e=new Ve(1,1,1);return function(n){return this.compose(t,n,e)}}(),lookAt:function(){var t=new Ve,e=new Ve,n=new Ve;return function(r,i,o){var a=this.elements;return n.subVectors(r,i),0===n.lengthSq()&&(n.z=1),n.normalize(),t.crossVectors(o,n),0===t.lengthSq()&&(1===Math.abs(o.z)?n.x+=1e-4:n.z+=1e-4,n.normalize(),t.crossVectors(o,n)),t.normalize(),e.crossVectors(n,t),a[0]=t.x,a[4]=e.x,a[8]=n.x,a[1]=t.y,a[5]=e.y,a[9]=n.y,a[2]=t.z,a[6]=e.z,a[10]=n.z,this}}(),multiply:function(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var n=t.elements,r=e.elements,i=this.elements,o=n[0],a=n[4],s=n[8],c=n[12],u=n[1],h=n[5],l=n[9],d=n[13],p=n[2],f=n[6],m=n[10],g=n[14],v=n[3],y=n[7],x=n[11],b=n[15],_=r[0],w=r[4],M=r[8],E=r[12],T=r[1],S=r[5],A=r[9],R=r[13],L=r[2],C=r[6],P=r[10],O=r[14],I=r[3],N=r[7],D=r[11],U=r[15];return i[0]=o*_+a*T+s*L+c*I,i[4]=o*w+a*S+s*C+c*N,i[8]=o*M+a*A+s*P+c*D,i[12]=o*E+a*R+s*O+c*U,i[1]=u*_+h*T+l*L+d*I,i[5]=u*w+h*S+l*C+d*N,i[9]=u*M+h*A+l*P+d*D,i[13]=u*E+h*R+l*O+d*U,i[2]=p*_+f*T+m*L+g*I,i[6]=p*w+f*S+m*C+g*N,i[10]=p*M+f*A+m*P+g*D,i[14]=p*E+f*R+m*O+g*U,i[3]=v*_+y*T+x*L+b*I,i[7]=v*w+y*S+x*C+b*N,i[11]=v*M+y*A+x*P+b*D,i[15]=v*E+y*R+x*O+b*U,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this},applyToBufferAttribute:function(){var t=new Ve;return function(e){for(var n=0,r=e.count;n<r;n++)t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.applyMatrix4(this),e.setXYZ(n,t.x,t.y,t.z);return e}}(),determinant:function(){var t=this.elements,e=t[0],n=t[4],r=t[8],i=t[12],o=t[1],a=t[5],s=t[9],c=t[13],u=t[2],h=t[6],l=t[10],d=t[14];return t[3]*(+i*s*h-r*c*h-i*a*l+n*c*l+r*a*d-n*s*d)+t[7]*(+e*s*d-e*c*l+i*o*l-r*o*d+r*c*u-i*s*u)+t[11]*(+e*c*h-e*a*d-i*o*h+n*o*d+i*a*u-n*c*u)+t[15]*(-r*a*u-e*s*h+e*a*l+r*o*h-n*o*l+n*s*u)},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this},setPosition:function(t){var e=this.elements;return e[12]=t.x,e[13]=t.y,e[14]=t.z,this},getInverse:function(t,e){var n=this.elements,r=t.elements,i=r[0],o=r[1],a=r[2],s=r[3],c=r[4],u=r[5],h=r[6],l=r[7],d=r[8],p=r[9],f=r[10],m=r[11],g=r[12],v=r[13],y=r[14],x=r[15],b=p*y*l-v*f*l+v*h*m-u*y*m-p*h*x+u*f*x,_=g*f*l-d*y*l-g*h*m+c*y*m+d*h*x-c*f*x,w=d*v*l-g*p*l+g*u*m-c*v*m-d*u*x+c*p*x,M=g*p*h-d*v*h-g*u*f+c*v*f+d*u*y-c*p*y,E=i*b+o*_+a*w+s*M;if(0===E){var T="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(T);return console.warn(T),this.identity()}var S=1/E;return n[0]=b*S,n[1]=(v*f*s-p*y*s-v*a*m+o*y*m+p*a*x-o*f*x)*S,n[2]=(u*y*s-v*h*s+v*a*l-o*y*l-u*a*x+o*h*x)*S,n[3]=(p*h*s-u*f*s-p*a*l+o*f*l+u*a*m-o*h*m)*S,n[4]=_*S,n[5]=(d*y*s-g*f*s+g*a*m-i*y*m-d*a*x+i*f*x)*S,n[6]=(g*h*s-c*y*s-g*a*l+i*y*l+c*a*x-i*h*x)*S,n[7]=(c*f*s-d*h*s+d*a*l-i*f*l-c*a*m+i*h*m)*S,n[8]=w*S,n[9]=(g*p*s-d*v*s-g*o*m+i*v*m+d*o*x-i*p*x)*S,n[10]=(c*v*s-g*u*s+g*o*l-i*v*l-c*o*x+i*u*x)*S,n[11]=(d*u*s-c*p*s-d*o*l+i*p*l+c*o*m-i*u*m)*S,n[12]=M*S,n[13]=(d*v*a-g*p*a+g*o*f-i*v*f-d*o*y+i*p*y)*S,n[14]=(g*u*a-c*v*a-g*o*h+i*v*h+c*o*y-i*u*y)*S,n[15]=(c*p*a-d*u*a+d*o*h-i*p*h-c*o*f+i*u*f)*S,this},scale:function(t){var e=this.elements,n=t.x,r=t.y,i=t.z;return e[0]*=n,e[4]*=r,e[8]*=i,e[1]*=n,e[5]*=r,e[9]*=i,e[2]*=n,e[6]*=r,e[10]*=i,e[3]*=n,e[7]*=r,e[11]*=i,this},getMaxScaleOnAxis:function(){var t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],r=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,r))},makeTranslation:function(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this},makeRotationX:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this},makeRotationY:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this},makeRotationZ:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(t,e){var n=Math.cos(e),r=Math.sin(e),i=1-n,o=t.x,a=t.y,s=t.z,c=i*o,u=i*a;return this.set(c*o+n,c*a-r*s,c*s+r*a,0,c*a+r*s,u*a+n,u*s-r*o,0,c*s-r*a,u*s+r*o,i*s*s+n,0,0,0,0,1),this},makeScale:function(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this},makeShear:function(t,e,n){return this.set(1,e,n,0,t,1,n,0,t,e,1,0,0,0,0,1),this},compose:function(t,e,n){var r=this.elements,i=e._x,o=e._y,a=e._z,s=e._w,c=i+i,u=o+o,h=a+a,l=i*c,d=i*u,p=i*h,f=o*u,m=o*h,g=a*h,v=s*c,y=s*u,x=s*h,b=n.x,_=n.y,w=n.z;return r[0]=(1-(f+g))*b,r[1]=(d+x)*b,r[2]=(p-y)*b,r[3]=0,r[4]=(d-x)*_,r[5]=(1-(l+g))*_,r[6]=(m+v)*_,r[7]=0,r[8]=(p+y)*w,r[9]=(m-v)*w,r[10]=(1-(l+f))*w,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this},decompose:function(){var t=new Ve,e=new Ge;return function(n,r,i){var o=this.elements,a=t.set(o[0],o[1],o[2]).length(),s=t.set(o[4],o[5],o[6]).length(),c=t.set(o[8],o[9],o[10]).length();this.determinant()<0&&(a=-a),n.x=o[12],n.y=o[13],n.z=o[14],e.copy(this);var u=1/a,h=1/s,l=1/c;return e.elements[0]*=u,e.elements[1]*=u,e.elements[2]*=u,e.elements[4]*=h,e.elements[5]*=h,e.elements[6]*=h,e.elements[8]*=l,e.elements[9]*=l,e.elements[10]*=l,r.setFromRotationMatrix(e),i.x=a,i.y=s,i.z=c,this}}(),makePerspective:function(t,e,n,r,i,o){void 0===o&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var a=this.elements,s=2*i/(e-t),c=2*i/(n-r),u=(e+t)/(e-t),h=(n+r)/(n-r),l=-(o+i)/(o-i),d=-2*o*i/(o-i);return a[0]=s,a[4]=0,a[8]=u,a[12]=0,a[1]=0,a[5]=c,a[9]=h,a[13]=0,a[2]=0,a[6]=0,a[10]=l,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this},makeOrthographic:function(t,e,n,r,i,o){var a=this.elements,s=1/(e-t),c=1/(n-r),u=1/(o-i),h=(e+t)*s,l=(n+r)*c,d=(o+i)*u;return a[0]=2*s,a[4]=0,a[8]=0,a[12]=-h,a[1]=0,a[5]=2*c,a[9]=0,a[13]=-l,a[2]=0,a[6]=0,a[10]=-2*u,a[14]=-d,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this},equals:function(t){for(var e=this.elements,n=t.elements,r=0;r<16;r++)if(e[r]!==n[r])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var n=0;n<16;n++)this.elements[n]=t[n+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}),Object.assign(He,{slerp:function(t,e,n,r){return n.copy(t).slerp(e,r)},slerpFlat:function(t,e,n,r,i,o,a){var s=n[r+0],c=n[r+1],u=n[r+2],h=n[r+3],l=i[o+0],d=i[o+1],p=i[o+2],f=i[o+3];if(h!==f||s!==l||c!==d||u!==p){var m=1-a,g=s*l+c*d+u*p+h*f,v=g>=0?1:-1,y=1-g*g;if(y>Number.EPSILON){var x=Math.sqrt(y),b=Math.atan2(x,g*v);m=Math.sin(m*b)/x,a=Math.sin(a*b)/x}var _=a*v;if(s=s*m+l*_,c=c*m+d*_,u=u*m+p*_,h=h*m+f*_,m===1-a){var w=1/Math.sqrt(s*s+c*c+u*u+h*h);s*=w,c*=w,u*=w,h*=w}}t[e]=s,t[e+1]=c,t[e+2]=u,t[e+3]=h}}),Object.defineProperties(He.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(t){this._w=t,this.onChangeCallback()}}}),Object.assign(He.prototype,{set:function(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._w=r,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this.onChangeCallback(),this},setFromEuler:function(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var n=t._x,r=t._y,i=t._z,o=t.order,a=Math.cos,s=Math.sin,c=a(n/2),u=a(r/2),h=a(i/2),l=s(n/2),d=s(r/2),p=s(i/2);return"XYZ"===o?(this._x=l*u*h+c*d*p,this._y=c*d*h-l*u*p,this._z=c*u*p+l*d*h,this._w=c*u*h-l*d*p):"YXZ"===o?(this._x=l*u*h+c*d*p,this._y=c*d*h-l*u*p,this._z=c*u*p-l*d*h,this._w=c*u*h+l*d*p):"ZXY"===o?(this._x=l*u*h-c*d*p,this._y=c*d*h+l*u*p,this._z=c*u*p+l*d*h,this._w=c*u*h-l*d*p):"ZYX"===o?(this._x=l*u*h-c*d*p,this._y=c*d*h+l*u*p,this._z=c*u*p-l*d*h,this._w=c*u*h+l*d*p):"YZX"===o?(this._x=l*u*h+c*d*p,this._y=c*d*h+l*u*p,this._z=c*u*p-l*d*h,this._w=c*u*h-l*d*p):"XZY"===o&&(this._x=l*u*h-c*d*p,this._y=c*d*h-l*u*p,this._z=c*u*p+l*d*h,this._w=c*u*h+l*d*p),!1!==e&&this.onChangeCallback(),this},setFromAxisAngle:function(t,e){var n=e/2,r=Math.sin(n);return this._x=t.x*r,this._y=t.y*r,this._z=t.z*r,this._w=Math.cos(n),this.onChangeCallback(),this},setFromRotationMatrix:function(t){var e,n=t.elements,r=n[0],i=n[4],o=n[8],a=n[1],s=n[5],c=n[9],u=n[2],h=n[6],l=n[10],d=r+s+l;return d>0?(e=.5/Math.sqrt(d+1),this._w=.25/e,this._x=(h-c)*e,this._y=(o-u)*e,this._z=(a-i)*e):r>s&&r>l?(e=2*Math.sqrt(1+r-s-l),this._w=(h-c)/e,this._x=.25*e,this._y=(i+a)/e,this._z=(o+u)/e):s>l?(e=2*Math.sqrt(1+s-r-l),this._w=(o-u)/e,this._x=(i+a)/e,this._y=.25*e,this._z=(c+h)/e):(e=2*Math.sqrt(1+l-r-s),this._w=(a-i)/e,this._x=(o+u)/e,this._y=(c+h)/e,this._z=.25*e),this.onChangeCallback(),this},setFromUnitVectors:function(){var t,e=new Ve;return function(n,r){return void 0===e&&(e=new Ve),(t=n.dot(r)+1)<1e-6?(t=0,Math.abs(n.x)>Math.abs(n.z)?e.set(-n.y,n.x,0):e.set(0,-n.z,n.y)):e.crossVectors(n,r),this._x=e.x,this._y=e.y,this._z=e.z,this._w=t,this.normalize()}}(),inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this.onChangeCallback(),this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)},premultiply:function(t){return this.multiplyQuaternions(t,this)},multiplyQuaternions:function(t,e){var n=t._x,r=t._y,i=t._z,o=t._w,a=e._x,s=e._y,c=e._z,u=e._w;return this._x=n*u+o*a+r*c-i*s,this._y=r*u+o*s+i*a-n*c,this._z=i*u+o*c+n*s-r*a,this._w=o*u-n*a-r*s-i*c,this.onChangeCallback(),this},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var n=this._x,r=this._y,i=this._z,o=this._w,a=o*t._w+n*t._x+r*t._y+i*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=n,this._y=r,this._z=i,this;var s=1-a*a;if(s<=Number.EPSILON){var c=1-e;return this._w=c*o+e*this._w,this._x=c*n+e*this._x,this._y=c*r+e*this._y,this._z=c*i+e*this._z,this.normalize()}var u=Math.sqrt(s),h=Math.atan2(u,a),l=Math.sin((1-e)*h)/u,d=Math.sin(e*h)/u;return this._w=o*l+this._w*d,this._x=n*l+this._x*d,this._y=r*l+this._y*d,this._z=i*l+this._z*d,this.onChangeCallback(),this},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w},fromArray:function(t,e){return void 0===e&&(e=0),this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign(Ve.prototype,{isVector3:!0,set:function(t,e,n){return this.x=t,this.y=e,this.z=n,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiplyVectors:function(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this},applyEuler:function(){var t=new He;return function(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(t.setFromEuler(e))}}(),applyAxisAngle:function(){var t=new He;return function(e,n){return this.applyQuaternion(t.setFromAxisAngle(e,n))}}(),applyMatrix3:function(t){var e=this.x,n=this.y,r=this.z,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6]*r,this.y=i[1]*e+i[4]*n+i[7]*r,this.z=i[2]*e+i[5]*n+i[8]*r,this},applyMatrix4:function(t){var e=this.x,n=this.y,r=this.z,i=t.elements,o=1/(i[3]*e+i[7]*n+i[11]*r+i[15]);return this.x=(i[0]*e+i[4]*n+i[8]*r+i[12])*o,this.y=(i[1]*e+i[5]*n+i[9]*r+i[13])*o,this.z=(i[2]*e+i[6]*n+i[10]*r+i[14])*o,this},applyQuaternion:function(t){var e=this.x,n=this.y,r=this.z,i=t.x,o=t.y,a=t.z,s=t.w,c=s*e+o*r-a*n,u=s*n+a*e-i*r,h=s*r+i*n-o*e,l=-i*e-o*n-a*r;return this.x=c*s+l*-i+u*-a-h*-o,this.y=u*s+l*-o+h*-i-c*-a,this.z=h*s+l*-a+c*-o-u*-i,this},project:function(){var t=new Ge;return function(e){return t.multiplyMatrices(e.projectionMatrix,t.getInverse(e.matrixWorld)),this.applyMatrix4(t)}}(),unproject:function(){var t=new Ge;return function(e){return t.multiplyMatrices(e.matrixWorld,t.getInverse(e.projectionMatrix)),this.applyMatrix4(t)}}(),transformDirection:function(t){var e=this.x,n=this.y,r=this.z,i=t.elements;return this.x=i[0]*e+i[4]*n+i[8]*r,this.y=i[1]*e+i[5]*n+i[9]*r,this.z=i[2]*e+i[6]*n+i[10]*r,this.normalize()},divide:function(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this},divideScalar:function(t){return this.multiplyScalar(1/t)},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this},clampScalar:function(){var t=new Ve,e=new Ve;return function(n,r){return t.set(n,n,n),e.set(r,r,r),this.clamp(t,e)}}(),clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},cross:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)},crossVectors:function(t,e){var n=t.x,r=t.y,i=t.z,o=e.x,a=e.y,s=e.z;return this.x=r*s-i*a,this.y=i*o-n*s,this.z=n*a-r*o,this},projectOnVector:function(t){var e=t.dot(this)/t.lengthSq();return this.copy(t).multiplyScalar(e)},projectOnPlane:function(){var t=new Ve;return function(e){return t.copy(this).projectOnVector(e),this.sub(t)}}(),reflect:function(){var t=new Ve;return function(e){return this.sub(t.copy(e).multiplyScalar(2*this.dot(e)))}}(),angleTo:function(t){var e=this.dot(t)/Math.sqrt(this.lengthSq()*t.lengthSq());return Math.acos(Fe.clamp(e,-1,1))},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y,r=this.z-t.z;return e*e+n*n+r*r},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)},setFromSpherical:function(t){var e=Math.sin(t.phi)*t.radius;return this.x=e*Math.sin(t.theta),this.y=Math.cos(t.phi)*t.radius,this.z=e*Math.cos(t.theta),this},setFromCylindrical:function(t){return this.x=t.radius*Math.sin(t.theta),this.y=t.y,this.z=t.radius*Math.cos(t.theta),this},setFromMatrixPosition:function(t){var e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this},setFromMatrixScale:function(t){var e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),r=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=r,this},setFromMatrixColumn:function(t,e){return this.fromArray(t.elements,4*e)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}}),Object.assign(ke.prototype,{isMatrix3:!0,set:function(t,e,n,r,i,o,a,s,c){var u=this.elements;return u[0]=t,u[1]=r,u[2]=a,u[3]=e,u[4]=i,u[5]=s,u[6]=n,u[7]=o,u[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this},setFromMatrix4:function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this},applyToBufferAttribute:function(){var t=new Ve;return function(e){for(var n=0,r=e.count;n<r;n++)t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.applyMatrix3(this),e.setXYZ(n,t.x,t.y,t.z);return e}}(),multiply:function(t){return this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var n=t.elements,r=e.elements,i=this.elements,o=n[0],a=n[3],s=n[6],c=n[1],u=n[4],h=n[7],l=n[2],d=n[5],p=n[8],f=r[0],m=r[3],g=r[6],v=r[1],y=r[4],x=r[7],b=r[2],_=r[5],w=r[8];return i[0]=o*f+a*v+s*b,i[3]=o*m+a*y+s*_,i[6]=o*g+a*x+s*w,i[1]=c*f+u*v+h*b,i[4]=c*m+u*y+h*_,i[7]=c*g+u*x+h*w,i[2]=l*f+d*v+p*b,i[5]=l*m+d*y+p*_,i[8]=l*g+d*x+p*w,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this},determinant:function(){var t=this.elements,e=t[0],n=t[1],r=t[2],i=t[3],o=t[4],a=t[5],s=t[6],c=t[7],u=t[8];return e*o*u-e*a*c-n*i*u+n*a*s+r*i*c-r*o*s},getInverse:function(t,e){t&&t.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var n=t.elements,r=this.elements,i=n[0],o=n[1],a=n[2],s=n[3],c=n[4],u=n[5],h=n[6],l=n[7],d=n[8],p=d*c-u*l,f=u*h-d*s,m=l*s-c*h,g=i*p+o*f+a*m;if(0===g){var v="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(v);return console.warn(v),this.identity()}var y=1/g;return r[0]=p*y,r[1]=(a*l-d*o)*y,r[2]=(u*o-a*c)*y,r[3]=f*y,r[4]=(d*i-a*h)*y,r[5]=(a*s-u*i)*y,r[6]=m*y,r[7]=(o*h-l*i)*y,r[8]=(c*i-o*s)*y,this},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this},getNormalMatrix:function(t){return this.setFromMatrix4(t).getInverse(this).transpose()},transposeIntoArray:function(t){var e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this},setUvTransform:function(t,e,n,r,i,o,a){var s=Math.cos(i),c=Math.sin(i);this.set(n*s,n*c,-n*(s*o+c*a)+o+t,-r*c,r*s,-r*(-c*o+s*a)+a+e,0,0,1)},scale:function(t,e){var n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this},rotate:function(t){var e=Math.cos(t),n=Math.sin(t),r=this.elements,i=r[0],o=r[3],a=r[6],s=r[1],c=r[4],u=r[7];return r[0]=e*i+n*s,r[3]=e*o+n*c,r[6]=e*a+n*u,r[1]=-n*i+e*s,r[4]=-n*o+e*c,r[7]=-n*a+e*u,this},translate:function(t,e){var n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this},equals:function(t){for(var e=this.elements,n=t.elements,r=0;r<9;r++)if(e[r]!==n[r])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var n=0;n<9;n++)this.elements[n]=t[n+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}});var je=0;function We(t,e,n,r,i,o,a,s,c,u){Object.defineProperty(this,"id",{value:je++}),this.uuid=Fe.generateUUID(),this.name="",this.image=void 0!==t?t:We.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==e?e:We.DEFAULT_MAPPING,this.wrapS=void 0!==n?n:vt,this.wrapT=void 0!==r?r:vt,this.magFilter=void 0!==i?i:wt,this.minFilter=void 0!==o?o:Et,this.anisotropy=void 0!==c?c:1,this.format=void 0!==a?a:zt,this.type=void 0!==s?s:Tt,this.offset=new ze(0,0),this.repeat=new ze(1,1),this.center=new ze(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ke,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==u?u:Se,this.version=0,this.onUpdate=null}function Xe(t,e,n,r){this.x=t||0,this.y=e||0,this.z=n||0,this.w=void 0!==r?r:1}function qe(t,e,n){this.width=t,this.height=e,this.scissor=new Xe(0,0,t,e),this.scissorTest=!1,this.viewport=new Xe(0,0,t,e),void 0===(n=n||{}).minFilter&&(n.minFilter=wt),this.texture=new We(void 0,void 0,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.generateMipmaps=void 0===n.generateMipmaps||n.generateMipmaps,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}function Ye(t,e,n){qe.call(this,t,e,n),this.activeCubeFace=0,this.activeMipMapLevel=0}function Ze(t,e,n,r,i,o,a,s,c,u,h,l){We.call(this,null,o,a,s,c,u,r,i,h,l),this.image={data:t,width:e,height:n},this.magFilter=void 0!==c?c:xt,this.minFilter=void 0!==u?u:xt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function Je(t,e){this.min=void 0!==t?t:new Ve(1/0,1/0,1/0),this.max=void 0!==e?e:new Ve(-1/0,-1/0,-1/0)}function Qe(t,e){this.center=void 0!==t?t:new Ve,this.radius=void 0!==e?e:0}function Ke(t,e){this.normal=void 0!==t?t:new Ve(1,0,0),this.constant=void 0!==e?e:0}function $e(t,e,n,r,i,o){this.planes=[void 0!==t?t:new Ke,void 0!==e?e:new Ke,void 0!==n?n:new Ke,void 0!==r?r:new Ke,void 0!==i?i:new Ke,void 0!==o?o:new Ke]}We.DEFAULT_IMAGE=void 0,We.DEFAULT_MAPPING=ct,We.prototype=Object.assign(Object.create(i.prototype),{constructor:We,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this},toJSON:function(t){var e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];function n(t){var e;if(t instanceof HTMLCanvasElement)e=t;else{(e=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")).width=t.width,e.height=t.height;var n=e.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height)}return e.width>2048||e.height>2048?e.toDataURL("image/jpeg",.6):e.toDataURL("image/png")}var r={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var i=this.image;if(void 0===i.uuid&&(i.uuid=Fe.generateUUID()),!e&&void 0===t.images[i.uuid]){var o;if(Array.isArray(i)){o=[];for(var a=0,s=i.length;a<s;a++)o.push(n(i[a]))}else o=n(i);t.images[i.uuid]={uuid:i.uuid,url:o}}r.image=i.uuid}return e||(t.textures[this.uuid]=r),r},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(t){if(this.mapping===ct){if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case gt:t.x=t.x-Math.floor(t.x);break;case vt:t.x=t.x<0?0:1;break;case yt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case gt:t.y=t.y-Math.floor(t.y);break;case vt:t.y=t.y<0?0:1;break;case yt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}this.flipY&&(t.y=1-t.y)}}}),Object.defineProperty(We.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Xe.prototype,{isVector4:!0,set:function(t,e,n,r){return this.x=t,this.y=e,this.z=n,this.w=r,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this.w=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setW:function(t){return this.w=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},applyMatrix4:function(t){var e=this.x,n=this.y,r=this.z,i=this.w,o=t.elements;return this.x=o[0]*e+o[4]*n+o[8]*r+o[12]*i,this.y=o[1]*e+o[5]*n+o[9]*r+o[13]*i,this.z=o[2]*e+o[6]*n+o[10]*r+o[14]*i,this.w=o[3]*e+o[7]*n+o[11]*r+o[15]*i,this},divideScalar:function(t){return this.multiplyScalar(1/t)},setAxisAngleFromQuaternion:function(t){this.w=2*Math.acos(t.w);var e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this},setAxisAngleFromRotationMatrix:function(t){var e,n,r,i,o=t.elements,a=o[0],s=o[4],c=o[8],u=o[1],h=o[5],l=o[9],d=o[2],p=o[6],f=o[10];if(Math.abs(s-u)<.01&&Math.abs(c-d)<.01&&Math.abs(l-p)<.01){if(Math.abs(s+u)<.1&&Math.abs(c+d)<.1&&Math.abs(l+p)<.1&&Math.abs(a+h+f-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;var m=(a+1)/2,g=(h+1)/2,v=(f+1)/2,y=(s+u)/4,x=(c+d)/4,b=(l+p)/4;return m>g&&m>v?m<.01?(n=0,r=.707106781,i=.707106781):(r=y/(n=Math.sqrt(m)),i=x/n):g>v?g<.01?(n=.707106781,r=0,i=.707106781):(n=y/(r=Math.sqrt(g)),i=b/r):v<.01?(n=.707106781,r=.707106781,i=0):(n=x/(i=Math.sqrt(v)),r=b/i),this.set(n,r,i,e),this}var _=Math.sqrt((p-l)*(p-l)+(c-d)*(c-d)+(u-s)*(u-s));return Math.abs(_)<.001&&(_=1),this.x=(p-l)/_,this.y=(c-d)/_,this.z=(u-s)/_,this.w=Math.acos((a+h+f-1)/2),this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this},clampScalar:function(){var t,e;return function(n,r){return void 0===t&&(t=new Xe,e=new Xe),t.set(n,n,n,n),e.set(r,r,r,r),this.clamp(t,e)}}(),clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}}),qe.prototype=Object.assign(Object.create(i.prototype),{constructor:qe,isWebGLRenderTarget:!0,setSize:function(t,e){this.width===t&&this.height===e||(this.width=t,this.height=e,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.width=t.width,this.height=t.height,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Ye.prototype=Object.create(qe.prototype),Ye.prototype.constructor=Ye,Ye.prototype.isWebGLRenderTargetCube=!0,Ze.prototype=Object.create(We.prototype),Ze.prototype.constructor=Ze,Ze.prototype.isDataTexture=!0,Object.assign(Je.prototype,{isBox3:!0,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromArray:function(t){for(var e=1/0,n=1/0,r=1/0,i=-1/0,o=-1/0,a=-1/0,s=0,c=t.length;s<c;s+=3){var u=t[s],h=t[s+1],l=t[s+2];u<e&&(e=u),h<n&&(n=h),l<r&&(r=l),u>i&&(i=u),h>o&&(o=h),l>a&&(a=l)}return this.min.set(e,n,r),this.max.set(i,o,a),this},setFromBufferAttribute:function(t){for(var e=1/0,n=1/0,r=1/0,i=-1/0,o=-1/0,a=-1/0,s=0,c=t.count;s<c;s++){var u=t.getX(s),h=t.getY(s),l=t.getZ(s);u<e&&(e=u),h<n&&(n=h),l<r&&(r=l),u>i&&(i=u),h>o&&(o=h),l>a&&(a=l)}return this.min.set(e,n,r),this.max.set(i,o,a),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var t=new Ve;return function(e,n){var r=t.copy(n).multiplyScalar(.5);return this.min.copy(e).sub(r),this.max.copy(e).add(r),this}}(),setFromObject:function(t){return this.makeEmpty(),this.expandByObject(t)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new Ve),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new Ve),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},expandByObject:function(){var t,e,n,r=new Ve;function i(i){var o=i.geometry;if(void 0!==o)if(o.isGeometry){var a=o.vertices;for(e=0,n=a.length;e<n;e++)r.copy(a[e]),r.applyMatrix4(i.matrixWorld),t.expandByPoint(r)}else if(o.isBufferGeometry){var s=o.attributes.position;if(void 0!==s)for(e=0,n=s.count;e<n;e++)r.fromBufferAttribute(s,e).applyMatrix4(i.matrixWorld),t.expandByPoint(r)}}return function(e){return t=this,e.updateMatrixWorld(!0),e.traverse(i),this}}(),containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new Ve),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)},intersectsSphere:function(){var t=new Ve;return function(e){return this.clampPoint(e.center,t),t.distanceToSquared(e.center)<=e.radius*e.radius}}(),intersectsPlane:function(t){var e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=t.constant&&n>=t.constant},intersectsTriangle:function(){var t=new Ve,e=new Ve,n=new Ve,r=new Ve,i=new Ve,o=new Ve,a=new Ve,s=new Ve,c=new Ve,u=new Ve;function h(r){var i,o;for(i=0,o=r.length-3;i<=o;i+=3){a.fromArray(r,i);var s=c.x*Math.abs(a.x)+c.y*Math.abs(a.y)+c.z*Math.abs(a.z),u=t.dot(a),h=e.dot(a),l=n.dot(a);if(Math.max(-Math.max(u,h,l),Math.min(u,h,l))>s)return!1}return!0}return function(a){if(this.isEmpty())return!1;this.getCenter(s),c.subVectors(this.max,s),t.subVectors(a.a,s),e.subVectors(a.b,s),n.subVectors(a.c,s),r.subVectors(e,t),i.subVectors(n,e),o.subVectors(t,n);var l=[0,-r.z,r.y,0,-i.z,i.y,0,-o.z,o.y,r.z,0,-r.x,i.z,0,-i.x,o.z,0,-o.x,-r.y,r.x,0,-i.y,i.x,0,-o.y,o.x,0];return!!h(l)&&(!!h(l=[1,0,0,0,1,0,0,0,1])&&(u.crossVectors(r,i),h(l=[u.x,u.y,u.z])))}}(),clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new Ve),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new Ve;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),getBoundingSphere:function(){var t=new Ve;return function(e){return void 0===e&&(console.warn("THREE.Box3: .getBoundingSphere() target is now required"),e=new Qe),this.getCenter(e.center),e.radius=.5*this.getSize(t).length(),e}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},applyMatrix4:function(t){if(this.isEmpty())return this;var e=t.elements,n=e[0]*this.min.x,r=e[1]*this.min.x,i=e[2]*this.min.x,o=e[0]*this.max.x,a=e[1]*this.max.x,s=e[2]*this.max.x,c=e[4]*this.min.y,u=e[5]*this.min.y,h=e[6]*this.min.y,l=e[4]*this.max.y,d=e[5]*this.max.y,p=e[6]*this.max.y,f=e[8]*this.min.z,m=e[9]*this.min.z,g=e[10]*this.min.z,v=e[8]*this.max.z,y=e[9]*this.max.z,x=e[10]*this.max.z;return this.min.x=Math.min(n,o)+Math.min(c,l)+Math.min(f,v)+e[12],this.min.y=Math.min(r,a)+Math.min(u,d)+Math.min(m,y)+e[13],this.min.z=Math.min(i,s)+Math.min(h,p)+Math.min(g,x)+e[14],this.max.x=Math.max(n,o)+Math.max(c,l)+Math.max(f,v)+e[12],this.max.y=Math.max(r,a)+Math.max(u,d)+Math.max(m,y)+e[13],this.max.z=Math.max(i,s)+Math.max(h,p)+Math.max(g,x)+e[14],this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}),Object.assign(Qe.prototype,{set:function(t,e){return this.center.copy(t),this.radius=e,this},setFromPoints:function(){var t=new Je;return function(e,n){var r=this.center;void 0!==n?r.copy(n):t.setFromPoints(e).getCenter(r);for(var i=0,o=0,a=e.length;o<a;o++)i=Math.max(i,r.distanceToSquared(e[o]));return this.radius=Math.sqrt(i),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.center.copy(t.center),this.radius=t.radius,this},empty:function(){return this.radius<=0},containsPoint:function(t){return t.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(t){return t.distanceTo(this.center)-this.radius},intersectsSphere:function(t){var e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e},intersectsBox:function(t){return t.intersectsSphere(this)},intersectsPlane:function(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius},clampPoint:function(t,e){var n=this.center.distanceToSquared(t);return void 0===e&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new Ve),e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e},getBoundingBox:function(t){return void 0===t&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new Je),t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this},translate:function(t){return this.center.add(t),this},equals:function(t){return t.center.equals(this.center)&&t.radius===this.radius}}),Object.assign(Ke.prototype,{set:function(t,e){return this.normal.copy(t),this.constant=e,this},setComponents:function(t,e,n,r){return this.normal.set(t,e,n),this.constant=r,this},setFromNormalAndCoplanarPoint:function(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this},setFromCoplanarPoints:function(){var t=new Ve,e=new Ve;return function(n,r,i){var o=t.subVectors(i,r).cross(e.subVectors(n,r)).normalize();return this.setFromNormalAndCoplanarPoint(o,n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,e){return void 0===e&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new Ve),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(){var t=new Ve;return function(e,n){void 0===n&&(console.warn("THREE.Plane: .intersectLine() target is now required"),n=new Ve);var r=e.delta(t),i=this.normal.dot(r);if(0===i)return 0===this.distanceToPoint(e.start)?n.copy(e.start):void 0;var o=-(e.start.dot(this.normal)+this.constant)/i;return o<0||o>1?void 0:n.copy(r).multiplyScalar(o).add(e.start)}}(),intersectsLine:function(t){var e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new Ve),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var t=new Ve,e=new ke;return function(n,r){var i=r||e.getNormalMatrix(n),o=this.coplanarPoint(t).applyMatrix4(n),a=this.normal.applyMatrix3(i).normalize();return this.constant=-o.dot(a),this}}(),translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}}),Object.assign($e.prototype,{set:function(t,e,n,r,i,o){var a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(r),a[4].copy(i),a[5].copy(o),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){for(var e=this.planes,n=0;n<6;n++)e[n].copy(t.planes[n]);return this},setFromMatrix:function(t){var e=this.planes,n=t.elements,r=n[0],i=n[1],o=n[2],a=n[3],s=n[4],c=n[5],u=n[6],h=n[7],l=n[8],d=n[9],p=n[10],f=n[11],m=n[12],g=n[13],v=n[14],y=n[15];return e[0].setComponents(a-r,h-s,f-l,y-m).normalize(),e[1].setComponents(a+r,h+s,f+l,y+m).normalize(),e[2].setComponents(a+i,h+c,f+d,y+g).normalize(),e[3].setComponents(a-i,h-c,f-d,y-g).normalize(),e[4].setComponents(a-o,h-u,f-p,y-v).normalize(),e[5].setComponents(a+o,h+u,f+p,y+v).normalize(),this},intersectsObject:function(){var t=new Qe;return function(e){var n=e.geometry;return null===n.boundingSphere&&n.computeBoundingSphere(),t.copy(n.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(t)}}(),intersectsSprite:function(){var t=new Qe;return function(e){return t.center.set(0,0,0),t.radius=.7071067811865476,t.applyMatrix4(e.matrixWorld),this.intersectsSphere(t)}}(),intersectsSphere:function(t){for(var e=this.planes,n=t.center,r=-t.radius,i=0;i<6;i++){if(e[i].distanceToPoint(n)<r)return!1}return!0},intersectsBox:function(){var t=new Ve,e=new Ve;return function(n){for(var r=this.planes,i=0;i<6;i++){var o=r[i];t.x=o.normal.x>0?n.min.x:n.max.x,e.x=o.normal.x>0?n.max.x:n.min.x,t.y=o.normal.y>0?n.min.y:n.max.y,e.y=o.normal.y>0?n.max.y:n.min.y,t.z=o.normal.z>0?n.min.z:n.max.z,e.z=o.normal.z>0?n.max.z:n.min.z;var a=o.distanceToPoint(t),s=o.distanceToPoint(e);if(a<0&&s<0)return!1}return!0}}(),containsPoint:function(t){for(var e=this.planes,n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}});var tn={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"\nvec3 transformed = vec3( position );\n",beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n",bsdfs:"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif\n",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",encodings_fragment:"  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n",envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",fog_vertex:"\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",lights_pars_begin:"uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n",lights_pars_maps:"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif\n",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n",normal_fragment_maps:"#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif\n",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment:"#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",dithering_pars_fragment:"#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n",uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",cube_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",equirect_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}\n",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n"},en={merge:function(t){for(var e={},n=0;n<t.length;n++){var r=this.clone(t[n]);for(var i in r)e[i]=r[i]}return e},clone:function(t){var e={};for(var n in t)for(var r in e[n]={},t[n]){var i=t[n][r];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture)?e[n][r]=i.clone():Array.isArray(i)?e[n][r]=i.slice():e[n][r]=i}return e}},nn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function rn(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}Object.assign(rn.prototype,{isColor:!0,r:1,g:1,b:1,set:function(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this},setScalar:function(t){return this.r=t,this.g=t,this.b=t,this},setHex:function(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this},setRGB:function(t,e,n){return this.r=t,this.g=e,this.b=n,this},setHSL:function(){function t(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}return function(e,n,r){if(e=Fe.euclideanModulo(e,1),n=Fe.clamp(n,0,1),r=Fe.clamp(r,0,1),0===n)this.r=this.g=this.b=r;else{var i=r<=.5?r*(1+n):r+n-r*n,o=2*r-i;this.r=t(o,i,e+1/3),this.g=t(o,i,e),this.b=t(o,i,e-1/3)}return this}}(),setStyle:function(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}var n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)){var r,i=n[1],o=n[2];switch(i){case"rgb":case"rgba":if(r=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,e(r[5]),this;if(r=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,e(r[5]),this;break;case"hsl":case"hsla":if(r=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o)){var a=parseFloat(r[1])/360,s=parseInt(r[2],10)/100,c=parseInt(r[3],10)/100;return e(r[5]),this.setHSL(a,s,c)}}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(t)){var u,h=(u=n[1]).length;if(3===h)return this.r=parseInt(u.charAt(0)+u.charAt(0),16)/255,this.g=parseInt(u.charAt(1)+u.charAt(1),16)/255,this.b=parseInt(u.charAt(2)+u.charAt(2),16)/255,this;if(6===h)return this.r=parseInt(u.charAt(0)+u.charAt(1),16)/255,this.g=parseInt(u.charAt(2)+u.charAt(3),16)/255,this.b=parseInt(u.charAt(4)+u.charAt(5),16)/255,this}t&&t.length>0&&(void 0!==(u=nn[t])?this.setHex(u):console.warn("THREE.Color: Unknown color "+t));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(t){return this.r=t.r,this.g=t.g,this.b=t.b,this},copyGammaToLinear:function(t,e){return void 0===e&&(e=2),this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this},copyLinearToGamma:function(t,e){void 0===e&&(e=2);var n=e>0?1/e:1;return this.r=Math.pow(t.r,n),this.g=Math.pow(t.g,n),this.b=Math.pow(t.b,n),this},convertGammaToLinear:function(t){return this.copyGammaToLinear(this,t),this},convertLinearToGamma:function(t){return this.copyLinearToGamma(this,t),this},copySRGBToLinear:function(){function t(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}return function(e){return this.r=t(e.r),this.g=t(e.g),this.b=t(e.b),this}}(),copyLinearToSRGB:function(){function t(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}return function(e){return this.r=t(e.r),this.g=t(e.g),this.b=t(e.b),this}}(),convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(t){void 0===t&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});var e,n,r=this.r,i=this.g,o=this.b,a=Math.max(r,i,o),s=Math.min(r,i,o),c=(s+a)/2;if(s===a)e=0,n=0;else{var u=a-s;switch(n=c<=.5?u/(a+s):u/(2-a-s),a){case r:e=(i-o)/u+(i<o?6:0);break;case i:e=(o-r)/u+2;break;case o:e=(r-i)/u+4}e/=6}return t.h=e,t.s=n,t.l=c,t},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(){var t={};return function(e,n,r){return this.getHSL(t),t.h+=e,t.s+=n,t.l+=r,this.setHSL(t.h,t.s,t.l),this}}(),add:function(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this},addColors:function(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this},addScalar:function(t){return this.r+=t,this.g+=t,this.b+=t,this},sub:function(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this},multiply:function(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this},multiplyScalar:function(t){return this.r*=t,this.g*=t,this.b*=t,this},lerp:function(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this},equals:function(t){return t.r===this.r&&t.g===this.g&&t.b===this.b},fromArray:function(t,e){return void 0===e&&(e=0),this.r=t[e],this.g=t[e+1],this.b=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t},toJSON:function(){return this.getHex()}});var on={common:{diffuse:{value:new rn(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new ke},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new ze(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new rn(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new rn(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new ke}}},an={basic:{uniforms:en.merge([on.common,on.specularmap,on.envmap,on.aomap,on.lightmap,on.fog]),vertexShader:tn.meshbasic_vert,fragmentShader:tn.meshbasic_frag},lambert:{uniforms:en.merge([on.common,on.specularmap,on.envmap,on.aomap,on.lightmap,on.emissivemap,on.fog,on.lights,{emissive:{value:new rn(0)}}]),vertexShader:tn.meshlambert_vert,fragmentShader:tn.meshlambert_frag},phong:{uniforms:en.merge([on.common,on.specularmap,on.envmap,on.aomap,on.lightmap,on.emissivemap,on.bumpmap,on.normalmap,on.displacementmap,on.gradientmap,on.fog,on.lights,{emissive:{value:new rn(0)},specular:{value:new rn(1118481)},shininess:{value:30}}]),vertexShader:tn.meshphong_vert,fragmentShader:tn.meshphong_frag},standard:{uniforms:en.merge([on.common,on.envmap,on.aomap,on.lightmap,on.emissivemap,on.bumpmap,on.normalmap,on.displacementmap,on.roughnessmap,on.metalnessmap,on.fog,on.lights,{emissive:{value:new rn(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:tn.meshphysical_vert,fragmentShader:tn.meshphysical_frag},points:{uniforms:en.merge([on.points,on.fog]),vertexShader:tn.points_vert,fragmentShader:tn.points_frag},dashed:{uniforms:en.merge([on.common,on.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:tn.linedashed_vert,fragmentShader:tn.linedashed_frag},depth:{uniforms:en.merge([on.common,on.displacementmap]),vertexShader:tn.depth_vert,fragmentShader:tn.depth_frag},normal:{uniforms:en.merge([on.common,on.bumpmap,on.normalmap,on.displacementmap,{opacity:{value:1}}]),vertexShader:tn.normal_vert,fragmentShader:tn.normal_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:tn.cube_vert,fragmentShader:tn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:tn.equirect_vert,fragmentShader:tn.equirect_frag},distanceRGBA:{uniforms:en.merge([on.common,on.displacementmap,{referencePosition:{value:new Ve},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:tn.distanceRGBA_vert,fragmentShader:tn.distanceRGBA_frag},shadow:{uniforms:en.merge([on.lights,on.fog,{color:{value:new rn(0)},opacity:{value:1}}]),vertexShader:tn.shadow_vert,fragmentShader:tn.shadow_frag}};function sn(){var t=null,e=!1,n=null;function r(i,o){!1!==e&&(n(i,o),t.requestAnimationFrame(r))}return{start:function(){!0!==e&&null!==n&&(t.requestAnimationFrame(r),e=!0)},stop:function(){e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function cn(t){var e=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),e.get(t)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);var r=e.get(n);r&&(t.deleteBuffer(r.buffer),e.delete(n))},update:function(n,r){n.isInterleavedBufferAttribute&&(n=n.data);var i=e.get(n);void 0===i?e.set(n,function(e,n){var r=e.array,i=e.dynamic?t.DYNAMIC_DRAW:t.STATIC_DRAW,o=t.createBuffer();t.bindBuffer(n,o),t.bufferData(n,r,i),e.onUploadCallback();var a=t.FLOAT;return r instanceof Float32Array?a=t.FLOAT:r instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):r instanceof Uint16Array?a=t.UNSIGNED_SHORT:r instanceof Int16Array?a=t.SHORT:r instanceof Uint32Array?a=t.UNSIGNED_INT:r instanceof Int32Array?a=t.INT:r instanceof Int8Array?a=t.BYTE:r instanceof Uint8Array&&(a=t.UNSIGNED_BYTE),{buffer:o,type:a,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}(n,r)):i.version<n.version&&(function(e,n,r){var i=n.array,o=n.updateRange;t.bindBuffer(r,e),!1===n.dynamic?t.bufferData(r,i,t.STATIC_DRAW):-1===o.count?t.bufferSubData(r,0,i):0===o.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(t.bufferSubData(r,o.offset*i.BYTES_PER_ELEMENT,i.subarray(o.offset,o.offset+o.count)),o.count=-1)}(i.buffer,n,r),i.version=n.version)}}}function un(t,e,n,r){this._x=t||0,this._y=e||0,this._z=n||0,this._order=r||un.DefaultOrder}function hn(){this.mask=1}an.physical={uniforms:en.merge([an.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:tn.meshphysical_vert,fragmentShader:tn.meshphysical_frag},un.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],un.DefaultOrder="XYZ",Object.defineProperties(un.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(t){this._order=t,this.onChangeCallback()}}}),Object.assign(un.prototype,{isEuler:!0,set:function(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._order=r||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this.onChangeCallback(),this},setFromRotationMatrix:function(t,e,n){var r=Fe.clamp,i=t.elements,o=i[0],a=i[4],s=i[8],c=i[1],u=i[5],h=i[9],l=i[2],d=i[6],p=i[10];return"XYZ"===(e=e||this._order)?(this._y=Math.asin(r(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(-h,p),this._z=Math.atan2(-a,o)):(this._x=Math.atan2(d,u),this._z=0)):"YXZ"===e?(this._x=Math.asin(-r(h,-1,1)),Math.abs(h)<.99999?(this._y=Math.atan2(s,p),this._z=Math.atan2(c,u)):(this._y=Math.atan2(-l,o),this._z=0)):"ZXY"===e?(this._x=Math.asin(r(d,-1,1)),Math.abs(d)<.99999?(this._y=Math.atan2(-l,p),this._z=Math.atan2(-a,u)):(this._y=0,this._z=Math.atan2(c,o))):"ZYX"===e?(this._y=Math.asin(-r(l,-1,1)),Math.abs(l)<.99999?(this._x=Math.atan2(d,p),this._z=Math.atan2(c,o)):(this._x=0,this._z=Math.atan2(-a,u))):"YZX"===e?(this._z=Math.asin(r(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-h,u),this._y=Math.atan2(-l,o)):(this._x=0,this._y=Math.atan2(s,p))):"XZY"===e?(this._z=Math.asin(-r(a,-1,1)),Math.abs(a)<.99999?(this._x=Math.atan2(d,u),this._y=Math.atan2(s,o)):(this._x=Math.atan2(-h,p),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+e),this._order=e,!1!==n&&this.onChangeCallback(),this},setFromQuaternion:function(){var t=new Ge;return function(e,n,r){return t.makeRotationFromQuaternion(e),this.setFromRotationMatrix(t,n,r)}}(),setFromVector3:function(t,e){return this.set(t.x,t.y,t.z,e||this._order)},reorder:function(){var t=new He;return function(e){return t.setFromEuler(this),this.setFromQuaternion(t,e)}}(),equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order},fromArray:function(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t},toVector3:function(t){return t?t.set(this._x,this._y,this._z):new Ve(this._x,this._y,this._z)},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign(hn.prototype,{set:function(t){this.mask=1<<t|0},enable:function(t){this.mask|=1<<t|0},toggle:function(t){this.mask^=1<<t|0},disable:function(t){this.mask&=~(1<<t|0)},test:function(t){return 0!=(this.mask&t.mask)}});var ln=0;function dn(){Object.defineProperty(this,"id",{value:ln++}),this.uuid=Fe.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=dn.DefaultUp.clone();var t=new Ve,e=new un,n=new He,r=new Ve(1,1,1);e.onChange(function(){n.setFromEuler(e,!1)}),n.onChange(function(){e.setFromQuaternion(n,void 0,!1)}),Object.defineProperties(this,{position:{enumerable:!0,value:t},rotation:{enumerable:!0,value:e},quaternion:{enumerable:!0,value:n},scale:{enumerable:!0,value:r},modelViewMatrix:{value:new Ge},normalMatrix:{value:new ke}}),this.matrix=new Ge,this.matrixWorld=new Ge,this.matrixAutoUpdate=dn.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new hn,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function pn(){dn.call(this),this.type="Camera",this.matrixWorldInverse=new Ge,this.projectionMatrix=new Ge}function fn(t,e,n,r,i,o){pn.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=r,this.near=void 0!==i?i:.1,this.far=void 0!==o?o:2e3,this.updateProjectionMatrix()}function mn(t,e,n,r,i,o){this.a=t,this.b=e,this.c=n,this.normal=r&&r.isVector3?r:new Ve,this.vertexNormals=Array.isArray(r)?r:[],this.color=i&&i.isColor?i:new rn,this.vertexColors=Array.isArray(i)?i:[],this.materialIndex=void 0!==o?o:0}dn.DefaultUp=new Ve(0,1,0),dn.DefaultMatrixAutoUpdate=!0,dn.prototype=Object.assign(Object.create(i.prototype),{constructor:dn,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(t){this.matrix.multiplyMatrices(t,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(t){return this.quaternion.premultiply(t),this},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(t){this.quaternion.copy(t)},rotateOnAxis:function(){var t=new He;return function(e,n){return t.setFromAxisAngle(e,n),this.quaternion.multiply(t),this}}(),rotateOnWorldAxis:function(){var t=new He;return function(e,n){return t.setFromAxisAngle(e,n),this.quaternion.premultiply(t),this}}(),rotateX:function(){var t=new Ve(1,0,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateY:function(){var t=new Ve(0,1,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateZ:function(){var t=new Ve(0,0,1);return function(e){return this.rotateOnAxis(t,e)}}(),translateOnAxis:function(){var t=new Ve;return function(e,n){return t.copy(e).applyQuaternion(this.quaternion),this.position.add(t.multiplyScalar(n)),this}}(),translateX:function(){var t=new Ve(1,0,0);return function(e){return this.translateOnAxis(t,e)}}(),translateY:function(){var t=new Ve(0,1,0);return function(e){return this.translateOnAxis(t,e)}}(),translateZ:function(){var t=new Ve(0,0,1);return function(e){return this.translateOnAxis(t,e)}}(),localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var t=new Ge;return function(e){return e.applyMatrix4(t.getInverse(this.matrixWorld))}}(),lookAt:function(){var t=new Ge,e=new Ve;return function(n,r,i){n.isVector3?e.copy(n):e.set(n,r,i),this.isCamera?t.lookAt(this.position,e,this.up):t.lookAt(e,this.position,this.up),this.quaternion.setFromRotationMatrix(t)}}(),add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,t.dispatchEvent({type:"added"}),this.children.push(t)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)},remove:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}var n=this.children.indexOf(t);return-1!==n&&(t.parent=null,t.dispatchEvent({type:"removed"}),this.children.splice(n,1)),this},getObjectById:function(t){return this.getObjectByProperty("id",t)},getObjectByName:function(t){return this.getObjectByProperty("name",t)},getObjectByProperty:function(t,e){if(this[t]===e)return this;for(var n=0,r=this.children.length;n<r;n++){var i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}},getWorldPosition:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),t=new Ve),this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var t=new Ve,e=new Ve;return function(n){return void 0===n&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),n=new He),this.updateMatrixWorld(!0),this.matrixWorld.decompose(t,n,e),n}}(),getWorldScale:function(){var t=new Ve,e=new He;return function(n){return void 0===n&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),n=new Ve),this.updateMatrixWorld(!0),this.matrixWorld.decompose(t,e,n),n}}(),getWorldDirection:function(){var t=new He;return function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),e=new Ve),this.getWorldQuaternion(t),e.set(0,0,1).applyQuaternion(t)}}(),raycast:function(){},traverse:function(t){t(this);for(var e=this.children,n=0,r=e.length;n<r;n++)e[n].traverse(t)},traverseVisible:function(t){if(!1!==this.visible){t(this);for(var e=this.children,n=0,r=e.length;n<r;n++)e[n].traverseVisible(t)}},traverseAncestors:function(t){var e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);for(var e=this.children,n=0,r=e.length;n<r;n++)e[n].updateMatrixWorld(t)},toJSON:function(t){var e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var r={};function i(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(r.uuid=this.uuid,r.type=this.type,""!==this.name&&(r.name=this.name),!0===this.castShadow&&(r.castShadow=!0),!0===this.receiveShadow&&(r.receiveShadow=!0),!1===this.visible&&(r.visible=!1),!1===this.frustumCulled&&(r.frustumCulled=!1),0!==this.renderOrder&&(r.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(r.userData=this.userData),r.layers=this.layers.mask,r.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(r.matrixAutoUpdate=!1),void 0!==this.geometry){r.geometry=i(t.geometries,this.geometry);var o=this.geometry.parameters;if(void 0!==o&&void 0!==o.shapes){var a=o.shapes;if(Array.isArray(a))for(var s=0,c=a.length;s<c;s++){var u=a[s];i(t.shapes,u)}else i(t.shapes,a)}}if(void 0!==this.material)if(Array.isArray(this.material)){var h=[];for(s=0,c=this.material.length;s<c;s++)h.push(i(t.materials,this.material[s]));r.material=h}else r.material=i(t.materials,this.material);if(this.children.length>0){r.children=[];for(s=0;s<this.children.length;s++)r.children.push(this.children[s].toJSON(t).object)}if(e){var l=m(t.geometries),d=m(t.materials),p=m(t.textures),f=m(t.images);a=m(t.shapes);l.length>0&&(n.geometries=l),d.length>0&&(n.materials=d),p.length>0&&(n.textures=p),f.length>0&&(n.images=f),a.length>0&&(n.shapes=a)}return n.object=r,n;function m(t){var e=[];for(var n in t){var r=t[n];delete r.metadata,e.push(r)}return e}},clone:function(t){return(new this.constructor).copy(this,t)},copy:function(t,e){if(void 0===e&&(e=!0),this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(var n=0;n<t.children.length;n++){var r=t.children[n];this.add(r.clone())}return this}}),pn.prototype=Object.assign(Object.create(dn.prototype),{constructor:pn,isCamera:!0,copy:function(t,e){return dn.prototype.copy.call(this,t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this},getWorldDirection:function(){var t=new He;return function(e){return void 0===e&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),e=new Ve),this.getWorldQuaternion(t),e.set(0,0,-1).applyQuaternion(t)}}(),updateMatrixWorld:function(t){dn.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),fn.prototype=Object.assign(Object.create(pn.prototype),{constructor:fn,isOrthographicCamera:!0,copy:function(t,e){return pn.prototype.copy.call(this,t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this},setViewOffset:function(t,e,n,r,i,o){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=i,this.view.height=o,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,r=(this.top+this.bottom)/2,i=n-t,o=n+t,a=r+e,s=r-e;if(null!==this.view&&this.view.enabled){var c=this.zoom/(this.view.width/this.view.fullWidth),u=this.zoom/(this.view.height/this.view.fullHeight),h=(this.right-this.left)/this.view.width,l=(this.top-this.bottom)/this.view.height;o=(i+=h*(this.view.offsetX/c))+h*(this.view.width/c),s=(a-=l*(this.view.offsetY/u))-l*(this.view.height/u)}this.projectionMatrix.makeOrthographic(i,o,a,s,this.near,this.far)},toJSON:function(t){var e=dn.prototype.toJSON.call(this,t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}),Object.assign(mn.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.a=t.a,this.b=t.b,this.c=t.c,this.normal.copy(t.normal),this.color.copy(t.color),this.materialIndex=t.materialIndex;for(var e=0,n=t.vertexNormals.length;e<n;e++)this.vertexNormals[e]=t.vertexNormals[e].clone();for(e=0,n=t.vertexColors.length;e<n;e++)this.vertexColors[e]=t.vertexColors[e].clone();return this}});var gn=0;function vn(){Object.defineProperty(this,"id",{value:gn+=2}),this.uuid=Fe.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function yn(t,e,n){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function xn(t,e,n){yn.call(this,new Int8Array(t),e,n)}function bn(t,e,n){yn.call(this,new Uint8Array(t),e,n)}function _n(t,e,n){yn.call(this,new Uint8ClampedArray(t),e,n)}function wn(t,e,n){yn.call(this,new Int16Array(t),e,n)}function Mn(t,e,n){yn.call(this,new Uint16Array(t),e,n)}function En(t,e,n){yn.call(this,new Int32Array(t),e,n)}function Tn(t,e,n){yn.call(this,new Uint32Array(t),e,n)}function Sn(t,e,n){yn.call(this,new Float32Array(t),e,n)}function An(t,e,n){yn.call(this,new Float64Array(t),e,n)}function Rn(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function Ln(t){if(0===t.length)return-1/0;for(var e=t[0],n=1,r=t.length;n<r;++n)t[n]>e&&(e=t[n]);return e}vn.prototype=Object.assign(Object.create(i.prototype),{constructor:vn,isGeometry:!0,applyMatrix:function(t){for(var e=(new ke).getNormalMatrix(t),n=0,r=this.vertices.length;n<r;n++){this.vertices[n].applyMatrix4(t)}for(n=0,r=this.faces.length;n<r;n++){var i=this.faces[n];i.normal.applyMatrix3(e).normalize();for(var o=0,a=i.vertexNormals.length;o<a;o++)i.vertexNormals[o].applyMatrix3(e).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var t=new Ge;return function(e){return t.makeRotationX(e),this.applyMatrix(t),this}}(),rotateY:function(){var t=new Ge;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new Ge;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new Ge;return function(e,n,r){return t.makeTranslation(e,n,r),this.applyMatrix(t),this}}(),scale:function(){var t=new Ge;return function(e,n,r){return t.makeScale(e,n,r),this.applyMatrix(t),this}}(),lookAt:function(){var t=new dn;return function(e){t.lookAt(e),t.updateMatrix(),this.applyMatrix(t.matrix)}}(),fromBufferGeometry:function(t){var e=this,n=null!==t.index?t.index.array:void 0,r=t.attributes,i=r.position.array,o=void 0!==r.normal?r.normal.array:void 0,a=void 0!==r.color?r.color.array:void 0,s=void 0!==r.uv?r.uv.array:void 0,c=void 0!==r.uv2?r.uv2.array:void 0;void 0!==c&&(this.faceVertexUvs[1]=[]);for(var u=[],h=[],l=[],d=0,p=0;d<i.length;d+=3,p+=2)e.vertices.push(new Ve(i[d],i[d+1],i[d+2])),void 0!==o&&u.push(new Ve(o[d],o[d+1],o[d+2])),void 0!==a&&e.colors.push(new rn(a[d],a[d+1],a[d+2])),void 0!==s&&h.push(new ze(s[p],s[p+1])),void 0!==c&&l.push(new ze(c[p],c[p+1]));function f(t,n,r,i){var d=new mn(t,n,r,void 0!==o?[u[t].clone(),u[n].clone(),u[r].clone()]:[],void 0!==a?[e.colors[t].clone(),e.colors[n].clone(),e.colors[r].clone()]:[],i);e.faces.push(d),void 0!==s&&e.faceVertexUvs[0].push([h[t].clone(),h[n].clone(),h[r].clone()]),void 0!==c&&e.faceVertexUvs[1].push([l[t].clone(),l[n].clone(),l[r].clone()])}var m=t.groups;if(m.length>0)for(d=0;d<m.length;d++)for(var g=m[d],v=g.start,y=(p=v,v+g.count);p<y;p+=3)void 0!==n?f(n[p],n[p+1],n[p+2],g.materialIndex):f(p,p+1,p+2,g.materialIndex);else if(void 0!==n)for(d=0;d<n.length;d+=3)f(n[d],n[d+1],n[d+2]);else for(d=0;d<i.length/3;d+=3)f(d,d+1,d+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this},center:function(){var t=new Ve;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(t).negate(),this.translate(t.x,t.y,t.z),this}}(),normalize:function(){this.computeBoundingSphere();var t=this.boundingSphere.center,e=this.boundingSphere.radius,n=0===e?1:1/e,r=new Ge;return r.set(n,0,0,-n*t.x,0,n,0,-n*t.y,0,0,n,-n*t.z,0,0,0,1),this.applyMatrix(r),this},computeFaceNormals:function(){for(var t=new Ve,e=new Ve,n=0,r=this.faces.length;n<r;n++){var i=this.faces[n],o=this.vertices[i.a],a=this.vertices[i.b],s=this.vertices[i.c];t.subVectors(s,a),e.subVectors(o,a),t.cross(e),t.normalize(),i.normal.copy(t)}},computeVertexNormals:function(t){var e,n,r,i,o,a;for(void 0===t&&(t=!0),a=new Array(this.vertices.length),e=0,n=this.vertices.length;e<n;e++)a[e]=new Ve;if(t){var s,c,u,h=new Ve,l=new Ve;for(r=0,i=this.faces.length;r<i;r++)o=this.faces[r],s=this.vertices[o.a],c=this.vertices[o.b],u=this.vertices[o.c],h.subVectors(u,c),l.subVectors(s,c),h.cross(l),a[o.a].add(h),a[o.b].add(h),a[o.c].add(h)}else for(this.computeFaceNormals(),r=0,i=this.faces.length;r<i;r++)a[(o=this.faces[r]).a].add(o.normal),a[o.b].add(o.normal),a[o.c].add(o.normal);for(e=0,n=this.vertices.length;e<n;e++)a[e].normalize();for(r=0,i=this.faces.length;r<i;r++){var d=(o=this.faces[r]).vertexNormals;3===d.length?(d[0].copy(a[o.a]),d[1].copy(a[o.b]),d[2].copy(a[o.c])):(d[0]=a[o.a].clone(),d[1]=a[o.b].clone(),d[2]=a[o.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var t,e,n;for(this.computeFaceNormals(),t=0,e=this.faces.length;t<e;t++){var r=(n=this.faces[t]).vertexNormals;3===r.length?(r[0].copy(n.normal),r[1].copy(n.normal),r[2].copy(n.normal)):(r[0]=n.normal.clone(),r[1]=n.normal.clone(),r[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var t,e,n,r,i;for(n=0,r=this.faces.length;n<r;n++)for((i=this.faces[n]).__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]),t=0,e=i.vertexNormals.length;t<e;t++)i.__originalVertexNormals[t]?i.__originalVertexNormals[t].copy(i.vertexNormals[t]):i.__originalVertexNormals[t]=i.vertexNormals[t].clone();var o=new vn;for(o.faces=this.faces,t=0,e=this.morphTargets.length;t<e;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[];var a=this.morphNormals[t].faceNormals,s=this.morphNormals[t].vertexNormals;for(n=0,r=this.faces.length;n<r;n++)c=new Ve,u={a:new Ve,b:new Ve,c:new Ve},a.push(c),s.push(u)}var c,u,h=this.morphNormals[t];for(o.vertices=this.morphTargets[t].vertices,o.computeFaceNormals(),o.computeVertexNormals(),n=0,r=this.faces.length;n<r;n++)i=this.faces[n],c=h.faceNormals[n],u=h.vertexNormals[n],c.copy(i.normal),u.a.copy(i.vertexNormals[0]),u.b.copy(i.vertexNormals[1]),u.c.copy(i.vertexNormals[2])}for(n=0,r=this.faces.length;n<r;n++)(i=this.faces[n]).normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Je),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new Qe),this.boundingSphere.setFromPoints(this.vertices)},merge:function(t,e,n){if(t&&t.isGeometry){var r,i=this.vertices.length,o=this.vertices,a=t.vertices,s=this.faces,c=t.faces,u=this.faceVertexUvs[0],h=t.faceVertexUvs[0],l=this.colors,d=t.colors;void 0===n&&(n=0),void 0!==e&&(r=(new ke).getNormalMatrix(e));for(var p=0,f=a.length;p<f;p++){var m=a[p].clone();void 0!==e&&m.applyMatrix4(e),o.push(m)}for(p=0,f=d.length;p<f;p++)l.push(d[p].clone());for(p=0,f=c.length;p<f;p++){var g,v,y,x=c[p],b=x.vertexNormals,_=x.vertexColors;(g=new mn(x.a+i,x.b+i,x.c+i)).normal.copy(x.normal),void 0!==r&&g.normal.applyMatrix3(r).normalize();for(var w=0,M=b.length;w<M;w++)v=b[w].clone(),void 0!==r&&v.applyMatrix3(r).normalize(),g.vertexNormals.push(v);g.color.copy(x.color);for(w=0,M=_.length;w<M;w++)y=_[w],g.vertexColors.push(y.clone());g.materialIndex=x.materialIndex+n,s.push(g)}for(p=0,f=h.length;p<f;p++){var E=h[p],T=[];if(void 0!==E){for(w=0,M=E.length;w<M;w++)T.push(E[w].clone());u.push(T)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",t)},mergeMesh:function(t){t&&t.isMesh?(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",t)},mergeVertices:function(){var t,e,n,r,i,o,a,s,c={},u=[],h=[],l=Math.pow(10,4);for(n=0,r=this.vertices.length;n<r;n++)t=this.vertices[n],void 0===c[e=Math.round(t.x*l)+"_"+Math.round(t.y*l)+"_"+Math.round(t.z*l)]?(c[e]=n,u.push(this.vertices[n]),h[n]=u.length-1):h[n]=h[c[e]];var d=[];for(n=0,r=this.faces.length;n<r;n++){(i=this.faces[n]).a=h[i.a],i.b=h[i.b],i.c=h[i.c],o=[i.a,i.b,i.c];for(var p=0;p<3;p++)if(o[p]===o[(p+1)%3]){d.push(n);break}}for(n=d.length-1;n>=0;n--){var f=d[n];for(this.faces.splice(f,1),a=0,s=this.faceVertexUvs.length;a<s;a++)this.faceVertexUvs[a].splice(f,1)}var m=this.vertices.length-u.length;return this.vertices=u,m},setFromPoints:function(t){this.vertices=[];for(var e=0,n=t.length;e<n;e++){var r=t[e];this.vertices.push(new Ve(r.x,r.y,r.z||0))}return this},sortFacesByMaterialIndex:function(){for(var t=this.faces,e=t.length,n=0;n<e;n++)t[n]._id=n;t.sort(function(t,e){return t.materialIndex-e.materialIndex});var r,i,o=this.faceVertexUvs[0],a=this.faceVertexUvs[1];o&&o.length===e&&(r=[]),a&&a.length===e&&(i=[]);for(n=0;n<e;n++){var s=t[n]._id;r&&r.push(o[s]),i&&i.push(a[s])}r&&(this.faceVertexUvs[0]=r),i&&(this.faceVertexUvs[1]=i)},toJSON:function(){var t={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),void 0!==this.parameters){var e=this.parameters;for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}for(var r=[],i=0;i<this.vertices.length;i++){var o=this.vertices[i];r.push(o.x,o.y,o.z)}var a=[],s=[],c={},u=[],h={},l=[],d={};for(i=0;i<this.faces.length;i++){var p=this.faces[i],f=void 0!==this.faceVertexUvs[0][i],m=p.normal.length()>0,g=p.vertexNormals.length>0,v=1!==p.color.r||1!==p.color.g||1!==p.color.b,y=p.vertexColors.length>0,x=0;if(x=M(x=M(x=M(x=M(x=M(x=M(x=M(x=M(x,0,0),1,!0),2,!1),3,f),4,m),5,g),6,v),7,y),a.push(x),a.push(p.a,p.b,p.c),a.push(p.materialIndex),f){var b=this.faceVertexUvs[0][i];a.push(S(b[0]),S(b[1]),S(b[2]))}if(m&&a.push(E(p.normal)),g){var _=p.vertexNormals;a.push(E(_[0]),E(_[1]),E(_[2]))}if(v&&a.push(T(p.color)),y){var w=p.vertexColors;a.push(T(w[0]),T(w[1]),T(w[2]))}}function M(t,e,n){return n?t|1<<e:t&~(1<<e)}function E(t){var e=t.x.toString()+t.y.toString()+t.z.toString();return void 0!==c[e]?c[e]:(c[e]=s.length/3,s.push(t.x,t.y,t.z),c[e])}function T(t){var e=t.r.toString()+t.g.toString()+t.b.toString();return void 0!==h[e]?h[e]:(h[e]=u.length,u.push(t.getHex()),h[e])}function S(t){var e=t.x.toString()+t.y.toString();return void 0!==d[e]?d[e]:(d[e]=l.length/2,l.push(t.x,t.y),d[e])}return t.data={},t.data.vertices=r,t.data.normals=s,u.length>0&&(t.data.colors=u),l.length>0&&(t.data.uvs=[l]),t.data.faces=a,t},clone:function(){return(new vn).copy(this)},copy:function(t){var e,n,r,i,o,a;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var s=t.vertices;for(e=0,n=s.length;e<n;e++)this.vertices.push(s[e].clone());var c=t.colors;for(e=0,n=c.length;e<n;e++)this.colors.push(c[e].clone());var u=t.faces;for(e=0,n=u.length;e<n;e++)this.faces.push(u[e].clone());for(e=0,n=t.faceVertexUvs.length;e<n;e++){var h=t.faceVertexUvs[e];for(void 0===this.faceVertexUvs[e]&&(this.faceVertexUvs[e]=[]),r=0,i=h.length;r<i;r++){var l=h[r],d=[];for(o=0,a=l.length;o<a;o++){var p=l[o];d.push(p.clone())}this.faceVertexUvs[e].push(d)}}var f=t.morphTargets;for(e=0,n=f.length;e<n;e++){var m={};if(m.name=f[e].name,void 0!==f[e].vertices)for(m.vertices=[],r=0,i=f[e].vertices.length;r<i;r++)m.vertices.push(f[e].vertices[r].clone());if(void 0!==f[e].normals)for(m.normals=[],r=0,i=f[e].normals.length;r<i;r++)m.normals.push(f[e].normals[r].clone());this.morphTargets.push(m)}var g=t.morphNormals;for(e=0,n=g.length;e<n;e++){var v={};if(void 0!==g[e].vertexNormals)for(v.vertexNormals=[],r=0,i=g[e].vertexNormals.length;r<i;r++){var y=g[e].vertexNormals[r],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),v.vertexNormals.push(x)}if(void 0!==g[e].faceNormals)for(v.faceNormals=[],r=0,i=g[e].faceNormals.length;r<i;r++)v.faceNormals.push(g[e].faceNormals[r].clone());this.morphNormals.push(v)}var b=t.skinWeights;for(e=0,n=b.length;e<n;e++)this.skinWeights.push(b[e].clone());var _=t.skinIndices;for(e=0,n=_.length;e<n;e++)this.skinIndices.push(_[e].clone());var w=t.lineDistances;for(e=0,n=w.length;e<n;e++)this.lineDistances.push(w[e]);var M=t.boundingBox;null!==M&&(this.boundingBox=M.clone());var E=t.boundingSphere;return null!==E&&(this.boundingSphere=E.clone()),this.elementsNeedUpdate=t.elementsNeedUpdate,this.verticesNeedUpdate=t.verticesNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.lineDistancesNeedUpdate=t.lineDistancesNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(yn.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(yn.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==t?t.length/this.itemSize:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.dynamic=t.dynamic,this},copyAt:function(t,e,n){t*=this.itemSize,n*=e.itemSize;for(var r=0,i=this.itemSize;r<i;r++)this.array[t+r]=e.array[n+r];return this},copyArray:function(t){return this.array.set(t),this},copyColorsArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var o=t[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",r),o=new rn),e[n++]=o.r,e[n++]=o.g,e[n++]=o.b}return this},copyVector2sArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var o=t[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",r),o=new ze),e[n++]=o.x,e[n++]=o.y}return this},copyVector3sArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var o=t[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",r),o=new Ve),e[n++]=o.x,e[n++]=o.y,e[n++]=o.z}return this},copyVector4sArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var o=t[r];void 0===o&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",r),o=new Xe),e[n++]=o.x,e[n++]=o.y,e[n++]=o.z,e[n++]=o.w}return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},getX:function(t){return this.array[t*this.itemSize]},setX:function(t,e){return this.array[t*this.itemSize]=e,this},getY:function(t){return this.array[t*this.itemSize+1]},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},getZ:function(t){return this.array[t*this.itemSize+2]},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},getW:function(t){return this.array[t*this.itemSize+3]},setW:function(t,e){return this.array[t*this.itemSize+3]=e,this},setXY:function(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this},setXYZ:function(t,e,n,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this},setXYZW:function(t,e,n,r,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this.array[t+3]=i,this},onUpload:function(t){return this.onUploadCallback=t,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)}}),xn.prototype=Object.create(yn.prototype),xn.prototype.constructor=xn,bn.prototype=Object.create(yn.prototype),bn.prototype.constructor=bn,_n.prototype=Object.create(yn.prototype),_n.prototype.constructor=_n,wn.prototype=Object.create(yn.prototype),wn.prototype.constructor=wn,Mn.prototype=Object.create(yn.prototype),Mn.prototype.constructor=Mn,En.prototype=Object.create(yn.prototype),En.prototype.constructor=En,Tn.prototype=Object.create(yn.prototype),Tn.prototype.constructor=Tn,Sn.prototype=Object.create(yn.prototype),Sn.prototype.constructor=Sn,An.prototype=Object.create(yn.prototype),An.prototype.constructor=An,Object.assign(Rn.prototype,{computeGroups:function(t){for(var e,n=[],r=void 0,i=t.faces,o=0;o<i.length;o++){var a=i[o];a.materialIndex!==r&&(r=a.materialIndex,void 0!==e&&(e.count=3*o-e.start,n.push(e)),e={start:3*o,materialIndex:r})}void 0!==e&&(e.count=3*o-e.start,n.push(e)),this.groups=n},fromGeometry:function(t){var e,n=t.faces,r=t.vertices,i=t.faceVertexUvs,o=i[0]&&i[0].length>0,a=i[1]&&i[1].length>0,s=t.morphTargets,c=s.length;if(c>0){e=[];for(var u=0;u<c;u++)e[u]=[];this.morphTargets.position=e}var h,l=t.morphNormals,d=l.length;if(d>0){h=[];for(u=0;u<d;u++)h[u]=[];this.morphTargets.normal=h}var p=t.skinIndices,f=t.skinWeights,m=p.length===r.length,g=f.length===r.length;r.length>0&&0===n.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(u=0;u<n.length;u++){var v=n[u];this.vertices.push(r[v.a],r[v.b],r[v.c]);var y=v.vertexNormals;if(3===y.length)this.normals.push(y[0],y[1],y[2]);else{var x=v.normal;this.normals.push(x,x,x)}var b,_=v.vertexColors;if(3===_.length)this.colors.push(_[0],_[1],_[2]);else{var w=v.color;this.colors.push(w,w,w)}if(!0===o)void 0!==(b=i[0][u])?this.uvs.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",u),this.uvs.push(new ze,new ze,new ze));if(!0===a)void 0!==(b=i[1][u])?this.uvs2.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",u),this.uvs2.push(new ze,new ze,new ze));for(var M=0;M<c;M++){var E=s[M].vertices;e[M].push(E[v.a],E[v.b],E[v.c])}for(M=0;M<d;M++){var T=l[M].vertexNormals[u];h[M].push(T.a,T.b,T.c)}m&&this.skinIndices.push(p[v.a],p[v.b],p[v.c]),g&&this.skinWeights.push(f[v.a],f[v.b],f[v.c])}return this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this}});var Cn=1;function Pn(){Object.defineProperty(this,"id",{value:Cn+=2}),this.uuid=Fe.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}function On(t,e,n,r,i,o){vn.call(this),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:r,heightSegments:i,depthSegments:o},this.fromBufferGeometry(new In(t,e,n,r,i,o)),this.mergeVertices()}function In(t,e,n,r,i,o){Pn.call(this),this.type="BoxBufferGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:r,heightSegments:i,depthSegments:o};var a=this;t=t||1,e=e||1,n=n||1,r=Math.floor(r)||1,i=Math.floor(i)||1;var s=[],c=[],u=[],h=[],l=0,d=0;function p(t,e,n,r,i,o,p,f,m,g,v){var y,x,b=o/m,_=p/g,w=o/2,M=p/2,E=f/2,T=m+1,S=g+1,A=0,R=0,L=new Ve;for(x=0;x<S;x++){var C=x*_-M;for(y=0;y<T;y++){var P=y*b-w;L[t]=P*r,L[e]=C*i,L[n]=E,c.push(L.x,L.y,L.z),L[t]=0,L[e]=0,L[n]=f>0?1:-1,u.push(L.x,L.y,L.z),h.push(y/m),h.push(1-x/g),A+=1}}for(x=0;x<g;x++)for(y=0;y<m;y++){var O=l+y+T*x,I=l+y+T*(x+1),N=l+(y+1)+T*(x+1),D=l+(y+1)+T*x;s.push(O,I,D),s.push(I,N,D),R+=6}a.addGroup(d,R,v),d+=R,l+=A}p("z","y","x",-1,-1,n,e,t,o=Math.floor(o)||1,i,0),p("z","y","x",1,-1,n,e,-t,o,i,1),p("x","z","y",1,1,t,n,e,r,o,2),p("x","z","y",1,-1,t,n,-e,r,o,3),p("x","y","z",1,-1,t,e,n,r,i,4),p("x","y","z",-1,-1,t,e,-n,r,i,5),this.setIndex(s),this.addAttribute("position",new Sn(c,3)),this.addAttribute("normal",new Sn(u,3)),this.addAttribute("uv",new Sn(h,2))}function Nn(t,e,n,r){vn.call(this),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r},this.fromBufferGeometry(new Dn(t,e,n,r)),this.mergeVertices()}function Dn(t,e,n,r){Pn.call(this),this.type="PlaneBufferGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r};var i,o,a=(t=t||1)/2,s=(e=e||1)/2,c=Math.floor(n)||1,u=Math.floor(r)||1,h=c+1,l=u+1,d=t/c,p=e/u,f=[],m=[],g=[],v=[];for(o=0;o<l;o++){var y=o*p-s;for(i=0;i<h;i++){var x=i*d-a;m.push(x,-y,0),g.push(0,0,1),v.push(i/c),v.push(1-o/u)}}for(o=0;o<u;o++)for(i=0;i<c;i++){var b=i+h*o,_=i+h*(o+1),w=i+1+h*(o+1),M=i+1+h*o;f.push(b,_,M),f.push(_,w,M)}this.setIndex(f),this.addAttribute("position",new Sn(m,3)),this.addAttribute("normal",new Sn(g,3)),this.addAttribute("uv",new Sn(v,2))}Pn.prototype=Object.assign(Object.create(i.prototype),{constructor:Pn,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(t){Array.isArray(t)?this.index=new(Ln(t)>65535?Tn:Mn)(t,1):this.index=t},addAttribute:function(t,e){return e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):(this.attributes[t]=e,this):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(t,new yn(arguments[1],arguments[2])))},getAttribute:function(t){return this.attributes[t]},removeAttribute:function(t){return delete this.attributes[t],this},addGroup:function(t,e,n){this.groups.push({start:t,count:e,materialIndex:void 0!==n?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(t,e){this.drawRange.start=t,this.drawRange.count=e},applyMatrix:function(t){var e=this.attributes.position;void 0!==e&&(t.applyToBufferAttribute(e),e.needsUpdate=!0);var n=this.attributes.normal;void 0!==n&&((new ke).getNormalMatrix(t).applyToBufferAttribute(n),n.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var t=new Ge;return function(e){return t.makeRotationX(e),this.applyMatrix(t),this}}(),rotateY:function(){var t=new Ge;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new Ge;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new Ge;return function(e,n,r){return t.makeTranslation(e,n,r),this.applyMatrix(t),this}}(),scale:function(){var t=new Ge;return function(e,n,r){return t.makeScale(e,n,r),this.applyMatrix(t),this}}(),lookAt:function(){var t=new dn;return function(e){t.lookAt(e),t.updateMatrix(),this.applyMatrix(t.matrix)}}(),center:function(){var t=new Ve;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(t).negate(),this.translate(t.x,t.y,t.z),this}}(),setFromObject:function(t){var e=t.geometry;if(t.isPoints||t.isLine){var n=new Sn(3*e.vertices.length,3),r=new Sn(3*e.colors.length,3);if(this.addAttribute("position",n.copyVector3sArray(e.vertices)),this.addAttribute("color",r.copyColorsArray(e.colors)),e.lineDistances&&e.lineDistances.length===e.vertices.length){var i=new Sn(e.lineDistances.length,1);this.addAttribute("lineDistance",i.copyArray(e.lineDistances))}null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone())}else t.isMesh&&e&&e.isGeometry&&this.fromGeometry(e);return this},setFromPoints:function(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n];e.push(i.x,i.y,i.z||0)}return this.addAttribute("position",new Sn(e,3)),this},updateFromObject:function(t){var e,n=t.geometry;if(t.isMesh){var r=n.__directGeometry;if(!0===n.elementsNeedUpdate&&(r=void 0,n.elementsNeedUpdate=!1),void 0===r)return this.fromGeometry(n);r.verticesNeedUpdate=n.verticesNeedUpdate,r.normalsNeedUpdate=n.normalsNeedUpdate,r.colorsNeedUpdate=n.colorsNeedUpdate,r.uvsNeedUpdate=n.uvsNeedUpdate,r.groupsNeedUpdate=n.groupsNeedUpdate,n.verticesNeedUpdate=!1,n.normalsNeedUpdate=!1,n.colorsNeedUpdate=!1,n.uvsNeedUpdate=!1,n.groupsNeedUpdate=!1,n=r}return!0===n.verticesNeedUpdate&&(void 0!==(e=this.attributes.position)&&(e.copyVector3sArray(n.vertices),e.needsUpdate=!0),n.verticesNeedUpdate=!1),!0===n.normalsNeedUpdate&&(void 0!==(e=this.attributes.normal)&&(e.copyVector3sArray(n.normals),e.needsUpdate=!0),n.normalsNeedUpdate=!1),!0===n.colorsNeedUpdate&&(void 0!==(e=this.attributes.color)&&(e.copyColorsArray(n.colors),e.needsUpdate=!0),n.colorsNeedUpdate=!1),n.uvsNeedUpdate&&(void 0!==(e=this.attributes.uv)&&(e.copyVector2sArray(n.uvs),e.needsUpdate=!0),n.uvsNeedUpdate=!1),n.lineDistancesNeedUpdate&&(void 0!==(e=this.attributes.lineDistance)&&(e.copyArray(n.lineDistances),e.needsUpdate=!0),n.lineDistancesNeedUpdate=!1),n.groupsNeedUpdate&&(n.computeGroups(t.geometry),this.groups=n.groups,n.groupsNeedUpdate=!1),this},fromGeometry:function(t){return t.__directGeometry=(new Rn).fromGeometry(t),this.fromDirectGeometry(t.__directGeometry)},fromDirectGeometry:function(t){var e=new Float32Array(3*t.vertices.length);if(this.addAttribute("position",new yn(e,3).copyVector3sArray(t.vertices)),t.normals.length>0){var n=new Float32Array(3*t.normals.length);this.addAttribute("normal",new yn(n,3).copyVector3sArray(t.normals))}if(t.colors.length>0){var r=new Float32Array(3*t.colors.length);this.addAttribute("color",new yn(r,3).copyColorsArray(t.colors))}if(t.uvs.length>0){var i=new Float32Array(2*t.uvs.length);this.addAttribute("uv",new yn(i,2).copyVector2sArray(t.uvs))}if(t.uvs2.length>0){var o=new Float32Array(2*t.uvs2.length);this.addAttribute("uv2",new yn(o,2).copyVector2sArray(t.uvs2))}for(var a in this.groups=t.groups,t.morphTargets){for(var s=[],c=t.morphTargets[a],u=0,h=c.length;u<h;u++){var l=c[u],d=new Sn(3*l.length,3);s.push(d.copyVector3sArray(l))}this.morphAttributes[a]=s}if(t.skinIndices.length>0){var p=new Sn(4*t.skinIndices.length,4);this.addAttribute("skinIndex",p.copyVector4sArray(t.skinIndices))}if(t.skinWeights.length>0){var f=new Sn(4*t.skinWeights.length,4);this.addAttribute("skinWeight",f.copyVector4sArray(t.skinWeights))}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Je);var t=this.attributes.position;void 0!==t?this.boundingBox.setFromBufferAttribute(t):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var t=new Je,e=new Ve;return function(){null===this.boundingSphere&&(this.boundingSphere=new Qe);var n=this.attributes.position;if(n){var r=this.boundingSphere.center;t.setFromBufferAttribute(n),t.getCenter(r);for(var i=0,o=0,a=n.count;o<a;o++)e.x=n.getX(o),e.y=n.getY(o),e.z=n.getZ(o),i=Math.max(i,r.distanceToSquared(e));this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var t=this.index,e=this.attributes,n=this.groups;if(e.position){var r=e.position.array;if(void 0===e.normal)this.addAttribute("normal",new yn(new Float32Array(r.length),3));else for(var i=e.normal.array,o=0,a=i.length;o<a;o++)i[o]=0;var s,c,u,h=e.normal.array,l=new Ve,d=new Ve,p=new Ve,f=new Ve,m=new Ve;if(t){var g=t.array;0===n.length&&this.addGroup(0,g.length);for(var v=0,y=n.length;v<y;++v){var x=n[v],b=x.start;for(o=b,a=b+x.count;o<a;o+=3)s=3*g[o+0],c=3*g[o+1],u=3*g[o+2],l.fromArray(r,s),d.fromArray(r,c),p.fromArray(r,u),f.subVectors(p,d),m.subVectors(l,d),f.cross(m),h[s]+=f.x,h[s+1]+=f.y,h[s+2]+=f.z,h[c]+=f.x,h[c+1]+=f.y,h[c+2]+=f.z,h[u]+=f.x,h[u+1]+=f.y,h[u+2]+=f.z}}else for(o=0,a=r.length;o<a;o+=9)l.fromArray(r,o),d.fromArray(r,o+3),p.fromArray(r,o+6),f.subVectors(p,d),m.subVectors(l,d),f.cross(m),h[o]=f.x,h[o+1]=f.y,h[o+2]=f.z,h[o+3]=f.x,h[o+4]=f.y,h[o+5]=f.z,h[o+6]=f.x,h[o+7]=f.y,h[o+8]=f.z;this.normalizeNormals(),e.normal.needsUpdate=!0}},merge:function(t,e){if(t&&t.isBufferGeometry){void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var n=this.attributes;for(var r in n)if(void 0!==t.attributes[r])for(var i=n[r].array,o=t.attributes[r],a=o.array,s=0,c=o.itemSize*e;s<a.length;s++,c++)i[c]=a[s];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t)},normalizeNormals:function(){var t=new Ve;return function(){for(var e=this.attributes.normal,n=0,r=e.count;n<r;n++)t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.normalize(),e.setXYZ(n,t.x,t.y,t.z)}}(),toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var t=new Pn,e=this.index.array,n=this.attributes;for(var r in n){for(var i=n[r],o=i.array,a=i.itemSize,s=new o.constructor(e.length*a),c=0,u=0,h=0,l=e.length;h<l;h++){c=e[h]*a;for(var d=0;d<a;d++)s[u++]=o[c++]}t.addAttribute(r,new yn(s,a))}var p=this.groups;for(h=0,l=p.length;h<l;h++){var f=p[h];t.addGroup(f.start,f.count,f.materialIndex)}return t},toJSON:function(){var t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){var e=this.parameters;for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};var r=this.index;if(null!==r){var i=Array.prototype.slice.call(r.array);t.data.index={type:r.array.constructor.name,array:i}}var o=this.attributes;for(var n in o){var a=o[n];i=Array.prototype.slice.call(a.array);t.data.attributes[n]={itemSize:a.itemSize,type:a.array.constructor.name,array:i,normalized:a.normalized}}var s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));var c=this.boundingSphere;return null!==c&&(t.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),t},clone:function(){return(new Pn).copy(this)},copy:function(t){var e,n,r;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var i=t.index;null!==i&&this.setIndex(i.clone());var o=t.attributes;for(e in o){var a=o[e];this.addAttribute(e,a.clone())}var s=t.morphAttributes;for(e in s){var c=[],u=s[e];for(n=0,r=u.length;n<r;n++)c.push(u[n].clone());this.morphAttributes[e]=c}var h=t.groups;for(n=0,r=h.length;n<r;n++){var l=h[n];this.addGroup(l.start,l.count,l.materialIndex)}var d=t.boundingBox;null!==d&&(this.boundingBox=d.clone());var p=t.boundingSphere;return null!==p&&(this.boundingSphere=p.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),On.prototype=Object.create(vn.prototype),On.prototype.constructor=On,In.prototype=Object.create(Pn.prototype),In.prototype.constructor=In,Nn.prototype=Object.create(vn.prototype),Nn.prototype.constructor=Nn,Dn.prototype=Object.create(Pn.prototype),Dn.prototype.constructor=Dn;var Un=0;function Bn(){Object.defineProperty(this,"id",{value:Un++}),this.uuid=Fe.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=T,this.side=g,this.flatShading=!1,this.vertexColors=_,this.opacity=1,this.transparent=!1,this.blendSrc=z,this.blendDst=G,this.blendEquation=C,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=Z,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.overdraw=0,this.visible=!0,this.userData={},this.needsUpdate=!0}function Fn(t){Bn.call(this),this.type="MeshBasicMaterial",this.color=new rn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=tt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(t)}function zn(t){Bn.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}function Gn(t,e){this.origin=void 0!==t?t:new Ve,this.direction=void 0!==e?e:new Ve}function Hn(t,e){this.start=void 0!==t?t:new Ve,this.end=void 0!==e?e:new Ve}function Vn(t,e,n){this.a=void 0!==t?t:new Ve,this.b=void 0!==e?e:new Ve,this.c=void 0!==n?n:new Ve}function kn(t,e){dn.call(this),this.type="Mesh",this.geometry=void 0!==t?t:new Pn,this.material=void 0!==e?e:new Fn({color:16777215*Math.random()}),this.drawMode=Me,this.updateMorphTargets()}function jn(t,e){return Math.abs(e[1])-Math.abs(t[1])}function Wn(t,e,n,r,i,o,a,s,c,u){t=void 0!==t?t:[],e=void 0!==e?e:ut,We.call(this,t,e,n,r,i,o,a,s,c,u),this.flipY=!1}Bn.prototype=Object.assign(Object.create(i.prototype),{constructor:Bn,isMaterial:!0,onBeforeCompile:function(){},setValues:function(t){if(void 0!==t)for(var e in t){var n=t[e];if(void 0!==n)if("shading"!==e){var r=this[e];void 0!==r?r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[e]="overdraw"===e?Number(n):n:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===x;else console.warn("THREE.Material: '"+e+"' parameter is undefined.")}},toJSON:function(t){var e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});var n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function r(t){var e=[];for(var n in t){var r=t[n];delete r.metadata,e.push(r)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearCoat&&(n.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(n.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,n.reflectivity=this.reflectivity),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==T&&(n.blending=this.blending),!0===this.flatShading&&(n.flatShading=this.flatShading),this.side!==g&&(n.side=this.side),this.vertexColors!==_&&(n.vertexColors=this.vertexColors),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,0!==this.rotation&&(n.rotation=this.rotation),1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(n.morphTargets=!0),!0===this.skinning&&(n.skinning=!0),!1===this.visible&&(n.visible=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){var i=r(t.textures),o=r(t.images);i.length>0&&(n.textures=i),o.length>0&&(n.images=o)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.name=t.name,this.fog=t.fog,this.lights=t.lights,this.blending=t.blending,this.side=t.side,this.flatShading=t.flatShading,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.premultipliedAlpha=t.premultipliedAlpha,this.overdraw=t.overdraw,this.visible=t.visible,this.userData=JSON.parse(JSON.stringify(t.userData)),this.clipShadows=t.clipShadows,this.clipIntersection=t.clipIntersection;var e=t.clippingPlanes,n=null;if(null!==e){var r=e.length;n=new Array(r);for(var i=0;i!==r;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.shadowSide=t.shadowSide,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Fn.prototype=Object.create(Bn.prototype),Fn.prototype.constructor=Fn,Fn.prototype.isMeshBasicMaterial=!0,Fn.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this},zn.prototype=Object.create(Bn.prototype),zn.prototype.constructor=zn,zn.prototype.isShaderMaterial=!0,zn.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=en.clone(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=t.extensions,this},zn.prototype.toJSON=function(t){var e=Bn.prototype.toJSON.call(this,t);return e.uniforms=this.uniforms,e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e},Object.assign(Gn.prototype,{set:function(t,e){return this.origin.copy(t),this.direction.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,e){return void 0===e&&(console.warn("THREE.Ray: .at() target is now required"),e=new Ve),e.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(t){return this.direction.copy(t).sub(this.origin).normalize(),this},recast:function(){var t=new Ve;return function(e){return this.origin.copy(this.at(e,t)),this}}(),closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new Ve),e.subVectors(t,this.origin);var n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(t){return Math.sqrt(this.distanceSqToPoint(t))},distanceSqToPoint:function(){var t=new Ve;return function(e){var n=t.subVectors(e,this.origin).dot(this.direction);return n<0?this.origin.distanceToSquared(e):(t.copy(this.direction).multiplyScalar(n).add(this.origin),t.distanceToSquared(e))}}(),distanceSqToSegment:function(){var t=new Ve,e=new Ve,n=new Ve;return function(r,i,o,a){t.copy(r).add(i).multiplyScalar(.5),e.copy(i).sub(r).normalize(),n.copy(this.origin).sub(t);var s,c,u,h,l=.5*r.distanceTo(i),d=-this.direction.dot(e),p=n.dot(this.direction),f=-n.dot(e),m=n.lengthSq(),g=Math.abs(1-d*d);if(g>0)if(c=d*p-f,h=l*g,(s=d*f-p)>=0)if(c>=-h)if(c<=h){var v=1/g;u=(s*=v)*(s+d*(c*=v)+2*p)+c*(d*s+c+2*f)+m}else c=l,u=-(s=Math.max(0,-(d*c+p)))*s+c*(c+2*f)+m;else c=-l,u=-(s=Math.max(0,-(d*c+p)))*s+c*(c+2*f)+m;else c<=-h?u=-(s=Math.max(0,-(-d*l+p)))*s+(c=s>0?-l:Math.min(Math.max(-l,-f),l))*(c+2*f)+m:c<=h?(s=0,u=(c=Math.min(Math.max(-l,-f),l))*(c+2*f)+m):u=-(s=Math.max(0,-(d*l+p)))*s+(c=s>0?l:Math.min(Math.max(-l,-f),l))*(c+2*f)+m;else c=d>0?-l:l,u=-(s=Math.max(0,-(d*c+p)))*s+c*(c+2*f)+m;return o&&o.copy(this.direction).multiplyScalar(s).add(this.origin),a&&a.copy(e).multiplyScalar(c).add(t),u}}(),intersectSphere:function(){var t=new Ve;return function(e,n){t.subVectors(e.center,this.origin);var r=t.dot(this.direction),i=t.dot(t)-r*r,o=e.radius*e.radius;if(i>o)return null;var a=Math.sqrt(o-i),s=r-a,c=r+a;return s<0&&c<0?null:s<0?this.at(c,n):this.at(s,n)}}(),intersectsSphere:function(t){return this.distanceToPoint(t.center)<=t.radius},distanceToPlane:function(t){var e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null},intersectPlane:function(t,e){var n=this.distanceToPlane(t);return null===n?null:this.at(n,e)},intersectsPlane:function(t){var e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0},intersectBox:function(t,e){var n,r,i,o,a,s,c=1/this.direction.x,u=1/this.direction.y,h=1/this.direction.z,l=this.origin;return c>=0?(n=(t.min.x-l.x)*c,r=(t.max.x-l.x)*c):(n=(t.max.x-l.x)*c,r=(t.min.x-l.x)*c),u>=0?(i=(t.min.y-l.y)*u,o=(t.max.y-l.y)*u):(i=(t.max.y-l.y)*u,o=(t.min.y-l.y)*u),n>o||i>r?null:((i>n||n!=n)&&(n=i),(o<r||r!=r)&&(r=o),h>=0?(a=(t.min.z-l.z)*h,s=(t.max.z-l.z)*h):(a=(t.max.z-l.z)*h,s=(t.min.z-l.z)*h),n>s||a>r?null:((a>n||n!=n)&&(n=a),(s<r||r!=r)&&(r=s),r<0?null:this.at(n>=0?n:r,e)))},intersectsBox:function(){var t=new Ve;return function(e){return null!==this.intersectBox(e,t)}}(),intersectTriangle:function(){var t=new Ve,e=new Ve,n=new Ve,r=new Ve;return function(i,o,a,s,c){e.subVectors(o,i),n.subVectors(a,i),r.crossVectors(e,n);var u,h=this.direction.dot(r);if(h>0){if(s)return null;u=1}else{if(!(h<0))return null;u=-1,h=-h}t.subVectors(this.origin,i);var l=u*this.direction.dot(n.crossVectors(t,n));if(l<0)return null;var d=u*this.direction.dot(e.cross(t));if(d<0)return null;if(l+d>h)return null;var p=-u*t.dot(r);return p<0?null:this.at(p/h,c)}}(),applyMatrix4:function(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}}),Object.assign(Hn.prototype,{set:function(t,e){return this.start.copy(t),this.end.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.start.copy(t.start),this.end.copy(t.end),this},getCenter:function(t){return void 0===t&&(console.warn("THREE.Line3: .getCenter() target is now required"),t=new Ve),t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(t){return void 0===t&&(console.warn("THREE.Line3: .delta() target is now required"),t=new Ve),t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,e){return void 0===e&&(console.warn("THREE.Line3: .at() target is now required"),e=new Ve),this.delta(e).multiplyScalar(t).add(this.start)},closestPointToPointParameter:function(){var t=new Ve,e=new Ve;return function(n,r){t.subVectors(n,this.start),e.subVectors(this.end,this.start);var i=e.dot(e),o=e.dot(t)/i;return r&&(o=Fe.clamp(o,0,1)),o}}(),closestPointToPoint:function(t,e,n){var r=this.closestPointToPointParameter(t,e);return void 0===n&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),n=new Ve),this.delta(n).multiplyScalar(r).add(this.start)},applyMatrix4:function(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this},equals:function(t){return t.start.equals(this.start)&&t.end.equals(this.end)}}),Object.assign(Vn,{getNormal:function(){var t=new Ve;return function(e,n,r,i){void 0===i&&(console.warn("THREE.Triangle: .getNormal() target is now required"),i=new Ve),i.subVectors(r,n),t.subVectors(e,n),i.cross(t);var o=i.lengthSq();return o>0?i.multiplyScalar(1/Math.sqrt(o)):i.set(0,0,0)}}(),getBarycoord:function(){var t=new Ve,e=new Ve,n=new Ve;return function(r,i,o,a,s){t.subVectors(a,i),e.subVectors(o,i),n.subVectors(r,i);var c=t.dot(t),u=t.dot(e),h=t.dot(n),l=e.dot(e),d=e.dot(n),p=c*l-u*u;if(void 0===s&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),s=new Ve),0===p)return s.set(-2,-1,-1);var f=1/p,m=(l*h-u*d)*f,g=(c*d-u*h)*f;return s.set(1-m-g,g,m)}}(),containsPoint:function(){var t=new Ve;return function(e,n,r,i){return Vn.getBarycoord(e,n,r,i,t),t.x>=0&&t.y>=0&&t.x+t.y<=1}}()}),Object.assign(Vn.prototype,{set:function(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this},setFromPointsAndIndices:function(t,e,n,r){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[r]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},getArea:function(){var t=new Ve,e=new Ve;return function(){return t.subVectors(this.c,this.b),e.subVectors(this.a,this.b),.5*t.cross(e).length()}}(),getMidpoint:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new Ve),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(t){return Vn.getNormal(this.a,this.b,this.c,t)},getPlane:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new Ve),t.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(t,e){return Vn.getBarycoord(t,this.a,this.b,this.c,e)},containsPoint:function(t){return Vn.containsPoint(t,this.a,this.b,this.c)},intersectsBox:function(t){return t.intersectsTriangle(this)},closestPointToPoint:function(){var t=new Ke,e=[new Hn,new Hn,new Hn],n=new Ve,r=new Ve;return function(i,o){void 0===o&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),o=new Ve);var a=1/0;if(t.setFromCoplanarPoints(this.a,this.b,this.c),t.projectPoint(i,n),!0===this.containsPoint(n))o.copy(n);else{e[0].set(this.a,this.b),e[1].set(this.b,this.c),e[2].set(this.c,this.a);for(var s=0;s<e.length;s++){e[s].closestPointToPoint(n,!0,r);var c=n.distanceToSquared(r);c<a&&(a=c,o.copy(r))}}return o}}(),equals:function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}),kn.prototype=Object.assign(Object.create(dn.prototype),{constructor:kn,isMesh:!0,setDrawMode:function(t){this.drawMode=t},copy:function(t){return dn.prototype.copy.call(this,t),this.drawMode=t.drawMode,void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this},updateMorphTargets:function(){var t,e,n,r=this.geometry;if(r.isBufferGeometry){var i=r.morphAttributes,o=Object.keys(i);if(o.length>0){var a=i[o[0]];if(void 0!==a)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=a.length;t<e;t++)n=a[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}}else{var s=r.morphTargets;if(void 0!==s&&s.length>0)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=s.length;t<e;t++)n=s[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}},raycast:function(){var t=new Ge,e=new Gn,n=new Qe,r=new Ve,i=new Ve,o=new Ve,a=new Ve,s=new Ve,c=new Ve,u=new ze,h=new ze,l=new ze,d=new Ve,p=new Ve,f=new Ve;function m(t,e,n,r,i,o,a){return Vn.getBarycoord(t,e,n,r,d),i.multiplyScalar(d.x),o.multiplyScalar(d.y),a.multiplyScalar(d.z),i.add(o).add(a),i.clone()}function g(t,e,n,r,i,o,a,s){if(null===(e.side===v?r.intersectTriangle(a,o,i,!0,s):r.intersectTriangle(i,o,a,e.side!==y,s)))return null;f.copy(s),f.applyMatrix4(t.matrixWorld);var c=n.ray.origin.distanceTo(f);return c<n.near||c>n.far?null:{distance:c,point:f.clone(),object:t}}function x(t,e,n,a,s,c,d,f,v){r.fromBufferAttribute(s,d),i.fromBufferAttribute(s,f),o.fromBufferAttribute(s,v);var y=g(t,e,n,a,r,i,o,p);if(y){c&&(u.fromBufferAttribute(c,d),h.fromBufferAttribute(c,f),l.fromBufferAttribute(c,v),y.uv=m(p,r,i,o,u,h,l));var x=new mn(d,f,v);Vn.getNormal(r,i,o,x.normal),y.face=x}return y}return function(d,f){var v,y=this.geometry,b=this.material,_=this.matrixWorld;if(void 0!==b&&(null===y.boundingSphere&&y.computeBoundingSphere(),n.copy(y.boundingSphere),n.applyMatrix4(_),!1!==d.ray.intersectsSphere(n)&&(t.getInverse(_),e.copy(d.ray).applyMatrix4(t),null===y.boundingBox||!1!==e.intersectsBox(y.boundingBox))))if(y.isBufferGeometry){var w,M,E,T,S,A,R,L,C,P=y.index,O=y.attributes.position,I=y.attributes.uv,N=y.groups,D=y.drawRange;if(null!==P)if(Array.isArray(b))for(T=0,A=N.length;T<A;T++)for(C=b[(L=N[T]).materialIndex],S=Math.max(L.start,D.start),R=Math.min(L.start+L.count,D.start+D.count);S<R;S+=3)w=P.getX(T),M=P.getX(T+1),E=P.getX(T+2),(v=x(this,C,d,e,O,I,w,M,E))&&(v.faceIndex=Math.floor(T/3),f.push(v));else for(T=Math.max(0,D.start),A=Math.min(P.count,D.start+D.count);T<A;T+=3)w=P.getX(T),M=P.getX(T+1),E=P.getX(T+2),(v=x(this,b,d,e,O,I,w,M,E))&&(v.faceIndex=Math.floor(T/3),f.push(v));else if(void 0!==O)if(Array.isArray(b))for(T=0,A=N.length;T<A;T++)for(C=b[(L=N[T]).materialIndex],S=Math.max(L.start,D.start),R=Math.min(L.start+L.count,D.start+D.count);S<R;S+=3)(v=x(this,C,d,e,O,I,w=S,M=S+1,E=S+2))&&(v.faceIndex=Math.floor(T/3),f.push(v));else for(T=Math.max(0,D.start),A=Math.min(O.count,D.start+D.count);T<A;T+=3)(v=x(this,b,d,e,O,I,w=T,M=T+1,E=T+2))&&(v.faceIndex=Math.floor(T/3),f.push(v))}else if(y.isGeometry){var U,B,F,z,G=Array.isArray(b),H=y.vertices,V=y.faces,k=y.faceVertexUvs[0];k.length>0&&(z=k);for(var j=0,W=V.length;j<W;j++){var X=V[j],q=G?b[X.materialIndex]:b;if(void 0!==q){if(U=H[X.a],B=H[X.b],F=H[X.c],!0===q.morphTargets){var Y=y.morphTargets,Z=this.morphTargetInfluences;r.set(0,0,0),i.set(0,0,0),o.set(0,0,0);for(var J=0,Q=Y.length;J<Q;J++){var K=Z[J];if(0!==K){var $=Y[J].vertices;r.addScaledVector(a.subVectors($[X.a],U),K),i.addScaledVector(s.subVectors($[X.b],B),K),o.addScaledVector(c.subVectors($[X.c],F),K)}}r.add(U),i.add(B),o.add(F),U=r,B=i,F=o}if(v=g(this,q,d,e,U,B,F,p)){if(z&&z[j]){var tt=z[j];u.copy(tt[0]),h.copy(tt[1]),l.copy(tt[2]),v.uv=m(p,U,B,F,u,h,l)}v.face=X,v.faceIndex=j,f.push(v)}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Wn.prototype=Object.create(We.prototype),Wn.prototype.constructor=Wn,Wn.prototype.isCubeTexture=!0,Object.defineProperty(Wn.prototype,"images",{get:function(){return this.image},set:function(t){this.image=t}});var Xn=new We,qn=new Wn;function Yn(){this.seq=[],this.map={}}var Zn=[],Jn=[],Qn=new Float32Array(16),Kn=new Float32Array(9),$n=new Float32Array(4);function tr(t,e,n){var r=t[0];if(r<=0||r>0)return t;var i=e*n,o=Zn[i];if(void 0===o&&(o=new Float32Array(i),Zn[i]=o),0!==e){r.toArray(o,0);for(var a=1,s=0;a!==e;++a)s+=n,t[a].toArray(o,s)}return o}function er(t,e){if(t.length!==e.length)return!1;for(var n=0,r=t.length;n<r;n++)if(t[n]!==e[n])return!1;return!0}function nr(t,e){for(var n=0,r=e.length;n<r;n++)t[n]=e[n]}function rr(t,e){var n=Jn[e];void 0===n&&(n=new Int32Array(e),Jn[e]=n);for(var r=0;r!==e;++r)n[r]=t.allocTextureUnit();return n}function ir(t,e){var n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function or(t,e){var n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function ar(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(er(n,e))return;t.uniform2fv(this.addr,e),nr(n,e)}}function sr(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(er(n,e))return;t.uniform3fv(this.addr,e),nr(n,e)}}function cr(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(er(n,e))return;t.uniform4fv(this.addr,e),nr(n,e)}}function ur(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(er(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),nr(n,e)}else{if(er(n,r))return;$n.set(r),t.uniformMatrix2fv(this.addr,!1,$n),nr(n,r)}}function hr(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(er(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),nr(n,e)}else{if(er(n,r))return;Kn.set(r),t.uniformMatrix3fv(this.addr,!1,Kn),nr(n,r)}}function lr(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(er(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),nr(n,e)}else{if(er(n,r))return;Qn.set(r),t.uniformMatrix4fv(this.addr,!1,Qn),nr(n,r)}}function dr(t,e,n){var r=this.cache,i=n.allocTextureUnit();r[0]!==i&&(t.uniform1i(this.addr,i),r[0]=i),n.setTexture2D(e||Xn,i)}function pr(t,e,n){var r=this.cache,i=n.allocTextureUnit();r[0]!==i&&(t.uniform1i(this.addr,i),r[0]=i),n.setTextureCube(e||qn,i)}function fr(t,e){var n=this.cache;er(n,e)||(t.uniform2iv(this.addr,e),nr(n,e))}function mr(t,e){var n=this.cache;er(n,e)||(t.uniform3iv(this.addr,e),nr(n,e))}function gr(t,e){var n=this.cache;er(n,e)||(t.uniform4iv(this.addr,e),nr(n,e))}function vr(t,e){var n=this.cache;er(n,e)||(t.uniform1fv(this.addr,e),nr(n,e))}function yr(t,e){var n=this.cache;er(n,e)||(t.uniform1iv(this.addr,e),nr(n,e))}function xr(t,e){var n=this.cache,r=tr(e,this.size,2);er(n,r)||(t.uniform2fv(this.addr,r),this.updateCache(r))}function br(t,e){var n=this.cache,r=tr(e,this.size,3);er(n,r)||(t.uniform3fv(this.addr,r),this.updateCache(r))}function _r(t,e){var n=this.cache,r=tr(e,this.size,4);er(n,r)||(t.uniform4fv(this.addr,r),this.updateCache(r))}function wr(t,e){var n=this.cache,r=tr(e,this.size,4);er(n,r)||(t.uniformMatrix2fv(this.addr,!1,r),this.updateCache(r))}function Mr(t,e){var n=this.cache,r=tr(e,this.size,9);er(n,r)||(t.uniformMatrix3fv(this.addr,!1,r),this.updateCache(r))}function Er(t,e){var n=this.cache,r=tr(e,this.size,16);er(n,r)||(t.uniformMatrix4fv(this.addr,!1,r),this.updateCache(r))}function Tr(t,e,n){var r=this.cache,i=e.length,o=rr(n,i);!1===er(r,o)&&(t.uniform1iv(this.addr,o),nr(r,o));for(var a=0;a!==i;++a)n.setTexture2D(e[a]||Xn,o[a])}function Sr(t,e,n){var r=this.cache,i=e.length,o=rr(n,i);!1===er(r,o)&&(t.uniform1iv(this.addr,o),nr(r,o));for(var a=0;a!==i;++a)n.setTextureCube(e[a]||qn,o[a])}function Ar(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=function(t){switch(t){case 5126:return ir;case 35664:return ar;case 35665:return sr;case 35666:return cr;case 35674:return ur;case 35675:return hr;case 35676:return lr;case 35678:case 36198:return dr;case 35680:return pr;case 5124:case 35670:return or;case 35667:case 35671:return fr;case 35668:case 35672:return mr;case 35669:case 35673:return gr}}(e.type)}function Rr(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return vr;case 35664:return xr;case 35665:return br;case 35666:return _r;case 35674:return wr;case 35675:return Mr;case 35676:return Er;case 35678:return Tr;case 35680:return Sr;case 5124:case 35670:return yr;case 35667:case 35671:return fr;case 35668:case 35672:return mr;case 35669:case 35673:return gr}}(e.type)}function Lr(t){this.id=t,Yn.call(this)}Rr.prototype.updateCache=function(t){var e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),nr(e,t)},Lr.prototype.setValue=function(t,e){for(var n=this.seq,r=0,i=n.length;r!==i;++r){var o=n[r];o.setValue(t,e[o.id])}};var Cr=/([\w\d_]+)(\])?(\[|\.)?/g;function Pr(t,e){t.seq.push(e),t.map[e.id]=e}function Or(t,e,n){var r=t.name,i=r.length;for(Cr.lastIndex=0;;){var o=Cr.exec(r),a=Cr.lastIndex,s=o[1],c="]"===o[2],u=o[3];if(c&&(s|=0),void 0===u||"["===u&&a+2===i){Pr(n,void 0===u?new Ar(s,t,e):new Rr(s,t,e));break}var h=n.map[s];void 0===h&&Pr(n,h=new Lr(s)),n=h}}function Ir(t,e,n){Yn.call(this),this.renderer=n;for(var r=t.getProgramParameter(e,t.ACTIVE_UNIFORMS),i=0;i<r;++i){var o=t.getActiveUniform(e,i);Or(o,t.getUniformLocation(e,o.name),this)}}function Nr(t,e,n){var r=t.createShader(e);return t.shaderSource(r,n),t.compileShader(r),!1===t.getShaderParameter(r,t.COMPILE_STATUS)&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==t.getShaderInfoLog(r)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",e===t.VERTEX_SHADER?"vertex":"fragment",t.getShaderInfoLog(r),function(t){for(var e=t.split("\n"),n=0;n<e.length;n++)e[n]=n+1+": "+e[n];return e.join("\n")}(n)),r}Ir.prototype.setValue=function(t,e,n){var r=this.map[e];void 0!==r&&r.setValue(t,n,this.renderer)},Ir.prototype.setOptional=function(t,e,n){var r=e[n];void 0!==r&&this.setValue(t,n,r)},Ir.upload=function(t,e,n,r){for(var i=0,o=e.length;i!==o;++i){var a=e[i],s=n[a.id];!1!==s.needsUpdate&&a.setValue(t,s.value,r)}},Ir.seqWithValue=function(t,e){for(var n=[],r=0,i=t.length;r!==i;++r){var o=t[r];o.id in e&&n.push(o)}return n};var Dr=0;function Ur(t){switch(t){case Se:return["Linear","( value )"];case Ae:return["sRGB","( value )"];case Le:return["RGBE","( value )"];case Pe:return["RGBM","( value, 7.0 )"];case Oe:return["RGBM","( value, 16.0 )"];case Ie:return["RGBD","( value, 256.0 )"];case Re:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+t)}}function Br(t,e){var n=Ur(e);return"vec4 "+t+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function Fr(t){return""!==t}function zr(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights)}function Gr(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}function Hr(t){return t.replace(/^[ \t]*#include +<([\w\d.]+)>/gm,function(t,e){var n=tn[e];if(void 0===n)throw new Error("Can not resolve #include <"+e+">");return Hr(n)})}function Vr(t){return t.replace(/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,function(t,e,n,r){for(var i="",o=parseInt(e);o<parseInt(n);o++)i+=r.replace(/\[ i \]/g,"[ "+o+" ]");return i})}function kr(t,e,n,r,i,o){var a=t.context,s=r.defines,c=i.vertexShader,u=i.fragmentShader,h="SHADOWMAP_TYPE_BASIC";o.shadowMapType===f?h="SHADOWMAP_TYPE_PCF":o.shadowMapType===m&&(h="SHADOWMAP_TYPE_PCF_SOFT");var l="ENVMAP_TYPE_CUBE",d="ENVMAP_MODE_REFLECTION",p="ENVMAP_BLENDING_MULTIPLY";if(o.envMap){switch(r.envMap.mapping){case ut:case ht:l="ENVMAP_TYPE_CUBE";break;case ft:case mt:l="ENVMAP_TYPE_CUBE_UV";break;case lt:case dt:l="ENVMAP_TYPE_EQUIREC";break;case pt:l="ENVMAP_TYPE_SPHERE"}switch(r.envMap.mapping){case ht:case dt:d="ENVMAP_MODE_REFRACTION"}switch(r.combine){case tt:p="ENVMAP_BLENDING_MULTIPLY";break;case et:p="ENVMAP_BLENDING_MIX";break;case nt:p="ENVMAP_BLENDING_ADD"}}var g,v,y=t.gammaFactor>0?t.gammaFactor:1,x=function(t,e,n){return[(t=t||{}).derivatives||e.envMapCubeUV||e.bumpMap||e.normalMap&&!e.objectSpaceNormalMap||e.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(t.fragDepth||e.logarithmicDepthBuffer)&&n.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",t.drawBuffers&&n.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(t.shaderTextureLOD||e.envMap)&&n.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Fr).join("\n")}(r.extensions,o,e),b=function(t){var e=[];for(var n in t){var r=t[n];!1!==r&&e.push("#define "+n+" "+r)}return e.join("\n")}(s),_=a.createProgram();r.isRawShaderMaterial?((g=[b].filter(Fr).join("\n")).length>0&&(g+="\n"),(v=[x,b].filter(Fr).join("\n")).length>0&&(v+="\n")):(g=["precision "+o.precision+" float;","precision "+o.precision+" int;","#define SHADER_NAME "+i.name,b,o.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+y,"#define MAX_BONES "+o.maxBones,o.useFog&&o.fog?"#define USE_FOG":"",o.useFog&&o.fogExp?"#define FOG_EXP2":"",o.map?"#define USE_MAP":"",o.envMap?"#define USE_ENVMAP":"",o.envMap?"#define "+d:"",o.lightMap?"#define USE_LIGHTMAP":"",o.aoMap?"#define USE_AOMAP":"",o.emissiveMap?"#define USE_EMISSIVEMAP":"",o.bumpMap?"#define USE_BUMPMAP":"",o.normalMap?"#define USE_NORMALMAP":"",o.normalMap&&o.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",o.displacementMap&&o.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",o.specularMap?"#define USE_SPECULARMAP":"",o.roughnessMap?"#define USE_ROUGHNESSMAP":"",o.metalnessMap?"#define USE_METALNESSMAP":"",o.alphaMap?"#define USE_ALPHAMAP":"",o.vertexColors?"#define USE_COLOR":"",o.flatShading?"#define FLAT_SHADED":"",o.skinning?"#define USE_SKINNING":"",o.useVertexTexture?"#define BONE_TEXTURE":"",o.morphTargets?"#define USE_MORPHTARGETS":"",o.morphNormals&&!1===o.flatShading?"#define USE_MORPHNORMALS":"",o.doubleSided?"#define DOUBLE_SIDED":"",o.flipSided?"#define FLIP_SIDED":"",o.shadowMapEnabled?"#define USE_SHADOWMAP":"",o.shadowMapEnabled?"#define "+h:"",o.sizeAttenuation?"#define USE_SIZEATTENUATION":"",o.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",o.logarithmicDepthBuffer&&e.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Fr).join("\n"),v=[x,"precision "+o.precision+" float;","precision "+o.precision+" int;","#define SHADER_NAME "+i.name,b,o.alphaTest?"#define ALPHATEST "+o.alphaTest+(o.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+y,o.useFog&&o.fog?"#define USE_FOG":"",o.useFog&&o.fogExp?"#define FOG_EXP2":"",o.map?"#define USE_MAP":"",o.envMap?"#define USE_ENVMAP":"",o.envMap?"#define "+l:"",o.envMap?"#define "+d:"",o.envMap?"#define "+p:"",o.lightMap?"#define USE_LIGHTMAP":"",o.aoMap?"#define USE_AOMAP":"",o.emissiveMap?"#define USE_EMISSIVEMAP":"",o.bumpMap?"#define USE_BUMPMAP":"",o.normalMap?"#define USE_NORMALMAP":"",o.normalMap&&o.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",o.specularMap?"#define USE_SPECULARMAP":"",o.roughnessMap?"#define USE_ROUGHNESSMAP":"",o.metalnessMap?"#define USE_METALNESSMAP":"",o.alphaMap?"#define USE_ALPHAMAP":"",o.vertexColors?"#define USE_COLOR":"",o.gradientMap?"#define USE_GRADIENTMAP":"",o.flatShading?"#define FLAT_SHADED":"",o.doubleSided?"#define DOUBLE_SIDED":"",o.flipSided?"#define FLIP_SIDED":"",o.shadowMapEnabled?"#define USE_SHADOWMAP":"",o.shadowMapEnabled?"#define "+h:"",o.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",o.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",o.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",o.logarithmicDepthBuffer&&e.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",o.envMap&&e.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",o.toneMapping!==rt?"#define TONE_MAPPING":"",o.toneMapping!==rt?tn.tonemapping_pars_fragment:"",o.toneMapping!==rt?function(t,e){var n;switch(e){case it:n="Linear";break;case ot:n="Reinhard";break;case at:n="Uncharted2";break;case st:n="OptimizedCineon";break;default:throw new Error("unsupported toneMapping: "+e)}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}("toneMapping",o.toneMapping):"",o.dithering?"#define DITHERING":"",o.outputEncoding||o.mapEncoding||o.envMapEncoding||o.emissiveMapEncoding?tn.encodings_pars_fragment:"",o.mapEncoding?Br("mapTexelToLinear",o.mapEncoding):"",o.envMapEncoding?Br("envMapTexelToLinear",o.envMapEncoding):"",o.emissiveMapEncoding?Br("emissiveMapTexelToLinear",o.emissiveMapEncoding):"",o.outputEncoding?function(t,e){var n=Ur(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}("linearToOutputTexel",o.outputEncoding):"",o.depthPacking?"#define DEPTH_PACKING "+r.depthPacking:"","\n"].filter(Fr).join("\n")),c=Gr(c=zr(c=Hr(c),o),o),u=Gr(u=zr(u=Hr(u),o),o);var w=g+(c=Vr(c)),M=v+(u=Vr(u)),E=Nr(a,a.VERTEX_SHADER,w),T=Nr(a,a.FRAGMENT_SHADER,M);a.attachShader(_,E),a.attachShader(_,T),void 0!==r.index0AttributeName?a.bindAttribLocation(_,0,r.index0AttributeName):!0===o.morphTargets&&a.bindAttribLocation(_,0,"position"),a.linkProgram(_);var S,A,R=a.getProgramInfoLog(_).trim(),L=a.getShaderInfoLog(E).trim(),C=a.getShaderInfoLog(T).trim(),P=!0,O=!0;return!1===a.getProgramParameter(_,a.LINK_STATUS)?(P=!1,console.error("THREE.WebGLProgram: shader error: ",a.getError(),"gl.VALIDATE_STATUS",a.getProgramParameter(_,a.VALIDATE_STATUS),"gl.getProgramInfoLog",R,L,C)):""!==R?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",R):""!==L&&""!==C||(O=!1),O&&(this.diagnostics={runnable:P,material:r,programLog:R,vertexShader:{log:L,prefix:g},fragmentShader:{log:C,prefix:v}}),a.deleteShader(E),a.deleteShader(T),this.getUniforms=function(){return void 0===S&&(S=new Ir(a,_,t)),S},this.getAttributes=function(){return void 0===A&&(A=function(t,e){for(var n={},r=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES),i=0;i<r;i++){var o=t.getActiveAttrib(e,i).name;n[o]=t.getAttribLocation(e,o)}return n}(a,_)),A},this.destroy=function(){a.deleteProgram(_),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.name=i.name,this.id=Dr++,this.code=n,this.usedTimes=1,this.program=_,this.vertexShader=E,this.fragmentShader=T,this}function jr(t,e,n){var r=[],i={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow"},o=["precision","supportsVertexTextures","map","mapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering"];function a(t,e){var n;return t?t.isTexture?n=t.encoding:t.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),n=t.texture.encoding):n=Se,n===Se&&e&&(n=Re),n}this.getParameters=function(e,r,o,s,c,u,h){var l=i[e.type],d=h.isSkinnedMesh?function(t){var e=t.skeleton.bones;if(n.floatVertexTextures)return 1024;var r=n.maxVertexUniforms,i=Math.floor((r-20)/4),o=Math.min(i,e.length);return o<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+o+"."),0):o}(h):0,p=n.precision;null!==e.precision&&(p=n.getMaxPrecision(e.precision))!==e.precision&&console.warn("THREE.WebGLProgram.getParameters:",e.precision,"not supported, using",p,"instead.");var f=t.getRenderTarget();return{shaderID:l,precision:p,supportsVertexTextures:n.vertexTextures,outputEncoding:a(f?f.texture:null,t.gammaOutput),map:!!e.map,mapEncoding:a(e.map,t.gammaInput),envMap:!!e.envMap,envMapMode:e.envMap&&e.envMap.mapping,envMapEncoding:a(e.envMap,t.gammaInput),envMapCubeUV:!!e.envMap&&(e.envMap.mapping===ft||e.envMap.mapping===mt),lightMap:!!e.lightMap,aoMap:!!e.aoMap,emissiveMap:!!e.emissiveMap,emissiveMapEncoding:a(e.emissiveMap,t.gammaInput),bumpMap:!!e.bumpMap,normalMap:!!e.normalMap,objectSpaceNormalMap:e.normalMapType===Be,displacementMap:!!e.displacementMap,roughnessMap:!!e.roughnessMap,metalnessMap:!!e.metalnessMap,specularMap:!!e.specularMap,alphaMap:!!e.alphaMap,gradientMap:!!e.gradientMap,combine:e.combine,vertexColors:e.vertexColors,fog:!!s,useFog:e.fog,fogExp:s&&s.isFogExp2,flatShading:e.flatShading,sizeAttenuation:e.sizeAttenuation,logarithmicDepthBuffer:n.logarithmicDepthBuffer,skinning:e.skinning&&d>0,maxBones:d,useVertexTexture:n.floatVertexTextures,morphTargets:e.morphTargets,morphNormals:e.morphNormals,maxMorphTargets:t.maxMorphTargets,maxMorphNormals:t.maxMorphNormals,numDirLights:r.directional.length,numPointLights:r.point.length,numSpotLights:r.spot.length,numRectAreaLights:r.rectArea.length,numHemiLights:r.hemi.length,numClippingPlanes:c,numClipIntersection:u,dithering:e.dithering,shadowMapEnabled:t.shadowMap.enabled&&h.receiveShadow&&o.length>0,shadowMapType:t.shadowMap.type,toneMapping:t.toneMapping,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:e.premultipliedAlpha,alphaTest:e.alphaTest,doubleSided:e.side===y,flipSided:e.side===v,depthPacking:void 0!==e.depthPacking&&e.depthPacking}},this.getProgramCode=function(e,n){var r=[];if(n.shaderID?r.push(n.shaderID):(r.push(e.fragmentShader),r.push(e.vertexShader)),void 0!==e.defines)for(var i in e.defines)r.push(i),r.push(e.defines[i]);for(var a=0;a<o.length;a++)r.push(n[o[a]]);return r.push(e.onBeforeCompile.toString()),r.push(t.gammaOutput),r.join()},this.acquireProgram=function(n,i,o,a){for(var s,c=0,u=r.length;c<u;c++){var h=r[c];if(h.code===a){++(s=h).usedTimes;break}}return void 0===s&&(s=new kr(t,e,a,n,i,o),r.push(s)),s},this.releaseProgram=function(t){if(0==--t.usedTimes){var e=r.indexOf(t);r[e]=r[r.length-1],r.pop(),t.destroy()}},this.programs=r}function Wr(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program&&e.program&&t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Xr(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function qr(){var t={};return{get:function(e,n){var r=e.id+","+n.id,i=t[r];return void 0===i&&(i=new function(){var t=[],e=0,n=[],r=[];return{opaque:n,transparent:r,init:function(){e=0,n.length=0,r.length=0},push:function(i,o,a,s,c){var u=t[e];void 0===u?(u={id:i.id,object:i,geometry:o,material:a,program:a.program,renderOrder:i.renderOrder,z:s,group:c},t[e]=u):(u.id=i.id,u.object=i,u.geometry=o,u.material=a,u.program=a.program,u.renderOrder=i.renderOrder,u.z=s,u.group=c),(!0===a.transparent?r:n).push(u),e++},sort:function(){n.length>1&&n.sort(Wr),r.length>1&&r.sort(Xr)}}},t[r]=i),i},dispose:function(){t={}}}}var Yr=0;function Zr(){var t=new function(){var t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];var n;switch(e.type){case"DirectionalLight":n={direction:new Ve,color:new rn,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new ze};break;case"SpotLight":n={position:new Ve,direction:new Ve,color:new rn,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new ze};break;case"PointLight":n={position:new Ve,color:new rn,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new ze,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":n={direction:new Ve,skyColor:new rn,groundColor:new rn};break;case"RectAreaLight":n={color:new rn,position:new Ve,halfWidth:new Ve,halfHeight:new Ve}}return t[e.id]=n,n}}},e={id:Yr++,hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},n=new Ve,r=new Ge,i=new Ge;return{setup:function(o,a,s){for(var c=0,u=0,h=0,l=0,d=0,p=0,f=0,m=0,g=s.matrixWorldInverse,v=0,y=o.length;v<y;v++){var x=o[v],b=x.color,_=x.intensity,w=x.distance,M=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)c+=b.r*_,u+=b.g*_,h+=b.b*_;else if(x.isDirectionalLight){if((T=t.get(x)).color.copy(x.color).multiplyScalar(x.intensity),T.direction.setFromMatrixPosition(x.matrixWorld),n.setFromMatrixPosition(x.target.matrixWorld),T.direction.sub(n),T.direction.transformDirection(g),T.shadow=x.castShadow,x.castShadow){var E=x.shadow;T.shadowBias=E.bias,T.shadowRadius=E.radius,T.shadowMapSize=E.mapSize}e.directionalShadowMap[l]=M,e.directionalShadowMatrix[l]=x.shadow.matrix,e.directional[l]=T,l++}else if(x.isSpotLight)(T=t.get(x)).position.setFromMatrixPosition(x.matrixWorld),T.position.applyMatrix4(g),T.color.copy(b).multiplyScalar(_),T.distance=w,T.direction.setFromMatrixPosition(x.matrixWorld),n.setFromMatrixPosition(x.target.matrixWorld),T.direction.sub(n),T.direction.transformDirection(g),T.coneCos=Math.cos(x.angle),T.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),T.decay=0===x.distance?0:x.decay,T.shadow=x.castShadow,x.castShadow&&(E=x.shadow,T.shadowBias=E.bias,T.shadowRadius=E.radius,T.shadowMapSize=E.mapSize),e.spotShadowMap[p]=M,e.spotShadowMatrix[p]=x.shadow.matrix,e.spot[p]=T,p++;else if(x.isRectAreaLight)(T=t.get(x)).color.copy(b).multiplyScalar(_),T.position.setFromMatrixPosition(x.matrixWorld),T.position.applyMatrix4(g),i.identity(),r.copy(x.matrixWorld),r.premultiply(g),i.extractRotation(r),T.halfWidth.set(.5*x.width,0,0),T.halfHeight.set(0,.5*x.height,0),T.halfWidth.applyMatrix4(i),T.halfHeight.applyMatrix4(i),e.rectArea[f]=T,f++;else if(x.isPointLight)(T=t.get(x)).position.setFromMatrixPosition(x.matrixWorld),T.position.applyMatrix4(g),T.color.copy(x.color).multiplyScalar(x.intensity),T.distance=x.distance,T.decay=0===x.distance?0:x.decay,T.shadow=x.castShadow,x.castShadow&&(E=x.shadow,T.shadowBias=E.bias,T.shadowRadius=E.radius,T.shadowMapSize=E.mapSize,T.shadowCameraNear=E.camera.near,T.shadowCameraFar=E.camera.far),e.pointShadowMap[d]=M,e.pointShadowMatrix[d]=x.shadow.matrix,e.point[d]=T,d++;else if(x.isHemisphereLight){var T;(T=t.get(x)).direction.setFromMatrixPosition(x.matrixWorld),T.direction.transformDirection(g),T.direction.normalize(),T.skyColor.copy(x.color).multiplyScalar(_),T.groundColor.copy(x.groundColor).multiplyScalar(_),e.hemi[m]=T,m++}}e.ambient[0]=c,e.ambient[1]=u,e.ambient[2]=h,e.directional.length=l,e.spot.length=p,e.rectArea.length=f,e.point.length=d,e.hemi.length=m,e.hash=e.id+","+l+","+d+","+p+","+f+","+m+","+a.length},state:e}}function Jr(){var t={};return{get:function(e,n){var r=e.id+","+n.id,i=t[r];return void 0===i&&(i=new function(){var t=new Zr,e=[],n=[],r=[];return{init:function(){e.length=0,n.length=0,r.length=0},state:{lightsArray:e,shadowsArray:n,spritesArray:r,lights:t},setupLights:function(r){t.setup(e,n,r)},pushLight:function(t){e.push(t)},pushShadow:function(t){n.push(t)},pushSprite:function(t){r.push(t)}}},t[r]=i),i},dispose:function(){t={}}}}function Qr(t){Bn.call(this),this.type="MeshDepthMaterial",this.depthPacking=Ne,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(t)}function Kr(t){Bn.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new Ve,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(t)}function $r(t,e,n){for(var r=new $e,i=new Ge,o=new ze,a=new ze(n,n),s=new Ve,c=new Ve,u=1,h=2,l=1+(u|h),d=new Array(l),p=new Array(l),m={},x={0:v,1:g,2:y},b=[new Ve(1,0,0),new Ve(-1,0,0),new Ve(0,0,1),new Ve(0,0,-1),new Ve(0,1,0),new Ve(0,-1,0)],_=[new Ve(0,1,0),new Ve(0,1,0),new Ve(0,1,0),new Ve(0,1,0),new Ve(0,0,1),new Ve(0,0,-1)],w=[new Xe,new Xe,new Xe,new Xe,new Xe,new Xe],M=0;M!==l;++M){var E=0!=(M&u),T=0!=(M&h),S=new Qr({depthPacking:De,morphTargets:E,skinning:T});d[M]=S;var A=new Kr({morphTargets:E,skinning:T});p[M]=A}var R=this;function L(e,n,r,i,o,a){var s=e.geometry,c=null,l=d,f=e.customDepthMaterial;if(r&&(l=p,f=e.customDistanceMaterial),f)c=f;else{var g=!1;n.morphTargets&&(s&&s.isBufferGeometry?g=s.morphAttributes&&s.morphAttributes.position&&s.morphAttributes.position.length>0:s&&s.isGeometry&&(g=s.morphTargets&&s.morphTargets.length>0)),e.isSkinnedMesh&&!1===n.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",e);var v=e.isSkinnedMesh&&n.skinning,y=0;g&&(y|=u),v&&(y|=h),c=l[y]}if(t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){var b=c.uuid,_=n.uuid,w=m[b];void 0===w&&(w={},m[b]=w);var M=w[_];void 0===M&&(M=c.clone(),w[_]=M),c=M}return c.visible=n.visible,c.wireframe=n.wireframe,c.side=null!=n.shadowSide?n.shadowSide:x[n.side],c.clipShadows=n.clipShadows,c.clippingPlanes=n.clippingPlanes,c.clipIntersection=n.clipIntersection,c.wireframeLinewidth=n.wireframeLinewidth,c.linewidth=n.linewidth,r&&c.isMeshDistanceMaterial&&(c.referencePosition.copy(i),c.nearDistance=o,c.farDistance=a),c}function C(n,i,o,a){if(!1!==n.visible){if(n.layers.test(i.layers)&&(n.isMesh||n.isLine||n.isPoints)&&n.castShadow&&(!n.frustumCulled||r.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,n.matrixWorld);var s=e.update(n),u=n.material;if(Array.isArray(u))for(var h=s.groups,l=0,d=h.length;l<d;l++){var p=h[l],f=u[p.materialIndex];if(f&&f.visible){var m=L(n,f,a,c,o.near,o.far);t.renderBufferDirect(o,null,s,m,n,p)}}else if(u.visible){m=L(n,u,a,c,o.near,o.far);t.renderBufferDirect(o,null,s,m,n,null)}}for(var g=n.children,v=0,y=g.length;v<y;v++)C(g[v],i,o,a)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=f,this.render=function(e,n,u){if(!1!==R.enabled&&(!1!==R.autoUpdate||!1!==R.needsUpdate)&&0!==e.length){var h,l=t.context,d=t.state;d.disable(l.BLEND),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(var p=0,f=e.length;p<f;p++){var m=e[p],g=m.shadow,v=m&&m.isPointLight;if(void 0!==g){var y=g.camera;if(o.copy(g.mapSize),o.min(a),v){var x=o.x,M=o.y;w[0].set(2*x,M,x,M),w[1].set(0,M,x,M),w[2].set(3*x,M,x,M),w[3].set(x,M,x,M),w[4].set(3*x,0,x,M),w[5].set(x,0,x,M),o.x*=4,o.y*=2}if(null===g.map){var E={minFilter:xt,magFilter:xt,format:zt};g.map=new qe(o.x,o.y,E),g.map.texture.name=m.name+".shadowMap",y.updateProjectionMatrix()}g.isSpotLightShadow&&g.update(m);var T=g.map,S=g.matrix;c.setFromMatrixPosition(m.matrixWorld),y.position.copy(c),v?(h=6,S.makeTranslation(-c.x,-c.y,-c.z)):(h=1,s.setFromMatrixPosition(m.target.matrixWorld),y.lookAt(s),y.updateMatrixWorld(),S.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),S.multiply(y.projectionMatrix),S.multiply(y.matrixWorldInverse)),t.setRenderTarget(T),t.clear();for(var A=0;A<h;A++){if(v){s.copy(y.position),s.add(b[A]),y.up.copy(_[A]),y.lookAt(s),y.updateMatrixWorld();var L=w[A];d.viewport(L)}i.multiplyMatrices(y.projectionMatrix,y.matrixWorldInverse),r.setFromMatrix(i),C(n,u,y,v)}}else console.warn("THREE.WebGLShadowMap:",m,"has no shadow.")}R.needsUpdate=!1}}}function ti(t,e,n,r,i,o,a,s,c){We.call(this,t,e,n,r,i,o,a,s,c),this.needsUpdate=!0}function ei(t,e,n,r,i){var o,a,s,c,u,h,l=new Ve,d=new He,p=new Ve;function f(){var t=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),n=new Uint16Array([0,1,2,0,2,3]);o=e.createBuffer(),a=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,a),e.bufferData(e.ELEMENT_ARRAY_BUFFER,n,e.STATIC_DRAW),s=function(){var t=e.createProgram(),n=e.createShader(e.VERTEX_SHADER),r=e.createShader(e.FRAGMENT_SHADER);return e.shaderSource(n,["precision "+i.precision+" float;","#define SHADER_NAME SpriteMaterial","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform float rotation;","uniform vec2 center;","uniform vec2 scale;","uniform vec2 uvOffset;","uniform vec2 uvScale;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","varying float fogDepth;","void main() {","\tvUV = uvOffset + uv * uvScale;","\tvec2 alignedPosition = ( position - center ) * scale;","\tvec2 rotatedPosition;","\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;","\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;","\tvec4 mvPosition;","\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );","\tmvPosition.xy += rotatedPosition;","\tgl_Position = projectionMatrix * mvPosition;","\tfogDepth = - mvPosition.z;","}"].join("\n")),e.shaderSource(r,["precision "+i.precision+" float;","#define SHADER_NAME SpriteMaterial","uniform vec3 color;","uniform sampler2D map;","uniform float opacity;","uniform int fogType;","uniform vec3 fogColor;","uniform float fogDensity;","uniform float fogNear;","uniform float fogFar;","uniform float alphaTest;","varying vec2 vUV;","varying float fogDepth;","void main() {","\tvec4 texture = texture2D( map, vUV );","\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );","\tif ( gl_FragColor.a < alphaTest ) discard;","\tif ( fogType > 0 ) {","\t\tfloat fogFactor = 0.0;","\t\tif ( fogType == 1 ) {","\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );","\t\t} else {","\t\t\tconst float LOG2 = 1.442695;","\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );","\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );","\t\t}","\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );","\t}","}"].join("\n")),e.compileShader(n),e.compileShader(r),e.attachShader(t,n),e.attachShader(t,r),e.linkProgram(t),t}(),c={position:e.getAttribLocation(s,"position"),uv:e.getAttribLocation(s,"uv")},u={uvOffset:e.getUniformLocation(s,"uvOffset"),uvScale:e.getUniformLocation(s,"uvScale"),rotation:e.getUniformLocation(s,"rotation"),center:e.getUniformLocation(s,"center"),scale:e.getUniformLocation(s,"scale"),color:e.getUniformLocation(s,"color"),map:e.getUniformLocation(s,"map"),opacity:e.getUniformLocation(s,"opacity"),modelViewMatrix:e.getUniformLocation(s,"modelViewMatrix"),projectionMatrix:e.getUniformLocation(s,"projectionMatrix"),fogType:e.getUniformLocation(s,"fogType"),fogDensity:e.getUniformLocation(s,"fogDensity"),fogNear:e.getUniformLocation(s,"fogNear"),fogFar:e.getUniformLocation(s,"fogFar"),fogColor:e.getUniformLocation(s,"fogColor"),fogDepth:e.getUniformLocation(s,"fogDepth"),alphaTest:e.getUniformLocation(s,"alphaTest")};var r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");r.width=8,r.height=8;var l=r.getContext("2d");l.fillStyle="white",l.fillRect(0,0,8,8),h=new ti(r)}function m(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:e.id-t.id}this.render=function(i,g,v){if(0!==i.length){void 0===s&&f(),n.useProgram(s),n.initAttributes(),n.enableAttribute(c.position),n.enableAttribute(c.uv),n.disableUnusedAttributes(),n.disable(e.CULL_FACE),n.enable(e.BLEND),e.bindBuffer(e.ARRAY_BUFFER,o),e.vertexAttribPointer(c.position,2,e.FLOAT,!1,16,0),e.vertexAttribPointer(c.uv,2,e.FLOAT,!1,16,8),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,a),e.uniformMatrix4fv(u.projectionMatrix,!1,v.projectionMatrix.elements),n.activeTexture(e.TEXTURE0),e.uniform1i(u.map,0);var y=0,x=0,b=g.fog;b?(e.uniform3f(u.fogColor,b.color.r,b.color.g,b.color.b),b.isFog?(e.uniform1f(u.fogNear,b.near),e.uniform1f(u.fogFar,b.far),e.uniform1i(u.fogType,1),y=1,x=1):b.isFogExp2&&(e.uniform1f(u.fogDensity,b.density),e.uniform1i(u.fogType,2),y=2,x=2)):(e.uniform1i(u.fogType,0),y=0,x=0);for(var _=0,w=i.length;_<w;_++){(T=i[_]).modelViewMatrix.multiplyMatrices(v.matrixWorldInverse,T.matrixWorld),T.z=-T.modelViewMatrix.elements[14]}i.sort(m);var M=[],E=[];for(_=0,w=i.length;_<w;_++){var T,S=(T=i[_]).material;if(!1!==S.visible){T.onBeforeRender(t,g,v,void 0,S,void 0),e.uniform1f(u.alphaTest,S.alphaTest),e.uniformMatrix4fv(u.modelViewMatrix,!1,T.modelViewMatrix.elements),T.matrixWorld.decompose(l,d,p),M[0]=p.x,M[1]=p.y,E[0]=T.center.x-.5,E[1]=T.center.y-.5;var A=0;g.fog&&S.fog&&(A=x),y!==A&&(e.uniform1i(u.fogType,A),y=A),null!==S.map?(e.uniform2f(u.uvOffset,S.map.offset.x,S.map.offset.y),e.uniform2f(u.uvScale,S.map.repeat.x,S.map.repeat.y)):(e.uniform2f(u.uvOffset,0,0),e.uniform2f(u.uvScale,1,1)),e.uniform1f(u.opacity,S.opacity),e.uniform3f(u.color,S.color.r,S.color.g,S.color.b),e.uniform1f(u.rotation,S.rotation),e.uniform2fv(u.center,E),e.uniform2fv(u.scale,M),n.setBlending(S.blending,S.blendEquation,S.blendSrc,S.blendDst,S.blendEquationAlpha,S.blendSrcAlpha,S.blendDstAlpha,S.premultipliedAlpha),n.buffers.depth.setTest(S.depthTest),n.buffers.depth.setMask(S.depthWrite),n.buffers.color.setMask(S.colorWrite),r.setTexture2D(S.map||h,0),e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0),T.onAfterRender(t,g,v,void 0,S,void 0)}}n.enable(e.CULL_FACE),n.reset()}}}function ni(t,e,n,r,i,o,a){var s,c="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext,u={};function h(t,e){if(t.width>e||t.height>e){if("data"in t)return void console.warn("THREE.WebGLRenderer: image in DataTexture is too big ("+t.width+"x"+t.height+").");var n=e/Math.max(t.width,t.height),r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return r.width=Math.floor(t.width*n),r.height=Math.floor(t.height*n),r.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,r.width,r.height),console.warn("THREE.WebGLRenderer: image is too big ("+t.width+"x"+t.height+"). Resized to "+r.width+"x"+r.height,t),r}return t}function l(t){return Fe.isPowerOfTwo(t.width)&&Fe.isPowerOfTwo(t.height)}function d(t,e){return t.generateMipmaps&&e&&t.minFilter!==xt&&t.minFilter!==wt}function p(e,n,i,o){t.generateMipmap(e),r.get(n).__maxMipLevel=Math.log(Math.max(i,o))*Math.LOG2E}function f(e){return e===xt||e===bt||e===_t?t.NEAREST:t.LINEAR}function m(e){var n=e.target;n.removeEventListener("dispose",m),function(e){var n=r.get(e);if(e.image&&n.__image__webglTextureCube)t.deleteTexture(n.__image__webglTextureCube);else{if(void 0===n.__webglInit)return;t.deleteTexture(n.__webglTexture)}r.remove(e)}(n),n.isVideoTexture&&delete u[n.id],a.memory.textures--}function g(e){var n=e.target;n.removeEventListener("dispose",g),function(e){var n=r.get(e),i=r.get(e.texture);if(!e)return;void 0!==i.__webglTexture&&t.deleteTexture(i.__webglTexture);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLRenderTargetCube)for(var o=0;o<6;o++)t.deleteFramebuffer(n.__webglFramebuffer[o]),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer[o]);else t.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer);r.remove(e.texture),r.remove(e)}(n),a.memory.textures--}function v(e,f){var g=r.get(e);if(e.isVideoTexture&&function(t){var e=t.id,n=a.render.frame;u[e]!==n&&(u[e]=n,t.update())}(e),e.version>0&&g.__version!==e.version){var v=e.image;if(void 0===v)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",e);else{if(!1!==v.complete)return void function(e,r,u){void 0===e.__webglInit&&(e.__webglInit=!0,r.addEventListener("dispose",m),e.__webglTexture=t.createTexture(),a.memory.textures++);n.activeTexture(t.TEXTURE0+u),n.bindTexture(t.TEXTURE_2D,e.__webglTexture),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,r.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,r.unpackAlignment);var f=h(r.image,i.maxTextureSize);(function(t){return t.wrapS!==vt||t.wrapT!==vt||t.minFilter!==xt&&t.minFilter!==wt})(r)&&!1===l(f)&&(f=function(t){return t instanceof HTMLImageElement||t instanceof HTMLCanvasElement||t instanceof ImageBitmap?(void 0===s&&(s=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),s.width=Fe.floorPowerOfTwo(t.width),s.height=Fe.floorPowerOfTwo(t.height),s.getContext("2d").drawImage(t,0,0,s.width,s.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+t.width+"x"+t.height+"). Resized to "+s.width+"x"+s.height,t),s):t}(f));var g=l(f),v=o.convert(r.format),x=o.convert(r.type);y(t.TEXTURE_2D,r,g);var b,_=r.mipmaps;if(r.isDepthTexture){var w=t.DEPTH_COMPONENT;if(r.type===Pt){if(!c)throw new Error("Float Depth Texture only supported in WebGL2.0");w=t.DEPTH_COMPONENT32F}else c&&(w=t.DEPTH_COMPONENT16);r.format===kt&&w===t.DEPTH_COMPONENT&&r.type!==Rt&&r.type!==Ct&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=Rt,x=o.convert(r.type)),r.format===jt&&(w=t.DEPTH_STENCIL,r.type!==Ut&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=Ut,x=o.convert(r.type))),n.texImage2D(t.TEXTURE_2D,0,w,f.width,f.height,0,v,x,null)}else if(r.isDataTexture)if(_.length>0&&g){for(var M=0,E=_.length;M<E;M++)b=_[M],n.texImage2D(t.TEXTURE_2D,M,v,b.width,b.height,0,v,x,b.data);r.generateMipmaps=!1,e.__maxMipLevel=_.length-1}else n.texImage2D(t.TEXTURE_2D,0,v,f.width,f.height,0,v,x,f.data),e.__maxMipLevel=0;else if(r.isCompressedTexture){for(var M=0,E=_.length;M<E;M++)b=_[M],r.format!==zt&&r.format!==Ft?n.getCompressedTextureFormats().indexOf(v)>-1?n.compressedTexImage2D(t.TEXTURE_2D,M,v,b.width,b.height,0,b.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(t.TEXTURE_2D,M,v,b.width,b.height,0,v,x,b.data);e.__maxMipLevel=_.length-1}else if(_.length>0&&g){for(var M=0,E=_.length;M<E;M++)b=_[M],n.texImage2D(t.TEXTURE_2D,M,v,v,x,b);r.generateMipmaps=!1,e.__maxMipLevel=_.length-1}else n.texImage2D(t.TEXTURE_2D,0,v,v,x,f),e.__maxMipLevel=0;d(r,g)&&p(t.TEXTURE_2D,r,f.width,f.height);e.__version=r.version,r.onUpdate&&r.onUpdate(r)}(g,e,f);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",e)}}n.activeTexture(t.TEXTURE0+f),n.bindTexture(t.TEXTURE_2D,g.__webglTexture)}function y(n,a,s){var c;if(s?(t.texParameteri(n,t.TEXTURE_WRAP_S,o.convert(a.wrapS)),t.texParameteri(n,t.TEXTURE_WRAP_T,o.convert(a.wrapT)),t.texParameteri(n,t.TEXTURE_MAG_FILTER,o.convert(a.magFilter)),t.texParameteri(n,t.TEXTURE_MIN_FILTER,o.convert(a.minFilter))):(t.texParameteri(n,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(n,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),a.wrapS===vt&&a.wrapT===vt||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",a),t.texParameteri(n,t.TEXTURE_MAG_FILTER,f(a.magFilter)),t.texParameteri(n,t.TEXTURE_MIN_FILTER,f(a.minFilter)),a.minFilter!==xt&&a.minFilter!==wt&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",a)),c=e.get("EXT_texture_filter_anisotropic")){if(a.type===Pt&&null===e.get("OES_texture_float_linear"))return;if(a.type===Ot&&null===e.get("OES_texture_half_float_linear"))return;(a.anisotropy>1||r.get(a).__currentAnisotropy)&&(t.texParameterf(n,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,i.getMaxAnisotropy())),r.get(a).__currentAnisotropy=a.anisotropy)}}function x(e,i,a,s){var c=o.convert(i.texture.format),u=o.convert(i.texture.type);n.texImage2D(s,0,c,i.width,i.height,0,c,u,null),t.bindFramebuffer(t.FRAMEBUFFER,e),t.framebufferTexture2D(t.FRAMEBUFFER,a,s,r.get(i.texture).__webglTexture,0),t.bindFramebuffer(t.FRAMEBUFFER,null)}function b(e,n){t.bindRenderbuffer(t.RENDERBUFFER,e),n.depthBuffer&&!n.stencilBuffer?(t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_COMPONENT16,n.width,n.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.RENDERBUFFER,e)):n.depthBuffer&&n.stencilBuffer?(t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_STENCIL,n.width,n.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,e)):t.renderbufferStorage(t.RENDERBUFFER,t.RGBA4,n.width,n.height),t.bindRenderbuffer(t.RENDERBUFFER,null)}function _(e){var n=r.get(e),i=!0===e.isWebGLRenderTargetCube;if(e.depthTexture){if(i)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,n){if(n&&n.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(t.FRAMEBUFFER,e),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");r.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),v(n.depthTexture,0);var i=r.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===kt)t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,i,0);else{if(n.depthTexture.format!==jt)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,i,0)}}(n.__webglFramebuffer,e)}else if(i){n.__webglDepthbuffer=[];for(var o=0;o<6;o++)t.bindFramebuffer(t.FRAMEBUFFER,n.__webglFramebuffer[o]),n.__webglDepthbuffer[o]=t.createRenderbuffer(),b(n.__webglDepthbuffer[o],e)}else t.bindFramebuffer(t.FRAMEBUFFER,n.__webglFramebuffer),n.__webglDepthbuffer=t.createRenderbuffer(),b(n.__webglDepthbuffer,e);t.bindFramebuffer(t.FRAMEBUFFER,null)}this.setTexture2D=v,this.setTextureCube=function(e,s){var c=r.get(e);if(6===e.image.length)if(e.version>0&&c.__version!==e.version){c.__image__webglTextureCube||(e.addEventListener("dispose",m),c.__image__webglTextureCube=t.createTexture(),a.memory.textures++),n.activeTexture(t.TEXTURE0+s),n.bindTexture(t.TEXTURE_CUBE_MAP,c.__image__webglTextureCube),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,e.flipY);for(var u=e&&e.isCompressedTexture,f=e.image[0]&&e.image[0].isDataTexture,g=[],v=0;v<6;v++)g[v]=u||f?f?e.image[v].image:e.image[v]:h(e.image[v],i.maxCubemapSize);var x=g[0],b=l(x),_=o.convert(e.format),w=o.convert(e.type);for(y(t.TEXTURE_CUBE_MAP,e,b),v=0;v<6;v++)if(u)for(var M,E=g[v].mipmaps,T=0,S=E.length;T<S;T++)M=E[T],e.format!==zt&&e.format!==Ft?n.getCompressedTextureFormats().indexOf(_)>-1?n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+v,T,_,M.width,M.height,0,M.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+v,T,_,M.width,M.height,0,_,w,M.data);else f?n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+v,0,_,g[v].width,g[v].height,0,_,w,g[v].data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+v,0,_,_,w,g[v]);c.__maxMipLevel=u?E.length-1:0,d(e,b)&&p(t.TEXTURE_CUBE_MAP,e,x.width,x.height),c.__version=e.version,e.onUpdate&&e.onUpdate(e)}else n.activeTexture(t.TEXTURE0+s),n.bindTexture(t.TEXTURE_CUBE_MAP,c.__image__webglTextureCube)},this.setTextureCubeDynamic=function(e,i){n.activeTexture(t.TEXTURE0+i),n.bindTexture(t.TEXTURE_CUBE_MAP,r.get(e).__webglTexture)},this.setupRenderTarget=function(e){var i=r.get(e),o=r.get(e.texture);e.addEventListener("dispose",g),o.__webglTexture=t.createTexture(),a.memory.textures++;var s=!0===e.isWebGLRenderTargetCube,c=l(e);if(s){i.__webglFramebuffer=[];for(var u=0;u<6;u++)i.__webglFramebuffer[u]=t.createFramebuffer()}else i.__webglFramebuffer=t.createFramebuffer();if(s){for(n.bindTexture(t.TEXTURE_CUBE_MAP,o.__webglTexture),y(t.TEXTURE_CUBE_MAP,e.texture,c),u=0;u<6;u++)x(i.__webglFramebuffer[u],e,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+u);d(e.texture,c)&&p(t.TEXTURE_CUBE_MAP,e.texture,e.width,e.height),n.bindTexture(t.TEXTURE_CUBE_MAP,null)}else n.bindTexture(t.TEXTURE_2D,o.__webglTexture),y(t.TEXTURE_2D,e.texture,c),x(i.__webglFramebuffer,e,t.COLOR_ATTACHMENT0,t.TEXTURE_2D),d(e.texture,c)&&p(t.TEXTURE_2D,e.texture,e.width,e.height),n.bindTexture(t.TEXTURE_2D,null);e.depthBuffer&&_(e)},this.updateRenderTargetMipmap=function(e){var i=e.texture;if(d(i,l(e))){var o=e.isWebGLRenderTargetCube?t.TEXTURE_CUBE_MAP:t.TEXTURE_2D,a=r.get(i).__webglTexture;n.bindTexture(o,a),p(o,i,e.width,e.height),n.bindTexture(o,null)}}}function ri(t,e){return{convert:function(n){var r;if(n===gt)return t.REPEAT;if(n===vt)return t.CLAMP_TO_EDGE;if(n===yt)return t.MIRRORED_REPEAT;if(n===xt)return t.NEAREST;if(n===bt)return t.NEAREST_MIPMAP_NEAREST;if(n===_t)return t.NEAREST_MIPMAP_LINEAR;if(n===wt)return t.LINEAR;if(n===Mt)return t.LINEAR_MIPMAP_NEAREST;if(n===Et)return t.LINEAR_MIPMAP_LINEAR;if(n===Tt)return t.UNSIGNED_BYTE;if(n===It)return t.UNSIGNED_SHORT_4_4_4_4;if(n===Nt)return t.UNSIGNED_SHORT_5_5_5_1;if(n===Dt)return t.UNSIGNED_SHORT_5_6_5;if(n===St)return t.BYTE;if(n===At)return t.SHORT;if(n===Rt)return t.UNSIGNED_SHORT;if(n===Lt)return t.INT;if(n===Ct)return t.UNSIGNED_INT;if(n===Pt)return t.FLOAT;if(n===Ot&&null!==(r=e.get("OES_texture_half_float")))return r.HALF_FLOAT_OES;if(n===Bt)return t.ALPHA;if(n===Ft)return t.RGB;if(n===zt)return t.RGBA;if(n===Gt)return t.LUMINANCE;if(n===Ht)return t.LUMINANCE_ALPHA;if(n===kt)return t.DEPTH_COMPONENT;if(n===jt)return t.DEPTH_STENCIL;if(n===C)return t.FUNC_ADD;if(n===P)return t.FUNC_SUBTRACT;if(n===O)return t.FUNC_REVERSE_SUBTRACT;if(n===D)return t.ZERO;if(n===U)return t.ONE;if(n===B)return t.SRC_COLOR;if(n===F)return t.ONE_MINUS_SRC_COLOR;if(n===z)return t.SRC_ALPHA;if(n===G)return t.ONE_MINUS_SRC_ALPHA;if(n===H)return t.DST_ALPHA;if(n===V)return t.ONE_MINUS_DST_ALPHA;if(n===k)return t.DST_COLOR;if(n===j)return t.ONE_MINUS_DST_COLOR;if(n===W)return t.SRC_ALPHA_SATURATE;if((n===Wt||n===Xt||n===qt||n===Yt)&&null!==(r=e.get("WEBGL_compressed_texture_s3tc"))){if(n===Wt)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Xt)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===qt)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===Yt)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((n===Zt||n===Jt||n===Qt||n===Kt)&&null!==(r=e.get("WEBGL_compressed_texture_pvrtc"))){if(n===Zt)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===Jt)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===Qt)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===Kt)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===$t&&null!==(r=e.get("WEBGL_compressed_texture_etc1")))return r.COMPRESSED_RGB_ETC1_WEBGL;if((n===te||n===ee||n===ne||n===re||n===ie||n===oe||n===ae||n===se||n===ce||n===ue||n===he||n===le||n===de||n===pe)&&null!==(r=e.get("WEBGL_compressed_texture_astc")))return n;if((n===I||n===N)&&null!==(r=e.get("EXT_blend_minmax"))){if(n===I)return r.MIN_EXT;if(n===N)return r.MAX_EXT}return n===Ut&&null!==(r=e.get("WEBGL_depth_texture"))?r.UNSIGNED_INT_24_8_WEBGL:0}}}function ii(){dn.call(this),this.type="Group"}function oi(t,e,n,r){pn.call(this),this.type="PerspectiveCamera",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==n?n:.1,this.far=void 0!==r?r:2e3,this.focus=10,this.aspect=void 0!==e?e:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}function ai(t){oi.call(this),this.cameras=t||[]}function si(t){var e=this,n=null,r=null,i=null,o=[],a=new Ge,s=new Ge;"undefined"!=typeof window&&"VRFrameData"in window&&(r=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",v,!1));var c=new Ge,u=new He,h=new Ve,l=new oi;l.bounds=new Xe(0,0,.5,1),l.layers.enable(1);var d=new oi;d.bounds=new Xe(.5,0,.5,1),d.layers.enable(2);var p,f,m=new ai([l,d]);function g(){return null!==n&&!0===n.isPresenting}function v(){if(g()){var r=n.getEyeParameters("left"),i=r.renderWidth,o=r.renderHeight;f=t.getPixelRatio(),p=t.getSize(),t.setDrawingBufferSize(2*i,o,1),b.start()}else e.enabled&&(t.setDrawingBufferSize(p.width,p.height,f),b.stop())}m.layers.enable(1),m.layers.enable(2);var y=!1;function x(t){for(var e=navigator.getGamepads&&navigator.getGamepads(),n=0,r=0,i=e.length;n<i;n++){var o=e[n];if(o&&("Daydream Controller"===o.id||"Gear VR Controller"===o.id||"Oculus Go Controller"===o.id||"OpenVR Gamepad"===o.id||o.id.startsWith("Oculus Touch")||o.id.startsWith("Spatial Controller"))){if(r===t)return o;r++}}}this.enabled=!1,this.userHeight=1.6,this.getController=function(t){var e=o[t];return void 0===e&&((e=new ii).matrixAutoUpdate=!1,e.visible=!1,o[t]=e),e},this.getDevice=function(){return n},this.setDevice=function(t){void 0!==t&&(n=t),b.setContext(t)},this.setPoseTarget=function(t){void 0!==t&&(i=t)},this.getCamera=function(t){if(null===n)return t.position.set(0,e.userHeight,0),t;n.depthNear=t.near,n.depthFar=t.far,n.getFrameData(r);var p=n.stageParameters;p?a.fromArray(p.sittingToStandingTransform):a.makeTranslation(0,e.userHeight,0);var f=r.pose,g=null!==i?i:t;if(g.matrix.copy(a),g.matrix.decompose(g.position,g.quaternion,g.scale),null!==f.orientation&&(u.fromArray(f.orientation),g.quaternion.multiply(u)),null!==f.position&&(u.setFromRotationMatrix(a),h.fromArray(f.position),h.applyQuaternion(u),g.position.add(h)),g.updateMatrixWorld(),!1===n.isPresenting)return t;l.near=t.near,d.near=t.near,l.far=t.far,d.far=t.far,m.matrixWorld.copy(t.matrixWorld),m.matrixWorldInverse.copy(t.matrixWorldInverse),l.matrixWorldInverse.fromArray(r.leftViewMatrix),d.matrixWorldInverse.fromArray(r.rightViewMatrix),s.getInverse(a),l.matrixWorldInverse.multiply(s),d.matrixWorldInverse.multiply(s);var v=g.parent;null!==v&&(c.getInverse(v.matrixWorld),l.matrixWorldInverse.multiply(c),d.matrixWorldInverse.multiply(c)),l.matrixWorld.getInverse(l.matrixWorldInverse),d.matrixWorld.getInverse(d.matrixWorldInverse),l.projectionMatrix.fromArray(r.leftProjectionMatrix),d.projectionMatrix.fromArray(r.rightProjectionMatrix),m.projectionMatrix.copy(l.projectionMatrix);var b=n.getLayers();if(b.length){var _=b[0];null!==_.leftBounds&&4===_.leftBounds.length&&l.bounds.fromArray(_.leftBounds),null!==_.rightBounds&&4===_.rightBounds.length&&d.bounds.fromArray(_.rightBounds)}return function(){for(var t=0;t<o.length;t++){var e=o[t],n=x(t);if(void 0!==n&&void 0!==n.pose){if(null===n.pose)return;var r=n.pose;!1===r.hasPosition&&e.position.set(.2,-.6,-.05),null!==r.position&&e.position.fromArray(r.position),null!==r.orientation&&e.quaternion.fromArray(r.orientation),e.matrix.compose(e.position,e.quaternion,e.scale),e.matrix.premultiply(a),e.matrix.decompose(e.position,e.quaternion,e.scale),e.matrixWorldNeedsUpdate=!0,e.visible=!0;var i="Daydream Controller"===n.id?0:1;y!==n.buttons[i].pressed&&((y=n.buttons[i].pressed)?e.dispatchEvent({type:"selectstart"}):(e.dispatchEvent({type:"selectend"}),e.dispatchEvent({type:"select"})))}else e.visible=!1}}(),m},this.getStandingMatrix=function(){return a},this.isPresenting=g;var b=new sn;this.setAnimationLoop=function(t){b.setAnimationLoop(t)},this.submitFrame=function(){g()&&n.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",v)}}function ci(t){console.log("THREE.WebGLRenderer",o);var e=void 0!==(t=t||{}).canvas?t.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=void 0!==t.context?t.context:null,r=void 0!==t.alpha&&t.alpha,i=void 0===t.depth||t.depth,a=void 0===t.stencil||t.stencil,h=void 0!==t.antialias&&t.antialias,l=void 0===t.premultipliedAlpha||t.premultipliedAlpha,d=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,p=void 0!==t.powerPreference?t.powerPreference:"default",f=null,m=null;this.domElement=e,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=it,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var g,x,b,w,M,C,P,O,I,N,D,U,B,F,z,G,H,V,k,j=this,W=!1,tt=null,et=null,nt=null,rt=-1,ot="",at=null,st=null,ct=new Xe,ut=new Xe,ht=null,lt=0,dt=e.width,pt=e.height,ft=1,mt=new Xe(0,0,dt,pt),gt=new Xe(0,0,dt,pt),vt=!1,yt=new $e,xt=new function(){var t=this,e=null,n=0,r=!1,i=!1,o=new Ke,a=new ke,s={value:null,needsUpdate:!1};function c(){s.value!==e&&(s.value=e,s.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function u(e,n,r,i){var c=null!==e?e.length:0,u=null;if(0!==c){if(u=s.value,!0!==i||null===u){var h=r+4*c,l=n.matrixWorldInverse;a.getNormalMatrix(l),(null===u||u.length<h)&&(u=new Float32Array(h));for(var d=0,p=r;d!==c;++d,p+=4)o.copy(e[d]).applyMatrix4(l,a),o.normal.toArray(u,p),u[p+3]=o.constant}s.value=u,s.needsUpdate=!0}return t.numPlanes=c,u}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(t,i,o){var a=0!==t.length||i||0!==n||r;return r=i,e=u(t,o,0),n=t.length,a},this.beginShadows=function(){i=!0,u(null)},this.endShadows=function(){i=!1,c()},this.setState=function(t,o,a,h,l,d){if(!r||null===t||0===t.length||i&&!a)i?u(null):c();else{var p=i?0:n,f=4*p,m=l.clippingState||null;s.value=m,m=u(t,h,f,d);for(var g=0;g!==f;++g)m[g]=e[g];l.clippingState=m,this.numIntersection=o?this.numPlanes:0,this.numPlanes+=p}}},bt=!1,_t=!1,wt=new Ge,Mt=new Ve;function Et(){return null===et?ft:1}try{var St={alpha:r,depth:i,stencil:a,antialias:h,premultipliedAlpha:l,preserveDrawingBuffer:d,powerPreference:p};if(e.addEventListener("webglcontextlost",Ct,!1),e.addEventListener("webglcontextrestored",It,!1),null===(g=n||e.getContext("webgl",St)||e.getContext("experimental-webgl",St)))throw null!==e.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===g.getShaderPrecisionFormat&&(g.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){console.error("THREE.WebGLRenderer: "+t.message)}function At(){(x=new function(t){var e={};return{get:function(n){if(void 0!==e[n])return e[n];var r;switch(n){case"WEBGL_depth_texture":r=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=t.getExtension(n)}return null===r&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),e[n]=r,r}}}(g)).get("WEBGL_depth_texture"),x.get("OES_texture_float"),x.get("OES_texture_float_linear"),x.get("OES_texture_half_float"),x.get("OES_texture_half_float_linear"),x.get("OES_standard_derivatives"),x.get("OES_element_index_uint"),x.get("ANGLE_instanced_arrays"),k=new ri(g,x),b=new function(t,e,n){var r;function i(e){if("highp"===e){if(t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.HIGH_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.MEDIUM_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}var o=void 0!==n.precision?n.precision:"highp",a=i(o);a!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",a,"instead."),o=a);var s=!0===n.logarithmicDepthBuffer,c=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),u=t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS),h=t.getParameter(t.MAX_TEXTURE_SIZE),l=t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),d=t.getParameter(t.MAX_VERTEX_ATTRIBS),p=t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),f=t.getParameter(t.MAX_VARYING_VECTORS),m=t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),g=u>0,v=!!e.get("OES_texture_float");return{getMaxAnisotropy:function(){if(void 0!==r)return r;var n=e.get("EXT_texture_filter_anisotropic");return r=null!==n?t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:i,precision:o,logarithmicDepthBuffer:s,maxTextures:c,maxVertexTextures:u,maxTextureSize:h,maxCubemapSize:l,maxAttributes:d,maxVertexUniforms:p,maxVaryings:f,maxFragmentUniforms:m,vertexTextures:g,floatFragmentTextures:v,floatVertexTextures:g&&v}}(g,x,t),(w=new function(t,e,n){var r=new function(){var e=!1,n=new Xe,r=null,i=new Xe(0,0,0,0);return{setMask:function(n){r===n||e||(t.colorMask(n,n,n,n),r=n)},setLocked:function(t){e=t},setClear:function(e,r,o,a,s){!0===s&&(e*=a,r*=a,o*=a),n.set(e,r,o,a),!1===i.equals(n)&&(t.clearColor(e,r,o,a),i.copy(n))},reset:function(){e=!1,r=null,i.set(-1,0,0,0)}}},i=new function(){var e=!1,n=null,r=null,i=null;return{setTest:function(e){e?nt(t.DEPTH_TEST):rt(t.DEPTH_TEST)},setMask:function(r){n===r||e||(t.depthMask(r),n=r)},setFunc:function(e){if(r!==e){if(e)switch(e){case X:t.depthFunc(t.NEVER);break;case q:t.depthFunc(t.ALWAYS);break;case Y:t.depthFunc(t.LESS);break;case Z:t.depthFunc(t.LEQUAL);break;case J:t.depthFunc(t.EQUAL);break;case Q:t.depthFunc(t.GEQUAL);break;case K:t.depthFunc(t.GREATER);break;case $:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}else t.depthFunc(t.LEQUAL);r=e}},setLocked:function(t){e=t},setClear:function(e){i!==e&&(t.clearDepth(e),i=e)},reset:function(){e=!1,n=null,r=null,i=null}}},o=new function(){var e=!1,n=null,r=null,i=null,o=null,a=null,s=null,c=null,u=null;return{setTest:function(e){e?nt(t.STENCIL_TEST):rt(t.STENCIL_TEST)},setMask:function(r){n===r||e||(t.stencilMask(r),n=r)},setFunc:function(e,n,a){r===e&&i===n&&o===a||(t.stencilFunc(e,n,a),r=e,i=n,o=a)},setOp:function(e,n,r){a===e&&s===n&&c===r||(t.stencilOp(e,n,r),a=e,s=n,c=r)},setLocked:function(t){e=t},setClear:function(e){u!==e&&(t.clearStencil(e),u=e)},reset:function(){e=!1,n=null,r=null,i=null,o=null,a=null,s=null,c=null,u=null}}},a=t.getParameter(t.MAX_VERTEX_ATTRIBS),h=new Uint8Array(a),l=new Uint8Array(a),d=new Uint8Array(a),p={},f=null,m=null,g=null,x=null,b=null,_=null,w=null,M=null,C=null,P=!1,O=null,I=null,N=null,D=null,U=null,B=t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS),F=!1,z=0,G=t.getParameter(t.VERSION);-1!==G.indexOf("WebGL")?(z=parseFloat(/^WebGL\ ([0-9])/.exec(G)[1]),F=z>=1):-1!==G.indexOf("OpenGL ES")&&(z=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(G)[1]),F=z>=2);var H=null,V={},k=new Xe,j=new Xe;function W(e,n,r){var i=new Uint8Array(4),o=t.createTexture();t.bindTexture(e,o),t.texParameteri(e,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(e,t.TEXTURE_MAG_FILTER,t.NEAREST);for(var a=0;a<r;a++)t.texImage2D(n+a,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,i);return o}var tt={};function et(n,r){h[n]=1,0===l[n]&&(t.enableVertexAttribArray(n),l[n]=1),d[n]!==r&&(e.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(n,r),d[n]=r)}function nt(e){!0!==p[e]&&(t.enable(e),p[e]=!0)}function rt(e){!1!==p[e]&&(t.disable(e),p[e]=!1)}function it(e,r,i,o,a,s,c,u){if(e!==E?nt(t.BLEND):rt(t.BLEND),e!==L){if(e!==g||u!==P)switch(e){case S:u?(t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),t.blendFuncSeparate(t.ONE,t.ONE,t.ONE,t.ONE)):(t.blendEquation(t.FUNC_ADD),t.blendFunc(t.SRC_ALPHA,t.ONE));break;case A:u?(t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),t.blendFuncSeparate(t.ZERO,t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ONE_MINUS_SRC_ALPHA)):(t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ZERO,t.ONE_MINUS_SRC_COLOR));break;case R:u?(t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),t.blendFuncSeparate(t.ZERO,t.SRC_COLOR,t.ZERO,t.SRC_ALPHA)):(t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ZERO,t.SRC_COLOR));break;default:u?(t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),t.blendFuncSeparate(t.ONE,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA)):(t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA))}x=null,b=null,_=null,w=null,M=null,C=null}else a=a||r,s=s||i,c=c||o,r===x&&a===w||(t.blendEquationSeparate(n.convert(r),n.convert(a)),x=r,w=a),i===b&&o===_&&s===M&&c===C||(t.blendFuncSeparate(n.convert(i),n.convert(o),n.convert(s),n.convert(c)),b=i,_=o,M=s,C=c);g=e,P=u}function ot(e){O!==e&&(e?t.frontFace(t.CW):t.frontFace(t.CCW),O=e)}function at(e){e!==s?(nt(t.CULL_FACE),e!==I&&(e===c?t.cullFace(t.BACK):e===u?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):rt(t.CULL_FACE),I=e}function st(e,n,r){e?(nt(t.POLYGON_OFFSET_FILL),D===n&&U===r||(t.polygonOffset(n,r),D=n,U=r)):rt(t.POLYGON_OFFSET_FILL)}function ct(e){void 0===e&&(e=t.TEXTURE0+B-1),H!==e&&(t.activeTexture(e),H=e)}return tt[t.TEXTURE_2D]=W(t.TEXTURE_2D,t.TEXTURE_2D,1),tt[t.TEXTURE_CUBE_MAP]=W(t.TEXTURE_CUBE_MAP,t.TEXTURE_CUBE_MAP_POSITIVE_X,6),r.setClear(0,0,0,1),i.setClear(1),o.setClear(0),nt(t.DEPTH_TEST),i.setFunc(Z),ot(!1),at(c),nt(t.CULL_FACE),nt(t.BLEND),it(T),{buffers:{color:r,depth:i,stencil:o},initAttributes:function(){for(var t=0,e=h.length;t<e;t++)h[t]=0},enableAttribute:function(t){et(t,0)},enableAttributeAndDivisor:et,disableUnusedAttributes:function(){for(var e=0,n=l.length;e!==n;++e)l[e]!==h[e]&&(t.disableVertexAttribArray(e),l[e]=0)},enable:nt,disable:rt,getCompressedTextureFormats:function(){if(null===f&&(f=[],e.get("WEBGL_compressed_texture_pvrtc")||e.get("WEBGL_compressed_texture_s3tc")||e.get("WEBGL_compressed_texture_etc1")||e.get("WEBGL_compressed_texture_astc")))for(var n=t.getParameter(t.COMPRESSED_TEXTURE_FORMATS),r=0;r<n.length;r++)f.push(n[r]);return f},useProgram:function(e){return m!==e&&(t.useProgram(e),m=e,!0)},setBlending:it,setMaterial:function(e,n){e.side===y?rt(t.CULL_FACE):nt(t.CULL_FACE);var o=e.side===v;n&&(o=!o),ot(o),e.blending===T&&!1===e.transparent?it(E):it(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),i.setFunc(e.depthFunc),i.setTest(e.depthTest),i.setMask(e.depthWrite),r.setMask(e.colorWrite),st(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)},setFlipSided:ot,setCullFace:at,setLineWidth:function(e){e!==N&&(F&&t.lineWidth(e),N=e)},setPolygonOffset:st,setScissorTest:function(e){e?nt(t.SCISSOR_TEST):rt(t.SCISSOR_TEST)},activeTexture:ct,bindTexture:function(e,n){null===H&&ct();var r=V[H];void 0===r&&(r={type:void 0,texture:void 0},V[H]=r),r.type===e&&r.texture===n||(t.bindTexture(e,n||tt[e]),r.type=e,r.texture=n)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===k.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),k.copy(e))},viewport:function(e){!1===j.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),j.copy(e))},reset:function(){for(var e=0;e<l.length;e++)1===l[e]&&(t.disableVertexAttribArray(e),l[e]=0);p={},f=null,H=null,V={},m=null,g=null,O=null,I=null,r.reset(),i.reset(),o.reset()}}}(g,x,k)).scissor(ut.copy(gt).multiplyScalar(ft)),w.viewport(ct.copy(mt).multiplyScalar(ft)),M=new function(t){var e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(n,r,i){switch(i=i||1,e.calls++,r){case t.TRIANGLES:e.triangles+=i*(n/3);break;case t.TRIANGLE_STRIP:case t.TRIANGLE_FAN:e.triangles+=i*(n-2);break;case t.LINES:e.lines+=i*(n/2);break;case t.LINE_STRIP:e.lines+=i*(n-1);break;case t.LINE_LOOP:e.lines+=i*n;break;case t.POINTS:e.points+=i*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",r)}}}}(g),C=new function(){var t=new WeakMap;return{get:function(e){var n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,r){t.get(e)[n]=r},dispose:function(){t=new WeakMap}}},P=new ni(g,x,w,C,b,k,M),O=new cn(g),I=new function(t,e,n){var r={},i={};function o(t){var a=t.target,s=r[a.id];for(var c in null!==s.index&&e.remove(s.index),s.attributes)e.remove(s.attributes[c]);a.removeEventListener("dispose",o),delete r[a.id];var u=i[a.id];u&&(e.remove(u),delete i[a.id]),(u=i[s.id])&&(e.remove(u),delete i[s.id]),n.memory.geometries--}return{get:function(t,e){var i=r[e.id];return i||(e.addEventListener("dispose",o),e.isBufferGeometry?i=e:e.isGeometry&&(void 0===e._bufferGeometry&&(e._bufferGeometry=(new Pn).setFromObject(t)),i=e._bufferGeometry),r[e.id]=i,n.memory.geometries++,i)},update:function(n){var r=n.index,i=n.attributes;for(var o in null!==r&&e.update(r,t.ELEMENT_ARRAY_BUFFER),i)e.update(i[o],t.ARRAY_BUFFER);var a=n.morphAttributes;for(var o in a)for(var s=a[o],c=0,u=s.length;c<u;c++)e.update(s[c],t.ARRAY_BUFFER)},getWireframeAttribute:function(n){var r=i[n.id];if(r)return r;var o,a=[],s=n.index,c=n.attributes;if(null!==s)for(var u=0,h=(o=s.array).length;u<h;u+=3){var l=o[u+0],d=o[u+1],p=o[u+2];a.push(l,d,d,p,p,l)}else for(u=0,h=(o=c.position.array).length/3-1;u<h;u+=3)l=u+0,d=u+1,p=u+2,a.push(l,d,d,p,p,l);return r=new(Ln(a)>65535?Tn:Mn)(a,1),e.update(r,t.ELEMENT_ARRAY_BUFFER),i[n.id]=r,r}}}(g,O,M),N=new function(t,e){var n={};return{update:function(r){var i=e.render.frame,o=r.geometry,a=t.get(r,o);return n[a.id]!==i&&(o.isGeometry&&a.updateFromObject(r),t.update(a),n[a.id]=i),a},dispose:function(){n={}}}}(I,M),z=new function(t){var e={},n=new Float32Array(8);return{update:function(r,i,o,a){var s=r.morphTargetInfluences,c=s.length,u=e[i.id];if(void 0===u){u=[];for(var h=0;h<c;h++)u[h]=[h,0];e[i.id]=u}var l=o.morphTargets&&i.morphAttributes.position,d=o.morphNormals&&i.morphAttributes.normal;for(h=0;h<c;h++)0!==(p=u[h])[1]&&(l&&i.removeAttribute("morphTarget"+h),d&&i.removeAttribute("morphNormal"+h));for(h=0;h<c;h++)(p=u[h])[0]=h,p[1]=s[h];for(u.sort(jn),h=0;h<8;h++){var p;if(p=u[h]){var f=p[0],m=p[1];if(m){l&&i.addAttribute("morphTarget"+h,l[f]),d&&i.addAttribute("morphNormal"+h,d[f]),n[h]=m;continue}}n[h]=0}a.getUniforms().setValue(t,"morphTargetInfluences",n)}}}(g),D=new jr(j,x,b),U=new qr,B=new Jr,F=new function(t,e,n,r){var i,o,a,s=new rn(0),c=0;function u(t,n){e.buffers.color.setClear(t.r,t.g,t.b,n,r)}return{getClearColor:function(){return s},setClearColor:function(t,e){s.set(t),u(s,c=void 0!==e?e:1)},getClearAlpha:function(){return c},setClearAlpha:function(t){u(s,c=t)},render:function(e,r,h,l){var d=r.background;null===d?u(s,c):d&&d.isColor&&(u(d,1),l=!0),(t.autoClear||l)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),d&&d.isCubeTexture?(void 0===a&&((a=new kn(new In(1,1,1),new zn({uniforms:an.cube.uniforms,vertexShader:an.cube.vertexShader,fragmentShader:an.cube.fragmentShader,side:v,depthTest:!0,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),a.geometry.removeAttribute("uv"),a.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},n.update(a)),a.material.uniforms.tCube.value=d,e.push(a,a.geometry,a.material,0,null)):d&&d.isTexture&&(void 0===i&&(i=new fn(-1,1,1,-1,0,1),o=new kn(new Dn(2,2),new Fn({depthTest:!1,depthWrite:!1,fog:!1})),n.update(o)),o.material.map=d,t.renderBufferDirect(i,null,o.geometry,o.material,o,null))}}}(j,w,N,l),G=new function(t,e,n){var r;this.setMode=function(t){r=t},this.render=function(e,i){t.drawArrays(r,e,i),n.update(i,r)},this.renderInstances=function(t,i,o){var a=e.get("ANGLE_instanced_arrays");null!==a?(a.drawArraysInstancedANGLE(r,i,o,t.maxInstancedCount),n.update(o,r,t.maxInstancedCount)):console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.")}}(g,x,M),H=new function(t,e,n){var r,i,o;this.setMode=function(t){r=t},this.setIndex=function(t){i=t.type,o=t.bytesPerElement},this.render=function(e,a){t.drawElements(r,a,i,e*o),n.update(a,r)},this.renderInstances=function(t,a,s){var c=e.get("ANGLE_instanced_arrays");null!==c?(c.drawElementsInstancedANGLE(r,s,i,a*o,t.maxInstancedCount),n.update(s,r,t.maxInstancedCount)):console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.")}}(g,x,M),V=new ei(j,g,w,P,b),M.programs=D.programs,j.context=g,j.capabilities=b,j.extensions=x,j.properties=C,j.renderLists=U,j.state=w,j.info=M}At();var Rt="xr"in navigator?new function(t){var e=t.context,n=null,r=null,i=null,o=null,a=[],s=[];function c(){return null!==r&&null!==i}var u=new oi;u.layers.enable(1),u.viewport=new Xe;var h=new oi;h.layers.enable(2),h.viewport=new Xe;var l=new ai([u,h]);function d(t){var e=a[s.indexOf(t.inputSource)];e&&e.dispatchEvent({type:t.type})}function p(){t.setFramebuffer(null),g.stop()}function f(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.getInverse(t.matrixWorld)}l.layers.enable(1),l.layers.enable(2),this.enabled=!1,this.getController=function(t){var e=a[t];return void 0===e&&((e=new ii).matrixAutoUpdate=!1,e.visible=!1,a[t]=e),e},this.getDevice=function(){return n},this.setDevice=function(t){void 0!==t&&(n=t),e.setCompatibleXRDevice(t)},this.setSession=function(n,o){null!==(r=n)&&(r.addEventListener("select",d),r.addEventListener("selectstart",d),r.addEventListener("selectend",d),r.addEventListener("end",p),r.baseLayer=new XRWebGLLayer(r,e),r.requestFrameOfReference(o.frameOfReferenceType).then(function(e){i=e,t.setFramebuffer(r.baseLayer.framebuffer),g.setContext(r),g.start()}),s=r.getInputSources(),r.addEventListener("inputsourceschange",function(){s=r.getInputSources(),console.log(s)}))},this.getCamera=function(t){if(c()){var e=t.parent,n=l.cameras;f(l,e);for(var r=0;r<n.length;r++)f(n[r],e);t.matrixWorld.copy(l.matrixWorld);for(var i=t.children,o=(r=0,i.length);r<o;r++)i[r].updateMatrixWorld(!0);return l}return t},this.isPresenting=c;var m=null,g=new sn;g.setAnimationLoop(function(t,e){if(null!==(o=e.getDevicePose(i)))for(var n=r.baseLayer,c=e.views,u=0;u<c.length;u++){var h=c[u],d=n.getViewport(h),p=o.getViewMatrix(h),f=l.cameras[u];f.matrix.fromArray(p).getInverse(f.matrix),f.projectionMatrix.fromArray(h.projectionMatrix),f.viewport.set(d.x,d.y,d.width,d.height),0===u&&(l.matrix.copy(f.matrix),l.projectionMatrix.copy(f.projectionMatrix))}for(u=0;u<a.length;u++){var g=a[u],v=s[u];if(v){var y=e.getInputPose(v,i);if(null!==y){g.matrix.elements=y.pointerMatrix,g.matrix.decompose(g.position,g.rotation,g.scale),g.visible=!0;continue}}g.visible=!1}m&&m(t)}),this.setAnimationLoop=function(t){m=t},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),new THREE.Matrix4},this.submitFrame=function(){}}(j):new si(j);this.vr=Rt;var Lt=new $r(j,N,b.maxTextureSize);function Ct(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),W=!0}function It(){console.log("THREE.WebGLRenderer: Context Restored."),W=!1,At()}function Nt(t){var e=t.target;e.removeEventListener("dispose",Nt),function(t){Dt(t),C.remove(t)}(e)}function Dt(t){var e=C.get(t).program;t.program=void 0,void 0!==e&&D.releaseProgram(e)}this.shadowMap=Lt,this.getContext=function(){return g},this.getContextAttributes=function(){return g.getContextAttributes()},this.forceContextLoss=function(){var t=x.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){var t=x.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return ft},this.setPixelRatio=function(t){void 0!==t&&(ft=t,this.setSize(dt,pt,!1))},this.getSize=function(){return{width:dt,height:pt}},this.setSize=function(t,n,r){Rt.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(dt=t,pt=n,e.width=t*ft,e.height=n*ft,!1!==r&&(e.style.width=t+"px",e.style.height=n+"px"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(){return{width:dt*ft,height:pt*ft}},this.setDrawingBufferSize=function(t,n,r){dt=t,pt=n,ft=r,e.width=t*r,e.height=n*r,this.setViewport(0,0,t,n)},this.getCurrentViewport=function(){return ct},this.setViewport=function(t,e,n,r){mt.set(t,pt-e-r,n,r),w.viewport(ct.copy(mt).multiplyScalar(ft))},this.setScissor=function(t,e,n,r){gt.set(t,pt-e-r,n,r),w.scissor(ut.copy(gt).multiplyScalar(ft))},this.setScissorTest=function(t){w.setScissorTest(vt=t)},this.getClearColor=function(){return F.getClearColor()},this.setClearColor=function(){F.setClearColor.apply(F,arguments)},this.getClearAlpha=function(){return F.getClearAlpha()},this.setClearAlpha=function(){F.setClearAlpha.apply(F,arguments)},this.clear=function(t,e,n){var r=0;(void 0===t||t)&&(r|=g.COLOR_BUFFER_BIT),(void 0===e||e)&&(r|=g.DEPTH_BUFFER_BIT),(void 0===n||n)&&(r|=g.STENCIL_BUFFER_BIT),g.clear(r)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(t,e,n,r){this.setRenderTarget(t),this.clear(e,n,r)},this.dispose=function(){e.removeEventListener("webglcontextlost",Ct,!1),e.removeEventListener("webglcontextrestored",It,!1),U.dispose(),B.dispose(),C.dispose(),N.dispose(),Rt.dispose(),Bt.stop()},this.renderBufferImmediate=function(t,e,n){w.initAttributes();var r=C.get(t);t.hasPositions&&!r.position&&(r.position=g.createBuffer()),t.hasNormals&&!r.normal&&(r.normal=g.createBuffer()),t.hasUvs&&!r.uv&&(r.uv=g.createBuffer()),t.hasColors&&!r.color&&(r.color=g.createBuffer());var i=e.getAttributes();if(t.hasPositions&&(g.bindBuffer(g.ARRAY_BUFFER,r.position),g.bufferData(g.ARRAY_BUFFER,t.positionArray,g.DYNAMIC_DRAW),w.enableAttribute(i.position),g.vertexAttribPointer(i.position,3,g.FLOAT,!1,0,0)),t.hasNormals){if(g.bindBuffer(g.ARRAY_BUFFER,r.normal),!n.isMeshPhongMaterial&&!n.isMeshStandardMaterial&&!n.isMeshNormalMaterial&&!0===n.flatShading)for(var o=0,a=3*t.count;o<a;o+=9){var s=t.normalArray,c=(s[o+0]+s[o+3]+s[o+6])/3,u=(s[o+1]+s[o+4]+s[o+7])/3,h=(s[o+2]+s[o+5]+s[o+8])/3;s[o+0]=c,s[o+1]=u,s[o+2]=h,s[o+3]=c,s[o+4]=u,s[o+5]=h,s[o+6]=c,s[o+7]=u,s[o+8]=h}g.bufferData(g.ARRAY_BUFFER,t.normalArray,g.DYNAMIC_DRAW),w.enableAttribute(i.normal),g.vertexAttribPointer(i.normal,3,g.FLOAT,!1,0,0)}t.hasUvs&&n.map&&(g.bindBuffer(g.ARRAY_BUFFER,r.uv),g.bufferData(g.ARRAY_BUFFER,t.uvArray,g.DYNAMIC_DRAW),w.enableAttribute(i.uv),g.vertexAttribPointer(i.uv,2,g.FLOAT,!1,0,0)),t.hasColors&&n.vertexColors!==_&&(g.bindBuffer(g.ARRAY_BUFFER,r.color),g.bufferData(g.ARRAY_BUFFER,t.colorArray,g.DYNAMIC_DRAW),w.enableAttribute(i.color),g.vertexAttribPointer(i.color,3,g.FLOAT,!1,0,0)),w.disableUnusedAttributes(),g.drawArrays(g.TRIANGLES,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,n,r,i,o){var a=i.isMesh&&i.matrixWorld.determinant()<0;w.setMaterial(r,a);var s=Vt(t,e,r,i),c=n.id+"_"+s.id+"_"+(!0===r.wireframe),u=!1;c!==ot&&(ot=c,u=!0),i.morphTargetInfluences&&(z.update(i,n,r,s),u=!0);var h,l=n.index,d=n.attributes.position,p=1;!0===r.wireframe&&(l=I.getWireframeAttribute(n),p=2);var f=G;null!==l&&(h=O.get(l),(f=H).setIndex(h)),u&&(!function(t,e,n){if(n&&n.isInstancedBufferGeometry&&null===x.get("ANGLE_instanced_arrays"))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");w.initAttributes();var r=n.attributes,i=e.getAttributes(),o=t.defaultAttributeValues;for(var a in i){var s=i[a];if(s>=0){var c=r[a];if(void 0!==c){var u=c.normalized,h=c.itemSize,l=O.get(c);if(void 0===l)continue;var d=l.buffer,p=l.type,f=l.bytesPerElement;if(c.isInterleavedBufferAttribute){var m=c.data,v=m.stride,y=c.offset;m&&m.isInstancedInterleavedBuffer?(w.enableAttributeAndDivisor(s,m.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=m.meshPerAttribute*m.count)):w.enableAttribute(s),g.bindBuffer(g.ARRAY_BUFFER,d),g.vertexAttribPointer(s,h,p,u,v*f,y*f)}else c.isInstancedBufferAttribute?(w.enableAttributeAndDivisor(s,c.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=c.meshPerAttribute*c.count)):w.enableAttribute(s),g.bindBuffer(g.ARRAY_BUFFER,d),g.vertexAttribPointer(s,h,p,u,0,0)}else if(void 0!==o){var b=o[a];if(void 0!==b)switch(b.length){case 2:g.vertexAttrib2fv(s,b);break;case 3:g.vertexAttrib3fv(s,b);break;case 4:g.vertexAttrib4fv(s,b);break;default:g.vertexAttrib1fv(s,b)}}}}w.disableUnusedAttributes()}(r,s,n),null!==l&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,h.buffer));var m=1/0;null!==l?m=l.count:void 0!==d&&(m=d.count);var v=n.drawRange.start*p,y=n.drawRange.count*p,b=null!==o?o.start*p:0,_=null!==o?o.count*p:1/0,M=Math.max(v,b),E=Math.min(m,v+y,b+_)-1,T=Math.max(0,E-M+1);if(0!==T){if(i.isMesh)if(!0===r.wireframe)w.setLineWidth(r.wireframeLinewidth*Et()),f.setMode(g.LINES);else switch(i.drawMode){case Me:f.setMode(g.TRIANGLES);break;case Ee:f.setMode(g.TRIANGLE_STRIP);break;case Te:f.setMode(g.TRIANGLE_FAN)}else if(i.isLine){var S=r.linewidth;void 0===S&&(S=1),w.setLineWidth(S*Et()),i.isLineSegments?f.setMode(g.LINES):i.isLineLoop?f.setMode(g.LINE_LOOP):f.setMode(g.LINE_STRIP)}else i.isPoints&&f.setMode(g.POINTS);n&&n.isInstancedBufferGeometry?n.maxInstancedCount>0&&f.renderInstances(n,M,T):f.render(M,T)}},this.compile=function(t,e){(m=B.get(t,e)).init(),t.traverse(function(t){t.isLight&&(m.pushLight(t),t.castShadow&&m.pushShadow(t))}),m.setupLights(e),t.traverse(function(e){if(e.material)if(Array.isArray(e.material))for(var n=0;n<e.material.length;n++)Ht(e.material[n],t.fog,e);else Ht(e.material,t.fog,e)})};var Ut=null;var Bt=new sn;function Ft(t,e,n,r){for(var i=0,o=t.length;i<o;i++){var a=t[i],s=a.object,c=a.geometry,u=void 0===r?a.material:r,h=a.group;if(n.isArrayCamera){st=n;for(var l=n.cameras,d=0,p=l.length;d<p;d++){var f=l[d];if(s.layers.test(f.layers)){if("viewport"in f)w.viewport(ct.copy(f.viewport));else{var m=f.bounds,g=m.x*dt,v=m.y*pt,y=m.z*dt,x=m.w*pt;w.viewport(ct.set(g,v,y,x).multiplyScalar(ft))}Gt(s,e,f,c,u,h)}}}else st=null,Gt(s,e,n,c,u,h)}}function Gt(t,e,n,r,i,o){if(t.onBeforeRender(j,e,n,r,i,o),m=B.get(e,st||n),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){var a=t.isMesh&&t.matrixWorld.determinant()<0;w.setMaterial(i,a);var s=Vt(n,e.fog,i,t);ot="",function(t,e,n){t.render(function(t){j.renderBufferImmediate(t,e,n)})}(t,s,i)}else j.renderBufferDirect(n,e.fog,r,i,t,o);t.onAfterRender(j,e,n,r,i,o),m=B.get(e,st||n)}function Ht(t,e,n){var r=C.get(t),i=m.state.lights,o=m.state.shadowsArray,a=D.getParameters(t,i.state,o,e,xt.numPlanes,xt.numIntersection,n),s=D.getProgramCode(t,a),c=r.program,u=!0;if(void 0===c)t.addEventListener("dispose",Nt);else if(c.code!==s)Dt(t);else if(r.lightsHash!==i.state.hash)C.update(t,"lightsHash",i.state.hash),u=!1;else{if(void 0!==a.shaderID)return;u=!1}if(u){if(a.shaderID){var h=an[a.shaderID];r.shader={name:t.type,uniforms:en.clone(h.uniforms),vertexShader:h.vertexShader,fragmentShader:h.fragmentShader}}else r.shader={name:t.type,uniforms:t.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader};t.onBeforeCompile(r.shader,j),c=D.acquireProgram(t,r.shader,a,s),r.program=c,t.program=c}var l=c.getAttributes();if(t.morphTargets){t.numSupportedMorphTargets=0;for(var d=0;d<j.maxMorphTargets;d++)l["morphTarget"+d]>=0&&t.numSupportedMorphTargets++}if(t.morphNormals){t.numSupportedMorphNormals=0;for(d=0;d<j.maxMorphNormals;d++)l["morphNormal"+d]>=0&&t.numSupportedMorphNormals++}var p=r.shader.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(r.numClippingPlanes=xt.numPlanes,r.numIntersection=xt.numIntersection,p.clippingPlanes=xt.uniform),r.fog=e,r.lightsHash=i.state.hash,t.lights&&(p.ambientLightColor.value=i.state.ambient,p.directionalLights.value=i.state.directional,p.spotLights.value=i.state.spot,p.rectAreaLights.value=i.state.rectArea,p.pointLights.value=i.state.point,p.hemisphereLights.value=i.state.hemi,p.directionalShadowMap.value=i.state.directionalShadowMap,p.directionalShadowMatrix.value=i.state.directionalShadowMatrix,p.spotShadowMap.value=i.state.spotShadowMap,p.spotShadowMatrix.value=i.state.spotShadowMatrix,p.pointShadowMap.value=i.state.pointShadowMap,p.pointShadowMatrix.value=i.state.pointShadowMatrix);var f=r.program.getUniforms(),g=Ir.seqWithValue(f.seq,p);r.uniformsList=g}function Vt(t,e,n,r){lt=0;var i=C.get(n),o=m.state.lights;if(bt&&(_t||t!==at)){var a=t===at&&n.id===rt;xt.setState(n.clippingPlanes,n.clipIntersection,n.clipShadows,t,i,a)}!1===n.needsUpdate&&(void 0===i.program?n.needsUpdate=!0:n.fog&&i.fog!==e?n.needsUpdate=!0:n.lights&&i.lightsHash!==o.state.hash?n.needsUpdate=!0:void 0===i.numClippingPlanes||i.numClippingPlanes===xt.numPlanes&&i.numIntersection===xt.numIntersection||(n.needsUpdate=!0)),n.needsUpdate&&(Ht(n,e,r),n.needsUpdate=!1);var s=!1,c=!1,u=!1,h=i.program,l=h.getUniforms(),d=i.shader.uniforms;if(w.useProgram(h.program)&&(s=!0,c=!0,u=!0),n.id!==rt&&(rt=n.id,c=!0),s||t!==at){if(l.setValue(g,"projectionMatrix",t.projectionMatrix),b.logarithmicDepthBuffer&&l.setValue(g,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),at!==(st||t)&&(at=st||t,c=!0,u=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshStandardMaterial||n.envMap){var p=l.map.cameraPosition;void 0!==p&&p.setValue(g,Mt.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.skinning)&&l.setValue(g,"viewMatrix",t.matrixWorldInverse)}if(n.skinning){l.setOptional(g,r,"bindMatrix"),l.setOptional(g,r,"bindMatrixInverse");var f=r.skeleton;if(f){var y=f.bones;if(b.floatVertexTextures){if(void 0===f.boneTexture){var x=Math.sqrt(4*y.length);x=Fe.ceilPowerOfTwo(x),x=Math.max(x,4);var _=new Float32Array(x*x*4);_.set(f.boneMatrices);var M=new Ze(_,x,x,zt,Pt);M.needsUpdate=!0,f.boneMatrices=_,f.boneTexture=M,f.boneTextureSize=x}l.setValue(g,"boneTexture",f.boneTexture),l.setValue(g,"boneTextureSize",f.boneTextureSize)}else l.setOptional(g,f,"boneMatrices")}}return c&&(l.setValue(g,"toneMappingExposure",j.toneMappingExposure),l.setValue(g,"toneMappingWhitePoint",j.toneMappingWhitePoint),n.lights&&function(t,e){t.ambientLightColor.needsUpdate=e,t.directionalLights.needsUpdate=e,t.pointLights.needsUpdate=e,t.spotLights.needsUpdate=e,t.rectAreaLights.needsUpdate=e,t.hemisphereLights.needsUpdate=e}(d,u),e&&n.fog&&function(t,e){t.fogColor.value=e.color,e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)}(d,e),n.isMeshBasicMaterial?kt(d,n):n.isMeshLambertMaterial?(kt(d,n),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(d,n)):n.isMeshPhongMaterial?(kt(d,n),n.isMeshToonMaterial?function(t,e){jt(t,e),e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(d,n):jt(d,n)):n.isMeshStandardMaterial?(kt(d,n),n.isMeshPhysicalMaterial?function(t,e){Wt(t,e),t.reflectivity.value=e.reflectivity,t.clearCoat.value=e.clearCoat,t.clearCoatRoughness.value=e.clearCoatRoughness}(d,n):Wt(d,n)):n.isMeshDepthMaterial?(kt(d,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(d,n)):n.isMeshDistanceMaterial?(kt(d,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(d,n)):n.isMeshNormalMaterial?(kt(d,n),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===v&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===v&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(d,n)):n.isLineBasicMaterial?(function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity}(d,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(d,n)):n.isPointsMaterial?function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity,t.size.value=e.size*ft,t.scale.value=.5*pt,t.map.value=e.map,null!==e.map&&(!0===e.map.matrixAutoUpdate&&e.map.updateMatrix(),t.uvTransform.value.copy(e.map.matrix))}(d,n):n.isShadowMaterial&&(d.color.value=n.color,d.opacity.value=n.opacity),void 0!==d.ltc_1&&(d.ltc_1.value=on.LTC_1),void 0!==d.ltc_2&&(d.ltc_2.value=on.LTC_2),Ir.upload(g,i.uniformsList,d,j)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(Ir.upload(g,i.uniformsList,d,j),n.uniformsNeedUpdate=!1),l.setValue(g,"modelViewMatrix",r.modelViewMatrix),l.setValue(g,"normalMatrix",r.normalMatrix),l.setValue(g,"modelMatrix",r.matrixWorld),h}function kt(t,e){var n;t.opacity.value=e.opacity,e.color&&(t.diffuse.value=e.color),e.emissive&&t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.specularMap&&(t.specularMap.value=e.specularMap),e.envMap&&(t.envMap.value=e.envMap,t.flipEnvMap.value=e.envMap&&e.envMap.isCubeTexture?-1:1,t.reflectivity.value=e.reflectivity,t.refractionRatio.value=e.refractionRatio,t.maxMipLevel.value=C.get(e.envMap).__maxMipLevel),e.lightMap&&(t.lightMap.value=e.lightMap,t.lightMapIntensity.value=e.lightMapIntensity),e.aoMap&&(t.aoMap.value=e.aoMap,t.aoMapIntensity.value=e.aoMapIntensity),e.map?n=e.map:e.specularMap?n=e.specularMap:e.displacementMap?n=e.displacementMap:e.normalMap?n=e.normalMap:e.bumpMap?n=e.bumpMap:e.roughnessMap?n=e.roughnessMap:e.metalnessMap?n=e.metalnessMap:e.alphaMap?n=e.alphaMap:e.emissiveMap&&(n=e.emissiveMap),void 0!==n&&(n.isWebGLRenderTarget&&(n=n.texture),!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}function jt(t,e){t.specular.value=e.specular,t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===v&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===v&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}function Wt(t,e){t.roughness.value=e.roughness,t.metalness.value=e.metalness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap),e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===v&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===v&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),e.envMap&&(t.envMapIntensity.value=e.envMapIntensity)}Bt.setAnimationLoop(function(t){Rt.isPresenting()||Ut&&Ut(t)}),"undefined"!=typeof window&&Bt.setContext(window),this.setAnimationLoop=function(t){Ut=t,Rt.setAnimationLoop(t),Bt.start()},this.render=function(t,e,n,r){if(e&&e.isCamera){if(!W){ot="",rt=-1,at=null,!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),Rt.enabled&&(e=Rt.getCamera(e)),(m=B.get(t,e)).init(),t.onBeforeRender(j,t,e,n),wt.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),yt.setFromMatrix(wt),_t=this.localClippingEnabled,bt=xt.init(this.clippingPlanes,_t,e),(f=U.get(t,e)).init(),function t(e,n,r){if(!1===e.visible)return;var i=e.layers.test(n.layers);if(i)if(e.isLight)m.pushLight(e),e.castShadow&&m.pushShadow(e);else if(e.isSprite)e.frustumCulled&&!yt.intersectsSprite(e)||m.pushSprite(e);else if(e.isImmediateRenderObject)r&&Mt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(wt),f.push(e,null,e.material,Mt.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.update(),!e.frustumCulled||yt.intersectsObject(e))){r&&Mt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(wt);var o=N.update(e),a=e.material;if(Array.isArray(a))for(var s=o.groups,c=0,u=s.length;c<u;c++){var h=s[c],l=a[h.materialIndex];l&&l.visible&&f.push(e,o,l,Mt.z,h)}else a.visible&&f.push(e,o,a,Mt.z,null)}var d=e.children;for(var c=0,u=d.length;c<u;c++)t(d[c],n,r)}(t,e,j.sortObjects),!0===j.sortObjects&&f.sort(),bt&&xt.beginShadows();var i=m.state.shadowsArray;Lt.render(i,t,e),m.setupLights(e),bt&&xt.endShadows(),this.info.autoReset&&this.info.reset(),void 0===n&&(n=null),this.setRenderTarget(n),F.render(f,t,e,r);var o=f.opaque,a=f.transparent;if(t.overrideMaterial){var s=t.overrideMaterial;o.length&&Ft(o,t,e,s),a.length&&Ft(a,t,e,s)}else o.length&&Ft(o,t,e),a.length&&Ft(a,t,e);var c=m.state.spritesArray;V.render(c,t,e),n&&P.updateRenderTargetMipmap(n),w.buffers.depth.setTest(!0),w.buffers.depth.setMask(!0),w.buffers.color.setMask(!0),w.setPolygonOffset(!1),t.onAfterRender(j,t,e),Rt.enabled&&Rt.submitFrame(),f=null,m=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.allocTextureUnit=function(){var t=lt;return t>=b.maxTextures&&console.warn("THREE.WebGLRenderer: Trying to use "+t+" texture units while this GPU supports only "+b.maxTextures),lt+=1,t},this.setTexture2D=function(){var t=!1;return function(e,n){e&&e.isWebGLRenderTarget&&(t||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),t=!0),e=e.texture),P.setTexture2D(e,n)}}(),this.setTexture=function(){var t=!1;return function(e,n){t||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),t=!0),P.setTexture2D(e,n)}}(),this.setTextureCube=function(){var t=!1;return function(e,n){e&&e.isWebGLRenderTargetCube&&(t||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),t=!0),e=e.texture),e&&e.isCubeTexture||Array.isArray(e.image)&&6===e.image.length?P.setTextureCube(e,n):P.setTextureCubeDynamic(e,n)}}(),this.setFramebuffer=function(t){tt=t},this.getRenderTarget=function(){return et},this.setRenderTarget=function(t){et=t,t&&void 0===C.get(t).__webglFramebuffer&&P.setupRenderTarget(t);var e=tt,n=!1;if(t){var r=C.get(t).__webglFramebuffer;t.isWebGLRenderTargetCube?(e=r[t.activeCubeFace],n=!0):e=r,ct.copy(t.viewport),ut.copy(t.scissor),ht=t.scissorTest}else ct.copy(mt).multiplyScalar(ft),ut.copy(gt).multiplyScalar(ft),ht=vt;if(nt!==e&&(g.bindFramebuffer(g.FRAMEBUFFER,e),nt=e),w.viewport(ct),w.scissor(ut),w.setScissorTest(ht),n){var i=C.get(t.texture);g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_CUBE_MAP_POSITIVE_X+t.activeCubeFace,i.__webglTexture,t.activeMipMapLevel)}},this.readRenderTargetPixels=function(t,e,n,r,i,o){if(t&&t.isWebGLRenderTarget){var a=C.get(t).__webglFramebuffer;if(a){var s=!1;a!==nt&&(g.bindFramebuffer(g.FRAMEBUFFER,a),s=!0);try{var c=t.texture,u=c.format,h=c.type;if(u!==zt&&k.convert(u)!==g.getParameter(g.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(h===Tt||k.convert(h)===g.getParameter(g.IMPLEMENTATION_COLOR_READ_TYPE)||h===Pt&&(x.get("OES_texture_float")||x.get("WEBGL_color_buffer_float"))||h===Ot&&x.get("EXT_color_buffer_half_float")))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");g.checkFramebufferStatus(g.FRAMEBUFFER)===g.FRAMEBUFFER_COMPLETE?e>=0&&e<=t.width-r&&n>=0&&n<=t.height-i&&g.readPixels(e,n,r,i,k.convert(u),k.convert(h),o):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{s&&g.bindFramebuffer(g.FRAMEBUFFER,nt)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(t,e,n){var r=e.image.width,i=e.image.height,o=k.convert(e.format);this.setTexture2D(e,0),g.copyTexImage2D(g.TEXTURE_2D,n||0,o,t.x,t.y,r,i,0)},this.copyTextureToTexture=function(t,e,n,r){var i=e.image.width,o=e.image.height,a=k.convert(n.format),s=k.convert(n.type);this.setTexture2D(n,0),e.isDataTexture?g.texSubImage2D(g.TEXTURE_2D,r||0,t.x,t.y,i,o,a,s,e.image.data):g.texSubImage2D(g.TEXTURE_2D,r||0,t.x,t.y,a,s,e.image)}}function ui(t,e){this.name="",this.color=new rn(t),this.density=void 0!==e?e:25e-5}function hi(t,e,n){this.name="",this.color=new rn(t),this.near=void 0!==e?e:1,this.far=void 0!==n?n:1e3}function li(){dn.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}function di(t){Bn.call(this),this.type="SpriteMaterial",this.color=new rn(16777215),this.map=null,this.rotation=0,this.fog=!1,this.lights=!1,this.setValues(t)}function pi(t){dn.call(this),this.type="Sprite",this.material=void 0!==t?t:new di,this.center=new ze(.5,.5)}function fi(){dn.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function mi(t,e){if(t=t||[],this.bones=t.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===e)this.calculateInverses();else if(this.bones.length===e.length)this.boneInverses=e.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var n=0,r=this.bones.length;n<r;n++)this.boneInverses.push(new Ge)}}function gi(){dn.call(this),this.type="Bone"}function vi(t,e){kn.call(this,t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Ge,this.bindMatrixInverse=new Ge;var n=new mi(this.initBones());this.bind(n,this.matrixWorld),this.normalizeSkinWeights()}function yi(t){Bn.call(this),this.type="LineBasicMaterial",this.color=new rn(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(t)}function xi(t,e,n){if(1===n)return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),new bi(t,e);dn.call(this),this.type="Line",this.geometry=void 0!==t?t:new Pn,this.material=void 0!==e?e:new yi({color:16777215*Math.random()})}function bi(t,e){xi.call(this,t,e),this.type="LineSegments"}function _i(t,e){xi.call(this,t,e),this.type="LineLoop"}function wi(t){Bn.call(this),this.type="PointsMaterial",this.color=new rn(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.lights=!1,this.setValues(t)}function Mi(t,e){dn.call(this),this.type="Points",this.geometry=void 0!==t?t:new Pn,this.material=void 0!==e?e:new wi({color:16777215*Math.random()})}function Ei(t,e,n,r,i,o,a,s,c){We.call(this,t,e,n,r,i,o,a,s,c),this.generateMipmaps=!1}function Ti(t,e,n,r,i,o,a,s,c,u,h,l){We.call(this,null,o,a,s,c,u,r,i,h,l),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}function Si(t,e,n,r,i,o,a,s,c,u){if((u=void 0!==u?u:kt)!==kt&&u!==jt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&u===kt&&(n=Rt),void 0===n&&u===jt&&(n=Ut),We.call(this,null,r,i,o,a,s,u,n,c),this.image={width:t,height:e},this.magFilter=void 0!==a?a:xt,this.minFilter=void 0!==s?s:xt,this.flipY=!1,this.generateMipmaps=!1}function Ai(t){Pn.call(this),this.type="WireframeGeometry";var e,n,r,i,o,a,s,c,u,h,l=[],d=[0,0],p={},f=["a","b","c"];if(t&&t.isGeometry){var m=t.faces;for(e=0,r=m.length;e<r;e++){var g=m[e];for(n=0;n<3;n++)s=g[f[n]],c=g[f[(n+1)%3]],d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[u=d[0]+","+d[1]]&&(p[u]={index1:d[0],index2:d[1]})}for(u in p)a=p[u],h=t.vertices[a.index1],l.push(h.x,h.y,h.z),h=t.vertices[a.index2],l.push(h.x,h.y,h.z)}else if(t&&t.isBufferGeometry){var v,y,x,b,_,w,M;if(h=new Ve,null!==t.index){for(v=t.attributes.position,y=t.index,0===(x=t.groups).length&&(x=[{start:0,count:y.count,materialIndex:0}]),i=0,o=x.length;i<o;++i)for(e=_=(b=x[i]).start,r=_+b.count;e<r;e+=3)for(n=0;n<3;n++)s=y.getX(e+n),c=y.getX(e+(n+1)%3),d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[u=d[0]+","+d[1]]&&(p[u]={index1:d[0],index2:d[1]});for(u in p)a=p[u],h.fromBufferAttribute(v,a.index1),l.push(h.x,h.y,h.z),h.fromBufferAttribute(v,a.index2),l.push(h.x,h.y,h.z)}else for(e=0,r=(v=t.attributes.position).count/3;e<r;e++)for(n=0;n<3;n++)w=3*e+n,h.fromBufferAttribute(v,w),l.push(h.x,h.y,h.z),M=3*e+(n+1)%3,h.fromBufferAttribute(v,M),l.push(h.x,h.y,h.z)}this.addAttribute("position",new Sn(l,3))}function Ri(t,e,n){vn.call(this),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:n},this.fromBufferGeometry(new Li(t,e,n)),this.mergeVertices()}function Li(t,e,n){Pn.call(this),this.type="ParametricBufferGeometry",this.parameters={func:t,slices:e,stacks:n};var r,i,o=[],a=[],s=[],c=[],u=new Ve,h=new Ve,l=new Ve,d=new Ve,p=new Ve;t.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var f=e+1;for(r=0;r<=n;r++){var m=r/n;for(i=0;i<=e;i++){var g=i/e;t(g,m,h),a.push(h.x,h.y,h.z),g-1e-5>=0?(t(g-1e-5,m,l),d.subVectors(h,l)):(t(g+1e-5,m,l),d.subVectors(l,h)),m-1e-5>=0?(t(g,m-1e-5,l),p.subVectors(h,l)):(t(g,m+1e-5,l),p.subVectors(l,h)),u.crossVectors(d,p).normalize(),s.push(u.x,u.y,u.z),c.push(g,m)}}for(r=0;r<n;r++)for(i=0;i<e;i++){var v=r*f+i,y=r*f+i+1,x=(r+1)*f+i+1,b=(r+1)*f+i;o.push(v,y,b),o.push(y,x,b)}this.setIndex(o),this.addAttribute("position",new Sn(a,3)),this.addAttribute("normal",new Sn(s,3)),this.addAttribute("uv",new Sn(c,2))}function Ci(t,e,n,r){vn.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:r},this.fromBufferGeometry(new Pi(t,e,n,r)),this.mergeVertices()}function Pi(t,e,n,r){Pn.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:r},n=n||1;var i=[],o=[];function a(t,e,n,r){var i,o,a=Math.pow(2,r),c=[];for(i=0;i<=a;i++){c[i]=[];var u=t.clone().lerp(n,i/a),h=e.clone().lerp(n,i/a),l=a-i;for(o=0;o<=l;o++)c[i][o]=0===o&&i===a?u:u.clone().lerp(h,o/l)}for(i=0;i<a;i++)for(o=0;o<2*(a-i)-1;o++){var d=Math.floor(o/2);o%2==0?(s(c[i][d+1]),s(c[i+1][d]),s(c[i][d])):(s(c[i][d+1]),s(c[i+1][d+1]),s(c[i+1][d]))}}function s(t){i.push(t.x,t.y,t.z)}function c(e,n){var r=3*e;n.x=t[r+0],n.y=t[r+1],n.z=t[r+2]}function u(t,e,n,r){r<0&&1===t.x&&(o[e]=t.x-1),0===n.x&&0===n.z&&(o[e]=r/2/Math.PI+.5)}function h(t){return Math.atan2(t.z,-t.x)}function l(t){return Math.atan2(-t.y,Math.sqrt(t.x*t.x+t.z*t.z))}!function(t){for(var n=new Ve,r=new Ve,i=new Ve,o=0;o<e.length;o+=3)c(e[o+0],n),c(e[o+1],r),c(e[o+2],i),a(n,r,i,t)}(r=r||0),function(t){for(var e=new Ve,n=0;n<i.length;n+=3)e.x=i[n+0],e.y=i[n+1],e.z=i[n+2],e.normalize().multiplyScalar(t),i[n+0]=e.x,i[n+1]=e.y,i[n+2]=e.z}(n),function(){for(var t=new Ve,e=0;e<i.length;e+=3){t.x=i[e+0],t.y=i[e+1],t.z=i[e+2];var n=h(t)/2/Math.PI+.5,r=l(t)/Math.PI+.5;o.push(n,1-r)}(function(){for(var t=new Ve,e=new Ve,n=new Ve,r=new Ve,a=new ze,s=new ze,c=new ze,l=0,d=0;l<i.length;l+=9,d+=6){t.set(i[l+0],i[l+1],i[l+2]),e.set(i[l+3],i[l+4],i[l+5]),n.set(i[l+6],i[l+7],i[l+8]),a.set(o[d+0],o[d+1]),s.set(o[d+2],o[d+3]),c.set(o[d+4],o[d+5]),r.copy(t).add(e).add(n).divideScalar(3);var p=h(r);u(a,d+0,t,p),u(s,d+2,e,p),u(c,d+4,n,p)}})(),function(){for(var t=0;t<o.length;t+=6){var e=o[t+0],n=o[t+2],r=o[t+4],i=Math.max(e,n,r),a=Math.min(e,n,r);i>.9&&a<.1&&(e<.2&&(o[t+0]+=1),n<.2&&(o[t+2]+=1),r<.2&&(o[t+4]+=1))}}()}(),this.addAttribute("position",new Sn(i,3)),this.addAttribute("normal",new Sn(i.slice(),3)),this.addAttribute("uv",new Sn(o,2)),0===r?this.computeVertexNormals():this.normalizeNormals()}function Oi(t,e){vn.call(this),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Ii(t,e)),this.mergeVertices()}function Ii(t,e){Pi.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Ni(t,e){vn.call(this),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Di(t,e)),this.mergeVertices()}function Di(t,e){Pi.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Ui(t,e){vn.call(this),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Bi(t,e)),this.mergeVertices()}function Bi(t,e){var n=(1+Math.sqrt(5))/2,r=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];Pi.call(this,r,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Fi(t,e){vn.call(this),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new zi(t,e)),this.mergeVertices()}function zi(t,e){var n=(1+Math.sqrt(5))/2,r=1/n,i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-n,0,-r,n,0,r,-n,0,r,n,-r,-n,0,-r,n,0,r,-n,0,r,n,0,-n,0,-r,n,0,-r,-n,0,r,n,0,r];Pi.call(this,i,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Gi(t,e,n,r,i,o){vn.call(this),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:r,closed:i},void 0!==o&&console.warn("THREE.TubeGeometry: taper has been removed.");var a=new Hi(t,e,n,r,i);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals,this.fromBufferGeometry(a),this.mergeVertices()}function Hi(t,e,n,r,i){Pn.call(this),this.type="TubeBufferGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:r,closed:i},e=e||64,n=n||1,r=r||8,i=i||!1;var o=t.computeFrenetFrames(e,i);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals;var a,s,c=new Ve,u=new Ve,h=new ze,l=new Ve,d=[],p=[],f=[],m=[];function g(i){l=t.getPointAt(i/e,l);var a=o.normals[i],h=o.binormals[i];for(s=0;s<=r;s++){var f=s/r*Math.PI*2,m=Math.sin(f),g=-Math.cos(f);u.x=g*a.x+m*h.x,u.y=g*a.y+m*h.y,u.z=g*a.z+m*h.z,u.normalize(),p.push(u.x,u.y,u.z),c.x=l.x+n*u.x,c.y=l.y+n*u.y,c.z=l.z+n*u.z,d.push(c.x,c.y,c.z)}}!function(){for(a=0;a<e;a++)g(a);g(!1===i?e:0),function(){for(a=0;a<=e;a++)for(s=0;s<=r;s++)h.x=a/e,h.y=s/r,f.push(h.x,h.y)}(),function(){for(s=1;s<=e;s++)for(a=1;a<=r;a++){var t=(r+1)*(s-1)+(a-1),n=(r+1)*s+(a-1),i=(r+1)*s+a,o=(r+1)*(s-1)+a;m.push(t,n,o),m.push(n,i,o)}}()}(),this.setIndex(m),this.addAttribute("position",new Sn(d,3)),this.addAttribute("normal",new Sn(p,3)),this.addAttribute("uv",new Sn(f,2))}function Vi(t,e,n,r,i,o,a){vn.call(this),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:r,p:i,q:o},void 0!==a&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new ki(t,e,n,r,i,o)),this.mergeVertices()}function ki(t,e,n,r,i,o){Pn.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:r,p:i,q:o},t=t||1,e=e||.4,n=Math.floor(n)||64,r=Math.floor(r)||8,i=i||2,o=o||3;var a,s,c=[],u=[],h=[],l=[],d=new Ve,p=new Ve,f=new Ve,m=new Ve,g=new Ve,v=new Ve,y=new Ve;for(a=0;a<=n;++a){var x=a/n*i*Math.PI*2;for(A(x,i,o,t,f),A(x+.01,i,o,t,m),v.subVectors(m,f),y.addVectors(m,f),g.crossVectors(v,y),y.crossVectors(g,v),g.normalize(),y.normalize(),s=0;s<=r;++s){var b=s/r*Math.PI*2,_=-e*Math.cos(b),w=e*Math.sin(b);d.x=f.x+(_*y.x+w*g.x),d.y=f.y+(_*y.y+w*g.y),d.z=f.z+(_*y.z+w*g.z),u.push(d.x,d.y,d.z),p.subVectors(d,f).normalize(),h.push(p.x,p.y,p.z),l.push(a/n),l.push(s/r)}}for(s=1;s<=n;s++)for(a=1;a<=r;a++){var M=(r+1)*(s-1)+(a-1),E=(r+1)*s+(a-1),T=(r+1)*s+a,S=(r+1)*(s-1)+a;c.push(M,E,S),c.push(E,T,S)}function A(t,e,n,r,i){var o=Math.cos(t),a=Math.sin(t),s=n/e*t,c=Math.cos(s);i.x=r*(2+c)*.5*o,i.y=r*(2+c)*a*.5,i.z=r*Math.sin(s)*.5}this.setIndex(c),this.addAttribute("position",new Sn(u,3)),this.addAttribute("normal",new Sn(h,3)),this.addAttribute("uv",new Sn(l,2))}function ji(t,e,n,r,i){vn.call(this),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:r,arc:i},this.fromBufferGeometry(new Wi(t,e,n,r,i)),this.mergeVertices()}function Wi(t,e,n,r,i){Pn.call(this),this.type="TorusBufferGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:r,arc:i},t=t||1,e=e||.4,n=Math.floor(n)||8,r=Math.floor(r)||6,i=i||2*Math.PI;var o,a,s=[],c=[],u=[],h=[],l=new Ve,d=new Ve,p=new Ve;for(o=0;o<=n;o++)for(a=0;a<=r;a++){var f=a/r*i,m=o/n*Math.PI*2;d.x=(t+e*Math.cos(m))*Math.cos(f),d.y=(t+e*Math.cos(m))*Math.sin(f),d.z=e*Math.sin(m),c.push(d.x,d.y,d.z),l.x=t*Math.cos(f),l.y=t*Math.sin(f),p.subVectors(d,l).normalize(),u.push(p.x,p.y,p.z),h.push(a/r),h.push(o/n)}for(o=1;o<=n;o++)for(a=1;a<=r;a++){var g=(r+1)*o+a-1,v=(r+1)*(o-1)+a-1,y=(r+1)*(o-1)+a,x=(r+1)*o+a;s.push(g,v,x),s.push(v,y,x)}this.setIndex(s),this.addAttribute("position",new Sn(c,3)),this.addAttribute("normal",new Sn(u,3)),this.addAttribute("uv",new Sn(h,2))}Qr.prototype=Object.create(Bn.prototype),Qr.prototype.constructor=Qr,Qr.prototype.isMeshDepthMaterial=!0,Qr.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.depthPacking=t.depthPacking,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this},Kr.prototype=Object.create(Bn.prototype),Kr.prototype.constructor=Kr,Kr.prototype.isMeshDistanceMaterial=!0,Kr.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this},ti.prototype=Object.create(We.prototype),ti.prototype.constructor=ti,ti.prototype.isCanvasTexture=!0,ii.prototype=Object.assign(Object.create(dn.prototype),{constructor:ii,isGroup:!0}),oi.prototype=Object.assign(Object.create(pn.prototype),{constructor:oi,isPerspectiveCamera:!0,copy:function(t,e){return pn.prototype.copy.call(this,t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(t){var e=.5*this.getFilmHeight()/t;this.fov=2*Fe.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){var t=Math.tan(.5*Fe.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t},getEffectiveFOV:function(){return 2*Fe.RAD2DEG*Math.atan(Math.tan(.5*Fe.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,e,n,r,i,o){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=i,this.view.height=o,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=this.near,e=t*Math.tan(.5*Fe.DEG2RAD*this.fov)/this.zoom,n=2*e,r=this.aspect*n,i=-.5*r,o=this.view;if(null!==this.view&&this.view.enabled){var a=o.fullWidth,s=o.fullHeight;i+=o.offsetX*r/a,e-=o.offsetY*n/s,r*=o.width/a,n*=o.height/s}var c=this.filmOffset;0!==c&&(i+=t*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+r,e,e-n,t,this.far)},toJSON:function(t){var e=dn.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}),ai.prototype=Object.assign(Object.create(oi.prototype),{constructor:ai,isArrayCamera:!0}),ui.prototype.isFogExp2=!0,ui.prototype.clone=function(){return new ui(this.color,this.density)},ui.prototype.toJSON=function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}},hi.prototype.isFog=!0,hi.prototype.clone=function(){return new hi(this.color,this.near,this.far)},hi.prototype.toJSON=function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}},li.prototype=Object.assign(Object.create(dn.prototype),{constructor:li,copy:function(t,e){return dn.prototype.copy.call(this,t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this},toJSON:function(t){var e=dn.prototype.toJSON.call(this,t);return null!==this.background&&(e.object.background=this.background.toJSON(t)),null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}),di.prototype=Object.create(Bn.prototype),di.prototype.constructor=di,di.prototype.isSpriteMaterial=!0,di.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.rotation=t.rotation,this},pi.prototype=Object.assign(Object.create(dn.prototype),{constructor:pi,isSprite:!0,raycast:function(){var t=new Ve,e=new Ve,n=new Ve,r=new ze,i=new ze,o=new Ge,a=new Ve,s=new Ve,c=new Ve;function u(t,e,n,a,s,c){r.subVectors(t,n).addScalar(.5).multiply(a),void 0!==s?(i.x=c*r.x-s*r.y,i.y=s*r.x+c*r.y):i.copy(r),t.copy(e),t.x+=i.x,t.y+=i.y,t.applyMatrix4(o)}return function(r,i){e.setFromMatrixScale(this.matrixWorld),o.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld),n.setFromMatrixPosition(this.modelViewMatrix);var h,l,d=this.material.rotation;0!==d&&(l=Math.cos(d),h=Math.sin(d));var p=this.center;u(a.set(-.5,-.5,0),n,p,e,h,l),u(s.set(.5,-.5,0),n,p,e,h,l),u(c.set(.5,.5,0),n,p,e,h,l);var f=r.ray.intersectTriangle(a,s,c,!1,t);if(null!==f||(u(s.set(-.5,.5,0),n,p,e,h,l),null!==(f=r.ray.intersectTriangle(a,c,s,!1,t)))){var m=r.ray.origin.distanceTo(t);m<r.near||m>r.far||i.push({distance:m,point:t.clone(),face:null,object:this})}}}(),clone:function(){return new this.constructor(this.material).copy(this)},copy:function(t){return dn.prototype.copy.call(this,t),void 0!==t.center&&this.center.copy(t.center),this}}),fi.prototype=Object.assign(Object.create(dn.prototype),{constructor:fi,copy:function(t){dn.prototype.copy.call(this,t,!1);for(var e=t.levels,n=0,r=e.length;n<r;n++){var i=e[n];this.addLevel(i.object.clone(),i.distance)}return this},addLevel:function(t,e){void 0===e&&(e=0),e=Math.abs(e);for(var n=this.levels,r=0;r<n.length&&!(e<n[r].distance);r++);n.splice(r,0,{distance:e,object:t}),this.add(t)},getObjectForDistance:function(t){for(var e=this.levels,n=1,r=e.length;n<r&&!(t<e[n].distance);n++);return e[n-1].object},raycast:function(){var t=new Ve;return function(e,n){t.setFromMatrixPosition(this.matrixWorld);var r=e.ray.origin.distanceTo(t);this.getObjectForDistance(r).raycast(e,n)}}(),update:function(){var t=new Ve,e=new Ve;return function(n){var r=this.levels;if(r.length>1){t.setFromMatrixPosition(n.matrixWorld),e.setFromMatrixPosition(this.matrixWorld);var i=t.distanceTo(e);r[0].object.visible=!0;for(var o=1,a=r.length;o<a&&i>=r[o].distance;o++)r[o-1].object.visible=!1,r[o].object.visible=!0;for(;o<a;o++)r[o].object.visible=!1}}}(),toJSON:function(t){var e=dn.prototype.toJSON.call(this,t);e.object.levels=[];for(var n=this.levels,r=0,i=n.length;r<i;r++){var o=n[r];e.object.levels.push({object:o.object.uuid,distance:o.distance})}return e}}),Object.assign(mi.prototype,{calculateInverses:function(){this.boneInverses=[];for(var t=0,e=this.bones.length;t<e;t++){var n=new Ge;this.bones[t]&&n.getInverse(this.bones[t].matrixWorld),this.boneInverses.push(n)}},pose:function(){var t,e,n;for(e=0,n=this.bones.length;e<n;e++)(t=this.bones[e])&&t.matrixWorld.getInverse(this.boneInverses[e]);for(e=0,n=this.bones.length;e<n;e++)(t=this.bones[e])&&(t.parent&&t.parent.isBone?(t.matrix.getInverse(t.parent.matrixWorld),t.matrix.multiply(t.matrixWorld)):t.matrix.copy(t.matrixWorld),t.matrix.decompose(t.position,t.quaternion,t.scale))},update:function(){var t=new Ge,e=new Ge;return function(){for(var n=this.bones,r=this.boneInverses,i=this.boneMatrices,o=this.boneTexture,a=0,s=n.length;a<s;a++){var c=n[a]?n[a].matrixWorld:e;t.multiplyMatrices(c,r[a]),t.toArray(i,16*a)}void 0!==o&&(o.needsUpdate=!0)}}(),clone:function(){return new mi(this.bones,this.boneInverses)},getBoneByName:function(t){for(var e=0,n=this.bones.length;e<n;e++){var r=this.bones[e];if(r.name===t)return r}}}),gi.prototype=Object.assign(Object.create(dn.prototype),{constructor:gi,isBone:!0}),vi.prototype=Object.assign(Object.create(kn.prototype),{constructor:vi,isSkinnedMesh:!0,initBones:function(){var t,e,n,r,i=[];if(this.geometry&&void 0!==this.geometry.bones){for(n=0,r=this.geometry.bones.length;n<r;n++)e=this.geometry.bones[n],t=new gi,i.push(t),t.name=e.name,t.position.fromArray(e.pos),t.quaternion.fromArray(e.rotq),void 0!==e.scl&&t.scale.fromArray(e.scl);for(n=0,r=this.geometry.bones.length;n<r;n++)-1!==(e=this.geometry.bones[n]).parent&&null!==e.parent&&void 0!==i[e.parent]?i[e.parent].add(i[n]):this.add(i[n])}return this.updateMatrixWorld(!0),i},bind:function(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.getInverse(e)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){var t,e;if(this.geometry&&this.geometry.isGeometry)for(e=0;e<this.geometry.skinWeights.length;e++){var n=this.geometry.skinWeights[e];(t=1/n.manhattanLength())!==1/0?n.multiplyScalar(t):n.set(1,0,0,0)}else if(this.geometry&&this.geometry.isBufferGeometry){var r=new Xe,i=this.geometry.attributes.skinWeight;for(e=0;e<i.count;e++)r.x=i.getX(e),r.y=i.getY(e),r.z=i.getZ(e),r.w=i.getW(e),(t=1/r.manhattanLength())!==1/0?r.multiplyScalar(t):r.set(1,0,0,0),i.setXYZW(e,r.x,r.y,r.z,r.w)}},updateMatrixWorld:function(t){kn.prototype.updateMatrixWorld.call(this,t),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),yi.prototype=Object.create(Bn.prototype),yi.prototype.constructor=yi,yi.prototype.isLineBasicMaterial=!0,yi.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this},xi.prototype=Object.assign(Object.create(dn.prototype),{constructor:xi,isLine:!0,computeLineDistances:function(){var t=new Ve,e=new Ve;return function(){var n=this.geometry;if(n.isBufferGeometry)if(null===n.index){for(var r=n.attributes.position,i=[0],o=1,a=r.count;o<a;o++)t.fromBufferAttribute(r,o-1),e.fromBufferAttribute(r,o),i[o]=i[o-1],i[o]+=t.distanceTo(e);n.addAttribute("lineDistance",new Sn(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(n.isGeometry){var s=n.vertices;(i=n.lineDistances)[0]=0;for(o=1,a=s.length;o<a;o++)i[o]=i[o-1],i[o]+=s[o-1].distanceTo(s[o])}return this}}(),raycast:function(){var t=new Ge,e=new Gn,n=new Qe;return function(r,i){var o=r.linePrecision,a=o*o,s=this.geometry,c=this.matrixWorld;if(null===s.boundingSphere&&s.computeBoundingSphere(),n.copy(s.boundingSphere),n.applyMatrix4(c),!1!==r.ray.intersectsSphere(n)){t.getInverse(c),e.copy(r.ray).applyMatrix4(t);var u=new Ve,h=new Ve,l=new Ve,d=new Ve,p=this&&this.isLineSegments?2:1;if(s.isBufferGeometry){var f=s.index,m=s.attributes.position.array;if(null!==f)for(var g=f.array,v=0,y=g.length-1;v<y;v+=p){var x=g[v],b=g[v+1];if(u.fromArray(m,3*x),h.fromArray(m,3*b),!(e.distanceSqToSegment(u,h,d,l)>a))d.applyMatrix4(this.matrixWorld),(M=r.ray.origin.distanceTo(d))<r.near||M>r.far||i.push({distance:M,point:l.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}else for(v=0,y=m.length/3-1;v<y;v+=p){if(u.fromArray(m,3*v),h.fromArray(m,3*v+3),!(e.distanceSqToSegment(u,h,d,l)>a))d.applyMatrix4(this.matrixWorld),(M=r.ray.origin.distanceTo(d))<r.near||M>r.far||i.push({distance:M,point:l.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}else if(s.isGeometry){var _=s.vertices,w=_.length;for(v=0;v<w-1;v+=p){var M;if(!(e.distanceSqToSegment(_[v],_[v+1],d,l)>a))d.applyMatrix4(this.matrixWorld),(M=r.ray.origin.distanceTo(d))<r.near||M>r.far||i.push({distance:M,point:l.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),bi.prototype=Object.assign(Object.create(xi.prototype),{constructor:bi,isLineSegments:!0,computeLineDistances:function(){var t=new Ve,e=new Ve;return function(){var n=this.geometry;if(n.isBufferGeometry)if(null===n.index){for(var r=n.attributes.position,i=[],o=0,a=r.count;o<a;o+=2)t.fromBufferAttribute(r,o),e.fromBufferAttribute(r,o+1),i[o]=0===o?0:i[o-1],i[o+1]=i[o]+t.distanceTo(e);n.addAttribute("lineDistance",new Sn(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(n.isGeometry){var s=n.vertices;for(i=n.lineDistances,o=0,a=s.length;o<a;o+=2)t.copy(s[o]),e.copy(s[o+1]),i[o]=0===o?0:i[o-1],i[o+1]=i[o]+t.distanceTo(e)}return this}}()}),_i.prototype=Object.assign(Object.create(xi.prototype),{constructor:_i,isLineLoop:!0}),wi.prototype=Object.create(Bn.prototype),wi.prototype.constructor=wi,wi.prototype.isPointsMaterial=!0,wi.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.morphTargets=t.morphTargets,this},Mi.prototype=Object.assign(Object.create(dn.prototype),{constructor:Mi,isPoints:!0,raycast:function(){var t=new Ge,e=new Gn,n=new Qe;return function(r,i){var o=this,a=this.geometry,s=this.matrixWorld,c=r.params.Points.threshold;if(null===a.boundingSphere&&a.computeBoundingSphere(),n.copy(a.boundingSphere),n.applyMatrix4(s),n.radius+=c,!1!==r.ray.intersectsSphere(n)){t.getInverse(s),e.copy(r.ray).applyMatrix4(t);var u=c/((this.scale.x+this.scale.y+this.scale.z)/3),h=u*u,l=new Ve,d=new Ve;if(a.isBufferGeometry){var p=a.index,f=a.attributes.position.array;if(null!==p)for(var m=p.array,g=0,v=m.length;g<v;g++){var y=m[g];l.fromArray(f,3*y),_(l,y)}else{g=0;for(var x=f.length/3;g<x;g++)l.fromArray(f,3*g),_(l,g)}}else{var b=a.vertices;for(g=0,x=b.length;g<x;g++)_(b[g],g)}}function _(t,n){var a=e.distanceSqToPoint(t);if(a<h){e.closestPointToPoint(t,d),d.applyMatrix4(s);var c=r.ray.origin.distanceTo(d);if(c<r.near||c>r.far)return;i.push({distance:c,distanceToRay:Math.sqrt(a),point:d.clone(),index:n,face:null,object:o})}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Ei.prototype=Object.assign(Object.create(We.prototype),{constructor:Ei,isVideoTexture:!0,update:function(){var t=this.image;t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),Ti.prototype=Object.create(We.prototype),Ti.prototype.constructor=Ti,Ti.prototype.isCompressedTexture=!0,Si.prototype=Object.create(We.prototype),Si.prototype.constructor=Si,Si.prototype.isDepthTexture=!0,Ai.prototype=Object.create(Pn.prototype),Ai.prototype.constructor=Ai,Ri.prototype=Object.create(vn.prototype),Ri.prototype.constructor=Ri,Li.prototype=Object.create(Pn.prototype),Li.prototype.constructor=Li,Ci.prototype=Object.create(vn.prototype),Ci.prototype.constructor=Ci,Pi.prototype=Object.create(Pn.prototype),Pi.prototype.constructor=Pi,Oi.prototype=Object.create(vn.prototype),Oi.prototype.constructor=Oi,Ii.prototype=Object.create(Pi.prototype),Ii.prototype.constructor=Ii,Ni.prototype=Object.create(vn.prototype),Ni.prototype.constructor=Ni,Di.prototype=Object.create(Pi.prototype),Di.prototype.constructor=Di,Ui.prototype=Object.create(vn.prototype),Ui.prototype.constructor=Ui,Bi.prototype=Object.create(Pi.prototype),Bi.prototype.constructor=Bi,Fi.prototype=Object.create(vn.prototype),Fi.prototype.constructor=Fi,zi.prototype=Object.create(Pi.prototype),zi.prototype.constructor=zi,Gi.prototype=Object.create(vn.prototype),Gi.prototype.constructor=Gi,Hi.prototype=Object.create(Pn.prototype),Hi.prototype.constructor=Hi,Vi.prototype=Object.create(vn.prototype),Vi.prototype.constructor=Vi,ki.prototype=Object.create(Pn.prototype),ki.prototype.constructor=ki,ji.prototype=Object.create(vn.prototype),ji.prototype.constructor=ji,Wi.prototype=Object.create(Pn.prototype),Wi.prototype.constructor=Wi;var Xi=function(t,e,n){n=n||2;var r,i,o,a,s,c,u,h=e&&e.length,l=h?e[0]*n:t.length,d=qi(t,0,l,n,!0),p=[];if(!d)return p;if(h&&(d=function(t,e,n,r){var i,o,a,s,c,u=[];for(i=0,o=e.length;i<o;i++)a=e[i]*r,s=i<o-1?e[i+1]*r:t.length,(c=qi(t,a,s,r,!1))===c.next&&(c.steiner=!0),u.push(ro(c));for(u.sort(to),i=0;i<u.length;i++)eo(u[i],n),n=Yi(n,n.next);return n}(t,e,d,n)),t.length>80*n){r=o=t[0],i=a=t[1];for(var f=n;f<l;f+=n)s=t[f],c=t[f+1],s<r&&(r=s),c<i&&(i=c),s>o&&(o=s),c>a&&(a=c);u=0!==(u=Math.max(o-r,a-i))?1/u:0}return Zi(d,p,n,r,i,u),p};function qi(t,e,n,r,i){var o,a;if(i===function(t,e,n,r){for(var i=0,o=e,a=n-r;o<n;o+=r)i+=(t[a]-t[o])*(t[o+1]+t[a+1]),a=o;return i}(t,e,n,r)>0)for(o=e;o<n;o+=r)a=lo(o,t[o],t[o+1],a);else for(o=n-r;o>=e;o-=r)a=lo(o,t[o],t[o+1],a);return a&&so(a,a.next)&&(po(a),a=a.next),a}function Yi(t,e){if(!t)return t;e||(e=t);var n,r=t;do{if(n=!1,r.steiner||!so(r,r.next)&&0!==ao(r.prev,r,r.next))r=r.next;else{if(po(r),(r=e=r.prev)===r.next)break;n=!0}}while(n||r!==e);return e}function Zi(t,e,n,r,i,o,a){if(t){!a&&o&&function(t,e,n,r){var i=t;do{null===i.z&&(i.z=no(i.x,i.y,e,n,r)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==t);i.prevZ.nextZ=null,i.prevZ=null,function(t){var e,n,r,i,o,a,s,c,u=1;do{for(n=t,t=null,o=null,a=0;n;){for(a++,r=n,s=0,e=0;e<u&&(s++,r=r.nextZ);e++);for(c=u;s>0||c>0&&r;)0!==s&&(0===c||!r||n.z<=r.z)?(i=n,n=n.nextZ,s--):(i=r,r=r.nextZ,c--),o?o.nextZ=i:t=i,i.prevZ=o,o=i;n=r}o.nextZ=null,u*=2}while(a>1)}(i)}(t,r,i,o);for(var s,c,u=t;t.prev!==t.next;)if(s=t.prev,c=t.next,o?Qi(t,r,i,o):Ji(t))e.push(s.i/n),e.push(t.i/n),e.push(c.i/n),po(t),t=c.next,u=c.next;else if((t=c)===u){a?1===a?Zi(t=Ki(t,e,n),e,n,r,i,o,2):2===a&&$i(t,e,n,r,i,o):Zi(Yi(t),e,n,r,i,o,1);break}}}function Ji(t){var e=t.prev,n=t,r=t.next;if(ao(e,n,r)>=0)return!1;for(var i=t.next.next;i!==t.prev;){if(io(e.x,e.y,n.x,n.y,r.x,r.y,i.x,i.y)&&ao(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function Qi(t,e,n,r){var i=t.prev,o=t,a=t.next;if(ao(i,o,a)>=0)return!1;for(var s=i.x<o.x?i.x<a.x?i.x:a.x:o.x<a.x?o.x:a.x,c=i.y<o.y?i.y<a.y?i.y:a.y:o.y<a.y?o.y:a.y,u=i.x>o.x?i.x>a.x?i.x:a.x:o.x>a.x?o.x:a.x,h=i.y>o.y?i.y>a.y?i.y:a.y:o.y>a.y?o.y:a.y,l=no(s,c,e,n,r),d=no(u,h,e,n,r),p=t.nextZ;p&&p.z<=d;){if(p!==t.prev&&p!==t.next&&io(i.x,i.y,o.x,o.y,a.x,a.y,p.x,p.y)&&ao(p.prev,p,p.next)>=0)return!1;p=p.nextZ}for(p=t.prevZ;p&&p.z>=l;){if(p!==t.prev&&p!==t.next&&io(i.x,i.y,o.x,o.y,a.x,a.y,p.x,p.y)&&ao(p.prev,p,p.next)>=0)return!1;p=p.prevZ}return!0}function Ki(t,e,n){var r=t;do{var i=r.prev,o=r.next.next;!so(i,o)&&co(i,r,r.next,o)&&uo(i,o)&&uo(o,i)&&(e.push(i.i/n),e.push(r.i/n),e.push(o.i/n),po(r),po(r.next),r=t=o),r=r.next}while(r!==t);return r}function $i(t,e,n,r,i,o){var a=t;do{for(var s=a.next.next;s!==a.prev;){if(a.i!==s.i&&oo(a,s)){var c=ho(a,s);return a=Yi(a,a.next),c=Yi(c,c.next),Zi(a,e,n,r,i,o),void Zi(c,e,n,r,i,o)}s=s.next}a=a.next}while(a!==t)}function to(t,e){return t.x-e.x}function eo(t,e){if(e=function(t,e){var n,r=e,i=t.x,o=t.y,a=-1/0;do{if(o<=r.y&&o>=r.next.y&&r.next.y!==r.y){var s=r.x+(o-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(s<=i&&s>a){if(a=s,s===i){if(o===r.y)return r;if(o===r.next.y)return r.next}n=r.x<r.next.x?r:r.next}}r=r.next}while(r!==e);if(!n)return null;if(i===a)return n.prev;var c,u=n,h=n.x,l=n.y,d=1/0;r=n.next;for(;r!==u;)i>=r.x&&r.x>=h&&i!==r.x&&io(o<l?i:a,o,h,l,o<l?a:i,o,r.x,r.y)&&((c=Math.abs(o-r.y)/(i-r.x))<d||c===d&&r.x>n.x)&&uo(r,t)&&(n=r,d=c),r=r.next;return n}(t,e)){var n=ho(e,t);Yi(n,n.next)}}function no(t,e,n,r,i){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*i)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*i)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function ro(t){var e=t,n=t;do{e.x<n.x&&(n=e),e=e.next}while(e!==t);return n}function io(t,e,n,r,i,o,a,s){return(i-a)*(e-s)-(t-a)*(o-s)>=0&&(t-a)*(r-s)-(n-a)*(e-s)>=0&&(n-a)*(o-s)-(i-a)*(r-s)>=0}function oo(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&co(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&uo(t,e)&&uo(e,t)&&function(t,e){var n=t,r=!1,i=(t.x+e.x)/2,o=(t.y+e.y)/2;do{n.y>o!=n.next.y>o&&n.next.y!==n.y&&i<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==t);return r}(t,e)}function ao(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function so(t,e){return t.x===e.x&&t.y===e.y}function co(t,e,n,r){return!!(so(t,e)&&so(n,r)||so(t,r)&&so(n,e))||ao(t,e,n)>0!=ao(t,e,r)>0&&ao(n,r,t)>0!=ao(n,r,e)>0}function uo(t,e){return ao(t.prev,t,t.next)<0?ao(t,e,t.next)>=0&&ao(t,t.prev,e)>=0:ao(t,e,t.prev)<0||ao(t,t.next,e)<0}function ho(t,e){var n=new fo(t.i,t.x,t.y),r=new fo(e.i,e.x,e.y),i=t.next,o=e.prev;return t.next=e,e.prev=t,n.next=i,i.prev=n,r.next=n,n.prev=r,o.next=r,r.prev=o,r}function lo(t,e,n,r){var i=new fo(t,e,n);return r?(i.next=r.next,i.prev=r,r.next.prev=i,r.next=i):(i.prev=i,i.next=i),i}function po(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function fo(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var mo={area:function(t){for(var e=t.length,n=0,r=e-1,i=0;i<e;r=i++)n+=t[r].x*t[i].y-t[i].x*t[r].y;return.5*n},isClockWise:function(t){return mo.area(t)<0},triangulateShape:function(t,e){var n=[],r=[],i=[];go(t),vo(n,t);var o=t.length;e.forEach(go);for(var a=0;a<e.length;a++)r.push(o),o+=e[a].length,vo(n,e[a]);var s=Xi(n,r);for(a=0;a<s.length;a+=3)i.push(s.slice(a,a+3));return i}};function go(t){var e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function vo(t,e){for(var n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}function yo(t,e){vn.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},this.fromBufferGeometry(new xo(t,e)),this.mergeVertices()}function xo(t,e){Pn.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:t,options:e};for(var n=this,r=[],i=[],o=0,a=(t=Array.isArray(t)?t:[t]).length;o<a;o++){s(t[o])}function s(t){var o=[],a=void 0!==e.curveSegments?e.curveSegments:12,s=void 0!==e.steps?e.steps:1,c=void 0!==e.depth?e.depth:100,u=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:6,l=void 0!==e.bevelSize?e.bevelSize:h-2,d=void 0!==e.bevelSegments?e.bevelSegments:3,p=e.extrudePath,f=void 0!==e.UVGenerator?e.UVGenerator:bo;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),c=e.amount);var m,g,v,y,x,b,_,w,M=!1;p&&(m=p.getSpacedPoints(s),M=!0,u=!1,g=p.computeFrenetFrames(s,!1),v=new Ve,y=new Ve,x=new Ve),u||(d=0,h=0,l=0);var E=t.extractPoints(a),T=E.shape,S=E.holes;if(!mo.isClockWise(T))for(T=T.reverse(),_=0,w=S.length;_<w;_++)b=S[_],mo.isClockWise(b)&&(S[_]=b.reverse());var A=mo.triangulateShape(T,S),R=T;for(_=0,w=S.length;_<w;_++)b=S[_],T=T.concat(b);function L(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(n).add(t)}var C,P,O,I,N,D,U=T.length,B=A.length;function F(t,e,n){var r,i,o,a=t.x-e.x,s=t.y-e.y,c=n.x-t.x,u=n.y-t.y,h=a*a+s*s,l=a*u-s*c;if(Math.abs(l)>Number.EPSILON){var d=Math.sqrt(h),p=Math.sqrt(c*c+u*u),f=e.x-s/d,m=e.y+a/d,g=((n.x-u/p-f)*u-(n.y+c/p-m)*c)/(a*u-s*c),v=(r=f+a*g-t.x)*r+(i=m+s*g-t.y)*i;if(v<=2)return new ze(r,i);o=Math.sqrt(v/2)}else{var y=!1;a>Number.EPSILON?c>Number.EPSILON&&(y=!0):a<-Number.EPSILON?c<-Number.EPSILON&&(y=!0):Math.sign(s)===Math.sign(u)&&(y=!0),y?(r=-s,i=a,o=Math.sqrt(h)):(r=a,i=s,o=Math.sqrt(h/2))}return new ze(r/o,i/o)}for(var z=[],G=0,H=R.length,V=H-1,k=G+1;G<H;G++,V++,k++)V===H&&(V=0),k===H&&(k=0),z[G]=F(R[G],R[V],R[k]);var j,W,X=[],q=z.concat();for(_=0,w=S.length;_<w;_++){for(b=S[_],j=[],G=0,V=(H=b.length)-1,k=G+1;G<H;G++,V++,k++)V===H&&(V=0),k===H&&(k=0),j[G]=F(b[G],b[V],b[k]);X.push(j),q=q.concat(j)}for(C=0;C<d;C++){for(O=C/d,I=h*Math.cos(O*Math.PI/2),P=l*Math.sin(O*Math.PI/2),G=0,H=R.length;G<H;G++)Z((N=L(R[G],z[G],P)).x,N.y,-I);for(_=0,w=S.length;_<w;_++)for(b=S[_],j=X[_],G=0,H=b.length;G<H;G++)Z((N=L(b[G],j[G],P)).x,N.y,-I)}for(P=l,G=0;G<U;G++)N=u?L(T[G],q[G],P):T[G],M?(y.copy(g.normals[0]).multiplyScalar(N.x),v.copy(g.binormals[0]).multiplyScalar(N.y),x.copy(m[0]).add(y).add(v),Z(x.x,x.y,x.z)):Z(N.x,N.y,0);for(W=1;W<=s;W++)for(G=0;G<U;G++)N=u?L(T[G],q[G],P):T[G],M?(y.copy(g.normals[W]).multiplyScalar(N.x),v.copy(g.binormals[W]).multiplyScalar(N.y),x.copy(m[W]).add(y).add(v),Z(x.x,x.y,x.z)):Z(N.x,N.y,c/s*W);for(C=d-1;C>=0;C--){for(O=C/d,I=h*Math.cos(O*Math.PI/2),P=l*Math.sin(O*Math.PI/2),G=0,H=R.length;G<H;G++)Z((N=L(R[G],z[G],P)).x,N.y,c+I);for(_=0,w=S.length;_<w;_++)for(b=S[_],j=X[_],G=0,H=b.length;G<H;G++)N=L(b[G],j[G],P),M?Z(N.x,N.y+m[s-1].y,m[s-1].x+I):Z(N.x,N.y,c+I)}function Y(t,e){var n,r;for(G=t.length;--G>=0;){n=G,(r=G-1)<0&&(r=t.length-1);var i=0,o=s+2*d;for(i=0;i<o;i++){var a=U*i,c=U*(i+1);Q(e+n+a,e+r+a,e+r+c,e+n+c)}}}function Z(t,e,n){o.push(t),o.push(e),o.push(n)}function J(t,e,i){K(t),K(e),K(i);var o=r.length/3,a=f.generateTopUV(n,r,o-3,o-2,o-1);$(a[0]),$(a[1]),$(a[2])}function Q(t,e,i,o){K(t),K(e),K(o),K(e),K(i),K(o);var a=r.length/3,s=f.generateSideWallUV(n,r,a-6,a-3,a-2,a-1);$(s[0]),$(s[1]),$(s[3]),$(s[1]),$(s[2]),$(s[3])}function K(t){r.push(o[3*t+0]),r.push(o[3*t+1]),r.push(o[3*t+2])}function $(t){i.push(t.x),i.push(t.y)}!function(){var t=r.length/3;if(u){var e=0,i=U*e;for(G=0;G<B;G++)J((D=A[G])[2]+i,D[1]+i,D[0]+i);for(i=U*(e=s+2*d),G=0;G<B;G++)J((D=A[G])[0]+i,D[1]+i,D[2]+i)}else{for(G=0;G<B;G++)J((D=A[G])[2],D[1],D[0]);for(G=0;G<B;G++)J((D=A[G])[0]+U*s,D[1]+U*s,D[2]+U*s)}n.addGroup(t,r.length/3-t,0)}(),function(){var t=r.length/3,e=0;for(Y(R,e),e+=R.length,_=0,w=S.length;_<w;_++)Y(b=S[_],e),e+=b.length;n.addGroup(t,r.length/3-t,1)}()}this.addAttribute("position",new Sn(r,3)),this.addAttribute("uv",new Sn(i,2)),this.computeVertexNormals()}yo.prototype=Object.create(vn.prototype),yo.prototype.constructor=yo,yo.prototype.toJSON=function(){var t=vn.prototype.toJSON.call(this);return _o(this.parameters.shapes,this.parameters.options,t)},xo.prototype=Object.create(Pn.prototype),xo.prototype.constructor=xo,xo.prototype.toJSON=function(){var t=Pn.prototype.toJSON.call(this);return _o(this.parameters.shapes,this.parameters.options,t)};var bo={generateTopUV:function(t,e,n,r,i){var o=e[3*n],a=e[3*n+1],s=e[3*r],c=e[3*r+1],u=e[3*i],h=e[3*i+1];return[new ze(o,a),new ze(s,c),new ze(u,h)]},generateSideWallUV:function(t,e,n,r,i,o){var a=e[3*n],s=e[3*n+1],c=e[3*n+2],u=e[3*r],h=e[3*r+1],l=e[3*r+2],d=e[3*i],p=e[3*i+1],f=e[3*i+2],m=e[3*o],g=e[3*o+1],v=e[3*o+2];return Math.abs(s-h)<.01?[new ze(a,1-c),new ze(u,1-l),new ze(d,1-f),new ze(m,1-v)]:[new ze(s,1-c),new ze(h,1-l),new ze(p,1-f),new ze(g,1-v)]}};function _o(t,e,n){if(n.shapes=[],Array.isArray(t))for(var r=0,i=t.length;r<i;r++){var o=t[r];n.shapes.push(o.uuid)}else n.shapes.push(t.uuid);return void 0!==e.extrudePath&&(n.options.extrudePath=e.extrudePath.toJSON()),n}function wo(t,e){vn.call(this),this.type="TextGeometry",this.parameters={text:t,parameters:e},this.fromBufferGeometry(new Mo(t,e)),this.mergeVertices()}function Mo(t,e){var n=(e=e||{}).font;if(!n||!n.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new vn;var r=n.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),xo.call(this,r,e),this.type="TextBufferGeometry"}function Eo(t,e,n,r,i,o,a){vn.call(this),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:r,phiLength:i,thetaStart:o,thetaLength:a},this.fromBufferGeometry(new To(t,e,n,r,i,o,a)),this.mergeVertices()}function To(t,e,n,r,i,o,a){Pn.call(this),this.type="SphereBufferGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:r,phiLength:i,thetaStart:o,thetaLength:a},t=t||1,e=Math.max(3,Math.floor(e)||8),n=Math.max(2,Math.floor(n)||6),r=void 0!==r?r:0,i=void 0!==i?i:2*Math.PI;var s,c,u=(o=void 0!==o?o:0)+(a=void 0!==a?a:Math.PI),h=0,l=[],d=new Ve,p=new Ve,f=[],m=[],g=[],v=[];for(c=0;c<=n;c++){var y=[],x=c/n;for(s=0;s<=e;s++){var b=s/e;d.x=-t*Math.cos(r+b*i)*Math.sin(o+x*a),d.y=t*Math.cos(o+x*a),d.z=t*Math.sin(r+b*i)*Math.sin(o+x*a),m.push(d.x,d.y,d.z),p.set(d.x,d.y,d.z).normalize(),g.push(p.x,p.y,p.z),v.push(b,1-x),y.push(h++)}l.push(y)}for(c=0;c<n;c++)for(s=0;s<e;s++){var _=l[c][s+1],w=l[c][s],M=l[c+1][s],E=l[c+1][s+1];(0!==c||o>0)&&f.push(_,w,E),(c!==n-1||u<Math.PI)&&f.push(w,M,E)}this.setIndex(f),this.addAttribute("position",new Sn(m,3)),this.addAttribute("normal",new Sn(g,3)),this.addAttribute("uv",new Sn(v,2))}function So(t,e,n,r,i,o){vn.call(this),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:o},this.fromBufferGeometry(new Ao(t,e,n,r,i,o)),this.mergeVertices()}function Ao(t,e,n,r,i,o){Pn.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:o},t=t||.5,e=e||1,i=void 0!==i?i:0,o=void 0!==o?o:2*Math.PI,n=void 0!==n?Math.max(3,n):8;var a,s,c,u=[],h=[],l=[],d=[],p=t,f=(e-t)/(r=void 0!==r?Math.max(1,r):1),m=new Ve,g=new ze;for(s=0;s<=r;s++){for(c=0;c<=n;c++)a=i+c/n*o,m.x=p*Math.cos(a),m.y=p*Math.sin(a),h.push(m.x,m.y,m.z),l.push(0,0,1),g.x=(m.x/e+1)/2,g.y=(m.y/e+1)/2,d.push(g.x,g.y);p+=f}for(s=0;s<r;s++){var v=s*(n+1);for(c=0;c<n;c++){var y=a=c+v,x=a+n+1,b=a+n+2,_=a+1;u.push(y,x,_),u.push(x,b,_)}}this.setIndex(u),this.addAttribute("position",new Sn(h,3)),this.addAttribute("normal",new Sn(l,3)),this.addAttribute("uv",new Sn(d,2))}function Ro(t,e,n,r){vn.call(this),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:r},this.fromBufferGeometry(new Lo(t,e,n,r)),this.mergeVertices()}function Lo(t,e,n,r){Pn.call(this),this.type="LatheBufferGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:r},e=Math.floor(e)||12,n=n||0,r=r||2*Math.PI,r=Fe.clamp(r,0,2*Math.PI);var i,o,a,s=[],c=[],u=[],h=1/e,l=new Ve,d=new ze;for(o=0;o<=e;o++){var p=n+o*h*r,f=Math.sin(p),m=Math.cos(p);for(a=0;a<=t.length-1;a++)l.x=t[a].x*f,l.y=t[a].y,l.z=t[a].x*m,c.push(l.x,l.y,l.z),d.x=o/e,d.y=a/(t.length-1),u.push(d.x,d.y)}for(o=0;o<e;o++)for(a=0;a<t.length-1;a++){var g=i=a+o*t.length,v=i+t.length,y=i+t.length+1,x=i+1;s.push(g,v,x),s.push(v,y,x)}if(this.setIndex(s),this.addAttribute("position",new Sn(c,3)),this.addAttribute("uv",new Sn(u,2)),this.computeVertexNormals(),r===2*Math.PI){var b=this.attributes.normal.array,_=new Ve,w=new Ve,M=new Ve;for(i=e*t.length*3,o=0,a=0;o<t.length;o++,a+=3)_.x=b[a+0],_.y=b[a+1],_.z=b[a+2],w.x=b[i+a+0],w.y=b[i+a+1],w.z=b[i+a+2],M.addVectors(_,w).normalize(),b[a+0]=b[i+a+0]=M.x,b[a+1]=b[i+a+1]=M.y,b[a+2]=b[i+a+2]=M.z}}function Co(t,e){vn.call(this),this.type="ShapeGeometry","object"==typeof e&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),e=e.curveSegments),this.parameters={shapes:t,curveSegments:e},this.fromBufferGeometry(new Po(t,e)),this.mergeVertices()}function Po(t,e){Pn.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:t,curveSegments:e},e=e||12;var n=[],r=[],i=[],o=[],a=0,s=0;if(!1===Array.isArray(t))u(t);else for(var c=0;c<t.length;c++)u(t[c]),this.addGroup(a,s,c),a+=s,s=0;function u(t){var a,c,u,h=r.length/3,l=t.extractPoints(e),d=l.shape,p=l.holes;if(!1===mo.isClockWise(d))for(d=d.reverse(),a=0,c=p.length;a<c;a++)u=p[a],!0===mo.isClockWise(u)&&(p[a]=u.reverse());var f=mo.triangulateShape(d,p);for(a=0,c=p.length;a<c;a++)u=p[a],d=d.concat(u);for(a=0,c=d.length;a<c;a++){var m=d[a];r.push(m.x,m.y,0),i.push(0,0,1),o.push(m.x,m.y)}for(a=0,c=f.length;a<c;a++){var g=f[a],v=g[0]+h,y=g[1]+h,x=g[2]+h;n.push(v,y,x),s+=3}}this.setIndex(n),this.addAttribute("position",new Sn(r,3)),this.addAttribute("normal",new Sn(i,3)),this.addAttribute("uv",new Sn(o,2))}function Oo(t,e){if(e.shapes=[],Array.isArray(t))for(var n=0,r=t.length;n<r;n++){var i=t[n];e.shapes.push(i.uuid)}else e.shapes.push(t.uuid);return e}function Io(t,e){Pn.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:e},e=void 0!==e?e:1;var n,r,i,o,a=[],s=Math.cos(Fe.DEG2RAD*e),c=[0,0],u={},h=["a","b","c"];t.isBufferGeometry?(o=new vn).fromBufferGeometry(t):o=t.clone(),o.mergeVertices(),o.computeFaceNormals();for(var l=o.vertices,d=o.faces,p=0,f=d.length;p<f;p++)for(var m=d[p],g=0;g<3;g++)n=m[h[g]],r=m[h[(g+1)%3]],c[0]=Math.min(n,r),c[1]=Math.max(n,r),void 0===u[i=c[0]+","+c[1]]?u[i]={index1:c[0],index2:c[1],face1:p,face2:void 0}:u[i].face2=p;for(i in u){var v=u[i];if(void 0===v.face2||d[v.face1].normal.dot(d[v.face2].normal)<=s){var y=l[v.index1];a.push(y.x,y.y,y.z),y=l[v.index2],a.push(y.x,y.y,y.z)}}this.addAttribute("position",new Sn(a,3))}function No(t,e,n,r,i,o,a,s){vn.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:r,heightSegments:i,openEnded:o,thetaStart:a,thetaLength:s},this.fromBufferGeometry(new Do(t,e,n,r,i,o,a,s)),this.mergeVertices()}function Do(t,e,n,r,i,o,a,s){Pn.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:r,heightSegments:i,openEnded:o,thetaStart:a,thetaLength:s};var c=this;t=void 0!==t?t:1,e=void 0!==e?e:1,n=n||1,r=Math.floor(r)||8,i=Math.floor(i)||1,o=void 0!==o&&o,a=void 0!==a?a:0,s=void 0!==s?s:2*Math.PI;var u=[],h=[],l=[],d=[],p=0,f=[],m=n/2,g=0;function v(n){var i,o,f,v=new ze,y=new Ve,x=0,b=!0===n?t:e,_=!0===n?1:-1;for(o=p,i=1;i<=r;i++)h.push(0,m*_,0),l.push(0,_,0),d.push(.5,.5),p++;for(f=p,i=0;i<=r;i++){var w=i/r*s+a,M=Math.cos(w),E=Math.sin(w);y.x=b*E,y.y=m*_,y.z=b*M,h.push(y.x,y.y,y.z),l.push(0,_,0),v.x=.5*M+.5,v.y=.5*E*_+.5,d.push(v.x,v.y),p++}for(i=0;i<r;i++){var T=o+i,S=f+i;!0===n?u.push(S,S+1,T):u.push(S+1,S,T),x+=3}c.addGroup(g,x,!0===n?1:2),g+=x}!function(){var o,v,y=new Ve,x=new Ve,b=0,_=(e-t)/n;for(v=0;v<=i;v++){var w=[],M=v/i,E=M*(e-t)+t;for(o=0;o<=r;o++){var T=o/r,S=T*s+a,A=Math.sin(S),R=Math.cos(S);x.x=E*A,x.y=-M*n+m,x.z=E*R,h.push(x.x,x.y,x.z),y.set(A,_,R).normalize(),l.push(y.x,y.y,y.z),d.push(T,1-M),w.push(p++)}f.push(w)}for(o=0;o<r;o++)for(v=0;v<i;v++){var L=f[v][o],C=f[v+1][o],P=f[v+1][o+1],O=f[v][o+1];u.push(L,C,O),u.push(C,P,O),b+=6}c.addGroup(g,b,0),g+=b}(),!1===o&&(t>0&&v(!0),e>0&&v(!1)),this.setIndex(u),this.addAttribute("position",new Sn(h,3)),this.addAttribute("normal",new Sn(l,3)),this.addAttribute("uv",new Sn(d,2))}function Uo(t,e,n,r,i,o,a){No.call(this,0,t,e,n,r,i,o,a),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:o,thetaLength:a}}function Bo(t,e,n,r,i,o,a){Do.call(this,0,t,e,n,r,i,o,a),this.type="ConeBufferGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:o,thetaLength:a}}function Fo(t,e,n,r){vn.call(this),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:r},this.fromBufferGeometry(new zo(t,e,n,r)),this.mergeVertices()}function zo(t,e,n,r){Pn.call(this),this.type="CircleBufferGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:r},t=t||1,e=void 0!==e?Math.max(3,e):8,n=void 0!==n?n:0,r=void 0!==r?r:2*Math.PI;var i,o,a=[],s=[],c=[],u=[],h=new Ve,l=new ze;for(s.push(0,0,0),c.push(0,0,1),u.push(.5,.5),o=0,i=3;o<=e;o++,i+=3){var d=n+o/e*r;h.x=t*Math.cos(d),h.y=t*Math.sin(d),s.push(h.x,h.y,h.z),c.push(0,0,1),l.x=(s[i]/t+1)/2,l.y=(s[i+1]/t+1)/2,u.push(l.x,l.y)}for(i=1;i<=e;i++)a.push(i,i+1,0);this.setIndex(a),this.addAttribute("position",new Sn(s,3)),this.addAttribute("normal",new Sn(c,3)),this.addAttribute("uv",new Sn(u,2))}wo.prototype=Object.create(vn.prototype),wo.prototype.constructor=wo,Mo.prototype=Object.create(xo.prototype),Mo.prototype.constructor=Mo,Eo.prototype=Object.create(vn.prototype),Eo.prototype.constructor=Eo,To.prototype=Object.create(Pn.prototype),To.prototype.constructor=To,So.prototype=Object.create(vn.prototype),So.prototype.constructor=So,Ao.prototype=Object.create(Pn.prototype),Ao.prototype.constructor=Ao,Ro.prototype=Object.create(vn.prototype),Ro.prototype.constructor=Ro,Lo.prototype=Object.create(Pn.prototype),Lo.prototype.constructor=Lo,Co.prototype=Object.create(vn.prototype),Co.prototype.constructor=Co,Co.prototype.toJSON=function(){var t=vn.prototype.toJSON.call(this);return Oo(this.parameters.shapes,t)},Po.prototype=Object.create(Pn.prototype),Po.prototype.constructor=Po,Po.prototype.toJSON=function(){var t=Pn.prototype.toJSON.call(this);return Oo(this.parameters.shapes,t)},Io.prototype=Object.create(Pn.prototype),Io.prototype.constructor=Io,No.prototype=Object.create(vn.prototype),No.prototype.constructor=No,Do.prototype=Object.create(Pn.prototype),Do.prototype.constructor=Do,Uo.prototype=Object.create(No.prototype),Uo.prototype.constructor=Uo,Bo.prototype=Object.create(Do.prototype),Bo.prototype.constructor=Bo,Fo.prototype=Object.create(vn.prototype),Fo.prototype.constructor=Fo,zo.prototype=Object.create(Pn.prototype),zo.prototype.constructor=zo;var Go=Object.freeze({WireframeGeometry:Ai,ParametricGeometry:Ri,ParametricBufferGeometry:Li,TetrahedronGeometry:Oi,TetrahedronBufferGeometry:Ii,OctahedronGeometry:Ni,OctahedronBufferGeometry:Di,IcosahedronGeometry:Ui,IcosahedronBufferGeometry:Bi,DodecahedronGeometry:Fi,DodecahedronBufferGeometry:zi,PolyhedronGeometry:Ci,PolyhedronBufferGeometry:Pi,TubeGeometry:Gi,TubeBufferGeometry:Hi,TorusKnotGeometry:Vi,TorusKnotBufferGeometry:ki,TorusGeometry:ji,TorusBufferGeometry:Wi,TextGeometry:wo,TextBufferGeometry:Mo,SphereGeometry:Eo,SphereBufferGeometry:To,RingGeometry:So,RingBufferGeometry:Ao,PlaneGeometry:Nn,PlaneBufferGeometry:Dn,LatheGeometry:Ro,LatheBufferGeometry:Lo,ShapeGeometry:Co,ShapeBufferGeometry:Po,ExtrudeGeometry:yo,ExtrudeBufferGeometry:xo,EdgesGeometry:Io,ConeGeometry:Uo,ConeBufferGeometry:Bo,CylinderGeometry:No,CylinderBufferGeometry:Do,CircleGeometry:Fo,CircleBufferGeometry:zo,BoxGeometry:On,BoxBufferGeometry:In});function Ho(t){Bn.call(this),this.type="ShadowMaterial",this.color=new rn(0),this.transparent=!0,this.setValues(t)}function Vo(t){zn.call(this,t),this.type="RawShaderMaterial"}function ko(t){Bn.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new rn(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new rn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ue,this.normalScale=new ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function jo(t){ko.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(t)}function Wo(t){Bn.call(this),this.type="MeshPhongMaterial",this.color=new rn(16777215),this.specular=new rn(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new rn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ue,this.normalScale=new ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=tt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Xo(t){Wo.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(t)}function qo(t){Bn.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ue,this.normalScale=new ze(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Yo(t){Bn.call(this),this.type="MeshLambertMaterial",this.color=new rn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new rn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=tt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Zo(t){yi.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}Ho.prototype=Object.create(Bn.prototype),Ho.prototype.constructor=Ho,Ho.prototype.isShadowMaterial=!0,Ho.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.color.copy(t.color),this},Vo.prototype=Object.create(zn.prototype),Vo.prototype.constructor=Vo,Vo.prototype.isRawShaderMaterial=!0,ko.prototype=Object.create(Bn.prototype),ko.prototype.constructor=ko,ko.prototype.isMeshStandardMaterial=!0,ko.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},jo.prototype=Object.create(ko.prototype),jo.prototype.constructor=jo,jo.prototype.isMeshPhysicalMaterial=!0,jo.prototype.copy=function(t){return ko.prototype.copy.call(this,t),this.defines={PHYSICAL:""},this.reflectivity=t.reflectivity,this.clearCoat=t.clearCoat,this.clearCoatRoughness=t.clearCoatRoughness,this},Wo.prototype=Object.create(Bn.prototype),Wo.prototype.constructor=Wo,Wo.prototype.isMeshPhongMaterial=!0,Wo.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Xo.prototype=Object.create(Wo.prototype),Xo.prototype.constructor=Xo,Xo.prototype.isMeshToonMaterial=!0,Xo.prototype.copy=function(t){return Wo.prototype.copy.call(this,t),this.gradientMap=t.gradientMap,this},qo.prototype=Object.create(Bn.prototype),qo.prototype.constructor=qo,qo.prototype.isMeshNormalMaterial=!0,qo.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Yo.prototype=Object.create(Bn.prototype),Yo.prototype.constructor=Yo,Yo.prototype.isMeshLambertMaterial=!0,Yo.prototype.copy=function(t){return Bn.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Zo.prototype=Object.create(yi.prototype),Zo.prototype.constructor=Zo,Zo.prototype.isLineDashedMaterial=!0,Zo.prototype.copy=function(t){return yi.prototype.copy.call(this,t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this};var Jo=Object.freeze({ShadowMaterial:Ho,SpriteMaterial:di,RawShaderMaterial:Vo,ShaderMaterial:zn,PointsMaterial:wi,MeshPhysicalMaterial:jo,MeshStandardMaterial:ko,MeshPhongMaterial:Wo,MeshToonMaterial:Xo,MeshNormalMaterial:qo,MeshLambertMaterial:Yo,MeshDepthMaterial:Qr,MeshDistanceMaterial:Kr,MeshBasicMaterial:Fn,LineDashedMaterial:Zo,LineBasicMaterial:yi,Material:Bn}),Qo={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};function Ko(t,e,n){var r=this,i=!1,o=0,a=0,s=void 0;this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){a++,!1===i&&void 0!==r.onStart&&r.onStart(t,o,a),i=!0},this.itemEnd=function(t){o++,void 0!==r.onProgress&&r.onProgress(t,o,a),o===a&&(i=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(t){void 0!==r.onError&&r.onError(t)},this.resolveURL=function(t){return s?s(t):t},this.setURLModifier=function(t){return s=t,this}}var $o=new Ko,ta={};function ea(t){this.manager=void 0!==t?t:$o}function na(t){this.manager=void 0!==t?t:$o,this._parser=null}function ra(t){this.manager=void 0!==t?t:$o,this._parser=null}function ia(t){this.manager=void 0!==t?t:$o}function oa(t){this.manager=void 0!==t?t:$o}function aa(t){this.manager=void 0!==t?t:$o}function sa(){this.type="Curve",this.arcLengthDivisions=200}function ca(t,e,n,r,i,o,a,s){sa.call(this),this.type="EllipseCurve",this.aX=t||0,this.aY=e||0,this.xRadius=n||1,this.yRadius=r||1,this.aStartAngle=i||0,this.aEndAngle=o||2*Math.PI,this.aClockwise=a||!1,this.aRotation=s||0}function ua(t,e,n,r,i,o){ca.call(this,t,e,n,n,r,i,o),this.type="ArcCurve"}function ha(){var t=0,e=0,n=0,r=0;function i(i,o,a,s){t=i,e=a,n=-3*i+3*o-2*a-s,r=2*i-2*o+a+s}return{initCatmullRom:function(t,e,n,r,o){i(e,n,o*(n-t),o*(r-e))},initNonuniformCatmullRom:function(t,e,n,r,o,a,s){var c=(e-t)/o-(n-t)/(o+a)+(n-e)/a,u=(n-e)/a-(r-e)/(a+s)+(r-n)/s;i(e,n,c*=a,u*=a)},calc:function(i){var o=i*i;return t+e*i+n*o+r*(o*i)}}}Object.assign(ea.prototype,{load:function(t,e,n,r){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var i=this,o=Qo.get(t);if(void 0!==o)return i.manager.itemStart(t),setTimeout(function(){e&&e(o),i.manager.itemEnd(t)},0),o;if(void 0===ta[t]){var a=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(a){var s=a[1],c=!!a[2],u=a[3];u=window.decodeURIComponent(u),c&&(u=window.atob(u));try{var h,l=(this.responseType||"").toLowerCase();switch(l){case"arraybuffer":case"blob":for(var d=new Uint8Array(u.length),p=0;p<u.length;p++)d[p]=u.charCodeAt(p);h="blob"===l?new Blob([d.buffer],{type:s}):d.buffer;break;case"document":var f=new DOMParser;h=f.parseFromString(u,s);break;case"json":h=JSON.parse(u);break;default:h=u}window.setTimeout(function(){e&&e(h),i.manager.itemEnd(t)},0)}catch(e){window.setTimeout(function(){r&&r(e),i.manager.itemEnd(t),i.manager.itemError(t)},0)}}else{ta[t]=[],ta[t].push({onLoad:e,onProgress:n,onError:r});var m=new XMLHttpRequest;for(var g in m.open("GET",t,!0),m.addEventListener("load",function(e){var n=this.response;Qo.add(t,n);var r=ta[t];if(delete ta[t],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received.");for(var o=0,a=r.length;o<a;o++){(s=r[o]).onLoad&&s.onLoad(n)}i.manager.itemEnd(t)}else{for(o=0,a=r.length;o<a;o++){var s;(s=r[o]).onError&&s.onError(e)}i.manager.itemEnd(t),i.manager.itemError(t)}},!1),m.addEventListener("progress",function(e){for(var n=ta[t],r=0,i=n.length;r<i;r++){var o=n[r];o.onProgress&&o.onProgress(e)}},!1),m.addEventListener("error",function(e){var n=ta[t];delete ta[t];for(var r=0,o=n.length;r<o;r++){var a=n[r];a.onError&&a.onError(e)}i.manager.itemEnd(t),i.manager.itemError(t)},!1),void 0!==this.responseType&&(m.responseType=this.responseType),void 0!==this.withCredentials&&(m.withCredentials=this.withCredentials),m.overrideMimeType&&m.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)m.setRequestHeader(g,this.requestHeader[g]);m.send(null)}return i.manager.itemStart(t),m}ta[t].push({onLoad:e,onProgress:n,onError:r})},setPath:function(t){return this.path=t,this},setResponseType:function(t){return this.responseType=t,this},setWithCredentials:function(t){return this.withCredentials=t,this},setMimeType:function(t){return this.mimeType=t,this},setRequestHeader:function(t){return this.requestHeader=t,this}}),Object.assign(na.prototype,{load:function(t,e,n,r){var i=this,o=[],a=new Ti;a.image=o;var s=new ea(this.manager);function c(c){s.load(t[c],function(t){var n=i._parser(t,!0);o[c]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},6===(u+=1)&&(1===n.mipmapCount&&(a.minFilter=wt),a.format=n.format,a.needsUpdate=!0,e&&e(a))},n,r)}if(s.setPath(this.path),s.setResponseType("arraybuffer"),Array.isArray(t))for(var u=0,h=0,l=t.length;h<l;++h)c(h);else s.load(t,function(t){var n=i._parser(t,!0);if(n.isCubemap)for(var r=n.mipmaps.length/n.mipmapCount,s=0;s<r;s++){o[s]={mipmaps:[]};for(var c=0;c<n.mipmapCount;c++)o[s].mipmaps.push(n.mipmaps[s*n.mipmapCount+c]),o[s].format=n.format,o[s].width=n.width,o[s].height=n.height}else a.image.width=n.width,a.image.height=n.height,a.mipmaps=n.mipmaps;1===n.mipmapCount&&(a.minFilter=wt),a.format=n.format,a.needsUpdate=!0,e&&e(a)},n,r);return a},setPath:function(t){return this.path=t,this}}),Object.assign(ra.prototype,{load:function(t,e,n,r){var i=this,o=new Ze,a=new ea(this.manager);return a.setResponseType("arraybuffer"),a.load(t,function(t){var n=i._parser(t);n&&(void 0!==n.image?o.image=n.image:void 0!==n.data&&(o.image.width=n.width,o.image.height=n.height,o.image.data=n.data),o.wrapS=void 0!==n.wrapS?n.wrapS:vt,o.wrapT=void 0!==n.wrapT?n.wrapT:vt,o.magFilter=void 0!==n.magFilter?n.magFilter:wt,o.minFilter=void 0!==n.minFilter?n.minFilter:Et,o.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.format&&(o.format=n.format),void 0!==n.type&&(o.type=n.type),void 0!==n.mipmaps&&(o.mipmaps=n.mipmaps),1===n.mipmapCount&&(o.minFilter=wt),o.needsUpdate=!0,e&&e(o,n))},n,r),o}}),Object.assign(ia.prototype,{crossOrigin:"anonymous",load:function(t,e,n,r){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var i=this,o=Qo.get(t);if(void 0!==o)return i.manager.itemStart(t),setTimeout(function(){e&&e(o),i.manager.itemEnd(t)},0),o;var a=document.createElementNS("http://www.w3.org/1999/xhtml","img");function s(){a.removeEventListener("load",s,!1),a.removeEventListener("error",c,!1),Qo.add(t,this),e&&e(this),i.manager.itemEnd(t)}function c(e){a.removeEventListener("load",s,!1),a.removeEventListener("error",c,!1),r&&r(e),i.manager.itemEnd(t),i.manager.itemError(t)}return a.addEventListener("load",s,!1),a.addEventListener("error",c,!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),i.manager.itemStart(t),a.src=t,a},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(oa.prototype,{crossOrigin:"anonymous",load:function(t,e,n,r){var i=new Wn,o=new ia(this.manager);o.setCrossOrigin(this.crossOrigin),o.setPath(this.path);var a=0;function s(n){o.load(t[n],function(t){i.images[n]=t,6===++a&&(i.needsUpdate=!0,e&&e(i))},void 0,r)}for(var c=0;c<t.length;++c)s(c);return i},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(aa.prototype,{crossOrigin:"anonymous",load:function(t,e,n,r){var i=new We,o=new ia(this.manager);return o.setCrossOrigin(this.crossOrigin),o.setPath(this.path),o.load(t,function(n){i.image=n;var r=t.search(/\.(jpg|jpeg)$/)>0||0===t.search(/^data\:image\/jpeg/);i.format=r?Ft:zt,i.needsUpdate=!0,void 0!==e&&e(i)},n,r),i},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(sa.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(t,e){var n=this.getUtoTmapping(t);return this.getPoint(n,e)},getPoints:function(t){void 0===t&&(t=5);for(var e=[],n=0;n<=t;n++)e.push(this.getPoint(n/t));return e},getSpacedPoints:function(t){void 0===t&&(t=5);for(var e=[],n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e},getLength:function(){var t=this.getLengths();return t[t.length-1]},getLengths:function(t){if(void 0===t&&(t=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var e,n,r=[],i=this.getPoint(0),o=0;for(r.push(0),n=1;n<=t;n++)o+=(e=this.getPoint(n/t)).distanceTo(i),r.push(o),i=e;return this.cacheArcLengths=r,r},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(t,e){var n,r=this.getLengths(),i=0,o=r.length;n=e||t*r[o-1];for(var a,s=0,c=o-1;s<=c;)if((a=r[i=Math.floor(s+(c-s)/2)]-n)<0)s=i+1;else{if(!(a>0)){c=i;break}c=i-1}if(r[i=c]===n)return i/(o-1);var u=r[i];return(i+(n-u)/(r[i+1]-u))/(o-1)},getTangent:function(t){var e=t-1e-4,n=t+1e-4;e<0&&(e=0),n>1&&(n=1);var r=this.getPoint(e);return this.getPoint(n).clone().sub(r).normalize()},getTangentAt:function(t){var e=this.getUtoTmapping(t);return this.getTangent(e)},computeFrenetFrames:function(t,e){var n,r,i,o=new Ve,a=[],s=[],c=[],u=new Ve,h=new Ge;for(n=0;n<=t;n++)r=n/t,a[n]=this.getTangentAt(r),a[n].normalize();s[0]=new Ve,c[0]=new Ve;var l=Number.MAX_VALUE,d=Math.abs(a[0].x),p=Math.abs(a[0].y),f=Math.abs(a[0].z);for(d<=l&&(l=d,o.set(1,0,0)),p<=l&&(l=p,o.set(0,1,0)),f<=l&&o.set(0,0,1),u.crossVectors(a[0],o).normalize(),s[0].crossVectors(a[0],u),c[0].crossVectors(a[0],s[0]),n=1;n<=t;n++)s[n]=s[n-1].clone(),c[n]=c[n-1].clone(),u.crossVectors(a[n-1],a[n]),u.length()>Number.EPSILON&&(u.normalize(),i=Math.acos(Fe.clamp(a[n-1].dot(a[n]),-1,1)),s[n].applyMatrix4(h.makeRotationAxis(u,i))),c[n].crossVectors(a[n],s[n]);if(!0===e)for(i=Math.acos(Fe.clamp(s[0].dot(s[t]),-1,1)),i/=t,a[0].dot(u.crossVectors(s[0],s[t]))>0&&(i=-i),n=1;n<=t;n++)s[n].applyMatrix4(h.makeRotationAxis(a[n],i*n)),c[n].crossVectors(a[n],s[n]);return{tangents:a,normals:s,binormals:c}},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this},toJSON:function(){var t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t},fromJSON:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}),ca.prototype=Object.create(sa.prototype),ca.prototype.constructor=ca,ca.prototype.isEllipseCurve=!0,ca.prototype.getPoint=function(t,e){for(var n=e||new ze,r=2*Math.PI,i=this.aEndAngle-this.aStartAngle,o=Math.abs(i)<Number.EPSILON;i<0;)i+=r;for(;i>r;)i-=r;i<Number.EPSILON&&(i=o?0:r),!0!==this.aClockwise||o||(i===r?i=-r:i-=r);var a=this.aStartAngle+t*i,s=this.aX+this.xRadius*Math.cos(a),c=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){var u=Math.cos(this.aRotation),h=Math.sin(this.aRotation),l=s-this.aX,d=c-this.aY;s=l*u-d*h+this.aX,c=l*h+d*u+this.aY}return n.set(s,c)},ca.prototype.copy=function(t){return sa.prototype.copy.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},ca.prototype.toJSON=function(){var t=sa.prototype.toJSON.call(this);return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t},ca.prototype.fromJSON=function(t){return sa.prototype.fromJSON.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},ua.prototype=Object.create(ca.prototype),ua.prototype.constructor=ua,ua.prototype.isArcCurve=!0;var la=new Ve,da=new ha,pa=new ha,fa=new ha;function ma(t,e,n,r){sa.call(this),this.type="CatmullRomCurve3",this.points=t||[],this.closed=e||!1,this.curveType=n||"centripetal",this.tension=r||.5}function ga(t,e,n,r,i){var o=.5*(r-e),a=.5*(i-n),s=t*t;return(2*n-2*r+o+a)*(t*s)+(-3*n+3*r-2*o-a)*s+o*t+n}function va(t,e,n,r){return function(t,e){var n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,r)}function ya(t,e,n,r,i){return function(t,e){var n=1-t;return n*n*n*e}(t,e)+function(t,e){var n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,r)+function(t,e){return t*t*t*e}(t,i)}function xa(t,e,n,r){sa.call(this),this.type="CubicBezierCurve",this.v0=t||new ze,this.v1=e||new ze,this.v2=n||new ze,this.v3=r||new ze}function ba(t,e,n,r){sa.call(this),this.type="CubicBezierCurve3",this.v0=t||new Ve,this.v1=e||new Ve,this.v2=n||new Ve,this.v3=r||new Ve}function _a(t,e){sa.call(this),this.type="LineCurve",this.v1=t||new ze,this.v2=e||new ze}function wa(t,e){sa.call(this),this.type="LineCurve3",this.v1=t||new Ve,this.v2=e||new Ve}function Ma(t,e,n){sa.call(this),this.type="QuadraticBezierCurve",this.v0=t||new ze,this.v1=e||new ze,this.v2=n||new ze}function Ea(t,e,n){sa.call(this),this.type="QuadraticBezierCurve3",this.v0=t||new Ve,this.v1=e||new Ve,this.v2=n||new Ve}function Ta(t){sa.call(this),this.type="SplineCurve",this.points=t||[]}ma.prototype=Object.create(sa.prototype),ma.prototype.constructor=ma,ma.prototype.isCatmullRomCurve3=!0,ma.prototype.getPoint=function(t,e){var n,r,i,o,a=e||new Ve,s=this.points,c=s.length,u=(c-(this.closed?0:1))*t,h=Math.floor(u),l=u-h;if(this.closed?h+=h>0?0:(Math.floor(Math.abs(h)/c)+1)*c:0===l&&h===c-1&&(h=c-2,l=1),this.closed||h>0?n=s[(h-1)%c]:(la.subVectors(s[0],s[1]).add(s[0]),n=la),r=s[h%c],i=s[(h+1)%c],this.closed||h+2<c?o=s[(h+2)%c]:(la.subVectors(s[c-1],s[c-2]).add(s[c-1]),o=la),"centripetal"===this.curveType||"chordal"===this.curveType){var d="chordal"===this.curveType?.5:.25,p=Math.pow(n.distanceToSquared(r),d),f=Math.pow(r.distanceToSquared(i),d),m=Math.pow(i.distanceToSquared(o),d);f<1e-4&&(f=1),p<1e-4&&(p=f),m<1e-4&&(m=f),da.initNonuniformCatmullRom(n.x,r.x,i.x,o.x,p,f,m),pa.initNonuniformCatmullRom(n.y,r.y,i.y,o.y,p,f,m),fa.initNonuniformCatmullRom(n.z,r.z,i.z,o.z,p,f,m)}else"catmullrom"===this.curveType&&(da.initCatmullRom(n.x,r.x,i.x,o.x,this.tension),pa.initCatmullRom(n.y,r.y,i.y,o.y,this.tension),fa.initCatmullRom(n.z,r.z,i.z,o.z,this.tension));return a.set(da.calc(l),pa.calc(l),fa.calc(l)),a},ma.prototype.copy=function(t){sa.prototype.copy.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push(r.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},ma.prototype.toJSON=function(){var t=sa.prototype.toJSON.call(this);t.points=[];for(var e=0,n=this.points.length;e<n;e++){var r=this.points[e];t.points.push(r.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t},ma.prototype.fromJSON=function(t){sa.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push((new Ve).fromArray(r))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},xa.prototype=Object.create(sa.prototype),xa.prototype.constructor=xa,xa.prototype.isCubicBezierCurve=!0,xa.prototype.getPoint=function(t,e){var n=e||new ze,r=this.v0,i=this.v1,o=this.v2,a=this.v3;return n.set(ya(t,r.x,i.x,o.x,a.x),ya(t,r.y,i.y,o.y,a.y)),n},xa.prototype.copy=function(t){return sa.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},xa.prototype.toJSON=function(){var t=sa.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},xa.prototype.fromJSON=function(t){return sa.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},ba.prototype=Object.create(sa.prototype),ba.prototype.constructor=ba,ba.prototype.isCubicBezierCurve3=!0,ba.prototype.getPoint=function(t,e){var n=e||new Ve,r=this.v0,i=this.v1,o=this.v2,a=this.v3;return n.set(ya(t,r.x,i.x,o.x,a.x),ya(t,r.y,i.y,o.y,a.y),ya(t,r.z,i.z,o.z,a.z)),n},ba.prototype.copy=function(t){return sa.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},ba.prototype.toJSON=function(){var t=sa.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},ba.prototype.fromJSON=function(t){return sa.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},_a.prototype=Object.create(sa.prototype),_a.prototype.constructor=_a,_a.prototype.isLineCurve=!0,_a.prototype.getPoint=function(t,e){var n=e||new ze;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n},_a.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},_a.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},_a.prototype.copy=function(t){return sa.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},_a.prototype.toJSON=function(){var t=sa.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},_a.prototype.fromJSON=function(t){return sa.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},wa.prototype=Object.create(sa.prototype),wa.prototype.constructor=wa,wa.prototype.isLineCurve3=!0,wa.prototype.getPoint=function(t,e){var n=e||new Ve;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n},wa.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},wa.prototype.copy=function(t){return sa.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},wa.prototype.toJSON=function(){var t=sa.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},wa.prototype.fromJSON=function(t){return sa.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Ma.prototype=Object.create(sa.prototype),Ma.prototype.constructor=Ma,Ma.prototype.isQuadraticBezierCurve=!0,Ma.prototype.getPoint=function(t,e){var n=e||new ze,r=this.v0,i=this.v1,o=this.v2;return n.set(va(t,r.x,i.x,o.x),va(t,r.y,i.y,o.y)),n},Ma.prototype.copy=function(t){return sa.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Ma.prototype.toJSON=function(){var t=sa.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Ma.prototype.fromJSON=function(t){return sa.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Ea.prototype=Object.create(sa.prototype),Ea.prototype.constructor=Ea,Ea.prototype.isQuadraticBezierCurve3=!0,Ea.prototype.getPoint=function(t,e){var n=e||new Ve,r=this.v0,i=this.v1,o=this.v2;return n.set(va(t,r.x,i.x,o.x),va(t,r.y,i.y,o.y),va(t,r.z,i.z,o.z)),n},Ea.prototype.copy=function(t){return sa.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Ea.prototype.toJSON=function(){var t=sa.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Ea.prototype.fromJSON=function(t){return sa.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Ta.prototype=Object.create(sa.prototype),Ta.prototype.constructor=Ta,Ta.prototype.isSplineCurve=!0,Ta.prototype.getPoint=function(t,e){var n=e||new ze,r=this.points,i=(r.length-1)*t,o=Math.floor(i),a=i-o,s=r[0===o?o:o-1],c=r[o],u=r[o>r.length-2?r.length-1:o+1],h=r[o>r.length-3?r.length-1:o+2];return n.set(ga(a,s.x,c.x,u.x,h.x),ga(a,s.y,c.y,u.y,h.y)),n},Ta.prototype.copy=function(t){sa.prototype.copy.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push(r.clone())}return this},Ta.prototype.toJSON=function(){var t=sa.prototype.toJSON.call(this);t.points=[];for(var e=0,n=this.points.length;e<n;e++){var r=this.points[e];t.points.push(r.toArray())}return t},Ta.prototype.fromJSON=function(t){sa.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push((new ze).fromArray(r))}return this};var Sa=Object.freeze({ArcCurve:ua,CatmullRomCurve3:ma,CubicBezierCurve:xa,CubicBezierCurve3:ba,EllipseCurve:ca,LineCurve:_a,LineCurve3:wa,QuadraticBezierCurve:Ma,QuadraticBezierCurve3:Ea,SplineCurve:Ta});function Aa(){sa.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function Ra(t){Aa.call(this),this.type="Path",this.currentPoint=new ze,t&&this.setFromPoints(t)}function La(t){Ra.call(this,t),this.uuid=Fe.generateUUID(),this.type="Shape",this.holes=[]}function Ca(t,e){dn.call(this),this.type="Light",this.color=new rn(t),this.intensity=void 0!==e?e:1,this.receiveShadow=void 0}function Pa(t,e,n){Ca.call(this,t,n),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(dn.DefaultUp),this.updateMatrix(),this.groundColor=new rn(e)}function Oa(t){this.camera=t,this.bias=0,this.radius=1,this.mapSize=new ze(512,512),this.map=null,this.matrix=new Ge}function Ia(){Oa.call(this,new oi(50,1,.5,500))}function Na(t,e,n,r,i,o){Ca.call(this,t,e),this.type="SpotLight",this.position.copy(dn.DefaultUp),this.updateMatrix(),this.target=new dn,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(t){this.intensity=t/Math.PI}}),this.distance=void 0!==n?n:0,this.angle=void 0!==r?r:Math.PI/3,this.penumbra=void 0!==i?i:0,this.decay=void 0!==o?o:1,this.shadow=new Ia}function Da(t,e,n,r){Ca.call(this,t,e),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(t){this.intensity=t/(4*Math.PI)}}),this.distance=void 0!==n?n:0,this.decay=void 0!==r?r:1,this.shadow=new Oa(new oi(90,1,.5,500))}function Ua(){Oa.call(this,new fn(-5,5,5,-5,.5,500))}function Ba(t,e){Ca.call(this,t,e),this.type="DirectionalLight",this.position.copy(dn.DefaultUp),this.updateMatrix(),this.target=new dn,this.shadow=new Ua}function Fa(t,e){Ca.call(this,t,e),this.type="AmbientLight",this.castShadow=void 0}function za(t,e,n,r){Ca.call(this,t,e),this.type="RectAreaLight",this.width=void 0!==n?n:10,this.height=void 0!==r?r:10}function Ga(t,e,n,r){Qa.call(this,t,e,n,r)}function Ha(t,e,n){Qa.call(this,t,e,n)}function Va(t,e,n,r){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==r?r:new e.constructor(n),this.sampleValues=e,this.valueSize=n}function ka(t,e,n,r){Va.call(this,t,e,n,r)}function ja(t,e,n,r){Qa.call(this,t,e,n,r)}function Wa(t,e,n,r){Qa.call(this,t,e,n,r)}function Xa(t,e,n,r){Qa.call(this,t,e,n,r)}function qa(t,e,n,r){Va.call(this,t,e,n,r),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function Ya(t,e,n,r){Va.call(this,t,e,n,r)}function Za(t,e,n,r){Va.call(this,t,e,n,r)}Aa.prototype=Object.assign(Object.create(sa.prototype),{constructor:Aa,add:function(t){this.curves.push(t)},closePath:function(){var t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new _a(e,t))},getPoint:function(t){for(var e=t*this.getLength(),n=this.getCurveLengths(),r=0;r<n.length;){if(n[r]>=e){var i=n[r]-e,o=this.curves[r],a=o.getLength(),s=0===a?0:1-i/a;return o.getPointAt(s)}r++}return null},getLength:function(){var t=this.getCurveLengths();return t[t.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var t=[],e=0,n=0,r=this.curves.length;n<r;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t},getSpacedPoints:function(t){void 0===t&&(t=40);for(var e=[],n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e},getPoints:function(t){t=t||12;for(var e,n=[],r=0,i=this.curves;r<i.length;r++)for(var o=i[r],a=o&&o.isEllipseCurve?2*t:o&&(o.isLineCurve||o.isLineCurve3)?1:o&&o.isSplineCurve?t*o.points.length:t,s=o.getPoints(a),c=0;c<s.length;c++){var u=s[c];e&&e.equals(u)||(n.push(u),e=u)}return this.autoClose&&n.length>1&&!n[n.length-1].equals(n[0])&&n.push(n[0]),n},copy:function(t){sa.prototype.copy.call(this,t),this.curves=[];for(var e=0,n=t.curves.length;e<n;e++){var r=t.curves[e];this.curves.push(r.clone())}return this.autoClose=t.autoClose,this},toJSON:function(){var t=sa.prototype.toJSON.call(this);t.autoClose=this.autoClose,t.curves=[];for(var e=0,n=this.curves.length;e<n;e++){var r=this.curves[e];t.curves.push(r.toJSON())}return t},fromJSON:function(t){sa.prototype.fromJSON.call(this,t),this.autoClose=t.autoClose,this.curves=[];for(var e=0,n=t.curves.length;e<n;e++){var r=t.curves[e];this.curves.push((new Sa[r.type]).fromJSON(r))}return this}}),Ra.prototype=Object.assign(Object.create(Aa.prototype),{constructor:Ra,setFromPoints:function(t){this.moveTo(t[0].x,t[0].y);for(var e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y)},moveTo:function(t,e){this.currentPoint.set(t,e)},lineTo:function(t,e){var n=new _a(this.currentPoint.clone(),new ze(t,e));this.curves.push(n),this.currentPoint.set(t,e)},quadraticCurveTo:function(t,e,n,r){var i=new Ma(this.currentPoint.clone(),new ze(t,e),new ze(n,r));this.curves.push(i),this.currentPoint.set(n,r)},bezierCurveTo:function(t,e,n,r,i,o){var a=new xa(this.currentPoint.clone(),new ze(t,e),new ze(n,r),new ze(i,o));this.curves.push(a),this.currentPoint.set(i,o)},splineThru:function(t){var e=new Ta([this.currentPoint.clone()].concat(t));this.curves.push(e),this.currentPoint.copy(t[t.length-1])},arc:function(t,e,n,r,i,o){var a=this.currentPoint.x,s=this.currentPoint.y;this.absarc(t+a,e+s,n,r,i,o)},absarc:function(t,e,n,r,i,o){this.absellipse(t,e,n,n,r,i,o)},ellipse:function(t,e,n,r,i,o,a,s){var c=this.currentPoint.x,u=this.currentPoint.y;this.absellipse(t+c,e+u,n,r,i,o,a,s)},absellipse:function(t,e,n,r,i,o,a,s){var c=new ca(t,e,n,r,i,o,a,s);if(this.curves.length>0){var u=c.getPoint(0);u.equals(this.currentPoint)||this.lineTo(u.x,u.y)}this.curves.push(c);var h=c.getPoint(1);this.currentPoint.copy(h)},copy:function(t){return Aa.prototype.copy.call(this,t),this.currentPoint.copy(t.currentPoint),this},toJSON:function(){var t=Aa.prototype.toJSON.call(this);return t.currentPoint=this.currentPoint.toArray(),t},fromJSON:function(t){return Aa.prototype.fromJSON.call(this,t),this.currentPoint.fromArray(t.currentPoint),this}}),La.prototype=Object.assign(Object.create(Ra.prototype),{constructor:La,getPointsHoles:function(t){for(var e=[],n=0,r=this.holes.length;n<r;n++)e[n]=this.holes[n].getPoints(t);return e},extractPoints:function(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}},copy:function(t){Ra.prototype.copy.call(this,t),this.holes=[];for(var e=0,n=t.holes.length;e<n;e++){var r=t.holes[e];this.holes.push(r.clone())}return this},toJSON:function(){var t=Ra.prototype.toJSON.call(this);t.uuid=this.uuid,t.holes=[];for(var e=0,n=this.holes.length;e<n;e++){var r=this.holes[e];t.holes.push(r.toJSON())}return t},fromJSON:function(t){Ra.prototype.fromJSON.call(this,t),this.uuid=t.uuid,this.holes=[];for(var e=0,n=t.holes.length;e<n;e++){var r=t.holes[e];this.holes.push((new Ra).fromJSON(r))}return this}}),Ca.prototype=Object.assign(Object.create(dn.prototype),{constructor:Ca,isLight:!0,copy:function(t){return dn.prototype.copy.call(this,t),this.color.copy(t.color),this.intensity=t.intensity,this},toJSON:function(t){var e=dn.prototype.toJSON.call(this,t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}),Pa.prototype=Object.assign(Object.create(Ca.prototype),{constructor:Pa,isHemisphereLight:!0,copy:function(t){return Ca.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}),Object.assign(Oa.prototype,{copy:function(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t={};return 0!==this.bias&&(t.bias=this.bias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}),Ia.prototype=Object.assign(Object.create(Oa.prototype),{constructor:Ia,isSpotLightShadow:!0,update:function(t){var e=this.camera,n=2*Fe.RAD2DEG*t.angle,r=this.mapSize.width/this.mapSize.height,i=t.distance||e.far;n===e.fov&&r===e.aspect&&i===e.far||(e.fov=n,e.aspect=r,e.far=i,e.updateProjectionMatrix())}}),Na.prototype=Object.assign(Object.create(Ca.prototype),{constructor:Na,isSpotLight:!0,copy:function(t){return Ca.prototype.copy.call(this,t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),Da.prototype=Object.assign(Object.create(Ca.prototype),{constructor:Da,isPointLight:!0,copy:function(t){return Ca.prototype.copy.call(this,t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}),Ua.prototype=Object.assign(Object.create(Oa.prototype),{constructor:Ua}),Ba.prototype=Object.assign(Object.create(Ca.prototype),{constructor:Ba,isDirectionalLight:!0,copy:function(t){return Ca.prototype.copy.call(this,t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),Fa.prototype=Object.assign(Object.create(Ca.prototype),{constructor:Fa,isAmbientLight:!0}),za.prototype=Object.assign(Object.create(Ca.prototype),{constructor:za,isRectAreaLight:!0,copy:function(t){return Ca.prototype.copy.call(this,t),this.width=t.width,this.height=t.height,this},toJSON:function(t){var e=Ca.prototype.toJSON.call(this,t);return e.object.width=this.width,e.object.height=this.height,e}}),Ga.prototype=Object.assign(Object.create(Qa.prototype),{constructor:Ga,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:ve,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Ha.prototype=Object.assign(Object.create(Qa.prototype),{constructor:Ha,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:ve,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Object.assign(Va.prototype,{evaluate:function(t){var e=this.parameterPositions,n=this._cachedIndex,r=e[n],i=e[n-1];t:{e:{var o;n:{r:if(!(t<r)){for(var a=n+2;;){if(void 0===r){if(t<i)break r;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,i)}if(n===a)break;if(i=r,t<(r=e[++n]))break e}o=e.length;break n}if(t>=i)break t;var s=e[1];t<s&&(n=2,i=s);for(a=n-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,t,r);if(n===a)break;if(r=i,t>=(i=e[--n-1]))break e}o=n,n=0}for(;n<o;){var c=n+o>>>1;t<e[c]?o=c:n=c+1}if(r=e[n],void 0===(i=e[n-1]))return this._cachedIndex=0,this.beforeStart_(0,t,r);if(void 0===r)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,i,t)}this._cachedIndex=n,this.intervalChanged_(n,i,r)}return this.interpolate_(n,i,t,r)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(t){for(var e=this.resultBuffer,n=this.sampleValues,r=this.valueSize,i=t*r,o=0;o!==r;++o)e[o]=n[i+o];return e},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Va.prototype,{beforeStart_:Va.prototype.copySampleValue_,afterEnd_:Va.prototype.copySampleValue_}),ka.prototype=Object.assign(Object.create(Va.prototype),{constructor:ka,interpolate_:function(t,e,n,r){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=t*a,c=(n-e)/(r-e),u=s+a;s!==u;s+=4)He.slerpFlat(i,0,o,s-a,o,s,c);return i}}),ja.prototype=Object.assign(Object.create(Qa.prototype),{constructor:ja,ValueTypeName:"quaternion",DefaultInterpolation:ye,InterpolantFactoryMethodLinear:function(t){return new ka(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:void 0}),Wa.prototype=Object.assign(Object.create(Qa.prototype),{constructor:Wa,ValueTypeName:"color"}),Xa.prototype=Object.assign(Object.create(Qa.prototype),{constructor:Xa,ValueTypeName:"number"}),qa.prototype=Object.assign(Object.create(Va.prototype),{constructor:qa,DefaultSettings_:{endingStart:be,endingEnd:be},intervalChanged_:function(t,e,n){var r=this.parameterPositions,i=t-2,o=t+1,a=r[i],s=r[o];if(void 0===a)switch(this.getSettings_().endingStart){case _e:i=t,a=2*e-n;break;case we:a=e+r[i=r.length-2]-r[i+1];break;default:i=t,a=n}if(void 0===s)switch(this.getSettings_().endingEnd){case _e:o=t,s=2*n-e;break;case we:o=1,s=n+r[1]-r[0];break;default:o=t-1,s=e}var c=.5*(n-e),u=this.valueSize;this._weightPrev=c/(e-a),this._weightNext=c/(s-n),this._offsetPrev=i*u,this._offsetNext=o*u},interpolate_:function(t,e,n,r){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=t*a,c=s-a,u=this._offsetPrev,h=this._offsetNext,l=this._weightPrev,d=this._weightNext,p=(n-e)/(r-e),f=p*p,m=f*p,g=-l*m+2*l*f-l*p,v=(1+l)*m+(-1.5-2*l)*f+(-.5+l)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f,b=0;b!==a;++b)i[b]=g*o[u+b]+v*o[c+b]+y*o[s+b]+x*o[h+b];return i}}),Ya.prototype=Object.assign(Object.create(Va.prototype),{constructor:Ya,interpolate_:function(t,e,n,r){for(var i=this.resultBuffer,o=this.sampleValues,a=this.valueSize,s=t*a,c=s-a,u=(n-e)/(r-e),h=1-u,l=0;l!==a;++l)i[l]=o[c+l]*h+o[s+l]*u;return i}}),Za.prototype=Object.assign(Object.create(Va.prototype),{constructor:Za,interpolate_:function(t){return this.copySampleValue_(t-1)}});var Ja={arraySlice:function(t,e,n){return Ja.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){for(var e=t.length,n=new Array(e),r=0;r!==e;++r)n[r]=r;return n.sort(function(e,n){return t[e]-t[n]}),n},sortedArray:function(t,e,n){for(var r=t.length,i=new t.constructor(r),o=0,a=0;a!==r;++o)for(var s=n[o]*e,c=0;c!==e;++c)i[a++]=t[s+c];return i},flattenJSON:function(t,e,n,r){for(var i=1,o=t[0];void 0!==o&&void 0===o[r];)o=t[i++];if(void 0!==o){var a=o[r];if(void 0!==a)if(Array.isArray(a))do{void 0!==(a=o[r])&&(e.push(o.time),n.push.apply(n,a)),o=t[i++]}while(void 0!==o);else if(void 0!==a.toArray)do{void 0!==(a=o[r])&&(e.push(o.time),a.toArray(n,n.length)),o=t[i++]}while(void 0!==o);else do{void 0!==(a=o[r])&&(e.push(o.time),n.push(a)),o=t[i++]}while(void 0!==o)}}};function Qa(t,e,n,r){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=Ja.convertArray(e,this.TimeBufferType),this.values=Ja.convertArray(n,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation),this.validate(),this.optimize()}function Ka(t,e,n,r){Qa.call(this,t,e,n,r)}function $a(t,e,n){this.name=t,this.tracks=n,this.duration=void 0!==e?e:-1,this.uuid=Fe.generateUUID(),this.duration<0&&this.resetDuration(),this.optimize()}function ts(t){this.manager=void 0!==t?t:$o,this.textures={}}function es(t){this.manager=void 0!==t?t:$o}Object.assign(Qa,{parse:function(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var e=Qa._getTrackTypeForValueTypeName(t.type);if(void 0===t.times){var n=[],r=[];Ja.flattenJSON(t.keys,n,r,"value"),t.times=n,t.values=r}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)},toJSON:function(t){var e,n=t.constructor;if(void 0!==n.toJSON)e=n.toJSON(t);else{e={name:t.name,times:Ja.convertArray(t.times,Array),values:Ja.convertArray(t.values,Array)};var r=t.getInterpolation();r!==t.DefaultInterpolation&&(e.interpolation=r)}return e.type=t.ValueTypeName,e},_getTrackTypeForValueTypeName:function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Xa;case"vector":case"vector2":case"vector3":case"vector4":return Ka;case"color":return Wa;case"quaternion":return ja;case"bool":case"boolean":return Ha;case"string":return Ga}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}}),Object.assign(Qa.prototype,{constructor:Qa,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:ye,InterpolantFactoryMethodDiscrete:function(t){return new Za(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodLinear:function(t){return new Ya(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:function(t){return new qa(this.times,this.values,this.getValueSize(),t)},setInterpolation:function(t){var e;switch(t){case ve:e=this.InterpolantFactoryMethodDiscrete;break;case ye:e=this.InterpolantFactoryMethodLinear;break;case xe:e=this.InterpolantFactoryMethodSmooth}if(void 0!==e)this.createInterpolant=e;else{var n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(n);this.setInterpolation(this.DefaultInterpolation)}console.warn("THREE.KeyframeTrack:",n)}},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return ve;case this.InterpolantFactoryMethodLinear:return ye;case this.InterpolantFactoryMethodSmooth:return xe}},getValueSize:function(){return this.values.length/this.times.length},shift:function(t){if(0!==t)for(var e=this.times,n=0,r=e.length;n!==r;++n)e[n]+=t;return this},scale:function(t){if(1!==t)for(var e=this.times,n=0,r=e.length;n!==r;++n)e[n]*=t;return this},trim:function(t,e){for(var n=this.times,r=n.length,i=0,o=r-1;i!==r&&n[i]<t;)++i;for(;-1!==o&&n[o]>e;)--o;if(++o,0!==i||o!==r){i>=o&&(i=(o=Math.max(o,1))-1);var a=this.getValueSize();this.times=Ja.arraySlice(n,i,o),this.values=Ja.arraySlice(this.values,i*a,o*a)}return this},validate:function(){var t=!0,e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);var n=this.times,r=this.values,i=n.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);for(var o=null,a=0;a!==i;a++){var s=n[a];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,a,s),t=!1;break}if(null!==o&&o>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,a,s,o),t=!1;break}o=s}if(void 0!==r&&Ja.isTypedArray(r)){a=0;for(var c=r.length;a!==c;++a){var u=r[a];if(isNaN(u)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,a,u),t=!1;break}}}return t},optimize:function(){for(var t=this.times,e=this.values,n=this.getValueSize(),r=this.getInterpolation()===xe,i=1,o=t.length-1,a=1;a<o;++a){var s=!1,c=t[a];if(c!==t[a+1]&&(1!==a||c!==c[0]))if(r)s=!0;else for(var u=a*n,h=u-n,l=u+n,d=0;d!==n;++d){var p=e[u+d];if(p!==e[h+d]||p!==e[l+d]){s=!0;break}}if(s){if(a!==i){t[i]=t[a];var f=a*n,m=i*n;for(d=0;d!==n;++d)e[m+d]=e[f+d]}++i}}if(o>0){t[i]=t[o];for(f=o*n,m=i*n,d=0;d!==n;++d)e[m+d]=e[f+d];++i}return i!==t.length&&(this.times=Ja.arraySlice(t,0,i),this.values=Ja.arraySlice(e,0,i*n)),this}}),Ka.prototype=Object.assign(Object.create(Qa.prototype),{constructor:Ka,ValueTypeName:"vector"}),Object.assign($a,{parse:function(t){for(var e=[],n=t.tracks,r=1/(t.fps||1),i=0,o=n.length;i!==o;++i)e.push(Qa.parse(n[i]).scale(r));return new $a(t.name,t.duration,e)},toJSON:function(t){for(var e=[],n=t.tracks,r={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid},i=0,o=n.length;i!==o;++i)e.push(Qa.toJSON(n[i]));return r},CreateFromMorphTargetSequence:function(t,e,n,r){for(var i=e.length,o=[],a=0;a<i;a++){var s=[],c=[];s.push((a+i-1)%i,a,(a+1)%i),c.push(0,1,0);var u=Ja.getKeyframeOrder(s);s=Ja.sortedArray(s,1,u),c=Ja.sortedArray(c,1,u),r||0!==s[0]||(s.push(i),c.push(c[0])),o.push(new Xa(".morphTargetInfluences["+e[a].name+"]",s,c).scale(1/n))}return new $a(t,-1,o)},findByName:function(t,e){var n=t;if(!Array.isArray(t)){var r=t;n=r.geometry&&r.geometry.animations||r.animations}for(var i=0;i<n.length;i++)if(n[i].name===e)return n[i];return null},CreateClipsFromMorphTargetSequences:function(t,e,n){for(var r={},i=/^([\w-]*?)([\d]+)$/,o=0,a=t.length;o<a;o++){var s=t[o],c=s.name.match(i);if(c&&c.length>1){var u=r[l=c[1]];u||(r[l]=u=[]),u.push(s)}}var h=[];for(var l in r)h.push($a.CreateFromMorphTargetSequence(l,r[l],e,n));return h},parseAnimation:function(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var n=function(t,e,n,r,i){if(0!==n.length){var o=[],a=[];Ja.flattenJSON(n,o,a,r),0!==o.length&&i.push(new t(e,o,a))}},r=[],i=t.name||"default",o=t.length||-1,a=t.fps||30,s=t.hierarchy||[],c=0;c<s.length;c++){var u=s[c].keys;if(u&&0!==u.length)if(u[0].morphTargets){for(var h={},l=0;l<u.length;l++)if(u[l].morphTargets)for(var d=0;d<u[l].morphTargets.length;d++)h[u[l].morphTargets[d]]=-1;for(var p in h){var f=[],m=[];for(d=0;d!==u[l].morphTargets.length;++d){var g=u[l];f.push(g.time),m.push(g.morphTarget===p?1:0)}r.push(new Xa(".morphTargetInfluence["+p+"]",f,m))}o=h.length*(a||1)}else{var v=".bones["+e[c].name+"]";n(Ka,v+".position",u,"pos",r),n(ja,v+".quaternion",u,"rot",r),n(Ka,v+".scale",u,"scl",r)}}return 0===r.length?null:new $a(i,o,r)}}),Object.assign($a.prototype,{resetDuration:function(){for(var t=0,e=0,n=this.tracks.length;e!==n;++e){var r=this.tracks[e];t=Math.max(t,r.times[r.times.length-1])}this.duration=t},trim:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this},optimize:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}}),Object.assign(ts.prototype,{load:function(t,e,n,r){var i=this;new ea(i.manager).load(t,function(t){e(i.parse(JSON.parse(t)))},n,r)},setTextures:function(t){this.textures=t},parse:function(t){var e=this.textures;function n(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}var r=new Jo[t.type];if(void 0!==t.uuid&&(r.uuid=t.uuid),void 0!==t.name&&(r.name=t.name),void 0!==t.color&&r.color.setHex(t.color),void 0!==t.roughness&&(r.roughness=t.roughness),void 0!==t.metalness&&(r.metalness=t.metalness),void 0!==t.emissive&&r.emissive.setHex(t.emissive),void 0!==t.specular&&r.specular.setHex(t.specular),void 0!==t.shininess&&(r.shininess=t.shininess),void 0!==t.clearCoat&&(r.clearCoat=t.clearCoat),void 0!==t.clearCoatRoughness&&(r.clearCoatRoughness=t.clearCoatRoughness),void 0!==t.uniforms&&(r.uniforms=t.uniforms),void 0!==t.vertexShader&&(r.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(r.fragmentShader=t.fragmentShader),void 0!==t.vertexColors&&(r.vertexColors=t.vertexColors),void 0!==t.fog&&(r.fog=t.fog),void 0!==t.flatShading&&(r.flatShading=t.flatShading),void 0!==t.blending&&(r.blending=t.blending),void 0!==t.side&&(r.side=t.side),void 0!==t.opacity&&(r.opacity=t.opacity),void 0!==t.transparent&&(r.transparent=t.transparent),void 0!==t.alphaTest&&(r.alphaTest=t.alphaTest),void 0!==t.depthTest&&(r.depthTest=t.depthTest),void 0!==t.depthWrite&&(r.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(r.colorWrite=t.colorWrite),void 0!==t.wireframe&&(r.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(r.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(r.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(r.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(r.rotation=t.rotation),1!==t.linewidth&&(r.linewidth=t.linewidth),void 0!==t.dashSize&&(r.dashSize=t.dashSize),void 0!==t.gapSize&&(r.gapSize=t.gapSize),void 0!==t.scale&&(r.scale=t.scale),void 0!==t.polygonOffset&&(r.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(r.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(r.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.skinning&&(r.skinning=t.skinning),void 0!==t.morphTargets&&(r.morphTargets=t.morphTargets),void 0!==t.dithering&&(r.dithering=t.dithering),void 0!==t.visible&&(r.visible=t.visible),void 0!==t.userData&&(r.userData=t.userData),void 0!==t.shading&&(r.flatShading=1===t.shading),void 0!==t.size&&(r.size=t.size),void 0!==t.sizeAttenuation&&(r.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(r.map=n(t.map)),void 0!==t.alphaMap&&(r.alphaMap=n(t.alphaMap),r.transparent=!0),void 0!==t.bumpMap&&(r.bumpMap=n(t.bumpMap)),void 0!==t.bumpScale&&(r.bumpScale=t.bumpScale),void 0!==t.normalMap&&(r.normalMap=n(t.normalMap)),void 0!==t.normalMapType&&(r.normalMapType=t.normalMapType),void 0!==t.normalScale){var i=t.normalScale;!1===Array.isArray(i)&&(i=[i,i]),r.normalScale=(new ze).fromArray(i)}return void 0!==t.displacementMap&&(r.displacementMap=n(t.displacementMap)),void 0!==t.displacementScale&&(r.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(r.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(r.roughnessMap=n(t.roughnessMap)),void 0!==t.metalnessMap&&(r.metalnessMap=n(t.metalnessMap)),void 0!==t.emissiveMap&&(r.emissiveMap=n(t.emissiveMap)),void 0!==t.emissiveIntensity&&(r.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(r.specularMap=n(t.specularMap)),void 0!==t.envMap&&(r.envMap=n(t.envMap)),void 0!==t.reflectivity&&(r.reflectivity=t.reflectivity),void 0!==t.lightMap&&(r.lightMap=n(t.lightMap)),void 0!==t.lightMapIntensity&&(r.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(r.aoMap=n(t.aoMap)),void 0!==t.aoMapIntensity&&(r.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(r.gradientMap=n(t.gradientMap)),r}}),Object.assign(es.prototype,{load:function(t,e,n,r){var i=this;new ea(i.manager).load(t,function(t){e(i.parse(JSON.parse(t)))},n,r)},parse:function(t){var e=new Pn,n=t.data.index;if(void 0!==n){var r=new ns[n.type](n.array);e.setIndex(new yn(r,1))}var i=t.data.attributes;for(var o in i){var a=i[o];r=new ns[a.type](a.array);e.addAttribute(o,new yn(r,a.itemSize,a.normalized))}var s=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==s)for(var c=0,u=s.length;c!==u;++c){var h=s[c];e.addGroup(h.start,h.count,h.materialIndex)}var l=t.data.boundingSphere;if(void 0!==l){var d=new Ve;void 0!==l.center&&d.fromArray(l.center),e.boundingSphere=new Qe(d,l.radius)}return e}});var ns={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function rs(){}rs.Handlers={handlers:[],add:function(t,e){this.handlers.push(t,e)},get:function(t){for(var e=this.handlers,n=0,r=e.length;n<r;n+=2){var i=e[n],o=e[n+1];if(i.test(t))return o}return null}},Object.assign(rs.prototype,{crossOrigin:"anonymous",onLoadStart:function(){},onLoadProgress:function(){},onLoadComplete:function(){},initMaterials:function(t,e,n){for(var r=[],i=0;i<t.length;++i)r[i]=this.createMaterial(t[i],e,n);return r},createMaterial:function(){var t={NoBlending:E,NormalBlending:T,AdditiveBlending:S,SubtractiveBlending:A,MultiplyBlending:R,CustomBlending:L},e=new rn,n=new aa,r=new ts;return function(i,o,a){var s={};function c(t,e,r,i,c){var u,h=o+t,l=rs.Handlers.get(h);null!==l?u=l.load(h):(n.setCrossOrigin(a),u=n.load(h)),void 0!==e&&(u.repeat.fromArray(e),1!==e[0]&&(u.wrapS=gt),1!==e[1]&&(u.wrapT=gt)),void 0!==r&&u.offset.fromArray(r),void 0!==i&&("repeat"===i[0]&&(u.wrapS=gt),"mirror"===i[0]&&(u.wrapS=yt),"repeat"===i[1]&&(u.wrapT=gt),"mirror"===i[1]&&(u.wrapT=yt)),void 0!==c&&(u.anisotropy=c);var d=Fe.generateUUID();return s[d]=u,d}var u={uuid:Fe.generateUUID(),type:"MeshLambertMaterial"};for(var h in i){var l=i[h];switch(h){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":u.name=l;break;case"blending":u.blending=t[l];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",h,"is no longer supported.");break;case"colorDiffuse":u.color=e.fromArray(l).getHex();break;case"colorSpecular":u.specular=e.fromArray(l).getHex();break;case"colorEmissive":u.emissive=e.fromArray(l).getHex();break;case"specularCoef":u.shininess=l;break;case"shading":"basic"===l.toLowerCase()&&(u.type="MeshBasicMaterial"),"phong"===l.toLowerCase()&&(u.type="MeshPhongMaterial"),"standard"===l.toLowerCase()&&(u.type="MeshStandardMaterial");break;case"mapDiffuse":u.map=c(l,i.mapDiffuseRepeat,i.mapDiffuseOffset,i.mapDiffuseWrap,i.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":u.emissiveMap=c(l,i.mapEmissiveRepeat,i.mapEmissiveOffset,i.mapEmissiveWrap,i.mapEmissiveAnisotropy);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":u.lightMap=c(l,i.mapLightRepeat,i.mapLightOffset,i.mapLightWrap,i.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":u.aoMap=c(l,i.mapAORepeat,i.mapAOOffset,i.mapAOWrap,i.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":u.bumpMap=c(l,i.mapBumpRepeat,i.mapBumpOffset,i.mapBumpWrap,i.mapBumpAnisotropy);break;case"mapBumpScale":u.bumpScale=l;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":u.normalMap=c(l,i.mapNormalRepeat,i.mapNormalOffset,i.mapNormalWrap,i.mapNormalAnisotropy);break;case"mapNormalFactor":u.normalScale=l;break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":u.specularMap=c(l,i.mapSpecularRepeat,i.mapSpecularOffset,i.mapSpecularWrap,i.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":u.metalnessMap=c(l,i.mapMetalnessRepeat,i.mapMetalnessOffset,i.mapMetalnessWrap,i.mapMetalnessAnisotropy);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":u.roughnessMap=c(l,i.mapRoughnessRepeat,i.mapRoughnessOffset,i.mapRoughnessWrap,i.mapRoughnessAnisotropy);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":u.alphaMap=c(l,i.mapAlphaRepeat,i.mapAlphaOffset,i.mapAlphaWrap,i.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":u.side=v;break;case"doubleSided":u.side=y;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),u.opacity=l;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":u[h]=l;break;case"vertexColors":!0===l&&(u.vertexColors=M),"face"===l&&(u.vertexColors=w);break;default:console.error("THREE.Loader.createMaterial: Unsupported",h,l)}}return"MeshBasicMaterial"===u.type&&delete u.emissive,"MeshPhongMaterial"!==u.type&&delete u.specular,u.opacity<1&&(u.transparent=!0),r.setTextures(s),r.parse(u)}}()});var is={decodeText:function(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);for(var e="",n=0,r=t.length;n<r;n++)e+=String.fromCharCode(t[n]);return decodeURIComponent(escape(e))},extractUrlBase:function(t){var e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)}};function os(t){"boolean"==typeof t&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),t=void 0),this.manager=void 0!==t?t:$o,this.withCredentials=!1}function as(t){this.manager=void 0!==t?t:$o,this.texturePath=""}Object.assign(os.prototype,{crossOrigin:"anonymous",load:function(t,e,n,r){var i=this,o=this.texturePath&&"string"==typeof this.texturePath?this.texturePath:is.extractUrlBase(t),a=new ea(this.manager);a.setWithCredentials(this.withCredentials),a.load(t,function(n){var r=JSON.parse(n),a=r.metadata;if(void 0!==a){var s=a.type;if(void 0!==s&&"object"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+t+" should be loaded with THREE.ObjectLoader instead.")}var c=i.parse(r,o);e(c.geometry,c.materials)},n,r)},setCrossOrigin:function(t){return this.crossOrigin=t,this},setTexturePath:function(t){return this.texturePath=t,this},parse:function(){return function(t,e){void 0!==t.data&&(t=t.data),void 0!==t.scale?t.scale=1/t.scale:t.scale=1;var n=new vn;return function(t,e){function n(t,e){return t&1<<e}var r,i,o,a,s,c,u,h,l,d,p,f,m,g,v,y,x,b,_,w,M,E,T,S,A,R=t.faces,L=t.vertices,C=t.normals,P=t.colors,O=t.scale,I=0;if(void 0!==t.uvs){for(r=0;r<t.uvs.length;r++)t.uvs[r].length&&I++;for(r=0;r<I;r++)e.faceVertexUvs[r]=[]}for(a=0,s=L.length;a<s;)(b=new Ve).x=L[a++]*O,b.y=L[a++]*O,b.z=L[a++]*O,e.vertices.push(b);for(a=0,s=R.length;a<s;)if(p=n(d=R[a++],0),f=n(d,1),m=n(d,3),g=n(d,4),v=n(d,5),y=n(d,6),x=n(d,7),p){if((w=new mn).a=R[a],w.b=R[a+1],w.c=R[a+3],(M=new mn).a=R[a+1],M.b=R[a+2],M.c=R[a+3],a+=4,f&&(l=R[a++],w.materialIndex=l,M.materialIndex=l),o=e.faces.length,m)for(r=0;r<I;r++)for(S=t.uvs[r],e.faceVertexUvs[r][o]=[],e.faceVertexUvs[r][o+1]=[],i=0;i<4;i++)A=new ze(S[2*(h=R[a++])],S[2*h+1]),2!==i&&e.faceVertexUvs[r][o].push(A),0!==i&&e.faceVertexUvs[r][o+1].push(A);if(g&&(u=3*R[a++],w.normal.set(C[u++],C[u++],C[u]),M.normal.copy(w.normal)),v)for(r=0;r<4;r++)u=3*R[a++],T=new Ve(C[u++],C[u++],C[u]),2!==r&&w.vertexNormals.push(T),0!==r&&M.vertexNormals.push(T);if(y&&(E=P[c=R[a++]],w.color.setHex(E),M.color.setHex(E)),x)for(r=0;r<4;r++)E=P[c=R[a++]],2!==r&&w.vertexColors.push(new rn(E)),0!==r&&M.vertexColors.push(new rn(E));e.faces.push(w),e.faces.push(M)}else{if((_=new mn).a=R[a++],_.b=R[a++],_.c=R[a++],f&&(l=R[a++],_.materialIndex=l),o=e.faces.length,m)for(r=0;r<I;r++)for(S=t.uvs[r],e.faceVertexUvs[r][o]=[],i=0;i<3;i++)A=new ze(S[2*(h=R[a++])],S[2*h+1]),e.faceVertexUvs[r][o].push(A);if(g&&(u=3*R[a++],_.normal.set(C[u++],C[u++],C[u])),v)for(r=0;r<3;r++)u=3*R[a++],T=new Ve(C[u++],C[u++],C[u]),_.vertexNormals.push(T);if(y&&(c=R[a++],_.color.setHex(P[c])),x)for(r=0;r<3;r++)c=R[a++],_.vertexColors.push(new rn(P[c]));e.faces.push(_)}}(t,n),function(t,e){var n=void 0!==t.influencesPerVertex?t.influencesPerVertex:2;if(t.skinWeights)for(var r=0,i=t.skinWeights.length;r<i;r+=n){var o=t.skinWeights[r],a=n>1?t.skinWeights[r+1]:0,s=n>2?t.skinWeights[r+2]:0,c=n>3?t.skinWeights[r+3]:0;e.skinWeights.push(new Xe(o,a,s,c))}if(t.skinIndices)for(r=0,i=t.skinIndices.length;r<i;r+=n){var u=t.skinIndices[r],h=n>1?t.skinIndices[r+1]:0,l=n>2?t.skinIndices[r+2]:0,d=n>3?t.skinIndices[r+3]:0;e.skinIndices.push(new Xe(u,h,l,d))}e.bones=t.bones,e.bones&&e.bones.length>0&&(e.skinWeights.length!==e.skinIndices.length||e.skinIndices.length!==e.vertices.length)&&console.warn("When skinning, number of vertices ("+e.vertices.length+"), skinIndices ("+e.skinIndices.length+"), and skinWeights ("+e.skinWeights.length+") should match.")}(t,n),function(t,e){var n=t.scale;if(void 0!==t.morphTargets)for(var r=0,i=t.morphTargets.length;r<i;r++){e.morphTargets[r]={},e.morphTargets[r].name=t.morphTargets[r].name,e.morphTargets[r].vertices=[];for(var o=e.morphTargets[r].vertices,a=t.morphTargets[r].vertices,s=0,c=a.length;s<c;s+=3){var u=new Ve;u.x=a[s]*n,u.y=a[s+1]*n,u.z=a[s+2]*n,o.push(u)}}if(void 0!==t.morphColors&&t.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');var h=e.faces,l=t.morphColors[0].colors;for(r=0,i=h.length;r<i;r++)h[r].color.fromArray(l,3*r)}}(t,n),function(t,e){var n=[],r=[];void 0!==t.animation&&r.push(t.animation),void 0!==t.animations&&(t.animations.length?r=r.concat(t.animations):r.push(t.animations));for(var i=0;i<r.length;i++){var o=$a.parseAnimation(r[i],e.bones);o&&n.push(o)}if(e.morphTargets){var a=$a.CreateClipsFromMorphTargetSequences(e.morphTargets,10);n=n.concat(a)}n.length>0&&(e.animations=n)}(t,n),n.computeFaceNormals(),n.computeBoundingSphere(),void 0===t.materials||0===t.materials.length?{geometry:n}:{geometry:n,materials:rs.prototype.initMaterials(t.materials,e,this.crossOrigin)}}}()}),Object.assign(as.prototype,{crossOrigin:"anonymous",load:function(t,e,n,r){""===this.texturePath&&(this.texturePath=t.substring(0,t.lastIndexOf("/")+1));var i=this;new ea(i.manager).load(t,function(n){var o=null;try{o=JSON.parse(n)}catch(e){return void 0!==r&&r(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}var a=o.metadata;void 0!==a&&void 0!==a.type&&"geometry"!==a.type.toLowerCase()?i.parse(o,e):console.error("THREE.ObjectLoader: Can't load "+t+". Use THREE.JSONLoader instead.")},n,r)},setTexturePath:function(t){return this.texturePath=t,this},setCrossOrigin:function(t){return this.crossOrigin=t,this},parse:function(t,e){var n=this.parseShape(t.shapes),r=this.parseGeometries(t.geometries,n),i=this.parseImages(t.images,function(){void 0!==e&&e(s)}),o=this.parseTextures(t.textures,i),a=this.parseMaterials(t.materials,o),s=this.parseObject(t.object,r,a);return t.animations&&(s.animations=this.parseAnimations(t.animations)),void 0!==t.images&&0!==t.images.length||void 0!==e&&e(s),s},parseShape:function(t){var e={};if(void 0!==t)for(var n=0,r=t.length;n<r;n++){var i=(new La).fromJSON(t[n]);e[i.uuid]=i}return e},parseGeometries:function(t,e){var n={};if(void 0!==t)for(var r=new os,i=new es,o=0,a=t.length;o<a;o++){var s,c=t[o];switch(c.type){case"PlaneGeometry":case"PlaneBufferGeometry":s=new Go[c.type](c.width,c.height,c.widthSegments,c.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":s=new Go[c.type](c.width,c.height,c.depth,c.widthSegments,c.heightSegments,c.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":s=new Go[c.type](c.radius,c.segments,c.thetaStart,c.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":s=new Go[c.type](c.radiusTop,c.radiusBottom,c.height,c.radialSegments,c.heightSegments,c.openEnded,c.thetaStart,c.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":s=new Go[c.type](c.radius,c.height,c.radialSegments,c.heightSegments,c.openEnded,c.thetaStart,c.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":s=new Go[c.type](c.radius,c.widthSegments,c.heightSegments,c.phiStart,c.phiLength,c.thetaStart,c.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":s=new Go[c.type](c.radius,c.detail);break;case"RingGeometry":case"RingBufferGeometry":s=new Go[c.type](c.innerRadius,c.outerRadius,c.thetaSegments,c.phiSegments,c.thetaStart,c.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":s=new Go[c.type](c.radius,c.tube,c.radialSegments,c.tubularSegments,c.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":s=new Go[c.type](c.radius,c.tube,c.tubularSegments,c.radialSegments,c.p,c.q);break;case"LatheGeometry":case"LatheBufferGeometry":s=new Go[c.type](c.points,c.segments,c.phiStart,c.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":s=new Go[c.type](c.vertices,c.indices,c.radius,c.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var u=[],h=0,l=c.shapes.length;h<l;h++){var d=e[c.shapes[h]];u.push(d)}s=new Go[c.type](u,c.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(u=[],h=0,l=c.shapes.length;h<l;h++){d=e[c.shapes[h]];u.push(d)}var p=c.options.extrudePath;void 0!==p&&(c.options.extrudePath=(new Sa[p.type]).fromJSON(p)),s=new Go[c.type](u,c.options);break;case"BufferGeometry":s=i.parse(c);break;case"Geometry":s=r.parse(c,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+c.type+'"');continue}s.uuid=c.uuid,void 0!==c.name&&(s.name=c.name),!0===s.isBufferGeometry&&void 0!==c.userData&&(s.userData=c.userData),n[c.uuid]=s}return n},parseMaterials:function(t,e){var n={};if(void 0!==t){var r=new ts;r.setTextures(e);for(var i=0,o=t.length;i<o;i++){var a=t[i];if("MultiMaterial"===a.type){for(var s=[],c=0;c<a.materials.length;c++)s.push(r.parse(a.materials[c]));n[a.uuid]=s}else n[a.uuid]=r.parse(a)}}return n},parseAnimations:function(t){for(var e=[],n=0;n<t.length;n++){var r=t[n],i=$a.parse(r);void 0!==r.uuid&&(i.uuid=r.uuid),e.push(i)}return e},parseImages:function(t,e){var n=this,r={};function i(t){return n.manager.itemStart(t),o.load(t,function(){n.manager.itemEnd(t)},void 0,function(){n.manager.itemEnd(t),n.manager.itemError(t)})}if(void 0!==t&&t.length>0){var o=new ia(new Ko(e));o.setCrossOrigin(this.crossOrigin);for(var a=0,s=t.length;a<s;a++){var c=t[a],u=c.url;if(Array.isArray(u)){r[c.uuid]=[];for(var h=0,l=u.length;h<l;h++){var d=u[h],p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(d)?d:n.texturePath+d;r[c.uuid].push(i(p))}}else{p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url)?c.url:n.texturePath+c.url;r[c.uuid]=i(p)}}}return r},parseTextures:function(t,e){function n(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}var r={};if(void 0!==t)for(var i=0,o=t.length;i<o;i++){var a,s=t[i];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===e[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image),(a=Array.isArray(e[s.image])?new Wn(e[s.image]):new We(e[s.image])).needsUpdate=!0,a.uuid=s.uuid,void 0!==s.name&&(a.name=s.name),void 0!==s.mapping&&(a.mapping=n(s.mapping,cs)),void 0!==s.offset&&a.offset.fromArray(s.offset),void 0!==s.repeat&&a.repeat.fromArray(s.repeat),void 0!==s.center&&a.center.fromArray(s.center),void 0!==s.rotation&&(a.rotation=s.rotation),void 0!==s.wrap&&(a.wrapS=n(s.wrap[0],us),a.wrapT=n(s.wrap[1],us)),void 0!==s.format&&(a.format=s.format),void 0!==s.minFilter&&(a.minFilter=n(s.minFilter,hs)),void 0!==s.magFilter&&(a.magFilter=n(s.magFilter,hs)),void 0!==s.anisotropy&&(a.anisotropy=s.anisotropy),void 0!==s.flipY&&(a.flipY=s.flipY),r[s.uuid]=a}return r},parseObject:function(t,e,n){var r;function i(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function o(t){if(void 0!==t){if(Array.isArray(t)){for(var e=[],r=0,i=t.length;r<i;r++){var o=t[r];void 0===n[o]&&console.warn("THREE.ObjectLoader: Undefined material",o),e.push(n[o])}return e}return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),n[t]}}switch(t.type){case"Scene":r=new li,void 0!==t.background&&Number.isInteger(t.background)&&(r.background=new rn(t.background)),void 0!==t.fog&&("Fog"===t.fog.type?r.fog=new hi(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(r.fog=new ui(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":r=new oi(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(r.focus=t.focus),void 0!==t.zoom&&(r.zoom=t.zoom),void 0!==t.filmGauge&&(r.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(r.filmOffset=t.filmOffset),void 0!==t.view&&(r.view=Object.assign({},t.view));break;case"OrthographicCamera":r=new fn(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(r.zoom=t.zoom),void 0!==t.view&&(r.view=Object.assign({},t.view));break;case"AmbientLight":r=new Fa(t.color,t.intensity);break;case"DirectionalLight":r=new Ba(t.color,t.intensity);break;case"PointLight":r=new Da(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":r=new za(t.color,t.intensity,t.width,t.height);break;case"SpotLight":r=new Na(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":r=new Pa(t.color,t.groundColor,t.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var a=i(t.geometry),s=o(t.material);r=a.bones&&a.bones.length>0?new vi(a,s):new kn(a,s);break;case"LOD":r=new fi;break;case"Line":r=new xi(i(t.geometry),o(t.material),t.mode);break;case"LineLoop":r=new _i(i(t.geometry),o(t.material));break;case"LineSegments":r=new bi(i(t.geometry),o(t.material));break;case"PointCloud":case"Points":r=new Mi(i(t.geometry),o(t.material));break;case"Sprite":r=new pi(o(t.material));break;case"Group":r=new ii;break;default:r=new dn}if(r.uuid=t.uuid,void 0!==t.name&&(r.name=t.name),void 0!==t.matrix?(r.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(r.matrixAutoUpdate=t.matrixAutoUpdate),r.matrixAutoUpdate&&r.matrix.decompose(r.position,r.quaternion,r.scale)):(void 0!==t.position&&r.position.fromArray(t.position),void 0!==t.rotation&&r.rotation.fromArray(t.rotation),void 0!==t.quaternion&&r.quaternion.fromArray(t.quaternion),void 0!==t.scale&&r.scale.fromArray(t.scale)),void 0!==t.castShadow&&(r.castShadow=t.castShadow),void 0!==t.receiveShadow&&(r.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(r.shadow.bias=t.shadow.bias),void 0!==t.shadow.radius&&(r.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&r.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(r.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(r.visible=t.visible),void 0!==t.frustumCulled&&(r.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(r.renderOrder=t.renderOrder),void 0!==t.userData&&(r.userData=t.userData),void 0!==t.layers&&(r.layers.mask=t.layers),void 0!==t.children)for(var c=t.children,u=0;u<c.length;u++)r.add(this.parseObject(c[u],e,n));if("LOD"===t.type)for(var h=t.levels,l=0;l<h.length;l++){var d=h[l],p=r.getObjectByProperty("uuid",d.object);void 0!==p&&r.addLevel(p,d.distance)}return r}});var ss,cs={UVMapping:ct,CubeReflectionMapping:ut,CubeRefractionMapping:ht,EquirectangularReflectionMapping:lt,EquirectangularRefractionMapping:dt,SphericalReflectionMapping:pt,CubeUVReflectionMapping:ft,CubeUVRefractionMapping:mt},us={RepeatWrapping:gt,ClampToEdgeWrapping:vt,MirroredRepeatWrapping:yt},hs={NearestFilter:xt,NearestMipMapNearestFilter:bt,NearestMipMapLinearFilter:_t,LinearFilter:wt,LinearMipMapNearestFilter:Mt,LinearMipMapLinearFilter:Et};function ls(t){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.manager=void 0!==t?t:$o,this.options=void 0}function ds(){this.type="ShapePath",this.color=new rn,this.subPaths=[],this.currentPath=null}function ps(t){this.type="Font",this.data=t}function fs(t,e,n,r,i){var o=i.glyphs[t]||i.glyphs["?"];if(o){var a,s,c,u,h,l,d,p,f=new ds;if(o.o)for(var m=o._cachedOutline||(o._cachedOutline=o.o.split(" ")),g=0,v=m.length;g<v;){switch(m[g++]){case"m":a=m[g++]*e+n,s=m[g++]*e+r,f.moveTo(a,s);break;case"l":a=m[g++]*e+n,s=m[g++]*e+r,f.lineTo(a,s);break;case"q":c=m[g++]*e+n,u=m[g++]*e+r,h=m[g++]*e+n,l=m[g++]*e+r,f.quadraticCurveTo(h,l,c,u);break;case"b":c=m[g++]*e+n,u=m[g++]*e+r,h=m[g++]*e+n,l=m[g++]*e+r,d=m[g++]*e+n,p=m[g++]*e+r,f.bezierCurveTo(h,l,d,p,c,u)}}return{offsetX:o.ha*e,path:f}}}function ms(t){this.manager=void 0!==t?t:$o}ls.prototype={constructor:ls,setOptions:function(t){return this.options=t,this},load:function(t,e,n,r){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var i=this,o=Qo.get(t);if(void 0!==o)return i.manager.itemStart(t),setTimeout(function(){e&&e(o),i.manager.itemEnd(t)},0),o;fetch(t).then(function(t){return t.blob()}).then(function(t){return createImageBitmap(t,i.options)}).then(function(n){Qo.add(t,n),e&&e(n),i.manager.itemEnd(t)}).catch(function(e){r&&r(e),i.manager.itemEnd(t),i.manager.itemError(t)})},setCrossOrigin:function(){return this},setPath:function(t){return this.path=t,this}},Object.assign(ds.prototype,{moveTo:function(t,e){this.currentPath=new Ra,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e)},lineTo:function(t,e){this.currentPath.lineTo(t,e)},quadraticCurveTo:function(t,e,n,r){this.currentPath.quadraticCurveTo(t,e,n,r)},bezierCurveTo:function(t,e,n,r,i,o){this.currentPath.bezierCurveTo(t,e,n,r,i,o)},splineThru:function(t){this.currentPath.splineThru(t)},toShapes:function(t,e){function n(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n],o=new La;o.curves=i.curves,e.push(o)}return e}function r(t,e){for(var n=e.length,r=!1,i=n-1,o=0;o<n;i=o++){var a=e[i],s=e[o],c=s.x-a.x,u=s.y-a.y;if(Math.abs(u)>Number.EPSILON){if(u<0&&(a=e[o],c=-c,s=e[i],u=-u),t.y<a.y||t.y>s.y)continue;if(t.y===a.y){if(t.x===a.x)return!0}else{var h=u*(t.x-a.x)-c*(t.y-a.y);if(0===h)return!0;if(h<0)continue;r=!r}}else{if(t.y!==a.y)continue;if(s.x<=t.x&&t.x<=a.x||a.x<=t.x&&t.x<=s.x)return!0}}return r}var i=mo.isClockWise,o=this.subPaths;if(0===o.length)return[];if(!0===e)return n(o);var a,s,c,u=[];if(1===o.length)return s=o[0],(c=new La).curves=s.curves,u.push(c),u;var h=!i(o[0].getPoints());h=t?!h:h;var l,d,p=[],f=[],m=[],g=0;f[g]=void 0,m[g]=[];for(var v=0,y=o.length;v<y;v++)a=i(l=(s=o[v]).getPoints()),(a=t?!a:a)?(!h&&f[g]&&g++,f[g]={s:new La,p:l},f[g].s.curves=s.curves,h&&g++,m[g]=[]):m[g].push({h:s,p:l[0]});if(!f[0])return n(o);if(f.length>1){for(var x=!1,b=[],_=0,w=f.length;_<w;_++)p[_]=[];for(_=0,w=f.length;_<w;_++)for(var M=m[_],E=0;E<M.length;E++){for(var T=M[E],S=!0,A=0;A<f.length;A++)r(T.p,f[A].p)&&(_!==A&&b.push({froms:_,tos:A,hole:E}),S?(S=!1,p[A].push(T)):x=!0);S&&p[_].push(T)}b.length>0&&(x||(m=p))}v=0;for(var R=f.length;v<R;v++){c=f[v].s,u.push(c);for(var L=0,C=(d=m[v]).length;L<C;L++)c.holes.push(d[L].h)}return u}}),Object.assign(ps.prototype,{isFont:!0,generateShapes:function(t,e){void 0===e&&(e=100);for(var n=[],r=function(t,e,n){for(var r=Array.from?Array.from(t):String(t).split(""),i=e/n.resolution,o=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*i,a=[],s=0,c=0,u=0;u<r.length;u++){var h=r[u];if("\n"===h)s=0,c-=o;else{var l=fs(h,i,s,c,n);s+=l.offsetX,a.push(l.path)}}return a}(t,e,this.data),i=0,o=r.length;i<o;i++)Array.prototype.push.apply(n,r[i].toShapes());return n}}),Object.assign(ms.prototype,{load:function(t,e,n,r){var i=this,o=new ea(this.manager);o.setPath(this.path),o.load(t,function(t){var n;try{n=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),n=JSON.parse(t.substring(65,t.length-2))}var r=i.parse(n);e&&e(r)},n,r)},parse:function(t){return new ps(t)},setPath:function(t){return this.path=t,this}});var gs={getContext:function(){return void 0===ss&&(ss=new(window.AudioContext||window.webkitAudioContext)),ss},setContext:function(t){ss=t}};function vs(t){this.manager=void 0!==t?t:$o}function ys(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new oi,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new oi,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}function xs(t,e,n){dn.call(this),this.type="CubeCamera";var r=new oi(90,1,t,e);r.up.set(0,-1,0),r.lookAt(new Ve(1,0,0)),this.add(r);var i=new oi(90,1,t,e);i.up.set(0,-1,0),i.lookAt(new Ve(-1,0,0)),this.add(i);var o=new oi(90,1,t,e);o.up.set(0,0,1),o.lookAt(new Ve(0,1,0)),this.add(o);var a=new oi(90,1,t,e);a.up.set(0,0,-1),a.lookAt(new Ve(0,-1,0)),this.add(a);var s=new oi(90,1,t,e);s.up.set(0,-1,0),s.lookAt(new Ve(0,0,1)),this.add(s);var c=new oi(90,1,t,e);c.up.set(0,-1,0),c.lookAt(new Ve(0,0,-1)),this.add(c);var u={format:Ft,magFilter:wt,minFilter:wt};this.renderTarget=new Ye(n,n,u),this.renderTarget.texture.name="CubeCamera",this.update=function(t,e){null===this.parent&&this.updateMatrixWorld();var n=this.renderTarget,u=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,n.activeCubeFace=0,t.render(e,r,n),n.activeCubeFace=1,t.render(e,i,n),n.activeCubeFace=2,t.render(e,o,n),n.activeCubeFace=3,t.render(e,a,n),n.activeCubeFace=4,t.render(e,s,n),n.texture.generateMipmaps=u,n.activeCubeFace=5,t.render(e,c,n),t.setRenderTarget(null)},this.clear=function(t,e,n,r){for(var i=this.renderTarget,o=0;o<6;o++)i.activeCubeFace=o,t.setRenderTarget(i),t.clear(e,n,r);t.setRenderTarget(null)}}function bs(){dn.call(this),this.type="AudioListener",this.context=gs.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null}function _s(t){dn.call(this),this.type="Audio",this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.loop=!1,this.startTime=0,this.offset=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]}function ws(t){_s.call(this,t),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}function Ms(t,e){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=void 0!==e?e:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}function Es(t,e,n){this.binding=t,this.valueSize=n;var r,i=Float64Array;switch(e){case"quaternion":r=this._slerp;break;case"string":case"bool":i=Array,r=this._select;break;default:r=this._lerp}this.buffer=new i(4*n),this._mixBufferRegion=r,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Object.assign(vs.prototype,{load:function(t,e,n,r){var i=new ea(this.manager);i.setResponseType("arraybuffer"),i.load(t,function(t){var n=t.slice(0);gs.getContext().decodeAudioData(n,function(t){e(t)})},n,r)}}),Object.assign(ys.prototype,{update:function(){var t,e,n,r,i,o,a,s,c=new Ge,u=new Ge;return function(h){if(t!==this||e!==h.focus||n!==h.fov||r!==h.aspect*this.aspect||i!==h.near||o!==h.far||a!==h.zoom||s!==this.eyeSep){t=this,e=h.focus,n=h.fov,r=h.aspect*this.aspect,i=h.near,o=h.far,a=h.zoom;var l,d,p=h.projectionMatrix.clone(),f=(s=this.eyeSep/2)*i/e,m=i*Math.tan(Fe.DEG2RAD*n*.5)/a;u.elements[12]=-s,c.elements[12]=s,l=-m*r+f,d=m*r+f,p.elements[0]=2*i/(d-l),p.elements[8]=(d+l)/(d-l),this.cameraL.projectionMatrix.copy(p),l=-m*r-f,d=m*r-f,p.elements[0]=2*i/(d-l),p.elements[8]=(d+l)/(d-l),this.cameraR.projectionMatrix.copy(p)}this.cameraL.matrixWorld.copy(h.matrixWorld).multiply(u),this.cameraR.matrixWorld.copy(h.matrixWorld).multiply(c)}}()}),xs.prototype=Object.create(dn.prototype),xs.prototype.constructor=xs,bs.prototype=Object.assign(Object.create(dn.prototype),{constructor:bs,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this},updateMatrixWorld:function(){var t=new Ve,e=new He,n=new Ve,r=new Ve;return function(i){dn.prototype.updateMatrixWorld.call(this,i);var o=this.context.listener,a=this.up;this.matrixWorld.decompose(t,e,n),r.set(0,0,-1).applyQuaternion(e),o.positionX?(o.positionX.setValueAtTime(t.x,this.context.currentTime),o.positionY.setValueAtTime(t.y,this.context.currentTime),o.positionZ.setValueAtTime(t.z,this.context.currentTime),o.forwardX.setValueAtTime(r.x,this.context.currentTime),o.forwardY.setValueAtTime(r.y,this.context.currentTime),o.forwardZ.setValueAtTime(r.z,this.context.currentTime),o.upX.setValueAtTime(a.x,this.context.currentTime),o.upY.setValueAtTime(a.y,this.context.currentTime),o.upZ.setValueAtTime(a.z,this.context.currentTime)):(o.setPosition(t.x,t.y,t.z),o.setOrientation(r.x,r.y,r.z,a.x,a.y,a.z))}}()}),_s.prototype=Object.assign(Object.create(dn.prototype),{constructor:_s,getOutput:function(){return this.gain},setNodeSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this},setMediaElementSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this},setBuffer:function(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){var t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.onended=this.onEnded.bind(this),t.playbackRate.setValueAtTime(this.playbackRate,this.startTime),this.startTime=this.context.currentTime,t.start(this.startTime,this.offset),this.isPlaying=!0,this.source=t,this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this.source.stop(),this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this.source.stop(),this.offset=0,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(t){return t||(t=[]),!0===this.isPlaying?(this.disconnect(),this.filters=t,this.connect()):this.filters=t,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(t){return this.setFilters(t?[t]:[])},setPlaybackRate:function(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setValueAtTime(this.playbackRate,this.context.currentTime),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},getVolume:function(){return this.gain.gain.value},setVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}),ws.prototype=Object.assign(Object.create(_s.prototype),{constructor:ws,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(t){return this.panner.refDistance=t,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(t){return this.panner.rolloffFactor=t,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(t){return this.panner.distanceModel=t,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(t){return this.panner.maxDistance=t,this},setDirectionalCone:function(t,e,n){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=n,this},updateMatrixWorld:function(){var t=new Ve,e=new He,n=new Ve,r=new Ve;return function(i){dn.prototype.updateMatrixWorld.call(this,i);var o=this.panner;this.matrixWorld.decompose(t,e,n),r.set(0,0,1).applyQuaternion(e),o.setPosition(t.x,t.y,t.z),o.setOrientation(r.x,r.y,r.z)}}()}),Object.assign(Ms.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var t=0,e=this.getFrequencyData(),n=0;n<e.length;n++)t+=e[n];return t/e.length}}),Object.assign(Es.prototype,{accumulate:function(t,e){var n=this.buffer,r=this.valueSize,i=t*r+r,o=this.cumulativeWeight;if(0===o){for(var a=0;a!==r;++a)n[i+a]=n[a];o=e}else{var s=e/(o+=e);this._mixBufferRegion(n,i,0,s,r)}this.cumulativeWeight=o},apply:function(t){var e=this.valueSize,n=this.buffer,r=t*e+e,i=this.cumulativeWeight,o=this.binding;if(this.cumulativeWeight=0,i<1){var a=3*e;this._mixBufferRegion(n,r,a,1-i,e)}for(var s=e,c=e+e;s!==c;++s)if(n[s]!==n[s+e]){o.setValue(n,r);break}},saveOriginalState:function(){var t=this.binding,e=this.buffer,n=this.valueSize,r=3*n;t.getValue(e,r);for(var i=n,o=r;i!==o;++i)e[i]=e[r+i%n];this.cumulativeWeight=0},restoreOriginalState:function(){var t=3*this.valueSize;this.binding.setValue(this.buffer,t)},_select:function(t,e,n,r,i){if(r>=.5)for(var o=0;o!==i;++o)t[e+o]=t[n+o]},_slerp:function(t,e,n,r){He.slerpFlat(t,e,t,e,t,n,r)},_lerp:function(t,e,n,r,i){for(var o=1-r,a=0;a!==i;++a){var s=e+a;t[s]=t[s]*o+t[n+a]*r}}});var Ts,Ss;function As(t,e,n){var r=n||Rs.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,r)}function Rs(t,e,n){this.path=e,this.parsedPath=n||Rs.parseTrackName(e),this.node=Rs.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t}function Ls(){this.uuid=Fe.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var e=0,n=arguments.length;e!==n;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var r=this;this.stats={objects:{get total(){return r._objects.length},get inUse(){return this.total-r.nCachedObjects_}},get bindingsPerObject(){return r._bindings.length}}}function Cs(t,e,n){this._mixer=t,this._clip=e,this._localRoot=n||null;for(var r=e.tracks,i=r.length,o=new Array(i),a={endingStart:be,endingEnd:be},s=0;s!==i;++s){var c=r[s].createInterpolant(null);o[s]=c,c.settings=a}this._interpolantSettings=a,this._interpolants=o,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=me,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function Ps(t){this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function Os(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}function Is(){Pn.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function Ns(t,e,n,r){this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===r}function Ds(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function Us(t,e,n){Ds.call(this,t,e),this.meshPerAttribute=n||1}function Bs(t,e,n){yn.call(this,t,e),this.meshPerAttribute=n||1}function Fs(t,e,n,r){this.ray=new Gn(t,e),this.near=n||0,this.far=r||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function zs(t,e){return t.distance-e.distance}function Gs(t,e,n,r){if(!1!==t.visible&&(t.raycast(e,n),!0===r))for(var i=t.children,o=0,a=i.length;o<a;o++)Gs(i[o],e,n,!0)}function Hs(t){this.autoStart=void 0===t||t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function Vs(t,e,n){return this.radius=void 0!==t?t:1,this.phi=void 0!==e?e:0,this.theta=void 0!==n?n:0,this}function ks(t,e,n){return this.radius=void 0!==t?t:1,this.theta=void 0!==e?e:0,this.y=void 0!==n?n:0,this}function js(t,e){this.min=void 0!==t?t:new ze(1/0,1/0),this.max=void 0!==e?e:new ze(-1/0,-1/0)}function Ws(t){dn.call(this),this.material=t,this.render=function(){}}function Xs(t,e,n,r){this.object=t,this.size=void 0!==e?e:1;var i=void 0!==n?n:16711680,o=void 0!==r?r:1,a=0,s=this.object.geometry;s&&s.isGeometry?a=3*s.faces.length:s&&s.isBufferGeometry&&(a=s.attributes.normal.count);var c=new Pn,u=new Sn(2*a*3,3);c.addAttribute("position",u),bi.call(this,c,new yi({color:i,linewidth:o})),this.matrixAutoUpdate=!1,this.update()}function qs(t,e){dn.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;for(var n=new Pn,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],i=0,o=1;i<32;i++,o++){var a=i/32*Math.PI*2,s=o/32*Math.PI*2;r.push(Math.cos(a),Math.sin(a),1,Math.cos(s),Math.sin(s),1)}n.addAttribute("position",new Sn(r,3));var c=new yi({fog:!1});this.cone=new bi(n,c),this.add(this.cone),this.update()}function Ys(t){for(var e=function t(e){var n=[];e&&e.isBone&&n.push(e);for(var r=0;r<e.children.length;r++)n.push.apply(n,t(e.children[r]));return n}(t),n=new Pn,r=[],i=[],o=new rn(0,0,1),a=new rn(0,1,0),s=0;s<e.length;s++){var c=e[s];c.parent&&c.parent.isBone&&(r.push(0,0,0),r.push(0,0,0),i.push(o.r,o.g,o.b),i.push(a.r,a.g,a.b))}n.addAttribute("position",new Sn(r,3)),n.addAttribute("color",new Sn(i,3));var u=new yi({vertexColors:M,depthTest:!1,depthWrite:!1,transparent:!0});bi.call(this,n,u),this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}function Zs(t,e,n){this.light=t,this.light.updateMatrixWorld(),this.color=n;var r=new To(e,4,2),i=new Fn({wireframe:!0,fog:!1});kn.call(this,r,i),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function Js(t,e){dn.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;var n=new yi({fog:!1}),r=new Pn;r.addAttribute("position",new yn(new Float32Array(15),3)),this.line=new xi(r,n),this.add(this.line),this.update()}function Qs(t,e,n){dn.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;var r=new Di(e);r.rotateY(.5*Math.PI),this.material=new Fn({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=M);var i=r.getAttribute("position"),o=new Float32Array(3*i.count);r.addAttribute("color",new yn(o,3)),this.add(new kn(r,this.material)),this.update()}function Ks(t,e,n,r){t=t||10,e=e||10,n=new rn(void 0!==n?n:4473924),r=new rn(void 0!==r?r:8947848);for(var i=e/2,o=t/e,a=t/2,s=[],c=[],u=0,h=0,l=-a;u<=e;u++,l+=o){s.push(-a,0,l,a,0,l),s.push(l,0,-a,l,0,a);var d=u===i?n:r;d.toArray(c,h),h+=3,d.toArray(c,h),h+=3,d.toArray(c,h),h+=3,d.toArray(c,h),h+=3}var p=new Pn;p.addAttribute("position",new Sn(s,3)),p.addAttribute("color",new Sn(c,3));var f=new yi({vertexColors:M});bi.call(this,p,f)}function $s(t,e,n,r,i,o){t=t||10,e=e||16,n=n||8,r=r||64,i=new rn(void 0!==i?i:4473924),o=new rn(void 0!==o?o:8947848);var a,s,c,u,h,l,d,p=[],f=[];for(u=0;u<=e;u++)c=u/e*(2*Math.PI),a=Math.sin(c)*t,s=Math.cos(c)*t,p.push(0,0,0),p.push(a,0,s),d=1&u?i:o,f.push(d.r,d.g,d.b),f.push(d.r,d.g,d.b);for(u=0;u<=n;u++)for(d=1&u?i:o,l=t-t/n*u,h=0;h<r;h++)c=h/r*(2*Math.PI),a=Math.sin(c)*l,s=Math.cos(c)*l,p.push(a,0,s),f.push(d.r,d.g,d.b),c=(h+1)/r*(2*Math.PI),a=Math.sin(c)*l,s=Math.cos(c)*l,p.push(a,0,s),f.push(d.r,d.g,d.b);var m=new Pn;m.addAttribute("position",new Sn(p,3)),m.addAttribute("color",new Sn(f,3));var g=new yi({vertexColors:M});bi.call(this,m,g)}function tc(t,e,n,r){this.object=t,this.size=void 0!==e?e:1;var i=void 0!==n?n:16776960,o=void 0!==r?r:1,a=0,s=this.object.geometry;s&&s.isGeometry?a=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var c=new Pn,u=new Sn(2*a*3,3);c.addAttribute("position",u),bi.call(this,c,new yi({color:i,linewidth:o})),this.matrixAutoUpdate=!1,this.update()}function ec(t,e,n){dn.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===e&&(e=1);var r=new Pn;r.addAttribute("position",new Sn([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));var i=new yi({fog:!1});this.lightPlane=new xi(r,i),this.add(this.lightPlane),(r=new Pn).addAttribute("position",new Sn([0,0,0,0,0,1],3)),this.targetLine=new xi(r,i),this.add(this.targetLine),this.update()}function nc(t){var e=new Pn,n=new yi({color:16777215,vertexColors:w}),r=[],i=[],o={},a=new rn(16755200),s=new rn(16711680),c=new rn(43775),u=new rn(16777215),h=new rn(3355443);function l(t,e,n){d(t,n),d(e,n)}function d(t,e){r.push(0,0,0),i.push(e.r,e.g,e.b),void 0===o[t]&&(o[t]=[]),o[t].push(r.length/3-1)}l("n1","n2",a),l("n2","n4",a),l("n4","n3",a),l("n3","n1",a),l("f1","f2",a),l("f2","f4",a),l("f4","f3",a),l("f3","f1",a),l("n1","f1",a),l("n2","f2",a),l("n3","f3",a),l("n4","f4",a),l("p","n1",s),l("p","n2",s),l("p","n3",s),l("p","n4",s),l("u1","u2",c),l("u2","u3",c),l("u3","u1",c),l("c","t",u),l("p","c",h),l("cn1","cn2",h),l("cn3","cn4",h),l("cf1","cf2",h),l("cf3","cf4",h),e.addAttribute("position",new Sn(r,3)),e.addAttribute("color",new Sn(i,3)),bi.call(this,e,n),this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=o,this.update()}function rc(t,e){this.object=t,void 0===e&&(e=16776960);var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Float32Array(24),i=new Pn;i.setIndex(new yn(n,1)),i.addAttribute("position",new yn(r,3)),bi.call(this,i,new yi({color:e})),this.matrixAutoUpdate=!1,this.update()}function ic(t,e){this.type="Box3Helper",this.box=t;var n=void 0!==e?e:16776960,r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Pn;i.setIndex(new yn(r,1)),i.addAttribute("position",new Sn([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),bi.call(this,i,new yi({color:n})),this.geometry.computeBoundingSphere()}function oc(t,e,n){this.type="PlaneHelper",this.plane=t,this.size=void 0===e?1:e;var r=void 0!==n?n:16776960,i=new Pn;i.addAttribute("position",new Sn([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),i.computeBoundingSphere(),xi.call(this,i,new yi({color:r}));var o=new Pn;o.addAttribute("position",new Sn([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),o.computeBoundingSphere(),this.add(new kn(o,new Fn({color:r,opacity:.2,transparent:!0,depthWrite:!1})))}function ac(t,e,n,r,i,o){dn.call(this),void 0===r&&(r=16776960),void 0===n&&(n=1),void 0===i&&(i=.2*n),void 0===o&&(o=.2*i),void 0===Ts&&((Ts=new Pn).addAttribute("position",new Sn([0,0,0,0,1,0],3)),(Ss=new Do(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(e),this.line=new xi(Ts,new yi({color:r})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new kn(Ss,new Fn({color:r})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(n,i,o)}function sc(t){var e=[0,0,0,t=t||1,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=new Pn;n.addAttribute("position",new Sn(e,3)),n.addAttribute("color",new Sn([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var r=new yi({vertexColors:M});bi.call(this,n,r)}function cc(t,e,n,r,i,o,a){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new mn(t,e,n,i,o,a)}Object.assign(As.prototype,{getValue:function(t,e){this.bind();var n=this._targetGroup.nCachedObjects_,r=this._bindings[n];void 0!==r&&r.getValue(t,e)},setValue:function(t,e){for(var n=this._bindings,r=this._targetGroup.nCachedObjects_,i=n.length;r!==i;++r)n[r].setValue(t,e)},bind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()},unbind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}}),Object.assign(Rs,{Composite:As,create:function(t,e,n){return t&&t.isAnimationObjectGroup?new Rs.Composite(t,e,n):new Rs(t,e,n)},sanitizeNodeName:function(){var t=new RegExp("[\\[\\]\\.:\\/]","g");return function(e){return e.replace(/\s/g,"_").replace(t,"")}}(),parseTrackName:function(){var t="[^\\[\\]\\.:\\/]",e="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",n=/((?:WC+[\/:])*)/.source.replace("WC",t),r=/(WCOD+)?/.source.replace("WCOD",e),i=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",t),o=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",t),a=new RegExp("^"+n+r+i+o+"$"),s=["material","materials","bones"];return function(t){var e=a.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);var n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},r=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==r&&-1!==r){var i=n.nodeName.substring(r+1);-1!==s.indexOf(i)&&(n.nodeName=n.nodeName.substring(0,r),n.objectName=i)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}}(),findNode:function(t,e){if(!e||""===e||"root"===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){var n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){var r=function(t){for(var n=0;n<t.length;n++){var i=t[n];if(i.name===e||i.uuid===e)return i;var o=r(i.children);if(o)return o}return null},i=r(t.children);if(i)return i}return null}}),Object.assign(Rs.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,e){t[e]=this.node[this.propertyName]},function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)t[e++]=n[r]},function(t,e){t[e]=this.resolvedProperty[this.propertyIndex]},function(t,e){this.resolvedProperty.toArray(t,e)}],SetterByBindingTypeAndVersioning:[[function(t,e){this.targetObject[this.propertyName]=t[e]},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=t[e++]},function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=t[e++];this.targetObject.needsUpdate=!0},function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty[this.propertyIndex]=t[e]},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty.fromArray(t,e)},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,e){this.bind(),this.getValue(t,e)},setValue:function(t,e){this.bind(),this.setValue(t,e)},bind:function(){var t=this.node,e=this.parsedPath,n=e.objectName,r=e.propertyName,i=e.propertyIndex;if(t||(t=Rs.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,t){if(n){var o=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(var a=0;a<t.length;a++)if(t[a].name===o){o=a;break}break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==o){if(void 0===t[o])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[o]}}var s=t[r];if(void 0!==s){var c=this.Versioning.None;void 0!==t.needsUpdate?(c=this.Versioning.NeedsUpdate,this.targetObject=t):void 0!==t.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=t);var u=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===r){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(t.geometry.isBufferGeometry){if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(a=0;a<this.node.geometry.morphAttributes.position.length;a++)if(t.geometry.morphAttributes.position[a].name===i){i=a;break}}else{if(!t.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(a=0;a<this.node.geometry.morphTargets.length;a++)if(t.geometry.morphTargets[a].name===i){i=a;break}}}u=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=i}else void 0!==s.fromArray&&void 0!==s.toArray?(u=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(u=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=r;this.getValue=this.GetterByBindingType[u],this.setValue=this.SetterByBindingTypeAndVersioning[u][c]}else{var h=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+h+"."+r+" but it wasn't found.",t)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),
//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Rs.prototype,{_getValue_unbound:Rs.prototype.getValue,_setValue_unbound:Rs.prototype.setValue}),Object.assign(Ls.prototype,{isAnimationObjectGroup:!0,add:function(){for(var t=this._objects,e=t.length,n=this.nCachedObjects_,r=this._indicesByUUID,i=this._paths,o=this._parsedPaths,a=this._bindings,s=a.length,c=void 0,u=0,h=arguments.length;u!==h;++u){var l=arguments[u],d=l.uuid,p=r[d];if(void 0===p){p=e++,r[d]=p,t.push(l);for(var f=0,m=s;f!==m;++f)a[f].push(new Rs(l,i[f],o[f]))}else if(p<n){c=t[p];var g=--n,v=t[g];r[v.uuid]=p,t[p]=v,r[d]=g,t[g]=l;for(f=0,m=s;f!==m;++f){var y=a[f],x=y[g],b=y[p];y[p]=x,void 0===b&&(b=new Rs(l,i[f],o[f])),y[g]=b}}else t[p]!==c&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=n},remove:function(){for(var t=this._objects,e=this.nCachedObjects_,n=this._indicesByUUID,r=this._bindings,i=r.length,o=0,a=arguments.length;o!==a;++o){var s=arguments[o],c=s.uuid,u=n[c];if(void 0!==u&&u>=e){var h=e++,l=t[h];n[l.uuid]=u,t[u]=l,n[c]=h,t[h]=s;for(var d=0,p=i;d!==p;++d){var f=r[d],m=f[h],g=f[u];f[u]=m,f[h]=g}}}this.nCachedObjects_=e},uncache:function(){for(var t=this._objects,e=t.length,n=this.nCachedObjects_,r=this._indicesByUUID,i=this._bindings,o=i.length,a=0,s=arguments.length;a!==s;++a){var c=arguments[a].uuid,u=r[c];if(void 0!==u)if(delete r[c],u<n){var h=--n,l=t[h],d=t[v=--e];r[l.uuid]=u,t[u]=l,r[d.uuid]=h,t[h]=d,t.pop();for(var p=0,f=o;p!==f;++p){var m=(y=i[p])[h],g=y[v];y[u]=m,y[h]=g,y.pop()}}else{var v;r[(d=t[v=--e]).uuid]=u,t[u]=d,t.pop();for(p=0,f=o;p!==f;++p){var y;(y=i[p])[u]=y[v],y.pop()}}}this.nCachedObjects_=n},subscribe_:function(t,e){var n=this._bindingsIndicesByPath,r=n[t],i=this._bindings;if(void 0!==r)return i[r];var o=this._paths,a=this._parsedPaths,s=this._objects,c=s.length,u=this.nCachedObjects_,h=new Array(c);r=i.length,n[t]=r,o.push(t),a.push(e),i.push(h);for(var l=u,d=s.length;l!==d;++l){var p=s[l];h[l]=new Rs(p,t,e)}return h},unsubscribe_:function(t){var e=this._bindingsIndicesByPath,n=e[t];if(void 0!==n){var r=this._paths,i=this._parsedPaths,o=this._bindings,a=o.length-1,s=o[a];e[t[a]]=n,o[n]=s,o.pop(),i[n]=i[a],i.pop(),r[n]=r[a],r.pop()}}}),Object.assign(Cs.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(t){return this._startTime=t,this},setLoop:function(t,e){return this.loop=t,this.repetitions=e,this},setEffectiveWeight:function(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(t){return this._scheduleFading(t,0,1)},fadeOut:function(t){return this._scheduleFading(t,1,0)},crossFadeFrom:function(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){var r=this._clip.duration,i=t._clip.duration,o=i/r,a=r/i;t.warp(1,o,e),this.warp(a,1,e)}return this},crossFadeTo:function(t,e,n){return t.crossFadeFrom(this,e,n)},stopFading:function(){var t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},setEffectiveTimeScale:function(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(t){return this.timeScale=this._clip.duration/t,this.stopWarping()},syncWith:function(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()},halt:function(t){return this.warp(this._effectiveTimeScale,0,t)},warp:function(t,e,n){var r=this._mixer,i=r.time,o=this._timeScaleInterpolant,a=this.timeScale;null===o&&(o=r._lendControlInterpolant(),this._timeScaleInterpolant=o);var s=o.parameterPositions,c=o.sampleValues;return s[0]=i,s[1]=i+n,c[0]=t/a,c[1]=e/a,this},stopWarping:function(){var t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(t,e,n,r){if(this.enabled){var i=this._startTime;if(null!==i){var o=(t-i)*n;if(o<0||0===n)return;this._startTime=null,e=n*o}e*=this._updateTimeScale(t);var a=this._updateTime(e),s=this._updateWeight(t);if(s>0)for(var c=this._interpolants,u=this._propertyBindings,h=0,l=c.length;h!==l;++h)c[h].evaluate(a),u[h].accumulate(r,s)}else this._updateWeight(t)},_updateWeight:function(t){var e=0;if(this.enabled){e=this.weight;var n=this._weightInterpolant;if(null!==n){var r=n.evaluate(t)[0];e*=r,t>n.parameterPositions[1]&&(this.stopFading(),0===r&&(this.enabled=!1))}}return this._effectiveWeight=e,e},_updateTimeScale:function(t){var e=0;if(!this.paused){e=this.timeScale;var n=this._timeScaleInterpolant;if(null!==n)e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}return this._effectiveTimeScale=e,e},_updateTime:function(t){var e=this.time+t;if(0===t)return e;var n=this._clip.duration,r=this.loop,i=this._loopCount;if(r===fe){-1===i&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(e>=n)e=n;else{if(!(e<0))break t;e=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{var o=r===ge;if(-1===i&&(t>=0?(i=0,this._setEndings(!0,0===this.repetitions,o)):this._setEndings(0===this.repetitions,!0,o)),e>=n||e<0){var a=Math.floor(e/n);e-=n*a,i+=Math.abs(a);var s=this.repetitions-i;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,e=t>0?n:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===s){var c=t<0;this._setEndings(c,!c,o)}else this._setEndings(!1,!1,o);this._loopCount=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:a})}}if(o&&1==(1&i))return this.time=e,n-e}return this.time=e,e},_setEndings:function(t,e,n){var r=this._interpolantSettings;n?(r.endingStart=_e,r.endingEnd=_e):(r.endingStart=t?this.zeroSlopeAtStart?_e:be:we,r.endingEnd=e?this.zeroSlopeAtEnd?_e:be:we)},_scheduleFading:function(t,e,n){var r=this._mixer,i=r.time,o=this._weightInterpolant;null===o&&(o=r._lendControlInterpolant(),this._weightInterpolant=o);var a=o.parameterPositions,s=o.sampleValues;return a[0]=i,s[0]=e,a[1]=i+t,s[1]=n,this}}),Ps.prototype=Object.assign(Object.create(i.prototype),{constructor:Ps,_bindAction:function(t,e){var n=t._localRoot||this._root,r=t._clip.tracks,i=r.length,o=t._propertyBindings,a=t._interpolants,s=n.uuid,c=this._bindingsByRootAndName,u=c[s];void 0===u&&(u={},c[s]=u);for(var h=0;h!==i;++h){var l=r[h],d=l.name,p=u[d];if(void 0!==p)o[h]=p;else{if(void 0!==(p=o[h])){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,s,d));continue}var f=e&&e._propertyBindings[h].binding.parsedPath;++(p=new Es(Rs.create(n,d,f),l.ValueTypeName,l.getValueSize())).referenceCount,this._addInactiveBinding(p,s,d),o[h]=p}a[h].resultBuffer=p.buffer}},_activateAction:function(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){var e=(t._localRoot||this._root).uuid,n=t._clip.uuid,r=this._actionsByClip[n];this._bindAction(t,r&&r.knownActions[0]),this._addInactiveAction(t,n,e)}for(var i=t._propertyBindings,o=0,a=i.length;o!==a;++o){var s=i[o];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(t)}},_deactivateAction:function(t){if(this._isActiveAction(t)){for(var e=t._propertyBindings,n=0,r=e.length;n!==r;++n){var i=e[n];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(t)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}},_isActiveAction:function(t){var e=t._cacheIndex;return null!==e&&e<this._nActiveActions},_addInactiveAction:function(t,e,n){var r=this._actions,i=this._actionsByClip,o=i[e];if(void 0===o)o={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,i[e]=o;else{var a=o.knownActions;t._byClipCacheIndex=a.length,a.push(t)}t._cacheIndex=r.length,r.push(t),o.actionByRoot[n]=t},_removeInactiveAction:function(t){var e=this._actions,n=e[e.length-1],r=t._cacheIndex;n._cacheIndex=r,e[r]=n,e.pop(),t._cacheIndex=null;var i=t._clip.uuid,o=this._actionsByClip,a=o[i],s=a.knownActions,c=s[s.length-1],u=t._byClipCacheIndex;c._byClipCacheIndex=u,s[u]=c,s.pop(),t._byClipCacheIndex=null,delete a.actionByRoot[(t._localRoot||this._root).uuid],0===s.length&&delete o[i],this._removeInactiveBindingsForAction(t)},_removeInactiveBindingsForAction:function(t){for(var e=t._propertyBindings,n=0,r=e.length;n!==r;++n){var i=e[n];0==--i.referenceCount&&this._removeInactiveBinding(i)}},_lendAction:function(t){var e=this._actions,n=t._cacheIndex,r=this._nActiveActions++,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_takeBackAction:function(t){var e=this._actions,n=t._cacheIndex,r=--this._nActiveActions,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_addInactiveBinding:function(t,e,n){var r=this._bindingsByRootAndName,i=r[e],o=this._bindings;void 0===i&&(i={},r[e]=i),i[n]=t,t._cacheIndex=o.length,o.push(t)},_removeInactiveBinding:function(t){var e=this._bindings,n=t.binding,r=n.rootNode.uuid,i=n.path,o=this._bindingsByRootAndName,a=o[r],s=e[e.length-1],c=t._cacheIndex;s._cacheIndex=c,e[c]=s,e.pop(),delete a[i];t:{for(var u in a)break t;delete o[r]}},_lendBinding:function(t){var e=this._bindings,n=t._cacheIndex,r=this._nActiveBindings++,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_takeBackBinding:function(t){var e=this._bindings,n=t._cacheIndex,r=--this._nActiveBindings,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_lendControlInterpolant:function(){var t=this._controlInterpolants,e=this._nActiveControlInterpolants++,n=t[e];return void 0===n&&((n=new Ya(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=e,t[e]=n),n},_takeBackControlInterpolant:function(t){var e=this._controlInterpolants,n=t.__cacheIndex,r=--this._nActiveControlInterpolants,i=e[r];t.__cacheIndex=r,e[r]=t,i.__cacheIndex=n,e[n]=i},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(t,e){var n=e||this._root,r=n.uuid,i="string"==typeof t?$a.findByName(n,t):t,o=null!==i?i.uuid:t,a=this._actionsByClip[o],s=null;if(void 0!==a){var c=a.actionByRoot[r];if(void 0!==c)return c;s=a.knownActions[0],null===i&&(i=s._clip)}if(null===i)return null;var u=new Cs(this,i,e);return this._bindAction(u,s),this._addInactiveAction(u,o,r),u},existingAction:function(t,e){var n=e||this._root,r=n.uuid,i="string"==typeof t?$a.findByName(n,t):t,o=i?i.uuid:t,a=this._actionsByClip[o];return void 0!==a&&a.actionByRoot[r]||null},stopAllAction:function(){var t=this._actions,e=this._nActiveActions,n=this._bindings,r=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==e;++i)t[i].reset();for(i=0;i!==r;++i)n[i].useCount=0;return this},update:function(t){t*=this.timeScale;for(var e=this._actions,n=this._nActiveActions,r=this.time+=t,i=Math.sign(t),o=this._accuIndex^=1,a=0;a!==n;++a){e[a]._update(r,t,i,o)}var s=this._bindings,c=this._nActiveBindings;for(a=0;a!==c;++a)s[a].apply(o);return this},getRoot:function(){return this._root},uncacheClip:function(t){var e=this._actions,n=t.uuid,r=this._actionsByClip,i=r[n];if(void 0!==i){for(var o=i.knownActions,a=0,s=o.length;a!==s;++a){var c=o[a];this._deactivateAction(c);var u=c._cacheIndex,h=e[e.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,h._cacheIndex=u,e[u]=h,e.pop(),this._removeInactiveBindingsForAction(c)}delete r[n]}},uncacheRoot:function(t){var e=t.uuid,n=this._actionsByClip;for(var r in n){var i=n[r].actionByRoot[e];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}var o=this._bindingsByRootAndName[e];if(void 0!==o)for(var a in o){var s=o[a];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(t,e){var n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}),Os.prototype.clone=function(){return new Os(void 0===this.value.clone?this.value:this.value.clone())},Is.prototype=Object.assign(Object.create(Pn.prototype),{constructor:Is,isInstancedBufferGeometry:!0,copy:function(t){return Pn.prototype.copy.call(this,t),this.maxInstancedCount=t.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)}}),Object.defineProperties(Ns.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(Ns.prototype,{isInterleavedBufferAttribute:!0,setX:function(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this},setY:function(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this},setZ:function(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this},setW:function(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this},getX:function(t){return this.data.array[t*this.data.stride+this.offset]},getY:function(t){return this.data.array[t*this.data.stride+this.offset+1]},getZ:function(t){return this.data.array[t*this.data.stride+this.offset+2]},getW:function(t){return this.data.array[t*this.data.stride+this.offset+3]},setXY:function(t,e,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this},setXYZ:function(t,e,n,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=r,this},setXYZW:function(t,e,n,r,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=r,this.data.array[t+3]=i,this}}),Object.defineProperty(Ds.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Ds.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==t?t.length/this.stride:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.dynamic=t.dynamic,this},copyAt:function(t,e,n){t*=this.stride,n*=e.stride;for(var r=0,i=this.stride;r<i;r++)this.array[t+r]=e.array[n+r];return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(t){return this.onUploadCallback=t,this}}),Us.prototype=Object.assign(Object.create(Ds.prototype),{constructor:Us,isInstancedInterleavedBuffer:!0,copy:function(t){return Ds.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Bs.prototype=Object.assign(Object.create(yn.prototype),{constructor:Bs,isInstancedBufferAttribute:!0,copy:function(t){return yn.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Object.assign(Fs.prototype,{linePrecision:1,set:function(t,e){this.ray.set(t,e)},setFromCamera:function(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize()):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(t,e,n){var r=n||[];return Gs(t,this,r,e),r.sort(zs),r},intersectObjects:function(t,e,n){var r=n||[];if(!1===Array.isArray(t))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),r;for(var i=0,o=t.length;i<o;i++)Gs(t[i],this,r,e);return r.sort(zs),r}}),Object.assign(Hs.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var e=("undefined"==typeof performance?Date:performance).now();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}),Object.assign(Vs.prototype,{set:function(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(t){return this.radius=t.length(),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t.x,t.z),this.phi=Math.acos(Fe.clamp(t.y/this.radius,-1,1))),this}}),Object.assign(ks.prototype,{set:function(t,e,n){return this.radius=t,this.theta=e,this.y=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this},setFromVector3:function(t){return this.radius=Math.sqrt(t.x*t.x+t.z*t.z),this.theta=Math.atan2(t.x,t.z),this.y=t.y,this}}),Object.assign(js.prototype,{set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var t=new ze;return function(e,n){var r=t.copy(n).multiplyScalar(.5);return this.min.copy(e).sub(r),this.max.copy(e).add(r),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box2: .getCenter() target is now required"),t=new ze),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box2: .getSize() target is now required"),t=new ze),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .getParameter() target is now required"),e=new ze),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)},clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .clampPoint() target is now required"),e=new ze),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new ze;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}),Ws.prototype=Object.create(dn.prototype),Ws.prototype.constructor=Ws,Ws.prototype.isImmediateRenderObject=!0,Xs.prototype=Object.create(bi.prototype),Xs.prototype.constructor=Xs,Xs.prototype.update=function(){var t=new Ve,e=new Ve,n=new ke;return function(){var r=["a","b","c"];this.object.updateMatrixWorld(!0),n.getNormalMatrix(this.object.matrixWorld);var i=this.object.matrixWorld,o=this.geometry.attributes.position,a=this.object.geometry;if(a&&a.isGeometry)for(var s=a.vertices,c=a.faces,u=0,h=0,l=c.length;h<l;h++)for(var d=c[h],p=0,f=d.vertexNormals.length;p<f;p++){var m=s[d[r[p]]],g=d.vertexNormals[p];t.copy(m).applyMatrix4(i),e.copy(g).applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),o.setXYZ(u,t.x,t.y,t.z),u+=1,o.setXYZ(u,e.x,e.y,e.z),u+=1}else if(a&&a.isBufferGeometry){var v=a.attributes.position,y=a.attributes.normal;for(u=0,p=0,f=v.count;p<f;p++)t.set(v.getX(p),v.getY(p),v.getZ(p)).applyMatrix4(i),e.set(y.getX(p),y.getY(p),y.getZ(p)),e.applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),o.setXYZ(u,t.x,t.y,t.z),u+=1,o.setXYZ(u,e.x,e.y,e.z),u+=1}o.needsUpdate=!0}}(),qs.prototype=Object.create(dn.prototype),qs.prototype.constructor=qs,qs.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},qs.prototype.update=function(){var t=new Ve,e=new Ve;return function(){this.light.updateMatrixWorld();var n=this.light.distance?this.light.distance:1e3,r=n*Math.tan(this.light.angle);this.cone.scale.set(r,r,n),t.setFromMatrixPosition(this.light.matrixWorld),e.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(e.sub(t)),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}(),Ys.prototype=Object.create(bi.prototype),Ys.prototype.constructor=Ys,Ys.prototype.updateMatrixWorld=function(){var t=new Ve,e=new Ge,n=new Ge;return function(r){var i=this.bones,o=this.geometry,a=o.getAttribute("position");n.getInverse(this.root.matrixWorld);for(var s=0,c=0;s<i.length;s++){var u=i[s];u.parent&&u.parent.isBone&&(e.multiplyMatrices(n,u.matrixWorld),t.setFromMatrixPosition(e),a.setXYZ(c,t.x,t.y,t.z),e.multiplyMatrices(n,u.parent.matrixWorld),t.setFromMatrixPosition(e),a.setXYZ(c+1,t.x,t.y,t.z),c+=2)}o.getAttribute("position").needsUpdate=!0,dn.prototype.updateMatrixWorld.call(this,r)}}(),Zs.prototype=Object.create(kn.prototype),Zs.prototype.constructor=Zs,Zs.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Zs.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},Js.prototype=Object.create(dn.prototype),Js.prototype.constructor=Js,Js.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Js.prototype.update=function(){var t=.5*this.light.width,e=.5*this.light.height,n=this.line.geometry.attributes.position,r=n.array;r[0]=t,r[1]=-e,r[2]=0,r[3]=t,r[4]=e,r[5]=0,r[6]=-t,r[7]=e,r[8]=0,r[9]=-t,r[10]=-e,r[11]=0,r[12]=t,r[13]=-e,r[14]=0,n.needsUpdate=!0,void 0!==this.color?this.line.material.color.set(this.color):this.line.material.color.copy(this.light.color)},Qs.prototype=Object.create(dn.prototype),Qs.prototype.constructor=Qs,Qs.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Qs.prototype.update=function(){var t=new Ve,e=new rn,n=new rn;return function(){var r=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var i=r.geometry.getAttribute("color");e.copy(this.light.color),n.copy(this.light.groundColor);for(var o=0,a=i.count;o<a;o++){var s=o<a/2?e:n;i.setXYZ(o,s.r,s.g,s.b)}i.needsUpdate=!0}r.lookAt(t.setFromMatrixPosition(this.light.matrixWorld).negate())}}(),Ks.prototype=Object.create(bi.prototype),Ks.prototype.constructor=Ks,$s.prototype=Object.create(bi.prototype),$s.prototype.constructor=$s,tc.prototype=Object.create(bi.prototype),tc.prototype.constructor=tc,tc.prototype.update=function(){var t=new Ve,e=new Ve,n=new ke;return function(){this.object.updateMatrixWorld(!0),n.getNormalMatrix(this.object.matrixWorld);for(var r=this.object.matrixWorld,i=this.geometry.attributes.position,o=this.object.geometry,a=o.vertices,s=o.faces,c=0,u=0,h=s.length;u<h;u++){var l=s[u],d=l.normal;t.copy(a[l.a]).add(a[l.b]).add(a[l.c]).divideScalar(3).applyMatrix4(r),e.copy(d).applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),i.setXYZ(c,t.x,t.y,t.z),c+=1,i.setXYZ(c,e.x,e.y,e.z),c+=1}i.needsUpdate=!0}}(),ec.prototype=Object.create(dn.prototype),ec.prototype.constructor=ec,ec.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},ec.prototype.update=function(){var t=new Ve,e=new Ve,n=new Ve;return function(){t.setFromMatrixPosition(this.light.matrixWorld),e.setFromMatrixPosition(this.light.target.matrixWorld),n.subVectors(e,t),this.lightPlane.lookAt(n),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(n),this.targetLine.scale.z=n.length()}}(),nc.prototype=Object.create(bi.prototype),nc.prototype.constructor=nc,nc.prototype.update=function(){var t,e,n=new Ve,r=new pn;function i(i,o,a,s){n.set(o,a,s).unproject(r);var c=e[i];if(void 0!==c)for(var u=t.getAttribute("position"),h=0,l=c.length;h<l;h++)u.setXYZ(c[h],n.x,n.y,n.z)}return function(){t=this.geometry,e=this.pointMap;r.projectionMatrix.copy(this.camera.projectionMatrix),i("c",0,0,-1),i("t",0,0,1),i("n1",-1,-1,-1),i("n2",1,-1,-1),i("n3",-1,1,-1),i("n4",1,1,-1),i("f1",-1,-1,1),i("f2",1,-1,1),i("f3",-1,1,1),i("f4",1,1,1),i("u1",.7,1.1,-1),i("u2",-.7,1.1,-1),i("u3",0,2,-1),i("cf1",-1,0,1),i("cf2",1,0,1),i("cf3",0,-1,1),i("cf4",0,1,1),i("cn1",-1,0,-1),i("cn2",1,0,-1),i("cn3",0,-1,-1),i("cn4",0,1,-1),t.getAttribute("position").needsUpdate=!0}}(),rc.prototype=Object.create(bi.prototype),rc.prototype.constructor=rc,rc.prototype.update=function(){var t=new Je;return function(e){if(void 0!==e&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&t.setFromObject(this.object),!t.isEmpty()){var n=t.min,r=t.max,i=this.geometry.attributes.position,o=i.array;o[0]=r.x,o[1]=r.y,o[2]=r.z,o[3]=n.x,o[4]=r.y,o[5]=r.z,o[6]=n.x,o[7]=n.y,o[8]=r.z,o[9]=r.x,o[10]=n.y,o[11]=r.z,o[12]=r.x,o[13]=r.y,o[14]=n.z,o[15]=n.x,o[16]=r.y,o[17]=n.z,o[18]=n.x,o[19]=n.y,o[20]=n.z,o[21]=r.x,o[22]=n.y,o[23]=n.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),rc.prototype.setFromObject=function(t){return this.object=t,this.update(),this},ic.prototype=Object.create(bi.prototype),ic.prototype.constructor=ic,ic.prototype.updateMatrixWorld=function(t){var e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),dn.prototype.updateMatrixWorld.call(this,t))},oc.prototype=Object.create(xi.prototype),oc.prototype.constructor=oc,oc.prototype.updateMatrixWorld=function(t){var e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?v:g,this.lookAt(this.plane.normal),dn.prototype.updateMatrixWorld.call(this,t)},ac.prototype=Object.create(dn.prototype),ac.prototype.constructor=ac,ac.prototype.setDirection=function(){var t,e=new Ve;return function(n){n.y>.99999?this.quaternion.set(0,0,0,1):n.y<-.99999?this.quaternion.set(1,0,0,0):(e.set(n.z,0,-n.x).normalize(),t=Math.acos(n.y),this.quaternion.setFromAxisAngle(e,t))}}(),ac.prototype.setLength=function(t,e,n){void 0===e&&(e=.2*t),void 0===n&&(n=.2*e),this.line.scale.set(1,Math.max(0,t-e),1),this.line.updateMatrix(),this.cone.scale.set(n,e,n),this.cone.position.y=t,this.cone.updateMatrix()},ac.prototype.setColor=function(t){this.line.material.color.copy(t),this.cone.material.color.copy(t)},sc.prototype=Object.create(bi.prototype),sc.prototype.constructor=sc;var uc=0,hc=1;function lc(t){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),t}function dc(t){return void 0===t&&(t=[]),console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),t.isMultiMaterial=!0,t.materials=t,t.clone=function(){return t.slice()},t}function pc(t,e){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new Mi(t,e)}function fc(t){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new pi(t)}function mc(t,e){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new Mi(t,e)}function gc(t){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new wi(t)}function vc(t){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new wi(t)}function yc(t){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new wi(t)}function xc(t,e,n){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new Ve(t,e,n)}function bc(t,e){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new yn(t,e).setDynamic(!0)}function _c(t,e){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new xn(t,e)}function wc(t,e){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new bn(t,e)}function Mc(t,e){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new _n(t,e)}function Ec(t,e){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new wn(t,e)}function Tc(t,e){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Mn(t,e)}function Sc(t,e){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new En(t,e)}function Ac(t,e){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new Tn(t,e)}function Rc(t,e){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new Sn(t,e)}function Lc(t,e){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new An(t,e)}function Cc(t){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),ma.call(this,t),this.type="catmullrom",this.closed=!0}function Pc(t){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),ma.call(this,t),this.type="catmullrom"}function Oc(t){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),ma.call(this,t),this.type="catmullrom"}function Ic(t){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new sc(t)}function Nc(t,e){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new rc(t,e)}function Dc(t,e){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new bi(new Io(t.geometry),new yi({color:void 0!==e?e:16777215}))}function Uc(t,e){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new bi(new Ai(t.geometry),new yi({color:void 0!==e?e:16777215}))}function Bc(t){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new ea(t)}function Fc(t){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new ra(t)}sa.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(sa.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Object.assign(Aa.prototype,{createPointsGeometry:function(t){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getPoints(t);return this.createGeometry(e)},createSpacedPointsGeometry:function(t){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getSpacedPoints(t);return this.createGeometry(e)},createGeometry:function(t){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var e=new vn,n=0,r=t.length;n<r;n++){var i=t[n];e.vertices.push(new Ve(i.x,i.y,i.z||0))}return e}}),Object.assign(Ra.prototype,{fromPoints:function(t){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)}}),Cc.prototype=Object.create(ma.prototype),Pc.prototype=Object.create(ma.prototype),Oc.prototype=Object.create(ma.prototype),Object.assign(Oc.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),Ks.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Ys.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(rs.prototype,{extractUrlBase:function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),is.extractUrlBase(t)}}),Object.assign(js.prototype,{center:function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},size:function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)}}),Object.assign(Je.prototype,{center:function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionSphere:function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},size:function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)}}),Hn.prototype.center=function(t){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(t)},Object.assign(Fe,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(t){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),Fe.floorPowerOfTwo(t)},nextPowerOfTwo:function(t){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),Fe.ceilPowerOfTwo(t)}}),Object.assign(ke.prototype,{flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},multiplyVector3:function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(t){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(Ge.prototype,{extractPosition:function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},getPosition:function(){var t;return function(){return void 0===t&&(t=new Ve),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),t.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector4:function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},crossVector:function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(t){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(t,e,n,r,i,o){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,r,n,i,o)}}),Ke.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},He.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},Object.assign(Gn.prototype,{isIntersectionBox:function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionPlane:function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},isIntersectionSphere:function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)}}),Object.assign(Vn.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},midpoint:function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},normal:function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},plane:function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)}}),Object.assign(Vn,{barycoordFromPoint:function(t,e,n,r,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Vn.getBarycoord(t,e,n,r,i)},normal:function(t,e,n,r){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Vn.getNormal(t,e,n,r)}}),Object.assign(La.prototype,{extractAllPoints:function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},extrude:function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new yo(this,t)},makeGeometry:function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new Co(this,t)}}),Object.assign(ze.prototype,{fromAttribute:function(t,e,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},distanceToManhattan:function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Ve.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},getScaleFromMatrix:function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},getColumnFromMatrix:function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},applyProjection:function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},fromAttribute:function(t,e,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},distanceToManhattan:function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Xe.prototype,{fromAttribute:function(t,e,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(vn.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}}),Object.assign(dn.prototype,{getChildByName:function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}}),Object.defineProperties(dn.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(fi.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(mi.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),Object.defineProperty(sa.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(t){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=t}}),oi.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(Ca.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(yn.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")}}),Object.assign(Pn.prototype,{addIndex:function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},addDrawCall:function(t,e,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(Pn.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.assign(xo.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(Os.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(Bn.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new rn}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=t===x}}}),Object.defineProperties(Wo.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(zn.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Object.assign(ci.prototype,{animate:function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")}}),Object.defineProperties(ci.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties($r.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(qe.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),Object.defineProperties(si.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}}}),_s.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var e=this;return(new vs).load(t,function(t){e.setBuffer(t)}),this},Ms.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},xs.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)};var zc={merge:function(t,e,n){var r;console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),e.isMesh&&(e.matrixAutoUpdate&&e.updateMatrix(),r=e.matrix,e=e.geometry),t.merge(e,r,n)},center:function(t){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),t.center()}},Gc={crossOrigin:void 0,loadTexture:function(t,e,n,r){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var i=new aa;i.setCrossOrigin(this.crossOrigin);var o=i.load(t,n,void 0,r);return e&&(o.mapping=e),o},loadTextureCube:function(t,e,n,r){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var i=new oa;i.setCrossOrigin(this.crossOrigin);var o=i.load(t,n,void 0,r);return e&&(o.mapping=e),o},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}};function Hc(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),this.projectVector=function(t,e){console.warn("THREE.Projector: .projectVector() is now vector.project()."),t.project(e)},this.unprojectVector=function(t,e){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),t.unproject(e)},this.pickingRay=function(){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}}function Vc(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),this.domElement=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),this.clear=function(){},this.render=function(){},this.setClearColor=function(){},this.setSize=function(){}}var kc={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")}};function jc(){console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")}var Wc=function(){return function(t,e){var n=this;this._sceneName=t,this._camera=e,this.start=function(){n._instance=new li,n._renderer=new ci,n._renderer.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(n._renderer.domElement),n.update()},this.update=function(){n._renderer.render(n.get(),n._camera),n._requestAnimationFrameId=window.requestAnimationFrame(n.update)},this.destroy=function(){window.cancelAnimationFrame(n._requestAnimationFrameId)},this.get=function(){return n._instance},this.getRenderer=function(){return n._renderer},this.getCamera=function(){return n._camera},this.getName=function(){return n._sceneName},this.setName=function(t){n._sceneName=t},this._sceneName=t,this._camera=e,this.start()}}(),Xc=n(0)(r),qc=function(){return function(t,e){var n=this;this._camera=t,this._domElement=e,this.start=function(){n._instance=new Xc(n._camera,n._domElement),n.update()},this.update=function(){n._instance.update(),n._requestAnimationFrameId=window.requestAnimationFrame(n.update)},this.destroy=function(){window.cancelAnimationFrame(n._requestAnimationFrameId)},this.get=function(){return n._instance},this._camera=t,this._domElement=e,this.start()}}(),Yc=function(){function t(t){var e=t.name,n=t.placeholder,r=t.defaultValue,i=t.style,o=t.onChange;this._name=e,this._placeholder=n,this._defaultValue=r,this._style=i,this._onChange=o,this.start()}return t.prototype.start=function(){this._instance=document.createElement("input"),this._instance.setAttribute("name",this._name),this._instance.setAttribute("placeholder",this._placeholder),this._instance.setAttribute("type","text"),this._instance.setAttribute("style",this._style),this._defaultValue&&this._instance.setAttribute("value",this._defaultValue),this._instance.addEventListener("input",this._onChange),document.body.appendChild(this._instance)},t.prototype.destroy=function(){this._instance.removeEventListener("input",this._onChange),document.removeChild(this._instance)},t}(),Zc=function(){return function(t,e){var n=this;this._editorScene=t,this._editorGrid=e,this.start=function(){n.renderSceneNameInput(),n.renderGridInputs()},this.destroy=function(){n._sceneNameInput.destroy(),window.cancelAnimationFrame(n._requestAnimationFrameId)},this.renderSceneNameInput=function(){n._sceneNameInput=new Yc({name:"sceneName",placeholder:"Insert a scene name...",style:"\n        display: flex;\n        position: absolute;\n        top: 10px;\n        left: 10px;\n        width: 180px;\n      ",onChange:function(t){n._editorScene.setName(t.target.value)}})},this.renderGridInputs=function(){n._gridWidthInput=new Yc({name:"gridWidth",placeholder:"Grid width...",style:"\n        display: flex;\n        position: absolute;\n        top: 40px;\n        left: 10px;\n        width: 80px;\n      ",defaultValue:""+n._editorGrid.getWidth(),onChange:function(t){n._editorGrid.setWidth(Number(t.target.value))}}),n._gridDepthInput=new Yc({name:"gridDepth",placeholder:"Grid depth...",style:"\n        display: flex;\n        position: absolute;\n        top: 40px;\n        left: 110px;\n        width: 80px;\n      ",defaultValue:""+n._editorGrid.getDepth(),onChange:function(t){n._editorGrid.setDepth(Number(t.target.value))}})},this._editorScene=t,this._editorGrid=e,this.start()}}(),Jc=function(){return function(t,e){var n=this;this._scene=t,this._onRaycast=e,this.start=function(){n._raycaster=new Fs,n._mouse=new ze,window.addEventListener("mousemove",n.onMouseMove,!1),n.update()},this.update=function(){n.raycast(),n._requestAnimationFrameId=window.requestAnimationFrame(n.update)},this.destroy=function(){window.removeEventListener("mousemove",n.onMouseMove,!1),window.cancelAnimationFrame(n._requestAnimationFrameId)},this.raycast=function(){n._raycaster.setFromCamera(n._mouse,n._camera);var t=n._raycaster.intersectObjects(n._scene.get().children,!1);n._onRaycast&&n._onRaycast(t)},this.onMouseMove=function(t){n._mouse.x=t.clientX/window.innerWidth*2-1,n._mouse.y=-t.clientY/window.innerHeight*2+1},this._scene=t,this._camera=t.getCamera(),this.start()}}(),Qc="rgba(50, 100, 255, 0.1)",Kc=function(){return function(t,e){void 0===e&&(e=new rn("rgba(0, 0, 0)"));var n=this;this._scene=t,this._gridColor=e,this._width=10,this._depth=10,this._lineWidth=10,this._lineDepth=10,this._grid=[],this.start=function(){n._mouseRaycast=new Jc(n._scene,n.onRaycast),n.generateGrid()},this.destroy=function(){n.cleanup(),window.cancelAnimationFrame(n._requestAnimationFrameId)},this.getGrid=function(){return n._grid},this.getWidth=function(){return n._width},this.setWidth=function(t){n._width=t,n._lineWidth=t,n.generateGrid()},this.getDepth=function(){return n._depth},this.setDepth=function(t){n._depth=t,n._lineDepth=t,n.generateGrid()},this.generateUnit=function(t){var e=t.x,n=t.y,r=t.z,i=new kn(new On(1,1,1));return i.material.color.set(Qc),i.position.x=e,i.position.y=n,i.position.z=r,i},this.cleanup=function(){console.log("cleanup"),n._grid.forEach(function(t){n._scene.get().remove(t)}),n._grid=[]},this.generateGrid=function(){n._grid.length&&n.cleanup();for(var t=-n._width;t<n._width+1;t++)for(var e=-n._depth;e<n._depth+1;e++)n._grid.push(n.generateUnit({x:t,y:0,z:e}));n._grid.forEach(function(t){n._scene.get().add(t)})},this.onRaycast=function(t){n._previousIntersections&&n._previousIntersections.length&&n._previousIntersections.forEach(function(t){t.object.material.color.set(Qc)}),t&&t.length&&t.forEach(function(t){t.object.material.color.set("red")}),n._previousIntersections=t},this._scene=t,this.start()}}();new(function(){return function(){var t=this;this.start=function(){t._camera=new oi(75,window.innerWidth/window.innerHeight,.1,1e3),t._scene=new Wc("prototype",t._camera),t._controls=new qc(t._camera,t._scene.getRenderer().domElement),t._camera.position.set(0,200,200),t._camera.lookAt(0,0,0),t._scene.getRenderer().setClearColor(new rn("rgba(0, 0, 0,")),t._editorGrid=new Kc(t._scene),t._editorToolbar=new Zc(t._scene,t._editorGrid),t.update()},this.update=function(){t._requestAnimationFrameId=window.requestAnimationFrame(t.update)},this.destroy=function(){window.cancelAnimationFrame(t._requestAnimationFrameId)},this.start()}}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RocmVlLW9yYml0LWNvbnRyb2xzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJlZS9idWlsZC90aHJlZS5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvc2NlbmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xzL29yYml0LWNvbnRyb2wudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2lucHV0LnRzIiwid2VicGFjazovLy8uL3NyYy9lZGl0b3IvZWRpdG9yLXRvb2xiYXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xzL21vdXNlLXJheWNhc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VkaXRvci9lZGl0b3ItZ3JpZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnRzIiwid2VicGFjazovLy8uL3NyYy9lZGl0b3IvZWRpdG9yLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiVEhSRUUiLCJPcmJpdENvbnRyb2xzIiwiZG9tRWxlbWVudCIsInRoaXMiLCJ1bmRlZmluZWQiLCJkb2N1bWVudCIsImVuYWJsZWQiLCJ0YXJnZXQiLCJWZWN0b3IzIiwibWluRGlzdGFuY2UiLCJtYXhEaXN0YW5jZSIsIkluZmluaXR5IiwibWluWm9vbSIsIm1heFpvb20iLCJtaW5Qb2xhckFuZ2xlIiwibWF4UG9sYXJBbmdsZSIsIk1hdGgiLCJQSSIsIm1pbkF6aW11dGhBbmdsZSIsIm1heEF6aW11dGhBbmdsZSIsImVuYWJsZURhbXBpbmciLCJkYW1waW5nRmFjdG9yIiwiZW5hYmxlWm9vbSIsInpvb21TcGVlZCIsImVuYWJsZVJvdGF0ZSIsInJvdGF0ZVNwZWVkIiwiZW5hYmxlUGFuIiwia2V5UGFuU3BlZWQiLCJhdXRvUm90YXRlIiwiYXV0b1JvdGF0ZVNwZWVkIiwiZW5hYmxlS2V5cyIsImtleXMiLCJMRUZUIiwiVVAiLCJSSUdIVCIsIkJPVFRPTSIsIm1vdXNlQnV0dG9ucyIsIk9SQklUIiwiTU9VU0UiLCJaT09NIiwiTUlERExFIiwiUEFOIiwidGFyZ2V0MCIsImNsb25lIiwicG9zaXRpb24wIiwicG9zaXRpb24iLCJ6b29tMCIsInpvb20iLCJnZXRQb2xhckFuZ2xlIiwic3BoZXJpY2FsIiwicGhpIiwiZ2V0QXppbXV0aGFsQW5nbGUiLCJ0aGV0YSIsInJlc2V0Iiwic2NvcGUiLCJjb3B5IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImRpc3BhdGNoRXZlbnQiLCJjaGFuZ2VFdmVudCIsInVwZGF0ZSIsInN0YXRlIiwiU1RBVEUiLCJOT05FIiwib2Zmc2V0IiwicXVhdCIsIlF1YXRlcm5pb24iLCJzZXRGcm9tVW5pdFZlY3RvcnMiLCJ1cCIsInF1YXRJbnZlcnNlIiwiaW52ZXJzZSIsImxhc3RQb3NpdGlvbiIsImxhc3RRdWF0ZXJuaW9uIiwic3ViIiwiYXBwbHlRdWF0ZXJuaW9uIiwic2V0RnJvbVZlY3RvcjMiLCJyb3RhdGVMZWZ0Iiwic3BoZXJpY2FsRGVsdGEiLCJtYXgiLCJtaW4iLCJtYWtlU2FmZSIsInJhZGl1cyIsInNjYWxlIiwiYWRkIiwicGFuT2Zmc2V0Iiwic2V0RnJvbVNwaGVyaWNhbCIsImxvb2tBdCIsInNldCIsInpvb21DaGFuZ2VkIiwiZGlzdGFuY2VUb1NxdWFyZWQiLCJFUFMiLCJkb3QiLCJxdWF0ZXJuaW9uIiwiZGlzcG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbkNvbnRleHRNZW51Iiwib25Nb3VzZURvd24iLCJvbk1vdXNlV2hlZWwiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsIndpbmRvdyIsIm9uS2V5RG93biIsInR5cGUiLCJzdGFydEV2ZW50IiwiZW5kRXZlbnQiLCJST1RBVEUiLCJET0xMWSIsIlRPVUNIX1JPVEFURSIsIlRPVUNIX0RPTExZIiwiVE9VQ0hfUEFOIiwiU3BoZXJpY2FsIiwicm90YXRlU3RhcnQiLCJWZWN0b3IyIiwicm90YXRlRW5kIiwicm90YXRlRGVsdGEiLCJwYW5TdGFydCIsInBhbkVuZCIsInBhbkRlbHRhIiwiZG9sbHlTdGFydCIsImRvbGx5RW5kIiwiZG9sbHlEZWx0YSIsImdldFpvb21TY2FsZSIsInBvdyIsImFuZ2xlIiwicm90YXRlVXAiLCJwYW5MZWZ0IiwidiIsImRpc3RhbmNlIiwib2JqZWN0TWF0cml4Iiwic2V0RnJvbU1hdHJpeENvbHVtbiIsIm11bHRpcGx5U2NhbGFyIiwicGFuVXAiLCJwYW4iLCJkZWx0YVgiLCJkZWx0YVkiLCJlbGVtZW50IiwiYm9keSIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwidGFyZ2V0RGlzdGFuY2UiLCJsZW5ndGgiLCJ0YW4iLCJmb3YiLCJjbGllbnRIZWlnaHQiLCJtYXRyaXgiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJyaWdodCIsImxlZnQiLCJjbGllbnRXaWR0aCIsInRvcCIsImJvdHRvbSIsImNvbnNvbGUiLCJ3YXJuIiwiZG9sbHlJbiIsImRvbGx5U2NhbGUiLCJkb2xseU91dCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJidXR0b24iLCJjbGllbnRYIiwiY2xpZW50WSIsImhhbmRsZU1vdXNlRG93blJvdGF0ZSIsImhhbmRsZU1vdXNlRG93bkRvbGx5IiwiaGFuZGxlTW91c2VEb3duUGFuIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN1YlZlY3RvcnMiLCJ4IiwieSIsImhhbmRsZU1vdXNlTW92ZVJvdGF0ZSIsImhhbmRsZU1vdXNlTW92ZURvbGx5IiwiaGFuZGxlTW91c2VNb3ZlUGFuIiwic3RvcFByb3BhZ2F0aW9uIiwiaGFuZGxlTW91c2VXaGVlbCIsImtleUNvZGUiLCJoYW5kbGVLZXlEb3duIiwidG91Y2hlcyIsInBhZ2VYIiwicGFnZVkiLCJoYW5kbGVUb3VjaFN0YXJ0Um90YXRlIiwiZHgiLCJkeSIsInNxcnQiLCJoYW5kbGVUb3VjaFN0YXJ0RG9sbHkiLCJoYW5kbGVUb3VjaFN0YXJ0UGFuIiwiaGFuZGxlVG91Y2hNb3ZlUm90YXRlIiwiaGFuZGxlVG91Y2hNb3ZlRG9sbHkiLCJoYW5kbGVUb3VjaE1vdmVQYW4iLCJFdmVudERpc3BhdGNoZXIiLCJjb25zdHJ1Y3RvciIsImRlZmluZVByb3BlcnRpZXMiLCJjZW50ZXIiLCJub1pvb20iLCJub1JvdGF0ZSIsIm5vUGFuIiwibm9LZXlzIiwic3RhdGljTW92aW5nIiwiZHluYW1pY0RhbXBpbmdGYWN0b3IiLCJOdW1iZXIiLCJFUFNJTE9OIiwiaXNJbnRlZ2VyIiwiaXNGaW5pdGUiLCJmbG9vciIsInNpZ24iLCJGdW5jdGlvbiIsInRvU3RyaW5nIiwibWF0Y2giLCJhc3NpZ24iLCJUeXBlRXJyb3IiLCJvdXRwdXQiLCJpbmRleCIsImFyZ3VtZW50cyIsInNvdXJjZSIsIm5leHRLZXkiLCJsaXN0ZW5lciIsIl9saXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJpbmRleE9mIiwicHVzaCIsImhhc0V2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lckFycmF5Iiwic3BsaWNlIiwiYXJyYXkiLCJzbGljZSIsIlJFVklTSU9OIiwiQ3VsbEZhY2VOb25lIiwiQ3VsbEZhY2VCYWNrIiwiQ3VsbEZhY2VGcm9udCIsIkN1bGxGYWNlRnJvbnRCYWNrIiwiRnJvbnRGYWNlRGlyZWN0aW9uQ1ciLCJGcm9udEZhY2VEaXJlY3Rpb25DQ1ciLCJCYXNpY1NoYWRvd01hcCIsIlBDRlNoYWRvd01hcCIsIlBDRlNvZnRTaGFkb3dNYXAiLCJGcm9udFNpZGUiLCJCYWNrU2lkZSIsIkRvdWJsZVNpZGUiLCJGbGF0U2hhZGluZyIsIlNtb290aFNoYWRpbmciLCJOb0NvbG9ycyIsIkZhY2VDb2xvcnMiLCJWZXJ0ZXhDb2xvcnMiLCJOb0JsZW5kaW5nIiwiTm9ybWFsQmxlbmRpbmciLCJBZGRpdGl2ZUJsZW5kaW5nIiwiU3VidHJhY3RpdmVCbGVuZGluZyIsIk11bHRpcGx5QmxlbmRpbmciLCJDdXN0b21CbGVuZGluZyIsIkFkZEVxdWF0aW9uIiwiU3VidHJhY3RFcXVhdGlvbiIsIlJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uIiwiTWluRXF1YXRpb24iLCJNYXhFcXVhdGlvbiIsIlplcm9GYWN0b3IiLCJPbmVGYWN0b3IiLCJTcmNDb2xvckZhY3RvciIsIk9uZU1pbnVzU3JjQ29sb3JGYWN0b3IiLCJTcmNBbHBoYUZhY3RvciIsIk9uZU1pbnVzU3JjQWxwaGFGYWN0b3IiLCJEc3RBbHBoYUZhY3RvciIsIk9uZU1pbnVzRHN0QWxwaGFGYWN0b3IiLCJEc3RDb2xvckZhY3RvciIsIk9uZU1pbnVzRHN0Q29sb3JGYWN0b3IiLCJTcmNBbHBoYVNhdHVyYXRlRmFjdG9yIiwiTmV2ZXJEZXB0aCIsIkFsd2F5c0RlcHRoIiwiTGVzc0RlcHRoIiwiTGVzc0VxdWFsRGVwdGgiLCJFcXVhbERlcHRoIiwiR3JlYXRlckVxdWFsRGVwdGgiLCJHcmVhdGVyRGVwdGgiLCJOb3RFcXVhbERlcHRoIiwiTXVsdGlwbHlPcGVyYXRpb24iLCJNaXhPcGVyYXRpb24iLCJBZGRPcGVyYXRpb24iLCJOb1RvbmVNYXBwaW5nIiwiTGluZWFyVG9uZU1hcHBpbmciLCJSZWluaGFyZFRvbmVNYXBwaW5nIiwiVW5jaGFydGVkMlRvbmVNYXBwaW5nIiwiQ2luZW9uVG9uZU1hcHBpbmciLCJVVk1hcHBpbmciLCJDdWJlUmVmbGVjdGlvbk1hcHBpbmciLCJDdWJlUmVmcmFjdGlvbk1hcHBpbmciLCJFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyIsIkVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nIiwiU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmciLCJDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyIsIkN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nIiwiUmVwZWF0V3JhcHBpbmciLCJDbGFtcFRvRWRnZVdyYXBwaW5nIiwiTWlycm9yZWRSZXBlYXRXcmFwcGluZyIsIk5lYXJlc3RGaWx0ZXIiLCJOZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlciIsIk5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIiLCJMaW5lYXJGaWx0ZXIiLCJMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyIiwiTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyIiwiVW5zaWduZWRCeXRlVHlwZSIsIkJ5dGVUeXBlIiwiU2hvcnRUeXBlIiwiVW5zaWduZWRTaG9ydFR5cGUiLCJJbnRUeXBlIiwiVW5zaWduZWRJbnRUeXBlIiwiRmxvYXRUeXBlIiwiSGFsZkZsb2F0VHlwZSIsIlVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSIsIlVuc2lnbmVkU2hvcnQ1NTUxVHlwZSIsIlVuc2lnbmVkU2hvcnQ1NjVUeXBlIiwiVW5zaWduZWRJbnQyNDhUeXBlIiwiQWxwaGFGb3JtYXQiLCJSR0JGb3JtYXQiLCJSR0JBRm9ybWF0IiwiTHVtaW5hbmNlRm9ybWF0IiwiTHVtaW5hbmNlQWxwaGFGb3JtYXQiLCJSR0JFRm9ybWF0IiwiRGVwdGhGb3JtYXQiLCJEZXB0aFN0ZW5jaWxGb3JtYXQiLCJSR0JfUzNUQ19EWFQxX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQxX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQzX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCIsIlJHQl9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQiLCJSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQiLCJSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQiLCJSR0JfRVRDMV9Gb3JtYXQiLCJSR0JBX0FTVENfNHg0X0Zvcm1hdCIsIlJHQkFfQVNUQ181eDRfRm9ybWF0IiwiUkdCQV9BU1RDXzV4NV9Gb3JtYXQiLCJSR0JBX0FTVENfNng1X0Zvcm1hdCIsIlJHQkFfQVNUQ182eDZfRm9ybWF0IiwiUkdCQV9BU1RDXzh4NV9Gb3JtYXQiLCJSR0JBX0FTVENfOHg2X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDVfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDZfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCIsIlJHQkFfQVNUQ18xMngxMF9Gb3JtYXQiLCJSR0JBX0FTVENfMTJ4MTJfRm9ybWF0IiwiTG9vcE9uY2UiLCJMb29wUmVwZWF0IiwiTG9vcFBpbmdQb25nIiwiSW50ZXJwb2xhdGVEaXNjcmV0ZSIsIkludGVycG9sYXRlTGluZWFyIiwiSW50ZXJwb2xhdGVTbW9vdGgiLCJaZXJvQ3VydmF0dXJlRW5kaW5nIiwiWmVyb1Nsb3BlRW5kaW5nIiwiV3JhcEFyb3VuZEVuZGluZyIsIlRyaWFuZ2xlc0RyYXdNb2RlIiwiVHJpYW5nbGVTdHJpcERyYXdNb2RlIiwiVHJpYW5nbGVGYW5EcmF3TW9kZSIsIkxpbmVhckVuY29kaW5nIiwic1JHQkVuY29kaW5nIiwiR2FtbWFFbmNvZGluZyIsIlJHQkVFbmNvZGluZyIsIkxvZ0x1dkVuY29kaW5nIiwiUkdCTTdFbmNvZGluZyIsIlJHQk0xNkVuY29kaW5nIiwiUkdCREVuY29kaW5nIiwiQmFzaWNEZXB0aFBhY2tpbmciLCJSR0JBRGVwdGhQYWNraW5nIiwiVGFuZ2VudFNwYWNlTm9ybWFsTWFwIiwiT2JqZWN0U3BhY2VOb3JtYWxNYXAiLCJfTWF0aCIsIkRFRzJSQUQiLCJSQUQyREVHIiwiZ2VuZXJhdGVVVUlEIiwibHV0IiwiZDAiLCJyYW5kb20iLCJkMSIsImQyIiwiZDMiLCJ0b1VwcGVyQ2FzZSIsImNsYW1wIiwiZXVjbGlkZWFuTW9kdWxvIiwibWFwTGluZWFyIiwiYTEiLCJhMiIsImIxIiwiYjIiLCJsZXJwIiwic21vb3Roc3RlcCIsInNtb290aGVyc3RlcCIsInJhbmRJbnQiLCJsb3ciLCJoaWdoIiwicmFuZEZsb2F0IiwicmFuZEZsb2F0U3ByZWFkIiwicmFuZ2UiLCJkZWdUb1JhZCIsImRlZ3JlZXMiLCJyYWRUb0RlZyIsInJhZGlhbnMiLCJpc1Bvd2VyT2ZUd28iLCJjZWlsUG93ZXJPZlR3byIsImNlaWwiLCJsb2ciLCJMTjIiLCJmbG9vclBvd2VyT2ZUd28iLCJNYXRyaXg0IiwiZWxlbWVudHMiLCJlcnJvciIsInoiLCJ3IiwiX3giLCJfeSIsIl96IiwiX3ciLCJNYXRyaXgzIiwid2lkdGgiLCJoZWlnaHQiLCJpc1ZlY3RvcjIiLCJzZXRTY2FsYXIiLCJzY2FsYXIiLCJzZXRYIiwic2V0WSIsInNldENvbXBvbmVudCIsIkVycm9yIiwiZ2V0Q29tcG9uZW50IiwiYWRkVmVjdG9ycyIsImFkZFNjYWxhciIsImEiLCJiIiwiYWRkU2NhbGVkVmVjdG9yIiwic3ViU2NhbGFyIiwibXVsdGlwbHkiLCJkaXZpZGUiLCJkaXZpZGVTY2FsYXIiLCJhcHBseU1hdHJpeDMiLCJlIiwiY2xhbXBTY2FsYXIiLCJtaW5WYWwiLCJtYXhWYWwiLCJjbGFtcExlbmd0aCIsInJvdW5kIiwicm91bmRUb1plcm8iLCJuZWdhdGUiLCJsZW5ndGhTcSIsIm1hbmhhdHRhbkxlbmd0aCIsImFicyIsIm5vcm1hbGl6ZSIsImF0YW4yIiwiZGlzdGFuY2VUbyIsIm1hbmhhdHRhbkRpc3RhbmNlVG8iLCJzZXRMZW5ndGgiLCJhbHBoYSIsImxlcnBWZWN0b3JzIiwidjEiLCJ2MiIsImVxdWFscyIsImZyb21BcnJheSIsInRvQXJyYXkiLCJmcm9tQnVmZmVyQXR0cmlidXRlIiwiYXR0cmlidXRlIiwiZ2V0WCIsImdldFkiLCJyb3RhdGVBcm91bmQiLCJjb3MiLCJzaW4iLCJpc01hdHJpeDQiLCJuMTEiLCJuMTIiLCJuMTMiLCJuMTQiLCJuMjEiLCJuMjIiLCJuMjMiLCJuMjQiLCJuMzEiLCJuMzIiLCJuMzMiLCJuMzQiLCJuNDEiLCJuNDIiLCJuNDMiLCJuNDQiLCJ0ZSIsImlkZW50aXR5IiwibWUiLCJjb3B5UG9zaXRpb24iLCJleHRyYWN0QmFzaXMiLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJtYWtlQmFzaXMiLCJleHRyYWN0Um90YXRpb24iLCJzY2FsZVgiLCJzY2FsZVkiLCJzY2FsZVoiLCJtYWtlUm90YXRpb25Gcm9tRXVsZXIiLCJldWxlciIsImlzRXVsZXIiLCJmIiwib3JkZXIiLCJhZSIsImFmIiwiYmUiLCJiZiIsImNlIiwiY2YiLCJkZSIsImRmIiwiYWMiLCJhZCIsImJjIiwiYmQiLCJtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiIsInplcm8iLCJvbmUiLCJxIiwiY29tcG9zZSIsImV5ZSIsImNyb3NzVmVjdG9ycyIsIm11bHRpcGx5TWF0cmljZXMiLCJwcmVtdWx0aXBseSIsImExMSIsImExMiIsImExMyIsImExNCIsImEyMSIsImEyMiIsImEyMyIsImEyNCIsImEzMSIsImEzMiIsImEzMyIsImEzNCIsImE0MSIsImE0MiIsImE0MyIsImE0NCIsImIxMSIsImIxMiIsImIxMyIsImIxNCIsImIyMSIsImIyMiIsImIyMyIsImIyNCIsImIzMSIsImIzMiIsImIzMyIsImIzNCIsImI0MSIsImI0MiIsImI0MyIsImI0NCIsImFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUiLCJjb3VudCIsImdldFoiLCJhcHBseU1hdHJpeDQiLCJzZXRYWVoiLCJkZXRlcm1pbmFudCIsInRyYW5zcG9zZSIsInRtcCIsInNldFBvc2l0aW9uIiwiZ2V0SW52ZXJzZSIsInRocm93T25EZWdlbmVyYXRlIiwidDExIiwidDEyIiwidDEzIiwidDE0IiwiZGV0IiwibXNnIiwiZGV0SW52IiwiZ2V0TWF4U2NhbGVPbkF4aXMiLCJzY2FsZVhTcSIsInNjYWxlWVNxIiwic2NhbGVaU3EiLCJtYWtlVHJhbnNsYXRpb24iLCJtYWtlUm90YXRpb25YIiwibWFrZVJvdGF0aW9uWSIsIm1ha2VSb3RhdGlvbloiLCJtYWtlUm90YXRpb25BeGlzIiwiYXhpcyIsInR4IiwidHkiLCJtYWtlU2NhbGUiLCJtYWtlU2hlYXIiLCJ4MiIsInkyIiwiejIiLCJ4eCIsInh5IiwieHoiLCJ5eSIsInl6IiwienoiLCJ3eCIsInd5Iiwid3oiLCJzeCIsInN5Iiwic3oiLCJkZWNvbXBvc2UiLCJ2ZWN0b3IiLCJpbnZTWCIsImludlNZIiwiaW52U1oiLCJzZXRGcm9tUm90YXRpb25NYXRyaXgiLCJtYWtlUGVyc3BlY3RpdmUiLCJuZWFyIiwiZmFyIiwibWFrZU9ydGhvZ3JhcGhpYyIsImgiLCJzbGVycCIsInFhIiwicWIiLCJxbSIsInNsZXJwRmxhdCIsImRzdCIsImRzdE9mZnNldCIsInNyYzAiLCJzcmNPZmZzZXQwIiwic3JjMSIsInNyY09mZnNldDEiLCJ4MCIsInkwIiwiejAiLCJ3MCIsIngxIiwieTEiLCJ6MSIsIncxIiwiZGlyIiwic3FyU2luIiwibGVuIiwidERpciIsIm9uQ2hhbmdlQ2FsbGJhY2siLCJzZXRGcm9tRXVsZXIiLCJjMSIsImMyIiwiYzMiLCJzMSIsInMyIiwiczMiLCJzZXRGcm9tQXhpc0FuZ2xlIiwiaGFsZkFuZ2xlIiwibTExIiwibTEyIiwibTEzIiwibTIxIiwibTIyIiwibTIzIiwibTMxIiwibTMyIiwibTMzIiwidHJhY2UiLCJ2RnJvbSIsInZUbyIsImNvbmp1Z2F0ZSIsIm11bHRpcGx5UXVhdGVybmlvbnMiLCJxYXgiLCJxYXkiLCJxYXoiLCJxYXciLCJxYngiLCJxYnkiLCJxYnoiLCJxYnciLCJjb3NIYWxmVGhldGEiLCJzcXJTaW5IYWxmVGhldGEiLCJzaW5IYWxmVGhldGEiLCJoYWxmVGhldGEiLCJyYXRpb0EiLCJyYXRpb0IiLCJvbkNoYW5nZSIsImNhbGxiYWNrIiwiaXNWZWN0b3IzIiwic2V0WiIsIm11bHRpcGx5VmVjdG9ycyIsImFwcGx5RXVsZXIiLCJhcHBseUF4aXNBbmdsZSIsInF4IiwicXkiLCJxeiIsInF3IiwiaXgiLCJpeSIsIml6IiwiaXciLCJwcm9qZWN0IiwiY2FtZXJhIiwicHJvamVjdGlvbk1hdHJpeCIsIm1hdHJpeFdvcmxkIiwidW5wcm9qZWN0IiwidHJhbnNmb3JtRGlyZWN0aW9uIiwiY3Jvc3MiLCJheCIsImF5IiwiYXoiLCJieCIsImJ5IiwiYnoiLCJwcm9qZWN0T25WZWN0b3IiLCJwcm9qZWN0T25QbGFuZSIsInBsYW5lTm9ybWFsIiwicmVmbGVjdCIsIm5vcm1hbCIsImFuZ2xlVG8iLCJhY29zIiwiZHoiLCJzaW5QaGlSYWRpdXMiLCJzZXRGcm9tQ3lsaW5kcmljYWwiLCJzZXRGcm9tTWF0cml4UG9zaXRpb24iLCJzZXRGcm9tTWF0cml4U2NhbGUiLCJpc01hdHJpeDMiLCJzZXRGcm9tTWF0cml4NCIsImciLCJnZXROb3JtYWxNYXRyaXgiLCJtYXRyaXg0IiwidHJhbnNwb3NlSW50b0FycmF5Iiwic2V0VXZUcmFuc2Zvcm0iLCJyb3RhdGlvbiIsImN4IiwiY3kiLCJyb3RhdGUiLCJ0cmFuc2xhdGUiLCJ0ZXh0dXJlSWQiLCJUZXh0dXJlIiwiaW1hZ2UiLCJtYXBwaW5nIiwid3JhcFMiLCJ3cmFwVCIsIm1hZ0ZpbHRlciIsIm1pbkZpbHRlciIsImZvcm1hdCIsImFuaXNvdHJvcHkiLCJlbmNvZGluZyIsInV1aWQiLCJERUZBVUxUX0lNQUdFIiwibWlwbWFwcyIsIkRFRkFVTFRfTUFQUElORyIsInJlcGVhdCIsIm1hdHJpeEF1dG9VcGRhdGUiLCJnZW5lcmF0ZU1pcG1hcHMiLCJwcmVtdWx0aXBseUFscGhhIiwiZmxpcFkiLCJ1bnBhY2tBbGlnbm1lbnQiLCJ2ZXJzaW9uIiwib25VcGRhdGUiLCJWZWN0b3I0IiwiV2ViR0xSZW5kZXJUYXJnZXQiLCJvcHRpb25zIiwic2Npc3NvciIsInNjaXNzb3JUZXN0Iiwidmlld3BvcnQiLCJ0ZXh0dXJlIiwiZGVwdGhCdWZmZXIiLCJzdGVuY2lsQnVmZmVyIiwiZGVwdGhUZXh0dXJlIiwiV2ViR0xSZW5kZXJUYXJnZXRDdWJlIiwiYWN0aXZlQ3ViZUZhY2UiLCJhY3RpdmVNaXBNYXBMZXZlbCIsIkRhdGFUZXh0dXJlIiwiZGF0YSIsIkJveDMiLCJTcGhlcmUiLCJQbGFuZSIsImNvbnN0YW50IiwiRnJ1c3R1bSIsInAwIiwicDEiLCJwMiIsInAzIiwicDQiLCJwNSIsInBsYW5lcyIsImlzVGV4dHVyZSIsInVwZGF0ZU1hdHJpeCIsInRvSlNPTiIsIm1ldGEiLCJpc1Jvb3RPYmplY3QiLCJ0ZXh0dXJlcyIsImdldERhdGFVUkwiLCJjYW52YXMiLCJIVE1MQ2FudmFzRWxlbWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiSW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwiZHJhd0ltYWdlIiwidG9EYXRhVVJMIiwibWV0YWRhdGEiLCJnZW5lcmF0b3IiLCJ3cmFwIiwiaW1hZ2VzIiwidXJsIiwiQXJyYXkiLCJpc0FycmF5IiwidHJhbnNmb3JtVXYiLCJ1diIsImlzVmVjdG9yNCIsInNldFciLCJzZXRBeGlzQW5nbGVGcm9tUXVhdGVybmlvbiIsInNldEF4aXNBbmdsZUZyb21Sb3RhdGlvbk1hdHJpeCIsImdldFciLCJpc1dlYkdMUmVuZGVyVGFyZ2V0Iiwic2V0U2l6ZSIsImlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlIiwiaXNEYXRhVGV4dHVyZSIsImlzQm94MyIsInNldEZyb21BcnJheSIsIm1pblgiLCJtaW5ZIiwibWluWiIsIm1heFgiLCJtYXhZIiwibWF4WiIsInNldEZyb21CdWZmZXJBdHRyaWJ1dGUiLCJzZXRGcm9tUG9pbnRzIiwicG9pbnRzIiwibWFrZUVtcHR5IiwiaWwiLCJleHBhbmRCeVBvaW50Iiwic2V0RnJvbUNlbnRlckFuZFNpemUiLCJzaXplIiwiaGFsZlNpemUiLCJzZXRGcm9tT2JqZWN0IiwiZXhwYW5kQnlPYmplY3QiLCJib3giLCJpc0VtcHR5IiwiZ2V0Q2VudGVyIiwiZ2V0U2l6ZSIsInBvaW50IiwiZXhwYW5kQnlWZWN0b3IiLCJleHBhbmRCeVNjYWxhciIsInRyYXZlcnNlIiwibm9kZSIsImdlb21ldHJ5IiwiaXNHZW9tZXRyeSIsInZlcnRpY2VzIiwiaXNCdWZmZXJHZW9tZXRyeSIsImF0dHJpYnV0ZXMiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0JveCIsImdldFBhcmFtZXRlciIsImludGVyc2VjdHNCb3giLCJpbnRlcnNlY3RzU3BoZXJlIiwiY2xvc2VzdFBvaW50Iiwic3BoZXJlIiwiY2xhbXBQb2ludCIsImludGVyc2VjdHNQbGFuZSIsInBsYW5lIiwiaW50ZXJzZWN0c1RyaWFuZ2xlIiwidjAiLCJmMCIsImYxIiwiZjIiLCJ0ZXN0QXhpcyIsImV4dGVudHMiLCJ0cmlhbmdsZU5vcm1hbCIsInNhdEZvckF4ZXMiLCJheGVzIiwiaiIsInRyaWFuZ2xlIiwiZGlzdGFuY2VUb1BvaW50IiwiZ2V0Qm91bmRpbmdTcGhlcmUiLCJpbnRlcnNlY3QiLCJ1bmlvbiIsInhheCIsInhheSIsInhheiIsInhieCIsInhieSIsInhieiIsInlheCIsInlheSIsInlheiIsInlieCIsInlieSIsInlieiIsInpheCIsInpheSIsInpheiIsInpieCIsInpieSIsInpieiIsIm9wdGlvbmFsQ2VudGVyIiwibWF4UmFkaXVzU3EiLCJlbXB0eSIsInJhZGl1c1N1bSIsImRlbHRhTGVuZ3RoU3EiLCJnZXRCb3VuZGluZ0JveCIsInNldENvbXBvbmVudHMiLCJzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCIsInNldEZyb21Db3BsYW5hclBvaW50cyIsImludmVyc2VOb3JtYWxMZW5ndGgiLCJkaXN0YW5jZVRvU3BoZXJlIiwicHJvamVjdFBvaW50IiwiaW50ZXJzZWN0TGluZSIsImxpbmUiLCJkaXJlY3Rpb24iLCJkZWx0YSIsImRlbm9taW5hdG9yIiwic3RhcnQiLCJpbnRlcnNlY3RzTGluZSIsInN0YXJ0U2lnbiIsImVuZFNpZ24iLCJlbmQiLCJjb3BsYW5hclBvaW50IiwibTEiLCJvcHRpb25hbE5vcm1hbE1hdHJpeCIsIm5vcm1hbE1hdHJpeCIsInJlZmVyZW5jZVBvaW50IiwiZnJ1c3R1bSIsInNldEZyb21NYXRyaXgiLCJtZTAiLCJtZTEiLCJtZTIiLCJtZTMiLCJtZTQiLCJtZTUiLCJtZTYiLCJtZTciLCJtZTgiLCJtZTkiLCJtZTEwIiwibWUxMSIsIm1lMTIiLCJtZTEzIiwibWUxNCIsIm1lMTUiLCJpbnRlcnNlY3RzT2JqZWN0IiwiYm91bmRpbmdTcGhlcmUiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJpbnRlcnNlY3RzU3ByaXRlIiwic3ByaXRlIiwibmVnUmFkaXVzIiwiU2hhZGVyQ2h1bmsiLCJhbHBoYW1hcF9mcmFnbWVudCIsImFscGhhbWFwX3BhcnNfZnJhZ21lbnQiLCJhbHBoYXRlc3RfZnJhZ21lbnQiLCJhb21hcF9mcmFnbWVudCIsImFvbWFwX3BhcnNfZnJhZ21lbnQiLCJiZWdpbl92ZXJ0ZXgiLCJiZWdpbm5vcm1hbF92ZXJ0ZXgiLCJic2RmcyIsImJ1bXBtYXBfcGFyc19mcmFnbWVudCIsImNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCIsImNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4IiwiY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCIsImNvbG9yX2ZyYWdtZW50IiwiY29sb3JfcGFyc19mcmFnbWVudCIsImNvbG9yX3BhcnNfdmVydGV4IiwiY29sb3JfdmVydGV4IiwiY29tbW9uIiwiY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50IiwiZGVmYXVsdG5vcm1hbF92ZXJ0ZXgiLCJkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXgiLCJkaXNwbGFjZW1lbnRtYXBfdmVydGV4IiwiZW1pc3NpdmVtYXBfZnJhZ21lbnQiLCJlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50IiwiZW5jb2RpbmdzX2ZyYWdtZW50IiwiZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfZnJhZ21lbnQiLCJlbnZtYXBfcGFyc19mcmFnbWVudCIsImVudm1hcF9wYXJzX3ZlcnRleCIsImVudm1hcF92ZXJ0ZXgiLCJmb2dfdmVydGV4IiwiZm9nX3BhcnNfdmVydGV4IiwiZm9nX2ZyYWdtZW50IiwiZm9nX3BhcnNfZnJhZ21lbnQiLCJncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50IiwibGlnaHRtYXBfZnJhZ21lbnQiLCJsaWdodG1hcF9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX2xhbWJlcnRfdmVydGV4IiwibGlnaHRzX3BhcnNfYmVnaW4iLCJsaWdodHNfcGFyc19tYXBzIiwibGlnaHRzX3Bob25nX2ZyYWdtZW50IiwibGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCIsImxpZ2h0c19mcmFnbWVudF9iZWdpbiIsImxpZ2h0c19mcmFnbWVudF9tYXBzIiwibGlnaHRzX2ZyYWdtZW50X2VuZCIsImxvZ2RlcHRoYnVmX2ZyYWdtZW50IiwibG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCIsImxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4IiwibG9nZGVwdGhidWZfdmVydGV4IiwibWFwX2ZyYWdtZW50IiwibWFwX3BhcnNfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50IiwibW9ycGhub3JtYWxfdmVydGV4IiwibW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgiLCJtb3JwaHRhcmdldF92ZXJ0ZXgiLCJub3JtYWxfZnJhZ21lbnRfYmVnaW4iLCJub3JtYWxfZnJhZ21lbnRfbWFwcyIsIm5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50IiwicGFja2luZyIsInByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQiLCJwcm9qZWN0X3ZlcnRleCIsImRpdGhlcmluZ19mcmFnbWVudCIsImRpdGhlcmluZ19wYXJzX2ZyYWdtZW50Iiwicm91Z2huZXNzbWFwX2ZyYWdtZW50Iiwicm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQiLCJzaGFkb3dtYXBfcGFyc19mcmFnbWVudCIsInNoYWRvd21hcF9wYXJzX3ZlcnRleCIsInNoYWRvd21hcF92ZXJ0ZXgiLCJzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQiLCJza2luYmFzZV92ZXJ0ZXgiLCJza2lubmluZ19wYXJzX3ZlcnRleCIsInNraW5uaW5nX3ZlcnRleCIsInNraW5ub3JtYWxfdmVydGV4Iiwic3BlY3VsYXJtYXBfZnJhZ21lbnQiLCJzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50IiwidG9uZW1hcHBpbmdfZnJhZ21lbnQiLCJ0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50IiwidXZfcGFyc19mcmFnbWVudCIsInV2X3BhcnNfdmVydGV4IiwidXZfdmVydGV4IiwidXYyX3BhcnNfZnJhZ21lbnQiLCJ1djJfcGFyc192ZXJ0ZXgiLCJ1djJfdmVydGV4Iiwid29ybGRwb3NfdmVydGV4IiwiY3ViZV9mcmFnIiwiY3ViZV92ZXJ0IiwiZGVwdGhfZnJhZyIsImRlcHRoX3ZlcnQiLCJkaXN0YW5jZVJHQkFfZnJhZyIsImRpc3RhbmNlUkdCQV92ZXJ0IiwiZXF1aXJlY3RfZnJhZyIsImVxdWlyZWN0X3ZlcnQiLCJsaW5lZGFzaGVkX2ZyYWciLCJsaW5lZGFzaGVkX3ZlcnQiLCJtZXNoYmFzaWNfZnJhZyIsIm1lc2hiYXNpY192ZXJ0IiwibWVzaGxhbWJlcnRfZnJhZyIsIm1lc2hsYW1iZXJ0X3ZlcnQiLCJtZXNocGhvbmdfZnJhZyIsIm1lc2hwaG9uZ192ZXJ0IiwibWVzaHBoeXNpY2FsX2ZyYWciLCJtZXNocGh5c2ljYWxfdmVydCIsIm5vcm1hbF9mcmFnIiwibm9ybWFsX3ZlcnQiLCJwb2ludHNfZnJhZyIsInBvaW50c192ZXJ0Iiwic2hhZG93X2ZyYWciLCJzaGFkb3dfdmVydCIsIlVuaWZvcm1zVXRpbHMiLCJtZXJnZSIsInVuaWZvcm1zIiwibWVyZ2VkIiwidSIsInVuaWZvcm1zX3NyYyIsInVuaWZvcm1zX2RzdCIsInBhcmFtZXRlcl9zcmMiLCJpc0NvbG9yIiwiQ29sb3JLZXl3b3JkcyIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiQ29sb3IiLCJzZXRSR0IiLCJzZXRIZXgiLCJzZXRTdHlsZSIsImhleCIsInNldEhTTCIsImh1ZTJyZ2IiLCJzdHlsZSIsImhhbmRsZUFscGhhIiwic3RyaW5nIiwicGFyc2VGbG9hdCIsImV4ZWMiLCJjb2xvciIsImNvbXBvbmVudHMiLCJwYXJzZUludCIsImNoYXJBdCIsImNvcHlHYW1tYVRvTGluZWFyIiwiZ2FtbWFGYWN0b3IiLCJjb3B5TGluZWFyVG9HYW1tYSIsInNhZmVJbnZlcnNlIiwiY29udmVydEdhbW1hVG9MaW5lYXIiLCJjb252ZXJ0TGluZWFyVG9HYW1tYSIsImNvcHlTUkdCVG9MaW5lYXIiLCJTUkdCVG9MaW5lYXIiLCJjb3B5TGluZWFyVG9TUkdCIiwiTGluZWFyVG9TUkdCIiwiY29udmVydFNSR0JUb0xpbmVhciIsImNvbnZlcnRMaW5lYXJUb1NSR0IiLCJnZXRIZXgiLCJnZXRIZXhTdHJpbmciLCJnZXRIU0wiLCJodWUiLCJzYXR1cmF0aW9uIiwibGlnaHRuZXNzIiwiZ2V0U3R5bGUiLCJvZmZzZXRIU0wiLCJoc2wiLCJhZGRDb2xvcnMiLCJjb2xvcjEiLCJjb2xvcjIiLCJVbmlmb3Jtc0xpYiIsImRpZmZ1c2UiLCJvcGFjaXR5IiwibWFwIiwidXZUcmFuc2Zvcm0iLCJhbHBoYU1hcCIsInNwZWN1bGFybWFwIiwic3BlY3VsYXJNYXAiLCJlbnZtYXAiLCJlbnZNYXAiLCJmbGlwRW52TWFwIiwicmVmbGVjdGl2aXR5IiwicmVmcmFjdGlvblJhdGlvIiwibWF4TWlwTGV2ZWwiLCJhb21hcCIsImFvTWFwIiwiYW9NYXBJbnRlbnNpdHkiLCJsaWdodG1hcCIsImxpZ2h0TWFwIiwibGlnaHRNYXBJbnRlbnNpdHkiLCJlbWlzc2l2ZW1hcCIsImVtaXNzaXZlTWFwIiwiYnVtcG1hcCIsImJ1bXBNYXAiLCJidW1wU2NhbGUiLCJub3JtYWxtYXAiLCJub3JtYWxNYXAiLCJub3JtYWxTY2FsZSIsImRpc3BsYWNlbWVudG1hcCIsImRpc3BsYWNlbWVudE1hcCIsImRpc3BsYWNlbWVudFNjYWxlIiwiZGlzcGxhY2VtZW50QmlhcyIsInJvdWdobmVzc21hcCIsInJvdWdobmVzc01hcCIsIm1ldGFsbmVzc21hcCIsIm1ldGFsbmVzc01hcCIsImdyYWRpZW50bWFwIiwiZ3JhZGllbnRNYXAiLCJmb2ciLCJmb2dEZW5zaXR5IiwiZm9nTmVhciIsImZvZ0ZhciIsImZvZ0NvbG9yIiwibGlnaHRzIiwiYW1iaWVudExpZ2h0Q29sb3IiLCJkaXJlY3Rpb25hbExpZ2h0cyIsInByb3BlcnRpZXMiLCJzaGFkb3ciLCJzaGFkb3dCaWFzIiwic2hhZG93UmFkaXVzIiwic2hhZG93TWFwU2l6ZSIsImRpcmVjdGlvbmFsU2hhZG93TWFwIiwiZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgiLCJzcG90TGlnaHRzIiwiY29uZUNvcyIsInBlbnVtYnJhQ29zIiwiZGVjYXkiLCJzcG90U2hhZG93TWFwIiwic3BvdFNoYWRvd01hdHJpeCIsInBvaW50TGlnaHRzIiwic2hhZG93Q2FtZXJhTmVhciIsInNoYWRvd0NhbWVyYUZhciIsInBvaW50U2hhZG93TWFwIiwicG9pbnRTaGFkb3dNYXRyaXgiLCJoZW1pc3BoZXJlTGlnaHRzIiwic2t5Q29sb3IiLCJncm91bmRDb2xvciIsInJlY3RBcmVhTGlnaHRzIiwiU2hhZGVyTGliIiwiYmFzaWMiLCJ2ZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsImxhbWJlcnQiLCJlbWlzc2l2ZSIsInBob25nIiwic3BlY3VsYXIiLCJzaGluaW5lc3MiLCJzdGFuZGFyZCIsInJvdWdobmVzcyIsIm1ldGFsbmVzcyIsImVudk1hcEludGVuc2l0eSIsImRhc2hlZCIsImRhc2hTaXplIiwidG90YWxTaXplIiwiZGVwdGgiLCJjdWJlIiwidEN1YmUiLCJ0RmxpcCIsImVxdWlyZWN0IiwidEVxdWlyZWN0IiwiZGlzdGFuY2VSR0JBIiwicmVmZXJlbmNlUG9zaXRpb24iLCJuZWFyRGlzdGFuY2UiLCJmYXJEaXN0YW5jZSIsIldlYkdMQW5pbWF0aW9uIiwiaXNBbmltYXRpbmciLCJhbmltYXRpb25Mb29wIiwib25BbmltYXRpb25GcmFtZSIsInRpbWUiLCJmcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInN0b3AiLCJzZXRBbmltYXRpb25Mb29wIiwic2V0Q29udGV4dCIsIldlYkdMQXR0cmlidXRlcyIsImdsIiwiYnVmZmVycyIsIldlYWtNYXAiLCJpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwicmVtb3ZlIiwiZGVsZXRlQnVmZmVyIiwiYnVmZmVyIiwiZGVsZXRlIiwiYnVmZmVyVHlwZSIsInVzYWdlIiwiZHluYW1pYyIsIkRZTkFNSUNfRFJBVyIsIlNUQVRJQ19EUkFXIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJvblVwbG9hZENhbGxiYWNrIiwiRkxPQVQiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJVaW50MTZBcnJheSIsIlVOU0lHTkVEX1NIT1JUIiwiSW50MTZBcnJheSIsIlNIT1JUIiwiVWludDMyQXJyYXkiLCJVTlNJR05FRF9JTlQiLCJJbnQzMkFycmF5IiwiSU5UIiwiSW50OEFycmF5IiwiQllURSIsIlVpbnQ4QXJyYXkiLCJVTlNJR05FRF9CWVRFIiwiYnl0ZXNQZXJFbGVtZW50IiwiQllURVNfUEVSX0VMRU1FTlQiLCJ1cGRhdGVSYW5nZSIsImJ1ZmZlclN1YkRhdGEiLCJzdWJhcnJheSIsInVwZGF0ZUJ1ZmZlciIsIkV1bGVyIiwiX29yZGVyIiwiRGVmYXVsdE9yZGVyIiwiTGF5ZXJzIiwibWFzayIsInBoeXNpY2FsIiwiY2xlYXJDb2F0IiwiY2xlYXJDb2F0Um91Z2huZXNzIiwiUm90YXRpb25PcmRlcnMiLCJhc2luIiwic2V0RnJvbVF1YXRlcm5pb24iLCJyZW9yZGVyIiwibmV3T3JkZXIiLCJ0b1ZlY3RvcjMiLCJvcHRpb25hbFJlc3VsdCIsImNoYW5uZWwiLCJlbmFibGUiLCJ0b2dnbGUiLCJkaXNhYmxlIiwidGVzdCIsImxheWVycyIsIm9iamVjdDNESWQiLCJPYmplY3QzRCIsInBhcmVudCIsImNoaWxkcmVuIiwiRGVmYXVsdFVwIiwibW9kZWxWaWV3TWF0cml4IiwiRGVmYXVsdE1hdHJpeEF1dG9VcGRhdGUiLCJtYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwidmlzaWJsZSIsImNhc3RTaGFkb3ciLCJyZWNlaXZlU2hhZG93IiwiZnJ1c3R1bUN1bGxlZCIsInJlbmRlck9yZGVyIiwidXNlckRhdGEiLCJDYW1lcmEiLCJtYXRyaXhXb3JsZEludmVyc2UiLCJ2aWV3IiwiRmFjZTMiLCJtYXRlcmlhbEluZGV4IiwidmVydGV4Tm9ybWFscyIsInZlcnRleENvbG9ycyIsImlzT2JqZWN0M0QiLCJvbkJlZm9yZVJlbmRlciIsIm9uQWZ0ZXJSZW5kZXIiLCJhcHBseU1hdHJpeCIsInNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZSIsInNldFJvdGF0aW9uRnJvbUV1bGVyIiwic2V0Um90YXRpb25Gcm9tTWF0cml4Iiwic2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbiIsInJvdGF0ZU9uQXhpcyIsInExIiwicm90YXRlT25Xb3JsZEF4aXMiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJ0cmFuc2xhdGVPbkF4aXMiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJsb2NhbFRvV29ybGQiLCJ3b3JsZFRvTG9jYWwiLCJpc0NhbWVyYSIsImdldE9iamVjdEJ5SWQiLCJpZCIsImdldE9iamVjdEJ5UHJvcGVydHkiLCJnZXRPYmplY3RCeU5hbWUiLCJnZXRXb3JsZFBvc2l0aW9uIiwiZ2V0V29ybGRRdWF0ZXJuaW9uIiwiZ2V0V29ybGRTY2FsZSIsImdldFdvcmxkRGlyZWN0aW9uIiwicmF5Y2FzdCIsInRyYXZlcnNlVmlzaWJsZSIsInRyYXZlcnNlQW5jZXN0b3JzIiwiZm9yY2UiLCJnZW9tZXRyaWVzIiwibWF0ZXJpYWxzIiwic2hhcGVzIiwic2VyaWFsaXplIiwibGlicmFyeSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJhbWV0ZXJzIiwic2hhcGUiLCJtYXRlcmlhbCIsInV1aWRzIiwiZXh0cmFjdEZyb21DYWNoZSIsImNhY2hlIiwidmFsdWVzIiwicmVjdXJzaXZlIiwicGFyc2UiLCJjaGlsZCIsImlzT3J0aG9ncmFwaGljQ2FtZXJhIiwic2V0Vmlld09mZnNldCIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNsZWFyVmlld09mZnNldCIsInpvb21XIiwiem9vbUgiLCJzY2FsZVciLCJzY2FsZUgiLCJnZW9tZXRyeUlkIiwiR2VvbWV0cnkiLCJjb2xvcnMiLCJmYWNlcyIsImZhY2VWZXJ0ZXhVdnMiLCJtb3JwaFRhcmdldHMiLCJtb3JwaE5vcm1hbHMiLCJza2luV2VpZ2h0cyIsInNraW5JbmRpY2VzIiwibGluZURpc3RhbmNlcyIsImJvdW5kaW5nQm94IiwiZWxlbWVudHNOZWVkVXBkYXRlIiwidmVydGljZXNOZWVkVXBkYXRlIiwidXZzTmVlZFVwZGF0ZSIsIm5vcm1hbHNOZWVkVXBkYXRlIiwiY29sb3JzTmVlZFVwZGF0ZSIsImxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlIiwiZ3JvdXBzTmVlZFVwZGF0ZSIsIkJ1ZmZlckF0dHJpYnV0ZSIsIml0ZW1TaXplIiwibm9ybWFsaXplZCIsIkludDhCdWZmZXJBdHRyaWJ1dGUiLCJVaW50OEJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiSW50MTZCdWZmZXJBdHRyaWJ1dGUiLCJVaW50MTZCdWZmZXJBdHRyaWJ1dGUiLCJJbnQzMkJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSIsIkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUiLCJGbG9hdDY0QnVmZmVyQXR0cmlidXRlIiwiRGlyZWN0R2VvbWV0cnkiLCJub3JtYWxzIiwidXZzIiwidXZzMiIsImdyb3VwcyIsImFycmF5TWF4IiwiZmFjZSIsImpsIiwiY29tcHV0ZUJvdW5kaW5nQm94Iiwib2JqIiwiZnJvbUJ1ZmZlckdlb21ldHJ5IiwiaW5kaWNlcyIsInBvc2l0aW9ucyIsInV2MiIsInRlbXBOb3JtYWxzIiwidGVtcFVWcyIsInRlbXBVVnMyIiwiYWRkRmFjZSIsImdyb3VwIiwiY29tcHV0ZUZhY2VOb3JtYWxzIiwiY2IiLCJhYiIsImZsIiwidkEiLCJ2QiIsInZDIiwiY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJhcmVhV2VpZ2h0ZWQiLCJ2bCIsImNvbXB1dGVGbGF0VmVydGV4Tm9ybWFscyIsImNvbXB1dGVNb3JwaE5vcm1hbHMiLCJfX29yaWdpbmFsRmFjZU5vcm1hbCIsIl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzIiwidG1wR2VvIiwiZmFjZU5vcm1hbHMiLCJkc3ROb3JtYWxzRmFjZSIsImRzdE5vcm1hbHNWZXJ0ZXgiLCJmYWNlTm9ybWFsIiwibWF0ZXJpYWxJbmRleE9mZnNldCIsInZlcnRleE9mZnNldCIsInZlcnRpY2VzMSIsInZlcnRpY2VzMiIsImZhY2VzMSIsImZhY2VzMiIsInV2czEiLCJjb2xvcnMxIiwiY29sb3JzMiIsInZlcnRleENvcHkiLCJmYWNlQ29weSIsImZhY2VWZXJ0ZXhOb3JtYWxzIiwiZmFjZVZlcnRleENvbG9ycyIsInV2Q29weSIsIm1lcmdlTWVzaCIsIm1lc2giLCJpc01lc2giLCJtZXJnZVZlcnRpY2VzIiwidmVydGljZXNNYXAiLCJ1bmlxdWUiLCJjaGFuZ2VzIiwicHJlY2lzaW9uIiwiZmFjZUluZGljZXNUb1JlbW92ZSIsImlkeCIsImRpZmYiLCJzb3J0RmFjZXNCeU1hdGVyaWFsSW5kZXgiLCJfaWQiLCJzb3J0IiwibmV3VXZzMSIsIm5ld1V2czIiLCJ2ZXJ0ZXgiLCJub3JtYWxzSGFzaCIsImNvbG9yc0hhc2giLCJ1dnNIYXNoIiwiaGFzRmFjZVZlcnRleFV2IiwiaGFzRmFjZU5vcm1hbCIsImhhc0ZhY2VWZXJ0ZXhOb3JtYWwiLCJoYXNGYWNlQ29sb3IiLCJoYXNGYWNlVmVydGV4Q29sb3IiLCJmYWNlVHlwZSIsInNldEJpdCIsImdldFV2SW5kZXgiLCJnZXROb3JtYWxJbmRleCIsImdldENvbG9ySW5kZXgiLCJoYXNoIiwiayIsImtsIiwidXZzQ29weSIsIm1vcnBoVGFyZ2V0IiwibW9ycGhOb3JtYWwiLCJzcmNWZXJ0ZXhOb3JtYWwiLCJkZXN0VmVydGV4Tm9ybWFsIiwiaXNCdWZmZXJBdHRyaWJ1dGUiLCJzZXRBcnJheSIsInNldER5bmFtaWMiLCJjb3B5QXQiLCJpbmRleDEiLCJpbmRleDIiLCJjb3B5QXJyYXkiLCJjb3B5Q29sb3JzQXJyYXkiLCJjb3B5VmVjdG9yMnNBcnJheSIsInZlY3RvcnMiLCJjb3B5VmVjdG9yM3NBcnJheSIsImNvcHlWZWN0b3I0c0FycmF5Iiwic2V0WFkiLCJzZXRYWVpXIiwib25VcGxvYWQiLCJjb21wdXRlR3JvdXBzIiwiZnJvbUdlb21ldHJ5IiwibW9ycGhUYXJnZXRzUG9zaXRpb24iLCJoYXNGYWNlVmVydGV4VXYyIiwibW9ycGhUYXJnZXRzTGVuZ3RoIiwibW9ycGhUYXJnZXRzTm9ybWFsIiwibW9ycGhOb3JtYWxzTGVuZ3RoIiwiaGFzU2tpbkluZGljZXMiLCJoYXNTa2luV2VpZ2h0cyIsInZlcnRleFV2cyIsImJ1ZmZlckdlb21ldHJ5SWQiLCJCdWZmZXJHZW9tZXRyeSIsIm1vcnBoQXR0cmlidXRlcyIsImRyYXdSYW5nZSIsIkJveEdlb21ldHJ5Iiwid2lkdGhTZWdtZW50cyIsImhlaWdodFNlZ21lbnRzIiwiZGVwdGhTZWdtZW50cyIsIkJveEJ1ZmZlckdlb21ldHJ5IiwibnVtYmVyT2ZWZXJ0aWNlcyIsImdyb3VwU3RhcnQiLCJidWlsZFBsYW5lIiwidWRpciIsInZkaXIiLCJncmlkWCIsImdyaWRZIiwic2VnbWVudFdpZHRoIiwic2VnbWVudEhlaWdodCIsIndpZHRoSGFsZiIsImhlaWdodEhhbGYiLCJkZXB0aEhhbGYiLCJncmlkWDEiLCJncmlkWTEiLCJ2ZXJ0ZXhDb3VudGVyIiwiZ3JvdXBDb3VudCIsImFkZEdyb3VwIiwic2V0SW5kZXgiLCJhZGRBdHRyaWJ1dGUiLCJQbGFuZUdlb21ldHJ5IiwiUGxhbmVCdWZmZXJHZW9tZXRyeSIsIndpZHRoX2hhbGYiLCJoZWlnaHRfaGFsZiIsInNlZ21lbnRfd2lkdGgiLCJzZWdtZW50X2hlaWdodCIsImdldEluZGV4IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiY2xlYXJHcm91cHMiLCJzZXREcmF3UmFuZ2UiLCJuZWVkc1VwZGF0ZSIsImlzUG9pbnRzIiwiaXNMaW5lIiwidXBkYXRlRnJvbU9iamVjdCIsImRpcmVjdCIsIl9fZGlyZWN0R2VvbWV0cnkiLCJsaW5lRGlzdGFuY2UiLCJmcm9tRGlyZWN0R2VvbWV0cnkiLCJpc05hTiIsInBBIiwicEIiLCJwQyIsIm5vcm1hbGl6ZU5vcm1hbHMiLCJhdHRyaWJ1dGVBcnJheTEiLCJhdHRyaWJ1dGUyIiwiYXR0cmlidXRlQXJyYXkyIiwidG9Ob25JbmRleGVkIiwiZ2VvbWV0cnkyIiwiYXJyYXkyIiwibW9ycGhBdHRyaWJ1dGUiLCJtYXRlcmlhbElkIiwiTWF0ZXJpYWwiLCJibGVuZGluZyIsInNpZGUiLCJmbGF0U2hhZGluZyIsInRyYW5zcGFyZW50IiwiYmxlbmRTcmMiLCJibGVuZERzdCIsImJsZW5kRXF1YXRpb24iLCJibGVuZFNyY0FscGhhIiwiYmxlbmREc3RBbHBoYSIsImJsZW5kRXF1YXRpb25BbHBoYSIsImRlcHRoRnVuYyIsImRlcHRoVGVzdCIsImRlcHRoV3JpdGUiLCJjbGlwcGluZ1BsYW5lcyIsImNsaXBJbnRlcnNlY3Rpb24iLCJjbGlwU2hhZG93cyIsInNoYWRvd1NpZGUiLCJjb2xvcldyaXRlIiwicG9seWdvbk9mZnNldCIsInBvbHlnb25PZmZzZXRGYWN0b3IiLCJwb2x5Z29uT2Zmc2V0VW5pdHMiLCJkaXRoZXJpbmciLCJhbHBoYVRlc3QiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJvdmVyZHJhdyIsIk1lc2hCYXNpY01hdGVyaWFsIiwiY29tYmluZSIsIndpcmVmcmFtZSIsIndpcmVmcmFtZUxpbmV3aWR0aCIsIndpcmVmcmFtZUxpbmVjYXAiLCJ3aXJlZnJhbWVMaW5lam9pbiIsInNraW5uaW5nIiwic2V0VmFsdWVzIiwiU2hhZGVyTWF0ZXJpYWwiLCJkZWZpbmVzIiwibGluZXdpZHRoIiwiY2xpcHBpbmciLCJleHRlbnNpb25zIiwiZGVyaXZhdGl2ZXMiLCJmcmFnRGVwdGgiLCJkcmF3QnVmZmVycyIsInNoYWRlclRleHR1cmVMT0QiLCJkZWZhdWx0QXR0cmlidXRlVmFsdWVzIiwiaW5kZXgwQXR0cmlidXRlTmFtZSIsInVuaWZvcm1zTmVlZFVwZGF0ZSIsIlJheSIsIm9yaWdpbiIsIkxpbmUzIiwiVHJpYW5nbGUiLCJNZXNoIiwiZHJhd01vZGUiLCJ1cGRhdGVNb3JwaFRhcmdldHMiLCJhYnNOdW1lcmljYWxTb3J0IiwiQ3ViZVRleHR1cmUiLCJpc01hdGVyaWFsIiwib25CZWZvcmVDb21waWxlIiwibmV3VmFsdWUiLCJjdXJyZW50VmFsdWUiLCJpc1Jvb3QiLCJlbWlzc2l2ZUludGVuc2l0eSIsIm5vcm1hbE1hcFR5cGUiLCJzaXplQXR0ZW51YXRpb24iLCJnYXBTaXplIiwic3JjUGxhbmVzIiwiZHN0UGxhbmVzIiwiaXNNZXNoQmFzaWNNYXRlcmlhbCIsImlzU2hhZGVyTWF0ZXJpYWwiLCJyYXkiLCJhdCIsInJlY2FzdCIsImNsb3Nlc3RQb2ludFRvUG9pbnQiLCJkaXJlY3Rpb25EaXN0YW5jZSIsImRpc3RhbmNlU3FUb1BvaW50IiwiZGlzdGFuY2VTcVRvU2VnbWVudCIsInNlZ0NlbnRlciIsInNlZ0RpciIsIm9wdGlvbmFsUG9pbnRPblJheSIsIm9wdGlvbmFsUG9pbnRPblNlZ21lbnQiLCJzMCIsInNxckRpc3QiLCJleHREZXQiLCJzZWdFeHRlbnQiLCJhMDEiLCJiMCIsImludkRldCIsImludGVyc2VjdFNwaGVyZSIsInRjYSIsInJhZGl1czIiLCJ0aGMiLCJ0MCIsInQxIiwiZGlzdGFuY2VUb1BsYW5lIiwiaW50ZXJzZWN0UGxhbmUiLCJkaXN0VG9Qb2ludCIsImludGVyc2VjdEJveCIsInRtaW4iLCJ0bWF4IiwidHltaW4iLCJ0eW1heCIsInR6bWluIiwidHptYXgiLCJpbnZkaXJ4IiwiaW52ZGlyeSIsImludmRpcnoiLCJpbnRlcnNlY3RUcmlhbmdsZSIsImVkZ2UxIiwiZWRnZTIiLCJiYWNrZmFjZUN1bGxpbmciLCJEZE4iLCJEZFF4RTIiLCJEZEUxeFEiLCJRZE4iLCJkaXN0YW5jZVNxIiwiY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlciIsInN0YXJ0UCIsInN0YXJ0RW5kIiwiY2xhbXBUb0xpbmUiLCJzdGFydEVuZDIiLCJnZXROb3JtYWwiLCJ0YXJnZXRMZW5ndGhTcSIsImdldEJhcnljb29yZCIsImRvdDAwIiwiZG90MDEiLCJkb3QwMiIsImRvdDExIiwiZG90MTIiLCJkZW5vbSIsImludkRlbm9tIiwic2V0RnJvbVBvaW50c0FuZEluZGljZXMiLCJpMCIsImkxIiwiaTIiLCJnZXRBcmVhIiwiZ2V0TWlkcG9pbnQiLCJnZXRQbGFuZSIsImVkZ2VMaXN0IiwicHJvamVjdGVkUG9pbnQiLCJzZXREcmF3TW9kZSIsIm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyIsIm1vcnBoVGFyZ2V0RGljdGlvbmFyeSIsIm1sIiwiU3RyaW5nIiwiaW52ZXJzZU1hdHJpeCIsInRlbXBBIiwidGVtcEIiLCJ0ZW1wQyIsInV2QSIsInV2QiIsInV2QyIsImJhcnljb29yZCIsImludGVyc2VjdGlvblBvaW50IiwiaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCIsInV2SW50ZXJzZWN0aW9uIiwidXYxIiwidXYzIiwiY2hlY2tJbnRlcnNlY3Rpb24iLCJyYXljYXN0ZXIiLCJjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uIiwiaW50ZXJzZWN0aW9uIiwiaW50ZXJzZWN0cyIsImdyb3VwTWF0ZXJpYWwiLCJmYWNlSW5kZXgiLCJmdkEiLCJmdkIiLCJmdkMiLCJpc011bHRpTWF0ZXJpYWwiLCJmYWNlTWF0ZXJpYWwiLCJtb3JwaEluZmx1ZW5jZXMiLCJ0bCIsImluZmx1ZW5jZSIsInRhcmdldHMiLCJ1dnNfZiIsImlzQ3ViZVRleHR1cmUiLCJlbXB0eVRleHR1cmUiLCJlbXB0eUN1YmVUZXh0dXJlIiwiVW5pZm9ybUNvbnRhaW5lciIsInNlcSIsImFycmF5Q2FjaGVGMzIiLCJhcnJheUNhY2hlSTMyIiwibWF0NGFycmF5IiwibWF0M2FycmF5IiwibWF0MmFycmF5IiwiZmxhdHRlbiIsIm5CbG9ja3MiLCJibG9ja1NpemUiLCJmaXJzdEVsZW0iLCJhcnJheXNFcXVhbCIsImFsbG9jVGV4VW5pdHMiLCJyZW5kZXJlciIsImFsbG9jVGV4dHVyZVVuaXQiLCJzZXRWYWx1ZTFmIiwidW5pZm9ybTFmIiwiYWRkciIsInNldFZhbHVlMWkiLCJ1bmlmb3JtMWkiLCJzZXRWYWx1ZTJmdiIsInVuaWZvcm0yZiIsInVuaWZvcm0yZnYiLCJzZXRWYWx1ZTNmdiIsInVuaWZvcm0zZiIsInVuaWZvcm0zZnYiLCJzZXRWYWx1ZTRmdiIsInVuaWZvcm00ZiIsInVuaWZvcm00ZnYiLCJzZXRWYWx1ZTJmbSIsInVuaWZvcm1NYXRyaXgyZnYiLCJzZXRWYWx1ZTNmbSIsInVuaWZvcm1NYXRyaXgzZnYiLCJzZXRWYWx1ZTRmbSIsInVuaWZvcm1NYXRyaXg0ZnYiLCJzZXRWYWx1ZVQxIiwidW5pdCIsInNldFRleHR1cmUyRCIsInNldFZhbHVlVDYiLCJzZXRUZXh0dXJlQ3ViZSIsInNldFZhbHVlMml2IiwidW5pZm9ybTJpdiIsInNldFZhbHVlM2l2IiwidW5pZm9ybTNpdiIsInNldFZhbHVlNGl2IiwidW5pZm9ybTRpdiIsInNldFZhbHVlMWZ2IiwidW5pZm9ybTFmdiIsInNldFZhbHVlMWl2IiwidW5pZm9ybTFpdiIsInNldFZhbHVlVjJhIiwidXBkYXRlQ2FjaGUiLCJzZXRWYWx1ZVYzYSIsInNldFZhbHVlVjRhIiwic2V0VmFsdWVNMmEiLCJzZXRWYWx1ZU0zYSIsInNldFZhbHVlTTRhIiwic2V0VmFsdWVUMWEiLCJ1bml0cyIsInNldFZhbHVlVDZhIiwiU2luZ2xlVW5pZm9ybSIsImFjdGl2ZUluZm8iLCJzZXRWYWx1ZSIsImdldFNpbmd1bGFyU2V0dGVyIiwiUHVyZUFycmF5VW5pZm9ybSIsImdldFB1cmVBcnJheVNldHRlciIsIlN0cnVjdHVyZWRVbmlmb3JtIiwiUmVQYXRoUGFydCIsImFkZFVuaWZvcm0iLCJjb250YWluZXIiLCJ1bmlmb3JtT2JqZWN0IiwicGFyc2VVbmlmb3JtIiwicGF0aCIsInBhdGhMZW5ndGgiLCJsYXN0SW5kZXgiLCJtYXRjaEVuZCIsImlkSXNJbmRleCIsInN1YnNjcmlwdCIsIm5leHQiLCJXZWJHTFVuaWZvcm1zIiwicHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJBQ1RJVkVfVU5JRk9STVMiLCJpbmZvIiwiZ2V0QWN0aXZlVW5pZm9ybSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsIldlYkdMU2hhZGVyIiwic2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZ2V0U2hhZGVySW5mb0xvZyIsIlZFUlRFWF9TSEFERVIiLCJsaW5lcyIsInNwbGl0Iiwiam9pbiIsImFkZExpbmVOdW1iZXJzIiwic2V0T3B0aW9uYWwiLCJ1cGxvYWQiLCJzZXFXaXRoVmFsdWUiLCJwcm9ncmFtSWRDb3VudCIsImdldEVuY29kaW5nQ29tcG9uZW50cyIsImdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiIsImZ1bmN0aW9uTmFtZSIsImZpbHRlckVtcHR5TGluZSIsInJlcGxhY2VMaWdodE51bXMiLCJyZXBsYWNlIiwibnVtRGlyTGlnaHRzIiwibnVtU3BvdExpZ2h0cyIsIm51bVJlY3RBcmVhTGlnaHRzIiwibnVtUG9pbnRMaWdodHMiLCJudW1IZW1pTGlnaHRzIiwicmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zIiwibnVtQ2xpcHBpbmdQbGFuZXMiLCJudW1DbGlwSW50ZXJzZWN0aW9uIiwicGFyc2VJbmNsdWRlcyIsImluY2x1ZGUiLCJ1bnJvbGxMb29wcyIsInNuaXBwZXQiLCJ1bnJvbGwiLCJXZWJHTFByb2dyYW0iLCJjb2RlIiwic2hhZG93TWFwVHlwZURlZmluZSIsInNoYWRvd01hcFR5cGUiLCJlbnZNYXBUeXBlRGVmaW5lIiwiZW52TWFwTW9kZURlZmluZSIsImVudk1hcEJsZW5kaW5nRGVmaW5lIiwicHJlZml4VmVydGV4IiwicHJlZml4RnJhZ21lbnQiLCJnYW1tYUZhY3RvckRlZmluZSIsImN1c3RvbUV4dGVuc2lvbnMiLCJyZW5kZXJlckV4dGVuc2lvbnMiLCJlbnZNYXBDdWJlVVYiLCJvYmplY3RTcGFjZU5vcm1hbE1hcCIsImxvZ2FyaXRobWljRGVwdGhCdWZmZXIiLCJmaWx0ZXIiLCJnZW5lcmF0ZUV4dGVuc2lvbnMiLCJjdXN0b21EZWZpbmVzIiwiY2h1bmtzIiwiZ2VuZXJhdGVEZWZpbmVzIiwiY3JlYXRlUHJvZ3JhbSIsImlzUmF3U2hhZGVyTWF0ZXJpYWwiLCJzdXBwb3J0c1ZlcnRleFRleHR1cmVzIiwibWF4Qm9uZXMiLCJ1c2VGb2ciLCJmb2dFeHAiLCJ1c2VWZXJ0ZXhUZXh0dXJlIiwiZG91YmxlU2lkZWQiLCJmbGlwU2lkZWQiLCJzaGFkb3dNYXBFbmFibGVkIiwicGh5c2ljYWxseUNvcnJlY3RMaWdodHMiLCJ0b25lTWFwcGluZyIsInRvbmVNYXBwaW5nTmFtZSIsImdldFRvbmVNYXBwaW5nRnVuY3Rpb24iLCJvdXRwdXRFbmNvZGluZyIsIm1hcEVuY29kaW5nIiwiZW52TWFwRW5jb2RpbmciLCJlbWlzc2l2ZU1hcEVuY29kaW5nIiwiZ2V0VGV4ZWxFbmNvZGluZ0Z1bmN0aW9uIiwiZGVwdGhQYWNraW5nIiwidmVydGV4R2xzbCIsImZyYWdtZW50R2xzbCIsImdsVmVydGV4U2hhZGVyIiwiZ2xGcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImF0dGFjaFNoYWRlciIsImJpbmRBdHRyaWJMb2NhdGlvbiIsImxpbmtQcm9ncmFtIiwiY2FjaGVkVW5pZm9ybXMiLCJjYWNoZWRBdHRyaWJ1dGVzIiwicHJvZ3JhbUxvZyIsImdldFByb2dyYW1JbmZvTG9nIiwidHJpbSIsInZlcnRleExvZyIsImZyYWdtZW50TG9nIiwicnVubmFibGUiLCJoYXZlRGlhZ25vc3RpY3MiLCJMSU5LX1NUQVRVUyIsImdldEVycm9yIiwiVkFMSURBVEVfU1RBVFVTIiwiZGlhZ25vc3RpY3MiLCJwcmVmaXgiLCJkZWxldGVTaGFkZXIiLCJnZXRVbmlmb3JtcyIsImdldEF0dHJpYnV0ZXMiLCJBQ1RJVkVfQVRUUklCVVRFUyIsImdldEFjdGl2ZUF0dHJpYiIsImdldEF0dHJpYkxvY2F0aW9uIiwiZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMiLCJkZXN0cm95IiwiZGVsZXRlUHJvZ3JhbSIsInVzZWRUaW1lcyIsIldlYkdMUHJvZ3JhbXMiLCJjYXBhYmlsaXRpZXMiLCJwcm9ncmFtcyIsInNoYWRlcklEcyIsIk1lc2hEZXB0aE1hdGVyaWFsIiwiTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJNZXNoTm9ybWFsTWF0ZXJpYWwiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJNZXNoVG9vbk1hdGVyaWFsIiwiTWVzaFN0YW5kYXJkTWF0ZXJpYWwiLCJNZXNoUGh5c2ljYWxNYXRlcmlhbCIsIkxpbmVCYXNpY01hdGVyaWFsIiwiTGluZURhc2hlZE1hdGVyaWFsIiwiUG9pbnRzTWF0ZXJpYWwiLCJTaGFkb3dNYXRlcmlhbCIsInBhcmFtZXRlck5hbWVzIiwiZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCIsImdhbW1hT3ZlcnJpZGVMaW5lYXIiLCJnZXRQYXJhbWV0ZXJzIiwic2hhZG93cyIsIm5DbGlwUGxhbmVzIiwibkNsaXBJbnRlcnNlY3Rpb24iLCJzaGFkZXJJRCIsImlzU2tpbm5lZE1lc2giLCJib25lcyIsInNrZWxldG9uIiwiZmxvYXRWZXJ0ZXhUZXh0dXJlcyIsIm5WZXJ0ZXhVbmlmb3JtcyIsIm1heFZlcnRleFVuaWZvcm1zIiwiblZlcnRleE1hdHJpY2VzIiwiYWxsb2NhdGVCb25lcyIsImdldE1heFByZWNpc2lvbiIsImN1cnJlbnRSZW5kZXJUYXJnZXQiLCJnZXRSZW5kZXJUYXJnZXQiLCJ2ZXJ0ZXhUZXh0dXJlcyIsImdhbW1hT3V0cHV0IiwiZ2FtbWFJbnB1dCIsImVudk1hcE1vZGUiLCJpc0ZvZ0V4cDIiLCJtYXhNb3JwaFRhcmdldHMiLCJtYXhNb3JwaE5vcm1hbHMiLCJkaXJlY3Rpb25hbCIsInNwb3QiLCJyZWN0QXJlYSIsImhlbWkiLCJzaGFkb3dNYXAiLCJnZXRQcm9ncmFtQ29kZSIsImFjcXVpcmVQcm9ncmFtIiwicGwiLCJwcm9ncmFtSW5mbyIsInJlbGVhc2VQcm9ncmFtIiwicG9wIiwicGFpbnRlclNvcnRTdGFibGUiLCJyZXZlcnNlUGFpbnRlclNvcnRTdGFibGUiLCJXZWJHTFJlbmRlckxpc3RzIiwibGlzdHMiLCJzY2VuZSIsImxpc3QiLCJyZW5kZXJJdGVtcyIsInJlbmRlckl0ZW1zSW5kZXgiLCJvcGFxdWUiLCJpbml0IiwicmVuZGVySXRlbSIsIldlYkdMTGlnaHRzIiwibGlnaHQiLCJoYWxmV2lkdGgiLCJoYWxmSGVpZ2h0IiwiYW1iaWVudCIsInZlY3RvcjMiLCJtYXRyaXg0MiIsInNldHVwIiwiZGlyZWN0aW9uYWxMZW5ndGgiLCJwb2ludExlbmd0aCIsInNwb3RMZW5ndGgiLCJyZWN0QXJlYUxlbmd0aCIsImhlbWlMZW5ndGgiLCJ2aWV3TWF0cml4IiwiaW50ZW5zaXR5IiwiaXNBbWJpZW50TGlnaHQiLCJpc0RpcmVjdGlvbmFsTGlnaHQiLCJiaWFzIiwibWFwU2l6ZSIsImlzU3BvdExpZ2h0IiwicGVudW1icmEiLCJpc1JlY3RBcmVhTGlnaHQiLCJpc1BvaW50TGlnaHQiLCJpc0hlbWlzcGhlcmVMaWdodCIsIldlYkdMUmVuZGVyU3RhdGVzIiwicmVuZGVyU3RhdGVzIiwicmVuZGVyU3RhdGUiLCJsaWdodHNBcnJheSIsInNoYWRvd3NBcnJheSIsInNwcml0ZXNBcnJheSIsInNldHVwTGlnaHRzIiwicHVzaExpZ2h0IiwicHVzaFNoYWRvdyIsInNoYWRvd0xpZ2h0IiwicHVzaFNwcml0ZSIsIldlYkdMU2hhZG93TWFwIiwiX3JlbmRlcmVyIiwiX29iamVjdHMiLCJtYXhUZXh0dXJlU2l6ZSIsIl9mcnVzdHVtIiwiX3Byb2pTY3JlZW5NYXRyaXgiLCJfc2hhZG93TWFwU2l6ZSIsIl9tYXhTaGFkb3dNYXBTaXplIiwiX2xvb2tUYXJnZXQiLCJfbGlnaHRQb3NpdGlvbldvcmxkIiwiX01vcnBoaW5nRmxhZyIsIl9Ta2lubmluZ0ZsYWciLCJfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzIiwiX2RlcHRoTWF0ZXJpYWxzIiwiX2Rpc3RhbmNlTWF0ZXJpYWxzIiwiX21hdGVyaWFsQ2FjaGUiLCIwIiwiMSIsIjIiLCJjdWJlRGlyZWN0aW9ucyIsImN1YmVVcHMiLCJjdWJlMkRWaWV3UG9ydHMiLCJ1c2VNb3JwaGluZyIsInVzZVNraW5uaW5nIiwiZGVwdGhNYXRlcmlhbCIsImRpc3RhbmNlTWF0ZXJpYWwiLCJnZXREZXB0aE1hdGVyaWFsIiwibGlnaHRQb3NpdGlvbldvcmxkIiwicmVzdWx0IiwibWF0ZXJpYWxWYXJpYW50cyIsImN1c3RvbU1hdGVyaWFsIiwiY3VzdG9tRGVwdGhNYXRlcmlhbCIsImN1c3RvbURpc3RhbmNlTWF0ZXJpYWwiLCJ2YXJpYW50SW5kZXgiLCJsb2NhbENsaXBwaW5nRW5hYmxlZCIsImtleUEiLCJrZXlCIiwibWF0ZXJpYWxzRm9yVmFyaWFudCIsImNhY2hlZE1hdGVyaWFsIiwiaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCIsInJlbmRlck9iamVjdCIsInNoYWRvd0NhbWVyYSIsInJlbmRlckJ1ZmZlckRpcmVjdCIsImF1dG9VcGRhdGUiLCJyZW5kZXIiLCJmYWNlQ291bnQiLCJfZ2wiLCJfc3RhdGUiLCJCTEVORCIsInNldENsZWFyIiwic2V0VGVzdCIsInNldFNjaXNzb3JUZXN0IiwidnBXaWR0aCIsInZwSGVpZ2h0IiwicGFycyIsImlzU3BvdExpZ2h0U2hhZG93Iiwic2hhZG93TWF0cml4Iiwic2V0UmVuZGVyVGFyZ2V0IiwiY2xlYXIiLCJ2cERpbWVuc2lvbnMiLCJDYW52YXNUZXh0dXJlIiwiV2ViR0xTcHJpdGVSZW5kZXJlciIsInZlcnRleEJ1ZmZlciIsImVsZW1lbnRCdWZmZXIiLCJzcHJpdGVQb3NpdGlvbiIsInNwcml0ZVJvdGF0aW9uIiwic3ByaXRlU2NhbGUiLCJBUlJBWV9CVUZGRVIiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsInV2T2Zmc2V0IiwidXZTY2FsZSIsImZvZ1R5cGUiLCJmb2dEZXB0aCIsImZpbGxTdHlsZSIsImZpbGxSZWN0Iiwic3ByaXRlcyIsInVzZVByb2dyYW0iLCJpbml0QXR0cmlidXRlcyIsImVuYWJsZUF0dHJpYnV0ZSIsImRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzIiwiQ1VMTF9GQUNFIiwidmVydGV4QXR0cmliUG9pbnRlciIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsIm9sZEZvZ1R5cGUiLCJzY2VuZUZvZ1R5cGUiLCJpc0ZvZyIsImRlbnNpdHkiLCJzZXRCbGVuZGluZyIsInNldE1hc2siLCJkcmF3RWxlbWVudHMiLCJUUklBTkdMRVMiLCJXZWJHTFRleHR1cmVzIiwidXRpbHMiLCJfY2FudmFzIiwiX2lzV2ViR0wyIiwiV2ViR0wyUmVuZGVyaW5nQ29udGV4dCIsIl92aWRlb1RleHR1cmVzIiwiY2xhbXBUb01heFNpemUiLCJtYXhTaXplIiwidGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzIiwiZ2VuZXJhdGVNaXBtYXAiLCJfX21heE1pcExldmVsIiwiTE9HMkUiLCJmaWx0ZXJGYWxsYmFjayIsIk5FQVJFU1QiLCJMSU5FQVIiLCJvblRleHR1cmVEaXNwb3NlIiwidGV4dHVyZVByb3BlcnRpZXMiLCJfX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlIiwiZGVsZXRlVGV4dHVyZSIsIl9fd2ViZ2xJbml0IiwiX193ZWJnbFRleHR1cmUiLCJkZWFsbG9jYXRlVGV4dHVyZSIsImlzVmlkZW9UZXh0dXJlIiwibWVtb3J5Iiwib25SZW5kZXJUYXJnZXREaXNwb3NlIiwicmVuZGVyVGFyZ2V0IiwicmVuZGVyVGFyZ2V0UHJvcGVydGllcyIsImRlbGV0ZUZyYW1lYnVmZmVyIiwiX193ZWJnbEZyYW1lYnVmZmVyIiwiX193ZWJnbERlcHRoYnVmZmVyIiwiZGVsZXRlUmVuZGVyYnVmZmVyIiwiZGVhbGxvY2F0ZVJlbmRlclRhcmdldCIsInNsb3QiLCJ1cGRhdGVWaWRlb1RleHR1cmUiLCJfX3ZlcnNpb24iLCJjb21wbGV0ZSIsImNyZWF0ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wiLCJVTlBBQ0tfQUxJR05NRU5UIiwidGV4dHVyZU5lZWRzUG93ZXJPZlR3byIsIkhUTUxJbWFnZUVsZW1lbnQiLCJJbWFnZUJpdG1hcCIsIm1ha2VQb3dlck9mVHdvIiwiaXNQb3dlck9mVHdvSW1hZ2UiLCJnbEZvcm1hdCIsImNvbnZlcnQiLCJnbFR5cGUiLCJzZXRUZXh0dXJlUGFyYW1ldGVycyIsIm1pcG1hcCIsImlzRGVwdGhUZXh0dXJlIiwiaW50ZXJuYWxGb3JtYXQiLCJERVBUSF9DT01QT05FTlQiLCJERVBUSF9DT01QT05FTlQzMkYiLCJERVBUSF9DT01QT05FTlQxNiIsIkRFUFRIX1NURU5DSUwiLCJ0ZXhJbWFnZTJEIiwiaXNDb21wcmVzc2VkVGV4dHVyZSIsImdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0cyIsImNvbXByZXNzZWRUZXhJbWFnZTJEIiwidXBsb2FkVGV4dHVyZSIsInRleHR1cmVUeXBlIiwiZXh0ZW5zaW9uIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX01JTl9GSUxURVIiLCJDTEFNUF9UT19FREdFIiwiX19jdXJyZW50QW5pc290cm9weSIsInRleFBhcmFtZXRlcmYiLCJURVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsImdldE1heEFuaXNvdHJvcHkiLCJzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSIsImZyYW1lYnVmZmVyIiwiYXR0YWNobWVudCIsInRleHR1cmVUYXJnZXQiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwic2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlIiwicmVuZGVyYnVmZmVyIiwiYmluZFJlbmRlcmJ1ZmZlciIsIlJFTkRFUkJVRkZFUiIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciIsIkRFUFRIX0FUVEFDSE1FTlQiLCJERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQiLCJSR0JBNCIsInNldHVwRGVwdGhSZW5kZXJidWZmZXIiLCJpc0N1YmUiLCJ3ZWJnbERlcHRoVGV4dHVyZSIsInNldHVwRGVwdGhUZXh0dXJlIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiVEVYVFVSRV9DVUJFX01BUCIsImlzQ29tcHJlc3NlZCIsImN1YmVJbWFnZSIsIm1heEN1YmVtYXBTaXplIiwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YIiwic2V0VGV4dHVyZUN1YmVEeW5hbWljIiwic2V0dXBSZW5kZXJUYXJnZXQiLCJpc1RhcmdldFBvd2VyT2ZUd28iLCJjcmVhdGVGcmFtZWJ1ZmZlciIsIkNPTE9SX0FUVEFDSE1FTlQwIiwidXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwIiwid2ViZ2xUZXh0dXJlIiwiV2ViR0xVdGlscyIsIlJFUEVBVCIsIk1JUlJPUkVEX1JFUEVBVCIsIk5FQVJFU1RfTUlQTUFQX05FQVJFU1QiLCJORUFSRVNUX01JUE1BUF9MSU5FQVIiLCJMSU5FQVJfTUlQTUFQX05FQVJFU1QiLCJMSU5FQVJfTUlQTUFQX0xJTkVBUiIsIlVOU0lHTkVEX1NIT1JUXzRfNF80XzQiLCJVTlNJR05FRF9TSE9SVF81XzVfNV8xIiwiVU5TSUdORURfU0hPUlRfNV82XzUiLCJIQUxGX0ZMT0FUX09FUyIsIkFMUEhBIiwiUkdCIiwiUkdCQSIsIkxVTUlOQU5DRSIsIkxVTUlOQU5DRV9BTFBIQSIsIkZVTkNfQUREIiwiRlVOQ19TVUJUUkFDVCIsIkZVTkNfUkVWRVJTRV9TVUJUUkFDVCIsIlpFUk8iLCJPTkUiLCJTUkNfQ09MT1IiLCJPTkVfTUlOVVNfU1JDX0NPTE9SIiwiU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIkRTVF9BTFBIQSIsIk9ORV9NSU5VU19EU1RfQUxQSEEiLCJEU1RfQ09MT1IiLCJPTkVfTUlOVVNfRFNUX0NPTE9SIiwiU1JDX0FMUEhBX1NBVFVSQVRFIiwiQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVCIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzRCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0wiLCJNSU5fRVhUIiwiTUFYX0VYVCIsIlVOU0lHTkVEX0lOVF8yNF84X1dFQkdMIiwiR3JvdXAiLCJhc3BlY3QiLCJmb2N1cyIsImZpbG1HYXVnZSIsImZpbG1PZmZzZXQiLCJBcnJheUNhbWVyYSIsImNhbWVyYXMiLCJXZWJWUk1hbmFnZXIiLCJkZXZpY2UiLCJmcmFtZURhdGEiLCJwb3NlVGFyZ2V0IiwiY29udHJvbGxlcnMiLCJzdGFuZGluZ01hdHJpeCIsInN0YW5kaW5nTWF0cml4SW52ZXJzZSIsIlZSRnJhbWVEYXRhIiwib25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlIiwidGVtcFF1YXRlcm5pb24iLCJ0ZW1wUG9zaXRpb24iLCJjYW1lcmFMIiwiYm91bmRzIiwiY2FtZXJhUiIsImN1cnJlbnRTaXplIiwiY3VycmVudFBpeGVsUmF0aW8iLCJjYW1lcmFWUiIsImlzUHJlc2VudGluZyIsImV5ZVBhcmFtZXRlcnMiLCJnZXRFeWVQYXJhbWV0ZXJzIiwicmVuZGVyV2lkdGgiLCJyZW5kZXJIZWlnaHQiLCJnZXRQaXhlbFJhdGlvIiwic2V0RHJhd2luZ0J1ZmZlclNpemUiLCJhbmltYXRpb24iLCJpc1RyaWdnZXJQcmVzc2VkIiwiZmluZEdhbWVwYWQiLCJnYW1lcGFkcyIsIm5hdmlnYXRvciIsImdldEdhbWVwYWRzIiwiZ2FtZXBhZCIsInN0YXJ0c1dpdGgiLCJ1c2VySGVpZ2h0IiwiZ2V0Q29udHJvbGxlciIsImNvbnRyb2xsZXIiLCJnZXREZXZpY2UiLCJzZXREZXZpY2UiLCJzZXRQb3NlVGFyZ2V0IiwiZ2V0Q2FtZXJhIiwiZGVwdGhOZWFyIiwiZGVwdGhGYXIiLCJnZXRGcmFtZURhdGEiLCJzdGFnZVBhcmFtZXRlcnMiLCJzaXR0aW5nVG9TdGFuZGluZ1RyYW5zZm9ybSIsInBvc2UiLCJwb3NlT2JqZWN0Iiwib3JpZW50YXRpb24iLCJsZWZ0Vmlld01hdHJpeCIsInJpZ2h0Vmlld01hdHJpeCIsImxlZnRQcm9qZWN0aW9uTWF0cml4IiwicmlnaHRQcm9qZWN0aW9uTWF0cml4IiwiZ2V0TGF5ZXJzIiwibGF5ZXIiLCJsZWZ0Qm91bmRzIiwicmlnaHRCb3VuZHMiLCJoYXNQb3NpdGlvbiIsImJ1dHRvbklkIiwiYnV0dG9ucyIsInByZXNzZWQiLCJ1cGRhdGVDb250cm9sbGVycyIsImdldFN0YW5kaW5nTWF0cml4Iiwic3VibWl0RnJhbWUiLCJXZWJHTFJlbmRlcmVyIiwiX2NvbnRleHQiLCJfYWxwaGEiLCJfZGVwdGgiLCJfc3RlbmNpbCIsInN0ZW5jaWwiLCJfYW50aWFsaWFzIiwiYW50aWFsaWFzIiwiX3ByZW11bHRpcGxpZWRBbHBoYSIsIl9wcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJfcG93ZXJQcmVmZXJlbmNlIiwicG93ZXJQcmVmZXJlbmNlIiwiY3VycmVudFJlbmRlckxpc3QiLCJjdXJyZW50UmVuZGVyU3RhdGUiLCJhdXRvQ2xlYXIiLCJhdXRvQ2xlYXJDb2xvciIsImF1dG9DbGVhckRlcHRoIiwiYXV0b0NsZWFyU3RlbmNpbCIsInNvcnRPYmplY3RzIiwidG9uZU1hcHBpbmdFeHBvc3VyZSIsInRvbmVNYXBwaW5nV2hpdGVQb2ludCIsIm9iamVjdHMiLCJwcm9ncmFtQ2FjaGUiLCJyZW5kZXJMaXN0cyIsImJhY2tncm91bmQiLCJtb3JwaHRhcmdldHMiLCJidWZmZXJSZW5kZXJlciIsImluZGV4ZWRCdWZmZXJSZW5kZXJlciIsInNwcml0ZVJlbmRlcmVyIiwiX3RoaXMiLCJfaXNDb250ZXh0TG9zdCIsIl9mcmFtZWJ1ZmZlciIsIl9jdXJyZW50UmVuZGVyVGFyZ2V0IiwiX2N1cnJlbnRGcmFtZWJ1ZmZlciIsIl9jdXJyZW50TWF0ZXJpYWxJZCIsIl9jdXJyZW50R2VvbWV0cnlQcm9ncmFtIiwiX2N1cnJlbnRDYW1lcmEiLCJfY3VycmVudEFycmF5Q2FtZXJhIiwiX2N1cnJlbnRWaWV3cG9ydCIsIl9jdXJyZW50U2Npc3NvciIsIl9jdXJyZW50U2Npc3NvclRlc3QiLCJfdXNlZFRleHR1cmVVbml0cyIsIl93aWR0aCIsIl9oZWlnaHQiLCJfcGl4ZWxSYXRpbyIsIl92aWV3cG9ydCIsIl9zY2lzc29yIiwiX3NjaXNzb3JUZXN0IiwiX2NsaXBwaW5nIiwiZ2xvYmFsU3RhdGUiLCJudW1HbG9iYWxQbGFuZXMiLCJyZW5kZXJpbmdTaGFkb3dzIiwidmlld05vcm1hbE1hdHJpeCIsInVuaWZvcm0iLCJyZXNldEdsb2JhbFN0YXRlIiwibnVtUGxhbmVzIiwibnVtSW50ZXJzZWN0aW9uIiwicHJvamVjdFBsYW5lcyIsInNraXBUcmFuc2Zvcm0iLCJuUGxhbmVzIiwiZHN0QXJyYXkiLCJmbGF0U2l6ZSIsImk0IiwiZW5hYmxlTG9jYWxDbGlwcGluZyIsImJlZ2luU2hhZG93cyIsImVuZFNoYWRvd3MiLCJzZXRTdGF0ZSIsImZyb21DYWNoZSIsIm5HbG9iYWwiLCJsR2xvYmFsIiwiY2xpcHBpbmdTdGF0ZSIsIl9jbGlwcGluZ0VuYWJsZWQiLCJfbG9jYWxDbGlwcGluZ0VuYWJsZWQiLCJfdmVjdG9yMyIsImdldFRhcmdldFBpeGVsUmF0aW8iLCJjb250ZXh0QXR0cmlidXRlcyIsIm9uQ29udGV4dExvc3QiLCJvbkNvbnRleHRSZXN0b3JlIiwiZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0IiwicmFuZ2VNaW4iLCJyYW5nZU1heCIsIm1lc3NhZ2UiLCJpbml0R0xDb250ZXh0IiwiZ2V0RXh0ZW5zaW9uIiwibWF4QW5pc290cm9weSIsIkhJR0hfRkxPQVQiLCJNRURJVU1fRkxPQVQiLCJtYXhQcmVjaXNpb24iLCJtYXhUZXh0dXJlcyIsIk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTIiwibWF4VmVydGV4VGV4dHVyZXMiLCJNQVhfVkVSVEVYX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJNQVhfVEVYVFVSRV9TSVpFIiwiTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSIsIm1heEF0dHJpYnV0ZXMiLCJNQVhfVkVSVEVYX0FUVFJJQlMiLCJNQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyIsIm1heFZhcnlpbmdzIiwiTUFYX1ZBUllJTkdfVkVDVE9SUyIsIm1heEZyYWdtZW50VW5pZm9ybXMiLCJNQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTIiwiZmxvYXRGcmFnbWVudFRleHR1cmVzIiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiY29sb3JCdWZmZXIiLCJsb2NrZWQiLCJjdXJyZW50Q29sb3JNYXNrIiwiY3VycmVudENvbG9yQ2xlYXIiLCJjb2xvck1hc2siLCJzZXRMb2NrZWQiLCJsb2NrIiwiY2xlYXJDb2xvciIsImN1cnJlbnREZXB0aE1hc2siLCJjdXJyZW50RGVwdGhGdW5jIiwiY3VycmVudERlcHRoQ2xlYXIiLCJERVBUSF9URVNUIiwiZGVwdGhNYXNrIiwic2V0RnVuYyIsIk5FVkVSIiwiQUxXQVlTIiwiTEVTUyIsIkxFUVVBTCIsIkVRVUFMIiwiR0VRVUFMIiwiR1JFQVRFUiIsIk5PVEVRVUFMIiwiY2xlYXJEZXB0aCIsImN1cnJlbnRTdGVuY2lsTWFzayIsImN1cnJlbnRTdGVuY2lsRnVuYyIsImN1cnJlbnRTdGVuY2lsUmVmIiwiY3VycmVudFN0ZW5jaWxGdW5jTWFzayIsImN1cnJlbnRTdGVuY2lsRmFpbCIsImN1cnJlbnRTdGVuY2lsWkZhaWwiLCJjdXJyZW50U3RlbmNpbFpQYXNzIiwiY3VycmVudFN0ZW5jaWxDbGVhciIsInN0ZW5jaWxUZXN0IiwiU1RFTkNJTF9URVNUIiwic3RlbmNpbE1hc2siLCJzdGVuY2lsRnVuYyIsInN0ZW5jaWxSZWYiLCJzZXRPcCIsInN0ZW5jaWxGYWlsIiwic3RlbmNpbFpGYWlsIiwic3RlbmNpbFpQYXNzIiwic3RlbmNpbE9wIiwiY2xlYXJTdGVuY2lsIiwibWF4VmVydGV4QXR0cmlidXRlcyIsIm5ld0F0dHJpYnV0ZXMiLCJlbmFibGVkQXR0cmlidXRlcyIsImF0dHJpYnV0ZURpdmlzb3JzIiwiY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzIiwiY3VycmVudFByb2dyYW0iLCJjdXJyZW50QmxlbmRpbmciLCJjdXJyZW50QmxlbmRFcXVhdGlvbiIsImN1cnJlbnRCbGVuZFNyYyIsImN1cnJlbnRCbGVuZERzdCIsImN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEiLCJjdXJyZW50QmxlbmRTcmNBbHBoYSIsImN1cnJlbnRCbGVuZERzdEFscGhhIiwiY3VycmVudFByZW11bHRpcGxlZEFscGhhIiwiY3VycmVudEZsaXBTaWRlZCIsImN1cnJlbnRDdWxsRmFjZSIsImN1cnJlbnRMaW5lV2lkdGgiLCJjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciIsImN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMiLCJNQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyIsImxpbmVXaWR0aEF2YWlsYWJsZSIsImdsVmVyc2lvbiIsIlZFUlNJT04iLCJjdXJyZW50VGV4dHVyZVNsb3QiLCJjdXJyZW50Qm91bmRUZXh0dXJlcyIsImN1cnJlbnRTY2lzc29yIiwiY3VycmVudFZpZXdwb3J0IiwiZW1wdHlUZXh0dXJlcyIsImVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IiLCJtZXNoUGVyQXR0cmlidXRlIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUiLCJibGVuZEVxdWF0aW9uU2VwYXJhdGUiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRnVuYyIsInNldEZsaXBTaWRlZCIsImZyb250RmFjZSIsIkNXIiwiQ0NXIiwic2V0Q3VsbEZhY2UiLCJjdWxsRmFjZSIsIkJBQ0siLCJGUk9OVCIsIkZST05UX0FORF9CQUNLIiwic2V0UG9seWdvbk9mZnNldCIsImZhY3RvciIsIlBPTFlHT05fT0ZGU0VUX0ZJTEwiLCJ3ZWJnbFNsb3QiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJmb3JtYXRzIiwiQ09NUFJFU1NFRF9URVhUVVJFX0ZPUk1BVFMiLCJzZXRNYXRlcmlhbCIsImZyb250RmFjZUNXIiwic2V0TGluZVdpZHRoIiwibGluZVdpZHRoIiwiU0NJU1NPUl9URVNUIiwid2ViZ2xUeXBlIiwiYm91bmRUZXh0dXJlIiwiYXBwbHkiLCJjYWxscyIsInRyaWFuZ2xlcyIsImF1dG9SZXNldCIsImluc3RhbmNlQ291bnQiLCJUUklBTkdMRV9TVFJJUCIsIlRSSUFOR0xFX0ZBTiIsIkxJTkVTIiwiTElORV9TVFJJUCIsIkxJTkVfTE9PUCIsIlBPSU5UUyIsIndpcmVmcmFtZUF0dHJpYnV0ZXMiLCJvbkdlb21ldHJ5RGlzcG9zZSIsImJ1ZmZlcmdlb21ldHJ5IiwiX2J1ZmZlckdlb21ldHJ5IiwiZ2VvbWV0cnlBdHRyaWJ1dGVzIiwiZ2V0V2lyZWZyYW1lQXR0cmlidXRlIiwiZ2VvbWV0cnlJbmRleCIsInVwZGF0ZUxpc3QiLCJpbmZsdWVuY2VzTGlzdCIsIm9iamVjdEluZmx1ZW5jZXMiLCJpbmZsdWVuY2VzIiwicGxhbmVDYW1lcmEiLCJwbGFuZU1lc2giLCJib3hNZXNoIiwiY2xlYXJBbHBoYSIsImdldENsZWFyQ29sb3IiLCJzZXRDbGVhckNvbG9yIiwiZ2V0Q2xlYXJBbHBoYSIsInNldENsZWFyQWxwaGEiLCJyZW5kZXJMaXN0IiwiZm9yY2VDbGVhciIsInNldE1vZGUiLCJkcmF3QXJyYXlzIiwicmVuZGVySW5zdGFuY2VzIiwiZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFIiwibWF4SW5zdGFuY2VkQ291bnQiLCJkcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRSIsInZyIiwic2Vzc2lvbiIsImZyYW1lT2ZSZWYiLCJpbnB1dFNvdXJjZXMiLCJvblNlc3Npb25FdmVudCIsImlucHV0U291cmNlIiwib25TZXNzaW9uRW5kIiwic2V0RnJhbWVidWZmZXIiLCJ1cGRhdGVDYW1lcmEiLCJzZXRDb21wYXRpYmxlWFJEZXZpY2UiLCJzZXRTZXNzaW9uIiwiYmFzZUxheWVyIiwiWFJXZWJHTExheWVyIiwicmVxdWVzdEZyYW1lT2ZSZWZlcmVuY2UiLCJmcmFtZU9mUmVmZXJlbmNlVHlwZSIsInRoZW4iLCJnZXRJbnB1dFNvdXJjZXMiLCJvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2siLCJnZXREZXZpY2VQb3NlIiwidmlld3MiLCJnZXRWaWV3cG9ydCIsImdldFZpZXdNYXRyaXgiLCJpbnB1dFBvc2UiLCJnZXRJbnB1dFBvc2UiLCJwb2ludGVyTWF0cml4Iiwib25NYXRlcmlhbERpc3Bvc2UiLCJyZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlIiwiZGVhbGxvY2F0ZU1hdGVyaWFsIiwiZ2V0Q29udGV4dEF0dHJpYnV0ZXMiLCJmb3JjZUNvbnRleHRMb3NzIiwibG9zZUNvbnRleHQiLCJmb3JjZUNvbnRleHRSZXN0b3JlIiwicmVzdG9yZUNvbnRleHQiLCJzZXRQaXhlbFJhdGlvIiwidXBkYXRlU3R5bGUiLCJzZXRWaWV3cG9ydCIsImdldERyYXdpbmdCdWZmZXJTaXplIiwicGl4ZWxSYXRpbyIsImdldEN1cnJlbnRWaWV3cG9ydCIsInNldFNjaXNzb3IiLCJib29sZWFuIiwiYml0cyIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwiU1RFTkNJTF9CVUZGRVJfQklUIiwiY2xlYXJUYXJnZXQiLCJyZW5kZXJCdWZmZXJJbW1lZGlhdGUiLCJoYXNQb3NpdGlvbnMiLCJoYXNOb3JtYWxzIiwiaGFzVXZzIiwiaGFzQ29sb3JzIiwicHJvZ3JhbUF0dHJpYnV0ZXMiLCJwb3NpdGlvbkFycmF5IiwiaXNNZXNoUGhvbmdNYXRlcmlhbCIsImlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwiLCJpc01lc2hOb3JtYWxNYXRlcmlhbCIsIm5vcm1hbEFycmF5IiwibngiLCJueSIsIm56IiwidXZBcnJheSIsImNvbG9yQXJyYXkiLCJzZXRQcm9ncmFtIiwiZ2VvbWV0cnlQcm9ncmFtIiwidXBkYXRlQnVmZmVycyIsInJhbmdlRmFjdG9yIiwiaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSIsIm1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsInByb2dyYW1BdHRyaWJ1dGUiLCJnZW9tZXRyeUF0dHJpYnV0ZSIsInN0cmlkZSIsImlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIiLCJpc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsInZlcnRleEF0dHJpYjJmdiIsInZlcnRleEF0dHJpYjNmdiIsInZlcnRleEF0dHJpYjRmdiIsInZlcnRleEF0dHJpYjFmdiIsInNldHVwVmVydGV4QXR0cmlidXRlcyIsImRhdGFDb3VudCIsInJhbmdlU3RhcnQiLCJyYW5nZUNvdW50IiwiZHJhd1N0YXJ0IiwiZHJhd0VuZCIsImRyYXdDb3VudCIsImlzTGluZVNlZ21lbnRzIiwiaXNMaW5lTG9vcCIsImNvbXBpbGUiLCJpc0xpZ2h0IiwiaW5pdE1hdGVyaWFsIiwicmVuZGVyT2JqZWN0cyIsIm92ZXJyaWRlTWF0ZXJpYWwiLCJpc0FycmF5Q2FtZXJhIiwiY2FtZXJhMiIsImlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0IiwicmVuZGVyT2JqZWN0SW1tZWRpYXRlIiwibWF0ZXJpYWxQcm9wZXJ0aWVzIiwicHJvZ3JhbUNoYW5nZSIsImxpZ2h0c0hhc2giLCJudW1TdXBwb3J0ZWRNb3JwaFRhcmdldHMiLCJudW1TdXBwb3J0ZWRNb3JwaE5vcm1hbHMiLCJwcm9nVW5pZm9ybXMiLCJ1bmlmb3Jtc0xpc3QiLCJ1c2VDYWNoZSIsInJlZnJlc2hQcm9ncmFtIiwicmVmcmVzaE1hdGVyaWFsIiwicmVmcmVzaExpZ2h0cyIsInBfdW5pZm9ybXMiLCJtX3VuaWZvcm1zIiwidUNhbVBvcyIsImNhbWVyYVBvc2l0aW9uIiwiaXNNZXNoTGFtYmVydE1hdGVyaWFsIiwiYm9uZVRleHR1cmUiLCJib25lTWF0cmljZXMiLCJib25lVGV4dHVyZVNpemUiLCJtYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSIsInJlZnJlc2hVbmlmb3Jtc0ZvZyIsInJlZnJlc2hVbmlmb3Jtc0NvbW1vbiIsInJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQiLCJpc01lc2hUb29uTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNQaG9uZyIsInJlZnJlc2hVbmlmb3Jtc1Rvb24iLCJpc01lc2hQaHlzaWNhbE1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQiLCJyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCIsImlzTWVzaERlcHRoTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNEZXB0aCIsInJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlIiwicmVmcmVzaFVuaWZvcm1zTm9ybWFsIiwiaXNMaW5lQmFzaWNNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0xpbmUiLCJpc0xpbmVEYXNoZWRNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc0Rhc2giLCJpc1BvaW50c01hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zUG9pbnRzIiwiaXNTaGFkb3dNYXRlcmlhbCIsImx0Y18xIiwiTFRDXzEiLCJsdGNfMiIsIkxUQ18yIiwidXZTY2FsZU1hcCIsInByb2plY3RPYmplY3QiLCJpc1Nwcml0ZSIsIm9wYXF1ZU9iamVjdHMiLCJ0cmFuc3BhcmVudE9iamVjdHMiLCJ0ZXh0dXJlVW5pdCIsIndhcm5lZCIsInNldFRleHR1cmUiLCJyZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzIiwicmVzdG9yZSIsInRleHR1cmVGb3JtYXQiLCJJTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX0ZPUk1BVCIsIklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfVFlQRSIsImNoZWNrRnJhbWVidWZmZXJTdGF0dXMiLCJGUkFNRUJVRkZFUl9DT01QTEVURSIsInJlYWRQaXhlbHMiLCJjb3B5RnJhbWVidWZmZXJUb1RleHR1cmUiLCJsZXZlbCIsImNvcHlUZXhJbWFnZTJEIiwiY29weVRleHR1cmVUb1RleHR1cmUiLCJzcmNUZXh0dXJlIiwiZHN0VGV4dHVyZSIsInRleFN1YkltYWdlMkQiLCJGb2dFeHAyIiwiRm9nIiwidGhyZWVfbW9kdWxlX1NjZW5lIiwiU3ByaXRlTWF0ZXJpYWwiLCJTcHJpdGUiLCJMT0QiLCJsZXZlbHMiLCJTa2VsZXRvbiIsImJvbmVJbnZlcnNlcyIsImNhbGN1bGF0ZUludmVyc2VzIiwiQm9uZSIsIlNraW5uZWRNZXNoIiwiYmluZE1vZGUiLCJiaW5kTWF0cml4IiwiYmluZE1hdHJpeEludmVyc2UiLCJpbml0Qm9uZXMiLCJub3JtYWxpemVTa2luV2VpZ2h0cyIsImxpbmVjYXAiLCJsaW5lam9pbiIsIkxpbmUiLCJMaW5lU2VnbWVudHMiLCJMaW5lTG9vcCIsIlBvaW50cyIsIlZpZGVvVGV4dHVyZSIsInZpZGVvIiwiQ29tcHJlc3NlZFRleHR1cmUiLCJEZXB0aFRleHR1cmUiLCJXaXJlZnJhbWVHZW9tZXRyeSIsIm9sIiwiZWRnZSIsImVkZ2VzIiwiUGFyYW1ldHJpY0dlb21ldHJ5IiwiZnVuYyIsInNsaWNlcyIsInN0YWNrcyIsIlBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSIsInB1IiwicHYiLCJzbGljZUNvdW50IiwiUG9seWhlZHJvbkdlb21ldHJ5IiwiZGV0YWlsIiwiUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwidXZCdWZmZXIiLCJzdWJkaXZpZGVGYWNlIiwiY29scyIsImFqIiwiYmoiLCJyb3dzIiwicHVzaFZlcnRleCIsImdldFZlcnRleEJ5SW5kZXgiLCJjb3JyZWN0VVYiLCJhemltdXRoIiwiaW5jbGluYXRpb24iLCJzdWJkaXZpZGUiLCJhcHBwbHlSYWRpdXMiLCJjZW50cm9pZCIsImF6aSIsImNvcnJlY3RVVnMiLCJjb3JyZWN0U2VhbSIsImdlbmVyYXRlVVZzIiwiVGV0cmFoZWRyb25HZW9tZXRyeSIsIlRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJPY3RhaGVkcm9uR2VvbWV0cnkiLCJPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJJY29zYWhlZHJvbkdlb21ldHJ5IiwiSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSIsIkRvZGVjYWhlZHJvbkdlb21ldHJ5IiwiRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJUdWJlR2VvbWV0cnkiLCJ0dWJ1bGFyU2VnbWVudHMiLCJyYWRpYWxTZWdtZW50cyIsImNsb3NlZCIsInRhcGVyIiwiYnVmZmVyR2VvbWV0cnkiLCJUdWJlQnVmZmVyR2VvbWV0cnkiLCJ0YW5nZW50cyIsImJpbm9ybWFscyIsImZyYW1lcyIsImNvbXB1dGVGcmVuZXRGcmFtZXMiLCJQIiwiZ2VuZXJhdGVTZWdtZW50IiwiZ2V0UG9pbnRBdCIsIk4iLCJCIiwiZ2VuZXJhdGVJbmRpY2VzIiwiZ2VuZXJhdGVCdWZmZXJEYXRhIiwiVG9ydXNLbm90R2VvbWV0cnkiLCJ0dWJlIiwiaGVpZ2h0U2NhbGUiLCJUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSIsIlAxIiwiUDIiLCJUIiwiY2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlIiwiY3UiLCJzdSIsInF1T3ZlclAiLCJjcyIsIlRvcnVzR2VvbWV0cnkiLCJhcmMiLCJUb3J1c0J1ZmZlckdlb21ldHJ5IiwiaXNDYW52YXNUZXh0dXJlIiwiaXNHcm91cCIsImlzUGVyc3BlY3RpdmVDYW1lcmEiLCJzZXRGb2NhbExlbmd0aCIsImZvY2FsTGVuZ3RoIiwidkV4dGVudFNsb3BlIiwiZ2V0RmlsbUhlaWdodCIsImF0YW4iLCJnZXRGb2NhbExlbmd0aCIsImdldEVmZmVjdGl2ZUZPViIsImdldEZpbG1XaWR0aCIsInNrZXciLCJpc1Nwcml0ZU1hdGVyaWFsIiwiaW50ZXJzZWN0UG9pbnQiLCJ3b3JsZFNjYWxlIiwibXZQb3NpdGlvbiIsImFsaWduZWRQb3NpdGlvbiIsInJvdGF0ZWRQb3NpdGlvbiIsInZpZXdXb3JsZE1hdHJpeCIsInRyYW5zZm9ybVZlcnRleCIsInZlcnRleFBvc2l0aW9uIiwiYWRkTGV2ZWwiLCJnZXRPYmplY3RGb3JEaXN0YW5jZSIsIm1hdHJpeFBvc2l0aW9uIiwiYm9uZSIsImlzQm9uZSIsIm9mZnNldE1hdHJpeCIsImlkZW50aXR5TWF0cml4IiwiZ2V0Qm9uZUJ5TmFtZSIsImdib25lIiwicG9zIiwicm90cSIsInNjbCIsInN3IiwidmVjIiwic2tpbldlaWdodCIsImNvbXB1dGVMaW5lRGlzdGFuY2VzIiwicG9zaXRpb25BdHRyaWJ1dGUiLCJsaW5lUHJlY2lzaW9uIiwicHJlY2lzaW9uU3EiLCJ2U3RhcnQiLCJ2RW5kIiwiaW50ZXJTZWdtZW50IiwiaW50ZXJSYXkiLCJzdGVwIiwibmJWZXJ0aWNlcyIsInRocmVzaG9sZCIsInBhcmFtcyIsImxvY2FsVGhyZXNob2xkIiwibG9jYWxUaHJlc2hvbGRTcSIsInRlc3RQb2ludCIsInJheVBvaW50RGlzdGFuY2VTcSIsImRpc3RhbmNlVG9SYXkiLCJyZWFkeVN0YXRlIiwiSEFWRV9DVVJSRU5UX0RBVEEiLCJFYXJjdXQiLCJob2xlSW5kaWNlcyIsImRpbSIsImludlNpemUiLCJoYXNIb2xlcyIsIm91dGVyTGVuIiwib3V0ZXJOb2RlIiwibGlua2VkTGlzdCIsInF1ZXVlIiwic3RlaW5lciIsImdldExlZnRtb3N0IiwiY29tcGFyZVgiLCJlbGltaW5hdGVIb2xlIiwiZmlsdGVyUG9pbnRzIiwiZWxpbWluYXRlSG9sZXMiLCJlYXJjdXRMaW5rZWQiLCJjbG9ja3dpc2UiLCJsYXN0Iiwic3VtIiwic2lnbmVkQXJlYSIsImluc2VydE5vZGUiLCJyZW1vdmVOb2RlIiwiYWdhaW4iLCJ0aHJlZV9tb2R1bGVfYXJlYSIsInByZXYiLCJlYXIiLCJwYXNzIiwiek9yZGVyIiwicHJldloiLCJuZXh0WiIsInRhaWwiLCJudW1NZXJnZXMiLCJwU2l6ZSIsInFTaXplIiwiaW5TaXplIiwic29ydExpbmtlZCIsImluZGV4Q3VydmUiLCJpc0Vhckhhc2hlZCIsImlzRWFyIiwiY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyIsInNwbGl0RWFyY3V0IiwicG9pbnRJblRyaWFuZ2xlIiwibWluVFgiLCJtaW5UWSIsIm1heFRYIiwibWF4VFkiLCJsb2NhbGx5SW5zaWRlIiwiaXNWYWxpZERpYWdvbmFsIiwic3BsaXRQb2x5Z29uIiwiaG9sZSIsImh4IiwiaHkiLCJteCIsIm15IiwidGFuTWluIiwiZmluZEhvbGVCcmlkZ2UiLCJsZWZ0bW9zdCIsInB4IiwicHkiLCJpbnRlcnNlY3RzUG9seWdvbiIsImluc2lkZSIsIm1pZGRsZUluc2lkZSIsInEyIiwiTm9kZSIsImFuIiwiYnAiLCJTaGFwZVV0aWxzIiwiYXJlYSIsImNvbnRvdXIiLCJpc0Nsb2NrV2lzZSIsInB0cyIsInRyaWFuZ3VsYXRlU2hhcGUiLCJob2xlcyIsInJlbW92ZUR1cEVuZFB0cyIsImFkZENvbnRvdXIiLCJob2xlSW5kZXgiLCJmb3JFYWNoIiwiRXh0cnVkZUdlb21ldHJ5IiwiRXh0cnVkZUJ1ZmZlckdlb21ldHJ5IiwidmVydGljZXNBcnJheSIsImFkZFNoYXBlIiwicGxhY2Vob2xkZXIiLCJjdXJ2ZVNlZ21lbnRzIiwic3RlcHMiLCJiZXZlbEVuYWJsZWQiLCJiZXZlbFRoaWNrbmVzcyIsImJldmVsU2l6ZSIsImJldmVsU2VnbWVudHMiLCJleHRydWRlUGF0aCIsInV2Z2VuIiwiVVZHZW5lcmF0b3IiLCJXb3JsZFVWR2VuZXJhdG9yIiwiYW1vdW50IiwiZXh0cnVkZVB0cyIsInNwbGluZVR1YmUiLCJiaW5vcm1hbCIsInBvc2l0aW9uMiIsImFob2xlIiwiaGwiLCJleHRydWRlQnlQYXRoIiwiZ2V0U3BhY2VkUG9pbnRzIiwic2hhcGVQb2ludHMiLCJleHRyYWN0UG9pbnRzIiwicmV2ZXJzZSIsImNvbmNhdCIsInNjYWxlUHQyIiwicHQiLCJicyIsInZlcnQiLCJ2bGVuIiwiZmxlbiIsImdldEJldmVsVmVjIiwiaW5QdCIsImluUHJldiIsImluTmV4dCIsInZfdHJhbnNfeCIsInZfdHJhbnNfeSIsInNocmlua19ieSIsInZfcHJldl94Iiwidl9wcmV2X3kiLCJ2X25leHRfeCIsInZfbmV4dF95Iiwidl9wcmV2X2xlbnNxIiwiY29sbGluZWFyMCIsInZfcHJldl9sZW4iLCJ2X25leHRfbGVuIiwicHRQcmV2U2hpZnRfeCIsInB0UHJldlNoaWZ0X3kiLCJzZiIsInZfdHJhbnNfbGVuc3EiLCJkaXJlY3Rpb25fZXEiLCJjb250b3VyTW92ZW1lbnRzIiwib25lSG9sZU1vdmVtZW50cyIsImhvbGVzTW92ZW1lbnRzIiwidmVydGljZXNNb3ZlbWVudHMiLCJzaWRld2FsbHMiLCJsYXllcm9mZnNldCIsInNsIiwic2xlbjEiLCJzbGVuMiIsImY0IiwiZjMiLCJhZGRWZXJ0ZXgiLCJuZXh0SW5kZXgiLCJnZW5lcmF0ZVRvcFVWIiwiYWRkVVYiLCJnZW5lcmF0ZVNpZGVXYWxsVVYiLCJ2ZWN0b3IyIiwiYnVpbGRMaWRGYWNlcyIsImJ1aWxkU2lkZUZhY2VzIiwiaW5kZXhBIiwiaW5kZXhCIiwiaW5kZXhDIiwiYV94IiwiYV95IiwiYl94IiwiYl95IiwiY194IiwiY195IiwiaW5kZXhEIiwiYV96IiwiYl96IiwiY196IiwiZF94IiwiZF95IiwiZF96IiwiVGV4dEdlb21ldHJ5IiwidGV4dCIsIlRleHRCdWZmZXJHZW9tZXRyeSIsImZvbnQiLCJpc0ZvbnQiLCJnZW5lcmF0ZVNoYXBlcyIsIlNwaGVyZUdlb21ldHJ5IiwicGhpU3RhcnQiLCJwaGlMZW5ndGgiLCJ0aGV0YVN0YXJ0IiwidGhldGFMZW5ndGgiLCJTcGhlcmVCdWZmZXJHZW9tZXRyeSIsInRoZXRhRW5kIiwiZ3JpZCIsInZlcnRpY2VzUm93IiwiUmluZ0dlb21ldHJ5IiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsInRoZXRhU2VnbWVudHMiLCJwaGlTZWdtZW50cyIsIlJpbmdCdWZmZXJHZW9tZXRyeSIsInNlZ21lbnQiLCJyYWRpdXNTdGVwIiwidGhldGFTZWdtZW50TGV2ZWwiLCJMYXRoZUdlb21ldHJ5Iiwic2VnbWVudHMiLCJMYXRoZUJ1ZmZlckdlb21ldHJ5IiwiYmFzZSIsImludmVyc2VTZWdtZW50cyIsIm4xIiwibjIiLCJTaGFwZUdlb21ldHJ5IiwiU2hhcGVCdWZmZXJHZW9tZXRyeSIsInNoYXBlSG9sZSIsImluZGV4T2Zmc2V0Iiwic2hhcGVWZXJ0aWNlcyIsInNoYXBlSG9sZXMiLCJ0b0pTT04kMSIsIkVkZ2VzR2VvbWV0cnkiLCJ0aHJlc2hvbGRBbmdsZSIsInRocmVzaG9sZERvdCIsInNvdXJjZVZlcnRpY2VzIiwiZmFjZTEiLCJmYWNlMiIsIkN5bGluZGVyR2VvbWV0cnkiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJvcGVuRW5kZWQiLCJDeWxpbmRlckJ1ZmZlckdlb21ldHJ5IiwiaW5kZXhBcnJheSIsImdlbmVyYXRlQ2FwIiwiY2VudGVySW5kZXhTdGFydCIsImNlbnRlckluZGV4RW5kIiwiY29zVGhldGEiLCJzaW5UaGV0YSIsInNsb3BlIiwiaW5kZXhSb3ciLCJnZW5lcmF0ZVRvcnNvIiwiQ29uZUdlb21ldHJ5IiwiQ29uZUJ1ZmZlckdlb21ldHJ5IiwiQ2lyY2xlR2VvbWV0cnkiLCJDaXJjbGVCdWZmZXJHZW9tZXRyeSIsIkdlb21ldHJpZXMiLCJmcmVlemUiLCJSYXdTaGFkZXJNYXRlcmlhbCIsIlNUQU5EQVJEIiwiUEhZU0lDQUwiLCJUT09OIiwiTWF0ZXJpYWxzIiwiQ2FjaGUiLCJmaWxlcyIsImZpbGUiLCJMb2FkaW5nTWFuYWdlciIsIm9uTG9hZCIsIm9uUHJvZ3Jlc3MiLCJvbkVycm9yIiwiaXNMb2FkaW5nIiwiaXRlbXNMb2FkZWQiLCJpdGVtc1RvdGFsIiwidXJsTW9kaWZpZXIiLCJvblN0YXJ0IiwiaXRlbVN0YXJ0IiwiaXRlbUVuZCIsIml0ZW1FcnJvciIsInJlc29sdmVVUkwiLCJzZXRVUkxNb2RpZmllciIsInRyYW5zZm9ybSIsIkRlZmF1bHRMb2FkaW5nTWFuYWdlciIsImxvYWRpbmciLCJGaWxlTG9hZGVyIiwibWFuYWdlciIsIkNvbXByZXNzZWRUZXh0dXJlTG9hZGVyIiwiX3BhcnNlciIsIkRhdGFUZXh0dXJlTG9hZGVyIiwiSW1hZ2VMb2FkZXIiLCJDdWJlVGV4dHVyZUxvYWRlciIsIlRleHR1cmVMb2FkZXIiLCJDdXJ2ZSIsImFyY0xlbmd0aERpdmlzaW9ucyIsIkVsbGlwc2VDdXJ2ZSIsImFYIiwiYVkiLCJ4UmFkaXVzIiwieVJhZGl1cyIsImFTdGFydEFuZ2xlIiwiYUVuZEFuZ2xlIiwiYUNsb2Nrd2lzZSIsImFSb3RhdGlvbiIsIkFyY0N1cnZlIiwiYVJhZGl1cyIsIkN1YmljUG9seSIsImMwIiwiaW5pdENhdG11bGxSb20iLCJ4MyIsInRlbnNpb24iLCJpbml0Tm9udW5pZm9ybUNhdG11bGxSb20iLCJkdDAiLCJkdDEiLCJkdDIiLCJ0MiIsImNhbGMiLCJsb2FkIiwiY2FjaGVkIiwic2V0VGltZW91dCIsImRhdGFVcmlSZWdleFJlc3VsdCIsIm1pbWVUeXBlIiwiaXNCYXNlNjQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJhdG9iIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJ0b0xvd2VyQ2FzZSIsImNoYXJDb2RlQXQiLCJCbG9iIiwicGFyc2VyIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiaGVhZGVyIiwib3BlbiIsImNhbGxiYWNrcyIsInN0YXR1cyIsIndpdGhDcmVkZW50aWFscyIsIm92ZXJyaWRlTWltZVR5cGUiLCJyZXF1ZXN0SGVhZGVyIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJzZXRQYXRoIiwic2V0UmVzcG9uc2VUeXBlIiwic2V0V2l0aENyZWRlbnRpYWxzIiwic2V0TWltZVR5cGUiLCJsb2FkZXIiLCJsb2FkVGV4dHVyZSIsInRleERhdGFzIiwibG9hZGVkIiwibWlwbWFwQ291bnQiLCJpc0N1YmVtYXAiLCJ0ZXhEYXRhIiwiY3Jvc3NPcmlnaW4iLCJvbkltYWdlTG9hZCIsIm9uSW1hZ2VFcnJvciIsInN1YnN0ciIsInNyYyIsInNldENyb3NzT3JpZ2luIiwidXJscyIsImlzSlBFRyIsInNlYXJjaCIsImdldFBvaW50Iiwib3B0aW9uYWxUYXJnZXQiLCJnZXRVdG9UbWFwcGluZyIsImdldFBvaW50cyIsImRpdmlzaW9ucyIsImdldExlbmd0aCIsImxlbmd0aHMiLCJnZXRMZW5ndGhzIiwiY2FjaGVBcmNMZW5ndGhzIiwiY3VycmVudCIsInVwZGF0ZUFyY0xlbmd0aHMiLCJ0YXJnZXRBcmNMZW5ndGgiLCJhcmNMZW5ndGhzIiwiY29tcGFyaXNvbiIsImxlbmd0aEJlZm9yZSIsImdldFRhbmdlbnQiLCJwdDEiLCJnZXRUYW5nZW50QXQiLCJtYXQiLCJNQVhfVkFMVUUiLCJ0eiIsImZyb21KU09OIiwianNvbiIsImlzRWxsaXBzZUN1cnZlIiwidHdvUGkiLCJkZWx0YUFuZ2xlIiwic2FtZVBvaW50cyIsImlzQXJjQ3VydmUiLCJweiIsIkNhdG11bGxSb21DdXJ2ZTMiLCJjdXJ2ZVR5cGUiLCJDYXRtdWxsUm9tIiwiUXVhZHJhdGljQmV6aWVyIiwiUXVhZHJhdGljQmV6aWVyUDAiLCJRdWFkcmF0aWNCZXppZXJQMSIsIlF1YWRyYXRpY0JlemllclAyIiwiQ3ViaWNCZXppZXIiLCJDdWJpY0JlemllclAwIiwiQ3ViaWNCZXppZXJQMSIsIkN1YmljQmV6aWVyUDIiLCJDdWJpY0JlemllclAzIiwiQ3ViaWNCZXppZXJDdXJ2ZSIsInYzIiwiQ3ViaWNCZXppZXJDdXJ2ZTMiLCJMaW5lQ3VydmUiLCJMaW5lQ3VydmUzIiwiUXVhZHJhdGljQmV6aWVyQ3VydmUiLCJRdWFkcmF0aWNCZXppZXJDdXJ2ZTMiLCJTcGxpbmVDdXJ2ZSIsImlzQ2F0bXVsbFJvbUN1cnZlMyIsImludFBvaW50Iiwid2VpZ2h0IiwiaXNDdWJpY0JlemllckN1cnZlIiwiaXNDdWJpY0JlemllckN1cnZlMyIsImlzTGluZUN1cnZlIiwiaXNMaW5lQ3VydmUzIiwiaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZSIsImlzUXVhZHJhdGljQmV6aWVyQ3VydmUzIiwiaXNTcGxpbmVDdXJ2ZSIsIkN1cnZlcyIsIkN1cnZlUGF0aCIsImN1cnZlcyIsImF1dG9DbG9zZSIsIlBhdGgiLCJjdXJyZW50UG9pbnQiLCJTaGFwZSIsIkxpZ2h0IiwiSGVtaXNwaGVyZUxpZ2h0IiwiTGlnaHRTaGFkb3ciLCJTcG90TGlnaHRTaGFkb3ciLCJTcG90TGlnaHQiLCJwb3dlciIsIlBvaW50TGlnaHQiLCJEaXJlY3Rpb25hbExpZ2h0U2hhZG93IiwiRGlyZWN0aW9uYWxMaWdodCIsIkFtYmllbnRMaWdodCIsIlJlY3RBcmVhTGlnaHQiLCJTdHJpbmdLZXlmcmFtZVRyYWNrIiwidGltZXMiLCJpbnRlcnBvbGF0aW9uIiwiS2V5ZnJhbWVUcmFjayIsIkJvb2xlYW5LZXlmcmFtZVRyYWNrIiwiSW50ZXJwb2xhbnQiLCJwYXJhbWV0ZXJQb3NpdGlvbnMiLCJzYW1wbGVWYWx1ZXMiLCJzYW1wbGVTaXplIiwicmVzdWx0QnVmZmVyIiwiX2NhY2hlZEluZGV4IiwidmFsdWVTaXplIiwiUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50IiwiUXVhdGVybmlvbktleWZyYW1lVHJhY2siLCJDb2xvcktleWZyYW1lVHJhY2siLCJOdW1iZXJLZXlmcmFtZVRyYWNrIiwiQ3ViaWNJbnRlcnBvbGFudCIsIl93ZWlnaHRQcmV2IiwiX29mZnNldFByZXYiLCJfd2VpZ2h0TmV4dCIsIl9vZmZzZXROZXh0IiwiTGluZWFySW50ZXJwb2xhbnQiLCJEaXNjcmV0ZUludGVycG9sYW50IiwiY3VydmUiLCJjbG9zZVBhdGgiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJjdXJ2ZUxlbmd0aHMiLCJnZXRDdXJ2ZUxlbmd0aHMiLCJzZWdtZW50TGVuZ3RoIiwibGVucyIsImNhY2hlTGVuZ3RocyIsInN1bXMiLCJyZXNvbHV0aW9uIiwibW92ZVRvIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImFDUHgiLCJhQ1B5IiwiYmV6aWVyQ3VydmVUbyIsImFDUDF4IiwiYUNQMXkiLCJhQ1AyeCIsImFDUDJ5Iiwic3BsaW5lVGhydSIsImFic2FyYyIsImFic2VsbGlwc2UiLCJlbGxpcHNlIiwiZmlyc3RQb2ludCIsImxhc3RQb2ludCIsImdldFBvaW50c0hvbGVzIiwiaG9sZXNQdHMiLCJWYWx1ZVR5cGVOYW1lIiwiVmFsdWVCdWZmZXJUeXBlIiwiRGVmYXVsdEludGVycG9sYXRpb24iLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGgiLCJldmFsdWF0ZSIsInBwIiwidmFsaWRhdGVfaW50ZXJ2YWwiLCJzZWVrIiwibGluZWFyX3NjYW4iLCJmb3J3YXJkX3NjYW4iLCJnaXZlVXBBdCIsImFmdGVyRW5kXyIsInQxZ2xvYmFsIiwiYmVmb3JlU3RhcnRfIiwibWlkIiwiaW50ZXJ2YWxDaGFuZ2VkXyIsImludGVycG9sYXRlXyIsInNldHRpbmdzIiwiRGVmYXVsdFNldHRpbmdzXyIsImdldFNldHRpbmdzXyIsImNvcHlTYW1wbGVWYWx1ZV8iLCJnZXRWYWx1ZVNpemUiLCJlbmRpbmdTdGFydCIsImVuZGluZ0VuZCIsImlQcmV2IiwiaU5leHQiLCJ0UHJldiIsInROZXh0IiwiaGFsZkR0IiwibzEiLCJvMCIsIm9QIiwib04iLCJ3UCIsIndOIiwicHBwIiwic1AiLCJzTiIsIm9mZnNldDEiLCJvZmZzZXQwIiwid2VpZ2h0MSIsIndlaWdodDAiLCJBbmltYXRpb25VdGlscyIsImFycmF5U2xpY2UiLCJmcm9tIiwidG8iLCJpc1R5cGVkQXJyYXkiLCJjb252ZXJ0QXJyYXkiLCJmb3JjZUNsb25lIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJEYXRhVmlldyIsImdldEtleWZyYW1lT3JkZXIiLCJzb3J0ZWRBcnJheSIsIm5WYWx1ZXMiLCJzcmNPZmZzZXQiLCJmbGF0dGVuSlNPTiIsImpzb25LZXlzIiwidmFsdWVQcm9wZXJ0eU5hbWUiLCJUaW1lQnVmZmVyVHlwZSIsInNldEludGVycG9sYXRpb24iLCJ2YWxpZGF0ZSIsIm9wdGltaXplIiwiVmVjdG9yS2V5ZnJhbWVUcmFjayIsIkFuaW1hdGlvbkNsaXAiLCJkdXJhdGlvbiIsInRyYWNrcyIsInJlc2V0RHVyYXRpb24iLCJNYXRlcmlhbExvYWRlciIsIkJ1ZmZlckdlb21ldHJ5TG9hZGVyIiwidHJhY2tUeXBlIiwiX2dldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUiLCJ0cmFjayIsImdldEludGVycG9sYXRpb24iLCJ0eXBlTmFtZSIsIkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlIiwiZmFjdG9yeU1ldGhvZCIsImNyZWF0ZUludGVycG9sYW50Iiwic2hpZnQiLCJ0aW1lT2Zmc2V0IiwidGltZVNjYWxlIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsIm5LZXlzIiwidmFsaWQiLCJwcmV2VGltZSIsImN1cnJUaW1lIiwic21vb3RoSW50ZXJwb2xhdGlvbiIsIndyaXRlSW5kZXgiLCJrZWVwIiwib2Zmc2V0UCIsIm9mZnNldE4iLCJyZWFkT2Zmc2V0Iiwid3JpdGVPZmZzZXQiLCJqc29uVHJhY2tzIiwiZnJhbWVUaW1lIiwiZnBzIiwiY2xpcCIsImNsaXBUcmFja3MiLCJDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSIsIm1vcnBoVGFyZ2V0U2VxdWVuY2UiLCJub0xvb3AiLCJudW1Nb3JwaFRhcmdldHMiLCJmaW5kQnlOYW1lIiwib2JqZWN0T3JDbGlwQXJyYXkiLCJjbGlwQXJyYXkiLCJhbmltYXRpb25zIiwiQ3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXMiLCJhbmltYXRpb25Ub01vcnBoVGFyZ2V0cyIsInBhdHRlcm4iLCJwYXJ0cyIsImFuaW1hdGlvbk1vcnBoVGFyZ2V0cyIsImNsaXBzIiwicGFyc2VBbmltYXRpb24iLCJhZGROb25lbXB0eVRyYWNrIiwidHJhY2tOYW1lIiwiYW5pbWF0aW9uS2V5cyIsInByb3BlcnR5TmFtZSIsImRlc3RUcmFja3MiLCJjbGlwTmFtZSIsImhpZXJhcmNoeVRyYWNrcyIsImhpZXJhcmNoeSIsIm1vcnBoVGFyZ2V0TmFtZXMiLCJtb3JwaFRhcmdldE5hbWUiLCJhbmltYXRpb25LZXkiLCJib25lTmFtZSIsInNldFRleHR1cmVzIiwiZ2V0VGV4dHVyZSIsInNoYWRpbmciLCJ0eXBlZEFycmF5IiwiVFlQRURfQVJSQVlTIiwiZHJhd2NhbGxzIiwib2Zmc2V0cyIsIkxvYWRlciIsIkhhbmRsZXJzIiwiaGFuZGxlcnMiLCJyZWdleCIsIm9uTG9hZFN0YXJ0Iiwib25Mb2FkUHJvZ3Jlc3MiLCJvbkxvYWRDb21wbGV0ZSIsImluaXRNYXRlcmlhbHMiLCJ0ZXh0dXJlUGF0aCIsImNyZWF0ZU1hdGVyaWFsIiwiQmxlbmRpbmdNb2RlIiwidGV4dHVyZUxvYWRlciIsIm1hdGVyaWFsTG9hZGVyIiwiZnVsbFBhdGgiLCJtYXBEaWZmdXNlUmVwZWF0IiwibWFwRGlmZnVzZU9mZnNldCIsIm1hcERpZmZ1c2VXcmFwIiwibWFwRGlmZnVzZUFuaXNvdHJvcHkiLCJtYXBFbWlzc2l2ZVJlcGVhdCIsIm1hcEVtaXNzaXZlT2Zmc2V0IiwibWFwRW1pc3NpdmVXcmFwIiwibWFwRW1pc3NpdmVBbmlzb3Ryb3B5IiwibWFwTGlnaHRSZXBlYXQiLCJtYXBMaWdodE9mZnNldCIsIm1hcExpZ2h0V3JhcCIsIm1hcExpZ2h0QW5pc290cm9weSIsIm1hcEFPUmVwZWF0IiwibWFwQU9PZmZzZXQiLCJtYXBBT1dyYXAiLCJtYXBBT0FuaXNvdHJvcHkiLCJtYXBCdW1wUmVwZWF0IiwibWFwQnVtcE9mZnNldCIsIm1hcEJ1bXBXcmFwIiwibWFwQnVtcEFuaXNvdHJvcHkiLCJtYXBOb3JtYWxSZXBlYXQiLCJtYXBOb3JtYWxPZmZzZXQiLCJtYXBOb3JtYWxXcmFwIiwibWFwTm9ybWFsQW5pc290cm9weSIsIm1hcFNwZWN1bGFyUmVwZWF0IiwibWFwU3BlY3VsYXJPZmZzZXQiLCJtYXBTcGVjdWxhcldyYXAiLCJtYXBTcGVjdWxhckFuaXNvdHJvcHkiLCJtYXBNZXRhbG5lc3NSZXBlYXQiLCJtYXBNZXRhbG5lc3NPZmZzZXQiLCJtYXBNZXRhbG5lc3NXcmFwIiwibWFwTWV0YWxuZXNzQW5pc290cm9weSIsIm1hcFJvdWdobmVzc1JlcGVhdCIsIm1hcFJvdWdobmVzc09mZnNldCIsIm1hcFJvdWdobmVzc1dyYXAiLCJtYXBSb3VnaG5lc3NBbmlzb3Ryb3B5IiwibWFwQWxwaGFSZXBlYXQiLCJtYXBBbHBoYU9mZnNldCIsIm1hcEFscGhhV3JhcCIsIm1hcEFscGhhQW5pc290cm9weSIsIkxvYWRlclV0aWxzIiwiZGVjb2RlVGV4dCIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwiZnJvbUNoYXJDb2RlIiwiZXNjYXBlIiwiZXh0cmFjdFVybEJhc2UiLCJsYXN0SW5kZXhPZiIsIkpTT05Mb2FkZXIiLCJPYmplY3RMb2FkZXIiLCJzZXRUZXh0dXJlUGF0aCIsImlzQml0U2V0IiwiZmkiLCJ6TGVuZ3RoIiwiY29sb3JJbmRleCIsIm5vcm1hbEluZGV4IiwidXZJbmRleCIsImlzUXVhZCIsImhhc01hdGVyaWFsIiwiZmFjZUEiLCJmYWNlQiIsInV2TGF5ZXIiLCJuVXZMYXllcnMiLCJwYXJzZU1vZGVsIiwiaW5mbHVlbmNlc1BlclZlcnRleCIsInBhcnNlU2tpbiIsImRzdFZlcnRpY2VzIiwic3JjVmVydGljZXMiLCJtb3JwaENvbG9ycyIsInBhcnNlTW9ycGhpbmciLCJvdXRwdXRBbmltYXRpb25zIiwibW9ycGhBbmltYXRpb25DbGlwcyIsInBhcnNlQW5pbWF0aW9ucyIsInN1YnN0cmluZyIsInBhcnNlU2hhcGUiLCJwYXJzZUdlb21ldHJpZXMiLCJwYXJzZUltYWdlcyIsInBhcnNlVGV4dHVyZXMiLCJwYXJzZU1hdGVyaWFscyIsInBhcnNlT2JqZWN0IiwiZ2VvbWV0cnlMb2FkZXIiLCJidWZmZXJHZW9tZXRyeUxvYWRlciIsImRldGFpbHMiLCJnZW9tZXRyeVNoYXBlcyIsImxvYWRJbWFnZSIsImN1cnJlbnRVcmwiLCJwYXJzZUNvbnN0YW50IiwiVEVYVFVSRV9NQVBQSU5HIiwiVEVYVFVSRV9XUkFQUElORyIsIlRFWFRVUkVfRklMVEVSIiwiZ2V0R2VvbWV0cnkiLCJnZXRNYXRlcmlhbCIsIkltYWdlQml0bWFwTG9hZGVyIiwiY3JlYXRlSW1hZ2VCaXRtYXAiLCJmZXRjaCIsIlNoYXBlUGF0aCIsInN1YlBhdGhzIiwiY3VycmVudFBhdGgiLCJGb250IiwiY3JlYXRlUGF0aCIsImNoYXIiLCJnbHlwaCIsImdseXBocyIsImNweCIsImNweSIsImNweDEiLCJjcHkxIiwiY3B4MiIsImNweTIiLCJvdXRsaW5lIiwiX2NhY2hlZE91dGxpbmUiLCJoYSIsIkZvbnRMb2FkZXIiLCJzZXRPcHRpb25zIiwicmVzIiwiYmxvYiIsImltYWdlQml0bWFwIiwiY2F0Y2giLCJ0b1NoYXBlcyIsImlzQ0NXIiwibm9Ib2xlcyIsInRvU2hhcGVzTm9Ib2xlcyIsImluU3VicGF0aHMiLCJ0bXBQYXRoIiwidG1wU2hhcGUiLCJpc1BvaW50SW5zaWRlUG9seWdvbiIsImluUG9seWdvbiIsInBvbHlMZW4iLCJlZGdlTG93UHQiLCJlZGdlSGlnaFB0IiwiZWRnZUR4IiwiZWRnZUR5IiwicGVycEVkZ2UiLCJzb2xpZCIsImhvbGVzRmlyc3QiLCJ0bXBQb2ludHMiLCJ0bXBIb2xlcyIsImJldHRlclNoYXBlSG9sZXMiLCJuZXdTaGFwZXMiLCJuZXdTaGFwZUhvbGVzIiwibWFpbklkeCIsImFtYmlndW91cyIsInRvQ2hhbmdlIiwic0lkeCIsInNMZW4iLCJzaG8iLCJoSWR4IiwiaG8iLCJob2xlX3VuYXNzaWduZWQiLCJzMklkeCIsImZyb21zIiwidG9zIiwicGF0aHMiLCJjaGFycyIsImxpbmVfaGVpZ2h0IiwieU1heCIsInlNaW4iLCJ1bmRlcmxpbmVUaGlja25lc3MiLCJyZXQiLCJjcmVhdGVQYXRocyIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsIkF1ZGlvTG9hZGVyIiwiU3RlcmVvQ2FtZXJhIiwiZXllU2VwIiwiQ3ViZUNhbWVyYSIsImN1YmVSZXNvbHV0aW9uIiwiY2FtZXJhUFgiLCJjYW1lcmFOWCIsImNhbWVyYVBZIiwiY2FtZXJhTlkiLCJjYW1lcmFQWiIsImNhbWVyYU5aIiwiQXVkaW9MaXN0ZW5lciIsImdhaW4iLCJjcmVhdGVHYWluIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwiQXVkaW8iLCJnZXRJbnB1dCIsImF1dG9wbGF5IiwibG9vcCIsInBsYXliYWNrUmF0ZSIsImlzUGxheWluZyIsImhhc1BsYXliYWNrQ29udHJvbCIsInNvdXJjZVR5cGUiLCJmaWx0ZXJzIiwiUG9zaXRpb25hbEF1ZGlvIiwicGFubmVyIiwiY3JlYXRlUGFubmVyIiwiQXVkaW9BbmFseXNlciIsImF1ZGlvIiwiZmZ0U2l6ZSIsImFuYWx5c2VyIiwiY3JlYXRlQW5hbHlzZXIiLCJmcmVxdWVuY3lCaW5Db3VudCIsImdldE91dHB1dCIsIlByb3BlcnR5TWl4ZXIiLCJiaW5kaW5nIiwibWl4RnVuY3Rpb24iLCJfc2xlcnAiLCJfc2VsZWN0IiwiX2xlcnAiLCJfbWl4QnVmZmVyUmVnaW9uIiwiY3VtdWxhdGl2ZVdlaWdodCIsInVzZUNvdW50IiwicmVmZXJlbmNlQ291bnQiLCJidWZmZXJDb3B5IiwiZGVjb2RlQXVkaW9EYXRhIiwiYXVkaW9CdWZmZXIiLCJpbnN0YW5jZSIsImV5ZVJpZ2h0IiwiZXllTGVmdCIsInhtaW4iLCJ4bWF4IiwiZXllU2VwT25Qcm9qZWN0aW9uIiwieW1heCIsInJlbW92ZUZpbHRlciIsImRpc2Nvbm5lY3QiLCJnZXRGaWx0ZXIiLCJzZXRGaWx0ZXIiLCJnZXRNYXN0ZXJWb2x1bWUiLCJzZXRNYXN0ZXJWb2x1bWUiLCJzZXRUYXJnZXRBdFRpbWUiLCJjdXJyZW50VGltZSIsInBvc2l0aW9uWCIsInNldFZhbHVlQXRUaW1lIiwicG9zaXRpb25ZIiwicG9zaXRpb25aIiwiZm9yd2FyZFgiLCJmb3J3YXJkWSIsImZvcndhcmRaIiwidXBYIiwidXBZIiwidXBaIiwic2V0T3JpZW50YXRpb24iLCJzZXROb2RlU291cmNlIiwiYXVkaW9Ob2RlIiwic2V0TWVkaWFFbGVtZW50U291cmNlIiwibWVkaWFFbGVtZW50IiwiY3JlYXRlTWVkaWFFbGVtZW50U291cmNlIiwic2V0QnVmZmVyIiwicGxheSIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsIm9uZW5kZWQiLCJvbkVuZGVkIiwicGF1c2UiLCJnZXRGaWx0ZXJzIiwic2V0RmlsdGVycyIsInNldFBsYXliYWNrUmF0ZSIsImdldFBsYXliYWNrUmF0ZSIsImdldExvb3AiLCJzZXRMb29wIiwiZ2V0Vm9sdW1lIiwic2V0Vm9sdW1lIiwiZ2V0UmVmRGlzdGFuY2UiLCJyZWZEaXN0YW5jZSIsInNldFJlZkRpc3RhbmNlIiwiZ2V0Um9sbG9mZkZhY3RvciIsInJvbGxvZmZGYWN0b3IiLCJzZXRSb2xsb2ZmRmFjdG9yIiwiZ2V0RGlzdGFuY2VNb2RlbCIsImRpc3RhbmNlTW9kZWwiLCJzZXREaXN0YW5jZU1vZGVsIiwiZ2V0TWF4RGlzdGFuY2UiLCJzZXRNYXhEaXN0YW5jZSIsInNldERpcmVjdGlvbmFsQ29uZSIsImNvbmVJbm5lckFuZ2xlIiwiY29uZU91dGVyQW5nbGUiLCJjb25lT3V0ZXJHYWluIiwiZ2V0RnJlcXVlbmN5RGF0YSIsImdldEJ5dGVGcmVxdWVuY3lEYXRhIiwiZ2V0QXZlcmFnZUZyZXF1ZW5jeSIsImFjY3VtdWxhdGUiLCJhY2N1SW5kZXgiLCJjdXJyZW50V2VpZ2h0IiwibWl4Iiwib3JpZ2luYWxWYWx1ZU9mZnNldCIsInNhdmVPcmlnaW5hbFN0YXRlIiwiZ2V0VmFsdWUiLCJyZXN0b3JlT3JpZ2luYWxTdGF0ZSIsImxpbmVHZW9tZXRyeSIsImNvbmVHZW9tZXRyeSIsIkNvbXBvc2l0ZSIsInRhcmdldEdyb3VwIiwib3B0aW9uYWxQYXJzZWRQYXRoIiwicGFyc2VkUGF0aCIsIlByb3BlcnR5QmluZGluZyIsInBhcnNlVHJhY2tOYW1lIiwiX3RhcmdldEdyb3VwIiwiX2JpbmRpbmdzIiwic3Vic2NyaWJlXyIsInJvb3ROb2RlIiwiZmluZE5vZGUiLCJub2RlTmFtZSIsIkFuaW1hdGlvbk9iamVjdEdyb3VwIiwibkNhY2hlZE9iamVjdHNfIiwiX2luZGljZXNCeVVVSUQiLCJfcGF0aHMiLCJfcGFyc2VkUGF0aHMiLCJfYmluZGluZ3NJbmRpY2VzQnlQYXRoIiwic3RhdHMiLCJ0b3RhbCIsImluVXNlIiwiYmluZGluZ3NQZXJPYmplY3QiLCJBbmltYXRpb25BY3Rpb24iLCJtaXhlciIsImxvY2FsUm9vdCIsIl9taXhlciIsIl9jbGlwIiwiX2xvY2FsUm9vdCIsIm5UcmFja3MiLCJpbnRlcnBvbGFudHMiLCJpbnRlcnBvbGFudFNldHRpbmdzIiwiaW50ZXJwb2xhbnQiLCJfaW50ZXJwb2xhbnRTZXR0aW5ncyIsIl9pbnRlcnBvbGFudHMiLCJfcHJvcGVydHlCaW5kaW5ncyIsIl9jYWNoZUluZGV4IiwiX2J5Q2xpcENhY2hlSW5kZXgiLCJfdGltZVNjYWxlSW50ZXJwb2xhbnQiLCJfd2VpZ2h0SW50ZXJwb2xhbnQiLCJfbG9vcENvdW50IiwiX3N0YXJ0VGltZSIsIl9lZmZlY3RpdmVUaW1lU2NhbGUiLCJfZWZmZWN0aXZlV2VpZ2h0IiwicmVwZXRpdGlvbnMiLCJwYXVzZWQiLCJjbGFtcFdoZW5GaW5pc2hlZCIsInplcm9TbG9wZUF0U3RhcnQiLCJ6ZXJvU2xvcGVBdEVuZCIsIkFuaW1hdGlvbk1peGVyIiwicm9vdCIsIl9yb290IiwiX2luaXRNZW1vcnlNYW5hZ2VyIiwiX2FjY3VJbmRleCIsIlVuaWZvcm0iLCJJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSIsIkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwiaW50ZXJsZWF2ZWRCdWZmZXIiLCJJbnRlcmxlYXZlZEJ1ZmZlciIsIkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwiSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlIiwiUmF5Y2FzdGVyIiwiUG9pbnRDbG91ZCIsImFzY1NvcnQiLCJpbnRlcnNlY3RPYmplY3QiLCJDbG9jayIsImF1dG9TdGFydCIsIm9sZFRpbWUiLCJlbGFwc2VkVGltZSIsInJ1bm5pbmciLCJDeWxpbmRyaWNhbCIsIkJveDIiLCJJbW1lZGlhdGVSZW5kZXJPYmplY3QiLCJWZXJ0ZXhOb3JtYWxzSGVscGVyIiwibk5vcm1hbHMiLCJvYmpHZW9tZXRyeSIsIlNwb3RMaWdodEhlbHBlciIsImNvbmUiLCJTa2VsZXRvbkhlbHBlciIsImdldEJvbmVMaXN0IiwiYm9uZUxpc3QiLCJQb2ludExpZ2h0SGVscGVyIiwic3BoZXJlU2l6ZSIsIlJlY3RBcmVhTGlnaHRIZWxwZXIiLCJIZW1pc3BoZXJlTGlnaHRIZWxwZXIiLCJHcmlkSGVscGVyIiwiUG9sYXJHcmlkSGVscGVyIiwicmFkaWFscyIsImNpcmNsZXMiLCJGYWNlTm9ybWFsc0hlbHBlciIsIkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIiLCJsaWdodFBsYW5lIiwidGFyZ2V0TGluZSIsIkNhbWVyYUhlbHBlciIsInBvaW50TWFwIiwiY29sb3JGcnVzdHVtIiwiY29sb3JDb25lIiwiY29sb3JVcCIsImNvbG9yVGFyZ2V0IiwiY29sb3JDcm9zcyIsImFkZExpbmUiLCJhZGRQb2ludCIsIkJveEhlbHBlciIsIkJveDNIZWxwZXIiLCJQbGFuZUhlbHBlciIsIkFycm93SGVscGVyIiwiaGVhZExlbmd0aCIsImhlYWRXaWR0aCIsInNldERpcmVjdGlvbiIsIkF4ZXNIZWxwZXIiLCJGYWNlNCIsImZpcnN0VmFsaWRJbmRleCIsImJpbmRpbmdzIiwidW5iaW5kIiwiaXNBbmltYXRpb25PYmplY3RHcm91cCIsInNhbml0aXplTm9kZU5hbWUiLCJyZXNlcnZlZFJlIiwiUmVnRXhwIiwid29yZENoYXIiLCJ3b3JkQ2hhck9yRG90IiwiZGlyZWN0b3J5UmUiLCJub2RlUmUiLCJvYmplY3RSZSIsInByb3BlcnR5UmUiLCJ0cmFja1JlIiwic3VwcG9ydGVkT2JqZWN0TmFtZXMiLCJtYXRjaGVzIiwicmVzdWx0cyIsIm9iamVjdE5hbWUiLCJvYmplY3RJbmRleCIsInByb3BlcnR5SW5kZXgiLCJsYXN0RG90Iiwic2VhcmNoTm9kZVN1YnRyZWUiLCJjaGlsZE5vZGUiLCJzdWJUcmVlTm9kZSIsIl9nZXRWYWx1ZV91bmF2YWlsYWJsZSIsIl9zZXRWYWx1ZV91bmF2YWlsYWJsZSIsIkJpbmRpbmdUeXBlIiwiRGlyZWN0IiwiRW50aXJlQXJyYXkiLCJBcnJheUVsZW1lbnQiLCJIYXNGcm9tVG9BcnJheSIsIlZlcnNpb25pbmciLCJOb25lIiwiTmVlZHNVcGRhdGUiLCJNYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwiR2V0dGVyQnlCaW5kaW5nVHlwZSIsInJlc29sdmVkUHJvcGVydHkiLCJTZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZyIsInRhcmdldE9iamVjdCIsImRlc3QiLCJ0YXJnZXRBcnJheSIsInNvdXJjZUFycmF5Iiwibm9kZVByb3BlcnR5IiwidmVyc2lvbmluZyIsImJpbmRpbmdUeXBlIiwiX2dldFZhbHVlX3VuYm91bmQiLCJfc2V0VmFsdWVfdW5ib3VuZCIsIm5PYmplY3RzIiwibkNhY2hlZE9iamVjdHMiLCJpbmRpY2VzQnlVVUlEIiwicGFyc2VkUGF0aHMiLCJuQmluZGluZ3MiLCJrbm93bk9iamVjdCIsImZpcnN0QWN0aXZlSW5kZXgiLCJsYXN0Q2FjaGVkT2JqZWN0IiwiYmluZGluZ3NGb3JQYXRoIiwibGFzdENhY2hlZCIsImxhc3RDYWNoZWRJbmRleCIsImZpcnN0QWN0aXZlT2JqZWN0IiwiZmlyc3RBY3RpdmUiLCJ1bmNhY2hlIiwibGFzdE9iamVjdCIsImluZGljZXNCeVBhdGgiLCJ1bnN1YnNjcmliZV8iLCJsYXN0QmluZGluZ3NJbmRleCIsImxhc3RCaW5kaW5ncyIsIl9hY3RpdmF0ZUFjdGlvbiIsIl9kZWFjdGl2YXRlQWN0aW9uIiwic3RvcEZhZGluZyIsInN0b3BXYXJwaW5nIiwiaXNSdW5uaW5nIiwiX2lzQWN0aXZlQWN0aW9uIiwiaXNTY2hlZHVsZWQiLCJzdGFydEF0Iiwic2V0RWZmZWN0aXZlV2VpZ2h0IiwiZ2V0RWZmZWN0aXZlV2VpZ2h0IiwiZmFkZUluIiwiX3NjaGVkdWxlRmFkaW5nIiwiZmFkZU91dCIsImNyb3NzRmFkZUZyb20iLCJmYWRlT3V0QWN0aW9uIiwid2FycCIsImZhZGVJbkR1cmF0aW9uIiwiZmFkZU91dER1cmF0aW9uIiwic3RhcnRFbmRSYXRpbyIsImVuZFN0YXJ0UmF0aW8iLCJjcm9zc0ZhZGVUbyIsImZhZGVJbkFjdGlvbiIsIndlaWdodEludGVycG9sYW50IiwiX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50Iiwic2V0RWZmZWN0aXZlVGltZVNjYWxlIiwiZ2V0RWZmZWN0aXZlVGltZVNjYWxlIiwic2V0RHVyYXRpb24iLCJzeW5jV2l0aCIsImFjdGlvbiIsImhhbHQiLCJzdGFydFRpbWVTY2FsZSIsImVuZFRpbWVTY2FsZSIsIm5vdyIsIl9sZW5kQ29udHJvbEludGVycG9sYW50IiwidGltZVNjYWxlSW50ZXJwb2xhbnQiLCJnZXRNaXhlciIsImdldENsaXAiLCJnZXRSb290IiwiX3VwZGF0ZSIsImRlbHRhVGltZSIsInRpbWVEaXJlY3Rpb24iLCJ0aW1lUnVubmluZyIsIl91cGRhdGVUaW1lU2NhbGUiLCJjbGlwVGltZSIsIl91cGRhdGVUaW1lIiwiX3VwZGF0ZVdlaWdodCIsInByb3BlcnR5TWl4ZXJzIiwiaW50ZXJwb2xhbnRWYWx1ZSIsImxvb3BDb3VudCIsIl9zZXRFbmRpbmdzIiwiaGFuZGxlX3N0b3AiLCJwaW5nUG9uZyIsImxvb3BEZWx0YSIsInBlbmRpbmciLCJhdFN0YXJ0IiwiYXRFbmQiLCJ3ZWlnaHROb3ciLCJ3ZWlnaHRUaGVuIiwiX2JpbmRBY3Rpb24iLCJwcm90b3R5cGVBY3Rpb24iLCJyb290VXVpZCIsImJpbmRpbmdzQnlSb290IiwiX2JpbmRpbmdzQnlSb290QW5kTmFtZSIsImJpbmRpbmdzQnlOYW1lIiwiX2FkZEluYWN0aXZlQmluZGluZyIsImNsaXBVdWlkIiwiYWN0aW9uc0ZvckNsaXAiLCJfYWN0aW9uc0J5Q2xpcCIsImtub3duQWN0aW9ucyIsIl9hZGRJbmFjdGl2ZUFjdGlvbiIsIl9sZW5kQmluZGluZyIsIl9sZW5kQWN0aW9uIiwiX3Rha2VCYWNrQmluZGluZyIsIl90YWtlQmFja0FjdGlvbiIsIl9hY3Rpb25zIiwiX25BY3RpdmVBY3Rpb25zIiwiX25BY3RpdmVCaW5kaW5ncyIsIl9jb250cm9sSW50ZXJwb2xhbnRzIiwiX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzIiwiYWN0aW9ucyIsImNvbnRyb2xJbnRlcnBvbGFudHMiLCJhY3Rpb25zQnlDbGlwIiwiYWN0aW9uQnlSb290IiwiX3JlbW92ZUluYWN0aXZlQWN0aW9uIiwibGFzdEluYWN0aXZlQWN0aW9uIiwiY2FjaGVJbmRleCIsImtub3duQWN0aW9uc0ZvckNsaXAiLCJsYXN0S25vd25BY3Rpb24iLCJieUNsaXBDYWNoZUluZGV4IiwiX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24iLCJfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nIiwicHJldkluZGV4IiwibGFzdEFjdGl2ZUluZGV4IiwiZmlyc3RJbmFjdGl2ZUFjdGlvbiIsImZpcnN0SW5hY3RpdmVJbmRleCIsImxhc3RBY3RpdmVBY3Rpb24iLCJiaW5kaW5nQnlOYW1lIiwicHJvcEJpbmRpbmciLCJsYXN0SW5hY3RpdmVCaW5kaW5nIiwicmVtb3ZlX2VtcHR5X21hcCIsIl8iLCJmaXJzdEluYWN0aXZlQmluZGluZyIsImxhc3RBY3RpdmVCaW5kaW5nIiwiX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIiLCJfX2NhY2hlSW5kZXgiLCJsYXN0QWN0aXZlSW50ZXJwb2xhbnQiLCJjbGlwQWN0aW9uIiwib3B0aW9uYWxSb290IiwiY2xpcE9iamVjdCIsImV4aXN0aW5nQWN0aW9uIiwibmV3QWN0aW9uIiwic3RvcEFsbEFjdGlvbiIsIm5BY3Rpb25zIiwidW5jYWNoZUNsaXAiLCJhY3Rpb25zVG9SZW1vdmUiLCJ1bmNhY2hlUm9vdCIsInVuY2FjaGVBY3Rpb24iLCJpc0ludGVybGVhdmVkQnVmZmVyIiwic2V0RnJvbUNhbWVyYSIsImNvb3JkcyIsImludGVyc2VjdE9iamVjdHMiLCJwZXJmb3JtYW5jZSIsIkRhdGUiLCJnZXRFbGFwc2VkVGltZSIsImdldERlbHRhIiwibmV3VGltZSIsIm90aGVyIiwidmVjMyIsIm9ialBvcyIsIm9iak5vcm0iLCJjb25lTGVuZ3RoIiwiY29uZVdpZHRoIiwiYm9uZU1hdHJpeCIsIm1hdHJpeFdvcmxkSW52Iiwic2V0UG9pbnQiLCJzZXRDb2xvciIsIkxpbmVTdHJpcCIsIkxpbmVQaWVjZXMiLCJNZXNoRmFjZU1hdGVyaWFsIiwiTXVsdGlNYXRlcmlhbCIsIlBhcnRpY2xlIiwiUGFydGljbGVTeXN0ZW0iLCJQb2ludENsb3VkTWF0ZXJpYWwiLCJQYXJ0aWNsZUJhc2ljTWF0ZXJpYWwiLCJQYXJ0aWNsZVN5c3RlbU1hdGVyaWFsIiwiVmVydGV4IiwiRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSIsIkludDhBdHRyaWJ1dGUiLCJVaW50OEF0dHJpYnV0ZSIsIlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSIsIkludDE2QXR0cmlidXRlIiwiVWludDE2QXR0cmlidXRlIiwiSW50MzJBdHRyaWJ1dGUiLCJVaW50MzJBdHRyaWJ1dGUiLCJGbG9hdDMyQXR0cmlidXRlIiwiRmxvYXQ2NEF0dHJpYnV0ZSIsIkNsb3NlZFNwbGluZUN1cnZlMyIsIlNwbGluZUN1cnZlMyIsIlNwbGluZSIsIkF4aXNIZWxwZXIiLCJCb3VuZGluZ0JveEhlbHBlciIsIkVkZ2VzSGVscGVyIiwiV2lyZWZyYW1lSGVscGVyIiwiWEhSTG9hZGVyIiwiQmluYXJ5VGV4dHVyZUxvYWRlciIsImNvbnN0cnVjdCIsImNyZWF0ZVBvaW50c0dlb21ldHJ5IiwiY3JlYXRlR2VvbWV0cnkiLCJjcmVhdGVTcGFjZWRQb2ludHNHZW9tZXRyeSIsImZyb21Qb2ludHMiLCJpbml0RnJvbUFycmF5IiwiZ2V0Q29udHJvbFBvaW50c0FycmF5IiwicmVwYXJhbWV0cml6ZUJ5QXJjTGVuZ3RoIiwic2V0Q29sb3JzIiwiaXNJbnRlcnNlY3Rpb25Cb3giLCJpc0ludGVyc2VjdGlvblNwaGVyZSIsInJhbmRvbTE2IiwibmVhcmVzdFBvd2VyT2ZUd28iLCJuZXh0UG93ZXJPZlR3byIsImZsYXR0ZW5Ub0FycmF5T2Zmc2V0IiwibXVsdGlwbHlWZWN0b3IzIiwibXVsdGlwbHlWZWN0b3IzQXJyYXkiLCJhcHBseVRvQnVmZmVyIiwiYXBwbHlUb1ZlY3RvcjNBcnJheSIsImV4dHJhY3RQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwibXVsdGlwbHlUb0FycmF5IiwibXVsdGlwbHlWZWN0b3I0Iiwicm90YXRlQXhpcyIsImNyb3NzVmVjdG9yIiwicm90YXRlQnlBeGlzIiwibWFrZUZydXN0dW0iLCJpc0ludGVyc2VjdGlvbkxpbmUiLCJpc0ludGVyc2VjdGlvblBsYW5lIiwiYmFyeWNvb3JkRnJvbVBvaW50IiwibWlkcG9pbnQiLCJleHRyYWN0QWxsUG9pbnRzIiwiZXh0cnVkZSIsIm1ha2VHZW9tZXRyeSIsImZyb21BdHRyaWJ1dGUiLCJkaXN0YW5jZVRvTWFuaGF0dGFuIiwibGVuZ3RoTWFuaGF0dGFuIiwic2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgiLCJzZXRFdWxlckZyb21RdWF0ZXJuaW9uIiwiZ2V0UG9zaXRpb25Gcm9tTWF0cml4IiwiZ2V0U2NhbGVGcm9tTWF0cml4IiwiZ2V0Q29sdW1uRnJvbU1hdHJpeCIsImFwcGx5UHJvamVjdGlvbiIsImNvbXB1dGVUYW5nZW50cyIsImdldENoaWxkQnlOYW1lIiwicmVuZGVyRGVwdGgiLCJnZXRXb3JsZFJvdGF0aW9uIiwiZXVsZXJPcmRlciIsInVzZVF1YXRlcm5pb24iLCJzZXRMZW5zIiwib25seVNoYWRvdyIsInNoYWRvd0NhbWVyYUZvdiIsInNoYWRvd0NhbWVyYUxlZnQiLCJzaGFkb3dDYW1lcmFSaWdodCIsInNoYWRvd0NhbWVyYVRvcCIsInNoYWRvd0NhbWVyYUJvdHRvbSIsInNoYWRvd0NhbWVyYVZpc2libGUiLCJzaGFkb3dEYXJrbmVzcyIsInNoYWRvd01hcFdpZHRoIiwic2hhZG93TWFwSGVpZ2h0IiwiY29weUluZGljZXNBcnJheSIsImFkZEluZGV4IiwiYWRkRHJhd0NhbGwiLCJjbGVhckRyYXdDYWxscyIsImNvbXB1dGVPZmZzZXRzIiwiZ2V0QXJyYXlzIiwiYWRkU2hhcGVMaXN0Iiwid3JhcEFyb3VuZCIsIndyYXBSR0IiLCJtZXRhbCIsImFuaW1hdGUiLCJnZXRDdXJyZW50UmVuZGVyVGFyZ2V0IiwiZ2V0UHJlY2lzaW9uIiwicmVzZXRHTFN0YXRlIiwic3VwcG9ydHNGbG9hdFRleHR1cmVzIiwic3VwcG9ydHNIYWxmRmxvYXRUZXh0dXJlcyIsInN1cHBvcnRzU3RhbmRhcmREZXJpdmF0aXZlcyIsInN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDIiwic3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDIiwic3VwcG9ydHNCbGVuZE1pbk1heCIsInN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzIiwiZW5hYmxlU2Npc3NvclRlc3QiLCJhZGRQcmVQbHVnaW4iLCJhZGRQb3N0UGx1Z2luIiwidXBkYXRlU2hhZG93TWFwIiwic2V0RmFjZUN1bGxpbmciLCJzaGFkb3dNYXBDdWxsRmFjZSIsInJlbmRlclJldmVyc2VTaWRlZCIsInJlbmRlclNpbmdsZVNpZGVkIiwic3RhbmRpbmciLCJnZXREYXRhIiwidXBkYXRlQ3ViZU1hcCIsIkdlb21ldHJ5VXRpbHMiLCJnZW9tZXRyeTEiLCJJbWFnZVV0aWxzIiwibG9hZFRleHR1cmVDdWJlIiwibG9hZENvbXByZXNzZWRUZXh0dXJlIiwibG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSIsIlByb2plY3RvciIsInByb2plY3RWZWN0b3IiLCJ1bnByb2plY3RWZWN0b3IiLCJwaWNraW5nUmF5IiwiQ2FudmFzUmVuZGVyZXIiLCJTY2VuZVV0aWxzIiwiY3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdCIsImRldGFjaCIsImF0dGFjaCIsIkxlbnNGbGFyZSIsIl9zY2VuZU5hbWUiLCJfY2FtZXJhIiwiX2luc3RhbmNlIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiYXBwZW5kQ2hpbGQiLCJfcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImdldFJlbmRlcmVyIiwiZ2V0TmFtZSIsInNldE5hbWUiLCJzY2VuZU5hbWUiLCJ0aHJlZV9tb2R1bGVfbmFtZXNwYWNlT2JqZWN0IiwiX2RvbUVsZW1lbnQiLCJJbnB1dCIsIl9hIiwiZGVmYXVsdFZhbHVlIiwiX25hbWUiLCJfcGxhY2Vob2xkZXIiLCJfZGVmYXVsdFZhbHVlIiwiX3N0eWxlIiwiX29uQ2hhbmdlIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUNoaWxkIiwiX2VkaXRvclNjZW5lIiwiX2VkaXRvckdyaWQiLCJyZW5kZXJTY2VuZU5hbWVJbnB1dCIsInJlbmRlckdyaWRJbnB1dHMiLCJfc2NlbmVOYW1lSW5wdXQiLCJpbnB1dCIsIl9ncmlkV2lkdGhJbnB1dCIsImdldFdpZHRoIiwic2V0V2lkdGgiLCJfZ3JpZERlcHRoSW5wdXQiLCJnZXREZXB0aCIsInNldERlcHRoIiwiX3NjZW5lIiwiX29uUmF5Y2FzdCIsIl9yYXljYXN0ZXIiLCJfbW91c2UiLCJERUZBVUxUX0NPTE9SIiwiX2dyaWRDb2xvciIsIl9saW5lV2lkdGgiLCJfbGluZURlcHRoIiwiX2dyaWQiLCJfbW91c2VSYXljYXN0IiwibW91c2VfcmF5Y2FzdCIsIm9uUmF5Y2FzdCIsImdlbmVyYXRlR3JpZCIsImNsZWFudXAiLCJnZXRHcmlkIiwiZ2VuZXJhdGVVbml0IiwiaW50ZXJzZWN0aW9ucyIsIl9wcmV2aW91c0ludGVyc2VjdGlvbnMiLCJfY29udHJvbHMiLCJvcmJpdF9jb250cm9sIiwiZWRpdG9yX2dyaWQiLCJfZWRpdG9yVG9vbGJhciIsImVkaXRvcl90b29sYmFyIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixF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SUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsSUFDQUMsRUFBQSxJQUNBQyxFQUFBLElBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxLQUNBQyxHQUFBSCxHQUNBSSxHQUFBLEtBQ0FDLEdBQUEsS0FDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdBQUEsTUFDQUMsR0FBQSxNQUNBQyxHQUFBLE1BQ0FDLEdB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UUFBQUMsUUFBQSxRQUFBQyxXQUFBLFFBQUFDLFVBQUEsU0FDQUMsWUFBQSxTQUFBQyxZQUFBLFFBQUFDLFFBQUEsU0FBQUMsVUFBQSxTQUFBQyxXQUFBLFNBQUFDLEtBQUEsU0FDQUMsVUFBQSxTQUFBQyxLQUFBLFFBQUFDLE1BQUEsTUFBQUMsWUFBQSxTQUFBQyxLQUFBLFFBQUFDLFNBQUEsU0FBQUMsUUFBQSxTQUNBQyxVQUFBLFNBQUFDLE9BQUEsUUFBQUMsTUFBQSxTQUFBQyxNQUFBLFNBQUFDLFNBQUEsU0FBQUMsY0FBQSxTQUFBQyxVQUFBLFFBQ0FDLGFBQUEsU0FBQUMsVUFBQSxTQUFBQyxXQUFBLFNBQUFDLFVBQUEsU0FBQUMscUJBQUEsU0FBQUMsVUFBQSxTQUNBQyxXQUFBLFFBQUFDLFVBQUEsU0FBQUMsVUFBQSxTQUFBQyxZQUFBLFNBQUFDLGNBQUEsUUFBQUMsYUFBQSxRQUNBQyxlQUFBLFFBQUFDLGVBQUEsUUFBQUMsZUFBQSxTQUFBQyxZQUFBLFNBQUFDLEtBQUEsTUFBQUMsVUFBQSxRQUNBQyxNQUFBLFNBQUFDLFFBQUEsU0FBQUMsT0FBQSxRQUFBQyxpQkFBQSxRQUFBQyxXQUFBLElBQUFDLGFBQUEsU0FDQUMsYUFBQSxRQUFBQyxlQUFBLFFBQUFDLGdCQUFBLFFBQUFDLGtCQUFBLE1BQUFDLGdCQUFBLFFBQ0FDLGdCQUFBLFNBQUFDLGFBQUEsUUFBQUMsVUFBQSxTQUFBQyxVQUFBLFNBQUFDLFNBQUEsU0FBQUMsWUFBQSxTQUNBQyxLQUFBLElBQUFDLFFBQUEsU0FBQUMsTUFBQSxRQUFBQyxVQUFBLFFBQUFDLE9BQUEsU0FBQUMsVUFBQSxTQUFBQyxPQUFBLFNBQ0FDLGNBQUEsU0FBQUMsVUFBQSxTQUFBQyxjQUFBLFNBQUFDLGNBQUEsU0FBQUMsV0FBQSxTQUFBQyxVQUFBLFNBQ0FDLEtBQUEsU0FBQUMsS0FBQSxTQUFBQyxLQUFBLFNBQUFDLFdBQUEsU0FBQUMsT0FBQSxRQUFBQyxjQUFBLFFBQUFDLElBQUEsU0FBQUMsVUFBQSxTQUNBQyxVQUFBLFFBQUFDLFlBQUEsUUFB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RCxFQUFLMjRELGVBQWlCLElBQUlDLEdBQWM1NEQsRUFBS3MzRCxPQUFRdDNELEVBQUsyMkQsYUFFMUQzMkQsRUFBS2g1RSxVQUdQeEQsS0FBQXdELE9BQVMsV0FDUGc1RSxFQUFLdTFELHlCQUEyQjVySSxPQUFPMHRDLHNCQUFzQjJvQyxFQUFLaDVFLFNBR3BFeEQsS0FBQTRnRSxRQUFVLFdBQ1J6NkQsT0FBTzZySSxxQkFBcUJ4MUQsRUFBS3UxRCwyQkF6QmpDL3hJLEtBQUtnNEIsU0FaVCIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBUSFJFRSApIHtcblx0LyoqXG5cdCAqIEBhdXRob3IgcWlhbyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9xaWFvXG5cdCAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb21cblx0ICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cblx0ICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG5cdCAqIEBhdXRob3IgZXJpY2g2NjYgLyBodHRwOi8vZXJpY2hhaW5lcy5jb21cblx0ICovXG5cbi8vIFRoaXMgc2V0IG9mIGNvbnRyb2xzIHBlcmZvcm1zIG9yYml0aW5nLCBkb2xseWluZyAoem9vbWluZyksIGFuZCBwYW5uaW5nLlxuLy8gVW5saWtlIFRyYWNrYmFsbENvbnRyb2xzLCBpdCBtYWludGFpbnMgdGhlIFwidXBcIiBkaXJlY3Rpb24gb2JqZWN0LnVwICgrWSBieSBkZWZhdWx0KS5cbi8vXG4vLyAgICBPcmJpdCAtIGxlZnQgbW91c2UgLyB0b3VjaDogb25lIGZpbmdlciBtb3ZlXG4vLyAgICBab29tIC0gbWlkZGxlIG1vdXNlLCBvciBtb3VzZXdoZWVsIC8gdG91Y2g6IHR3byBmaW5nZXIgc3ByZWFkIG9yIHNxdWlzaFxuLy8gICAgUGFuIC0gcmlnaHQgbW91c2UsIG9yIGFycm93IGtleXMgLyB0b3VjaDogdGhyZWUgZmludGVyIHN3aXBlXG5cblx0ZnVuY3Rpb24gT3JiaXRDb250cm9scyggb2JqZWN0LCBkb21FbGVtZW50ICkge1xuXG5cdFx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQgPSAoIGRvbUVsZW1lbnQgIT09IHVuZGVmaW5lZCApID8gZG9tRWxlbWVudCA6IGRvY3VtZW50O1xuXG5cdFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgdGhpcyBjb250cm9sXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHRcdC8vIFwidGFyZ2V0XCIgc2V0cyB0aGUgbG9jYXRpb24gb2YgZm9jdXMsIHdoZXJlIHRoZSBvYmplY3Qgb3JiaXRzIGFyb3VuZFxuXHRcdHRoaXMudGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdC8vIEhvdyBmYXIgeW91IGNhbiBkb2xseSBpbiBhbmQgb3V0ICggUGVyc3BlY3RpdmVDYW1lcmEgb25seSApXG5cdFx0dGhpcy5taW5EaXN0YW5jZSA9IDA7XG5cdFx0dGhpcy5tYXhEaXN0YW5jZSA9IEluZmluaXR5O1xuXG5cdFx0Ly8gSG93IGZhciB5b3UgY2FuIHpvb20gaW4gYW5kIG91dCAoIE9ydGhvZ3JhcGhpY0NhbWVyYSBvbmx5IClcblx0XHR0aGlzLm1pblpvb20gPSAwO1xuXHRcdHRoaXMubWF4Wm9vbSA9IEluZmluaXR5O1xuXG5cdFx0Ly8gSG93IGZhciB5b3UgY2FuIG9yYml0IHZlcnRpY2FsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXG5cdFx0Ly8gUmFuZ2UgaXMgMCB0byBNYXRoLlBJIHJhZGlhbnMuXG5cdFx0dGhpcy5taW5Qb2xhckFuZ2xlID0gMDsgLy8gcmFkaWFuc1xuXHRcdHRoaXMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7IC8vIHJhZGlhbnNcblxuXHRcdC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCBob3Jpem9udGFsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXG5cdFx0Ly8gSWYgc2V0LCBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIHRoZSBpbnRlcnZhbCBbIC0gTWF0aC5QSSwgTWF0aC5QSSBdLlxuXHRcdHRoaXMubWluQXppbXV0aEFuZ2xlID0gLSBJbmZpbml0eTsgLy8gcmFkaWFuc1xuXHRcdHRoaXMubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7IC8vIHJhZGlhbnNcblxuXHRcdC8vIFNldCB0byB0cnVlIHRvIGVuYWJsZSBkYW1waW5nIChpbmVydGlhKVxuXHRcdC8vIElmIGRhbXBpbmcgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXG5cdFx0dGhpcy5lbmFibGVEYW1waW5nID0gZmFsc2U7XG5cdFx0dGhpcy5kYW1waW5nRmFjdG9yID0gMC4yNTtcblxuXHRcdC8vIFRoaXMgb3B0aW9uIGFjdHVhbGx5IGVuYWJsZXMgZG9sbHlpbmcgaW4gYW5kIG91dDsgbGVmdCBhcyBcInpvb21cIiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cdFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgem9vbWluZ1xuXHRcdHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XG5cdFx0dGhpcy56b29tU3BlZWQgPSAxLjA7XG5cblx0XHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSByb3RhdGluZ1xuXHRcdHRoaXMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcblx0XHR0aGlzLnJvdGF0ZVNwZWVkID0gMS4wO1xuXG5cdFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcGFubmluZ1xuXHRcdHRoaXMuZW5hYmxlUGFuID0gdHJ1ZTtcblx0XHR0aGlzLmtleVBhblNwZWVkID0gNy4wO1x0Ly8gcGl4ZWxzIG1vdmVkIHBlciBhcnJvdyBrZXkgcHVzaFxuXG5cdFx0Ly8gU2V0IHRvIHRydWUgdG8gYXV0b21hdGljYWxseSByb3RhdGUgYXJvdW5kIHRoZSB0YXJnZXRcblx0XHQvLyBJZiBhdXRvLXJvdGF0ZSBpcyBlbmFibGVkLCB5b3UgbXVzdCBjYWxsIGNvbnRyb2xzLnVwZGF0ZSgpIGluIHlvdXIgYW5pbWF0aW9uIGxvb3Bcblx0XHR0aGlzLmF1dG9Sb3RhdGUgPSBmYWxzZTtcblx0XHR0aGlzLmF1dG9Sb3RhdGVTcGVlZCA9IDIuMDsgLy8gMzAgc2Vjb25kcyBwZXIgcm91bmQgd2hlbiBmcHMgaXMgNjBcblxuXHRcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHVzZSBvZiB0aGUga2V5c1xuXHRcdHRoaXMuZW5hYmxlS2V5cyA9IHRydWU7XG5cblx0XHQvLyBUaGUgZm91ciBhcnJvdyBrZXlzXG5cdFx0dGhpcy5rZXlzID0geyBMRUZUOiAzNywgVVA6IDM4LCBSSUdIVDogMzksIEJPVFRPTTogNDAgfTtcblxuXHRcdC8vIE1vdXNlIGJ1dHRvbnNcblx0XHR0aGlzLm1vdXNlQnV0dG9ucyA9IHsgT1JCSVQ6IFRIUkVFLk1PVVNFLkxFRlQsIFpPT006IFRIUkVFLk1PVVNFLk1JRERMRSwgUEFOOiBUSFJFRS5NT1VTRS5SSUdIVCB9O1xuXG5cdFx0Ly8gZm9yIHJlc2V0XG5cdFx0dGhpcy50YXJnZXQwID0gdGhpcy50YXJnZXQuY2xvbmUoKTtcblx0XHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XG5cdFx0dGhpcy56b29tMCA9IHRoaXMub2JqZWN0Lnpvb207XG5cblx0XHQvL1xuXHRcdC8vIHB1YmxpYyBtZXRob2RzXG5cdFx0Ly9cblxuXHRcdHRoaXMuZ2V0UG9sYXJBbmdsZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHNwaGVyaWNhbC5waGk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRBemltdXRoYWxBbmdsZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHNwaGVyaWNhbC50aGV0YTtcblxuXHRcdH07XG5cblx0XHR0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRzY29wZS50YXJnZXQuY29weSggc2NvcGUudGFyZ2V0MCApO1xuXHRcdFx0c2NvcGUub2JqZWN0LnBvc2l0aW9uLmNvcHkoIHNjb3BlLnBvc2l0aW9uMCApO1xuXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBzY29wZS56b29tMDtcblxuXHRcdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIGNoYW5nZUV2ZW50ICk7XG5cblx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHR9O1xuXG5cdFx0Ly8gdGhpcyBtZXRob2QgaXMgZXhwb3NlZCwgYnV0IHBlcmhhcHMgaXQgd291bGQgYmUgYmV0dGVyIGlmIHdlIGNhbiBtYWtlIGl0IHByaXZhdGUuLi5cblx0XHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdFx0Ly8gc28gY2FtZXJhLnVwIGlzIHRoZSBvcmJpdCBheGlzXG5cdFx0XHR2YXIgcXVhdCA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbVVuaXRWZWN0b3JzKCBvYmplY3QudXAsIG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAxLCAwICkgKTtcblx0XHRcdHZhciBxdWF0SW52ZXJzZSA9IHF1YXQuY2xvbmUoKS5pbnZlcnNlKCk7XG5cblx0XHRcdHZhciBsYXN0UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXHRcdFx0dmFyIGxhc3RRdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG5cblx0XHRcdFx0dmFyIHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xuXG5cdFx0XHRcdG9mZnNldC5jb3B5KCBwb3NpdGlvbiApLnN1Yiggc2NvcGUudGFyZ2V0ICk7XG5cblx0XHRcdFx0Ly8gcm90YXRlIG9mZnNldCB0byBcInktYXhpcy1pcy11cFwiIHNwYWNlXG5cdFx0XHRcdG9mZnNldC5hcHBseVF1YXRlcm5pb24oIHF1YXQgKTtcblxuXHRcdFx0XHQvLyBhbmdsZSBmcm9tIHotYXhpcyBhcm91bmQgeS1heGlzXG5cdFx0XHRcdHNwaGVyaWNhbC5zZXRGcm9tVmVjdG9yMyggb2Zmc2V0ICk7XG5cblx0XHRcdFx0aWYgKCBzY29wZS5hdXRvUm90YXRlICYmIHN0YXRlID09PSBTVEFURS5OT05FICkge1xuXG5cdFx0XHRcdFx0cm90YXRlTGVmdCggZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcGhlcmljYWwudGhldGEgKz0gc3BoZXJpY2FsRGVsdGEudGhldGE7XG5cdFx0XHRcdHNwaGVyaWNhbC5waGkgKz0gc3BoZXJpY2FsRGVsdGEucGhpO1xuXG5cdFx0XHRcdC8vIHJlc3RyaWN0IHRoZXRhIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcblx0XHRcdFx0c3BoZXJpY2FsLnRoZXRhID0gTWF0aC5tYXgoIHNjb3BlLm1pbkF6aW11dGhBbmdsZSwgTWF0aC5taW4oIHNjb3BlLm1heEF6aW11dGhBbmdsZSwgc3BoZXJpY2FsLnRoZXRhICkgKTtcblxuXHRcdFx0XHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xuXHRcdFx0XHRzcGhlcmljYWwucGhpID0gTWF0aC5tYXgoIHNjb3BlLm1pblBvbGFyQW5nbGUsIE1hdGgubWluKCBzY29wZS5tYXhQb2xhckFuZ2xlLCBzcGhlcmljYWwucGhpICkgKTtcblxuXHRcdFx0XHRzcGhlcmljYWwubWFrZVNhZmUoKTtcblxuXG5cdFx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgKj0gc2NhbGU7XG5cblx0XHRcdFx0Ly8gcmVzdHJpY3QgcmFkaXVzIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcblx0XHRcdFx0c3BoZXJpY2FsLnJhZGl1cyA9IE1hdGgubWF4KCBzY29wZS5taW5EaXN0YW5jZSwgTWF0aC5taW4oIHNjb3BlLm1heERpc3RhbmNlLCBzcGhlcmljYWwucmFkaXVzICkgKTtcblxuXHRcdFx0XHQvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cblx0XHRcdFx0c2NvcGUudGFyZ2V0LmFkZCggcGFuT2Zmc2V0ICk7XG5cblx0XHRcdFx0b2Zmc2V0LnNldEZyb21TcGhlcmljYWwoIHNwaGVyaWNhbCApO1xuXG5cdFx0XHRcdC8vIHJvdGF0ZSBvZmZzZXQgYmFjayB0byBcImNhbWVyYS11cC12ZWN0b3ItaXMtdXBcIiBzcGFjZVxuXHRcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0SW52ZXJzZSApO1xuXG5cdFx0XHRcdHBvc2l0aW9uLmNvcHkoIHNjb3BlLnRhcmdldCApLmFkZCggb2Zmc2V0ICk7XG5cblx0XHRcdFx0c2NvcGUub2JqZWN0Lmxvb2tBdCggc2NvcGUudGFyZ2V0ICk7XG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVEYW1waW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0c3BoZXJpY2FsRGVsdGEudGhldGEgKj0gKCAxIC0gc2NvcGUuZGFtcGluZ0ZhY3RvciApO1xuXHRcdFx0XHRcdHNwaGVyaWNhbERlbHRhLnBoaSAqPSAoIDEgLSBzY29wZS5kYW1waW5nRmFjdG9yICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNwaGVyaWNhbERlbHRhLnNldCggMCwgMCwgMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY2FsZSA9IDE7XG5cdFx0XHRcdHBhbk9mZnNldC5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdFx0XHQvLyB1cGRhdGUgY29uZGl0aW9uIGlzOlxuXHRcdFx0XHQvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcblx0XHRcdFx0Ly8gdXNpbmcgc21hbGwtYW5nbGUgYXBwcm94aW1hdGlvbiBjb3MoeC8yKSA9IDEgLSB4XjIgLyA4XG5cblx0XHRcdFx0aWYgKCB6b29tQ2hhbmdlZCB8fFxuXHRcdFx0XHRcdGxhc3RQb3NpdGlvbi5kaXN0YW5jZVRvU3F1YXJlZCggc2NvcGUub2JqZWN0LnBvc2l0aW9uICkgPiBFUFMgfHxcblx0XHRcdFx0XHQ4ICogKCAxIC0gbGFzdFF1YXRlcm5pb24uZG90KCBzY29wZS5vYmplY3QucXVhdGVybmlvbiApICkgPiBFUFMgKSB7XG5cblx0XHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBjaGFuZ2VFdmVudCApO1xuXG5cdFx0XHRcdFx0bGFzdFBvc2l0aW9uLmNvcHkoIHNjb3BlLm9iamVjdC5wb3NpdGlvbiApO1xuXHRcdFx0XHRcdGxhc3RRdWF0ZXJuaW9uLmNvcHkoIHNjb3BlLm9iamVjdC5xdWF0ZXJuaW9uICk7XG5cdFx0XHRcdFx0em9vbUNoYW5nZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH07XG5cblx0XHR9KCk7XG5cblx0XHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnY29udGV4dG1lbnUnLCBvbkNvbnRleHRNZW51LCBmYWxzZSApO1xuXHRcdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2Vkb3duJywgb25Nb3VzZURvd24sIGZhbHNlICk7XG5cdFx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UgKTtcblxuXHRcdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgZmFsc2UgKTtcblx0XHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgZmFsc2UgKTtcblx0XHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSApO1xuXG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUsIGZhbHNlICk7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIG9uTW91c2VVcCwgZmFsc2UgKTtcblxuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgb25LZXlEb3duLCBmYWxzZSApO1xuXG5cdFx0XHQvL3Njb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTsgLy8gc2hvdWxkIHRoaXMgYmUgYWRkZWQgaGVyZT9cblxuXHRcdH07XG5cblx0XHQvL1xuXHRcdC8vIGludGVybmFsc1xuXHRcdC8vXG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGNoYW5nZUV2ZW50ID0geyB0eXBlOiAnY2hhbmdlJyB9O1xuXHRcdHZhciBzdGFydEV2ZW50ID0geyB0eXBlOiAnc3RhcnQnIH07XG5cdFx0dmFyIGVuZEV2ZW50ID0geyB0eXBlOiAnZW5kJyB9O1xuXG5cdFx0dmFyIFNUQVRFID0geyBOT05FIDogLSAxLCBST1RBVEUgOiAwLCBET0xMWSA6IDEsIFBBTiA6IDIsIFRPVUNIX1JPVEFURSA6IDMsIFRPVUNIX0RPTExZIDogNCwgVE9VQ0hfUEFOIDogNSB9O1xuXG5cdFx0dmFyIHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdHZhciBFUFMgPSAwLjAwMDAwMTtcblxuXHRcdC8vIGN1cnJlbnQgcG9zaXRpb24gaW4gc3BoZXJpY2FsIGNvb3JkaW5hdGVzXG5cdFx0dmFyIHNwaGVyaWNhbCA9IG5ldyBUSFJFRS5TcGhlcmljYWwoKTtcblx0XHR2YXIgc3BoZXJpY2FsRGVsdGEgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XG5cblx0XHR2YXIgc2NhbGUgPSAxO1xuXHRcdHZhciBwYW5PZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXHRcdHZhciB6b29tQ2hhbmdlZCA9IGZhbHNlO1xuXG5cdFx0dmFyIHJvdGF0ZVN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0XHR2YXIgcm90YXRlRW5kID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0XHR2YXIgcm90YXRlRGVsdGEgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXG5cdFx0dmFyIHBhblN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0XHR2YXIgcGFuRW5kID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0XHR2YXIgcGFuRGVsdGEgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXG5cdFx0dmFyIGRvbGx5U3RhcnQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXHRcdHZhciBkb2xseUVuZCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cdFx0dmFyIGRvbGx5RGVsdGEgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSB7XG5cblx0XHRcdHJldHVybiAyICogTWF0aC5QSSAvIDYwIC8gNjAgKiBzY29wZS5hdXRvUm90YXRlU3BlZWQ7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRab29tU2NhbGUoKSB7XG5cblx0XHRcdHJldHVybiBNYXRoLnBvdyggMC45NSwgc2NvcGUuem9vbVNwZWVkICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiByb3RhdGVMZWZ0KCBhbmdsZSApIHtcblxuXHRcdFx0c3BoZXJpY2FsRGVsdGEudGhldGEgLT0gYW5nbGU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiByb3RhdGVVcCggYW5nbGUgKSB7XG5cblx0XHRcdHNwaGVyaWNhbERlbHRhLnBoaSAtPSBhbmdsZTtcblxuXHRcdH1cblxuXHRcdHZhciBwYW5MZWZ0ID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciB2ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbkxlZnQoIGRpc3RhbmNlLCBvYmplY3RNYXRyaXggKSB7XG5cblx0XHRcdFx0di5zZXRGcm9tTWF0cml4Q29sdW1uKCBvYmplY3RNYXRyaXgsIDAgKTsgLy8gZ2V0IFggY29sdW1uIG9mIG9iamVjdE1hdHJpeFxuXHRcdFx0XHR2Lm11bHRpcGx5U2NhbGFyKCAtIGRpc3RhbmNlICk7XG5cblx0XHRcdFx0cGFuT2Zmc2V0LmFkZCggdiApO1xuXG5cdFx0XHR9O1xuXG5cdFx0fSgpO1xuXG5cdFx0dmFyIHBhblVwID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciB2ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIHBhblVwKCBkaXN0YW5jZSwgb2JqZWN0TWF0cml4ICkge1xuXG5cdFx0XHRcdHYuc2V0RnJvbU1hdHJpeENvbHVtbiggb2JqZWN0TWF0cml4LCAxICk7IC8vIGdldCBZIGNvbHVtbiBvZiBvYmplY3RNYXRyaXhcblx0XHRcdFx0di5tdWx0aXBseVNjYWxhciggZGlzdGFuY2UgKTtcblxuXHRcdFx0XHRwYW5PZmZzZXQuYWRkKCB2ICk7XG5cblx0XHRcdH07XG5cblx0XHR9KCk7XG5cblx0XHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcblx0XHR2YXIgcGFuID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBvZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gcGFuICggZGVsdGFYLCBkZWx0YVkgKSB7XG5cblx0XHRcdFx0dmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cblx0XHRcdFx0aWYgKCBzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0XHRcdC8vIHBlcnNwZWN0aXZlXG5cdFx0XHRcdFx0dmFyIHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xuXHRcdFx0XHRcdG9mZnNldC5jb3B5KCBwb3NpdGlvbiApLnN1Yiggc2NvcGUudGFyZ2V0ICk7XG5cdFx0XHRcdFx0dmFyIHRhcmdldERpc3RhbmNlID0gb2Zmc2V0Lmxlbmd0aCgpO1xuXG5cdFx0XHRcdFx0Ly8gaGFsZiBvZiB0aGUgZm92IGlzIGNlbnRlciB0byB0b3Agb2Ygc2NyZWVuXG5cdFx0XHRcdFx0dGFyZ2V0RGlzdGFuY2UgKj0gTWF0aC50YW4oICggc2NvcGUub2JqZWN0LmZvdiAvIDIgKSAqIE1hdGguUEkgLyAxODAuMCApO1xuXG5cdFx0XHRcdFx0Ly8gd2UgYWN0dWFsbHkgZG9uJ3QgdXNlIHNjcmVlbldpZHRoLCBzaW5jZSBwZXJzcGVjdGl2ZSBjYW1lcmEgaXMgZml4ZWQgdG8gc2NyZWVuIGhlaWdodFxuXHRcdFx0XHRcdHBhbkxlZnQoIDIgKiBkZWx0YVggKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cdFx0XHRcdFx0cGFuVXAoIDIgKiBkZWx0YVkgKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHRcdFx0Ly8gb3J0aG9ncmFwaGljXG5cdFx0XHRcdFx0cGFuTGVmdCggZGVsdGFYICogKCBzY29wZS5vYmplY3QucmlnaHQgLSBzY29wZS5vYmplY3QubGVmdCApIC8gc2NvcGUub2JqZWN0Lnpvb20gLyBlbGVtZW50LmNsaWVudFdpZHRoLCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cdFx0XHRcdFx0cGFuVXAoIGRlbHRhWSAqICggc2NvcGUub2JqZWN0LnRvcCAtIHNjb3BlLm9iamVjdC5ib3R0b20gKSAvIHNjb3BlLm9iamVjdC56b29tIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsIHNjb3BlLm9iamVjdC5tYXRyaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gY2FtZXJhIG5laXRoZXIgb3J0aG9ncmFwaGljIG5vciBwZXJzcGVjdGl2ZVxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIHBhbiBkaXNhYmxlZC4nICk7XG5cdFx0XHRcdFx0c2NvcGUuZW5hYmxlUGFuID0gZmFsc2U7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9O1xuXG5cdFx0fSgpO1xuXG5cdFx0ZnVuY3Rpb24gZG9sbHlJbiggZG9sbHlTY2FsZSApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0XHRzY2FsZSAvPSBkb2xseVNjYWxlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heCggc2NvcGUubWluWm9vbSwgTWF0aC5taW4oIHNjb3BlLm1heFpvb20sIHNjb3BlLm9iamVjdC56b29tICogZG9sbHlTY2FsZSApICk7XG5cdFx0XHRcdHNjb3BlLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBkb2xseS96b29tIGRpc2FibGVkLicgKTtcblx0XHRcdFx0c2NvcGUuZW5hYmxlWm9vbSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBkb2xseU91dCggZG9sbHlTY2FsZSApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0XHRzY2FsZSAqPSBkb2xseVNjYWxlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heCggc2NvcGUubWluWm9vbSwgTWF0aC5taW4oIHNjb3BlLm1heFpvb20sIHNjb3BlLm9iamVjdC56b29tIC8gZG9sbHlTY2FsZSApICk7XG5cdFx0XHRcdHNjb3BlLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBkb2xseS96b29tIGRpc2FibGVkLicgKTtcblx0XHRcdFx0c2NvcGUuZW5hYmxlWm9vbSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXHRcdC8vIGV2ZW50IGNhbGxiYWNrcyAtIHVwZGF0ZSB0aGUgb2JqZWN0IHN0YXRlXG5cdFx0Ly9cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93blJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZURvd25Sb3RhdGUnICk7XG5cblx0XHRcdHJvdGF0ZVN0YXJ0LnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duRG9sbHkoIGV2ZW50ICkge1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VEb3duRG9sbHknICk7XG5cblx0XHRcdGRvbGx5U3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICkge1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VEb3duUGFuJyApO1xuXG5cdFx0XHRwYW5TdGFydC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZVJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZU1vdmVSb3RhdGUnICk7XG5cblx0XHRcdHJvdGF0ZUVuZC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblx0XHRcdHJvdGF0ZURlbHRhLnN1YlZlY3RvcnMoIHJvdGF0ZUVuZCwgcm90YXRlU3RhcnQgKTtcblxuXHRcdFx0dmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cblx0XHRcdC8vIHJvdGF0aW5nIGFjcm9zcyB3aG9sZSBzY3JlZW4gZ29lcyAzNjAgZGVncmVlcyBhcm91bmRcblx0XHRcdHJvdGF0ZUxlZnQoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50V2lkdGggKiBzY29wZS5yb3RhdGVTcGVlZCApO1xuXG5cdFx0XHQvLyByb3RhdGluZyB1cCBhbmQgZG93biBhbG9uZyB3aG9sZSBzY3JlZW4gYXR0ZW1wdHMgdG8gZ28gMzYwLCBidXQgbGltaXRlZCB0byAxODBcblx0XHRcdHJvdGF0ZVVwKCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnkgLyBlbGVtZW50LmNsaWVudEhlaWdodCAqIHNjb3BlLnJvdGF0ZVNwZWVkICk7XG5cblx0XHRcdHJvdGF0ZVN0YXJ0LmNvcHkoIHJvdGF0ZUVuZCApO1xuXG5cdFx0XHRzY29wZS51cGRhdGUoKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZURvbGx5KCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlTW92ZURvbGx5JyApO1xuXG5cdFx0XHRkb2xseUVuZC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdFx0ZG9sbHlEZWx0YS5zdWJWZWN0b3JzKCBkb2xseUVuZCwgZG9sbHlTdGFydCApO1xuXG5cdFx0XHRpZiAoIGRvbGx5RGVsdGEueSA+IDAgKSB7XG5cblx0XHRcdFx0ZG9sbHlJbiggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggZG9sbHlEZWx0YS55IDwgMCApIHtcblxuXHRcdFx0XHRkb2xseU91dCggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkb2xseVN0YXJ0LmNvcHkoIGRvbGx5RW5kICk7XG5cblx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlUGFuKCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlTW92ZVBhbicgKTtcblxuXHRcdFx0cGFuRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0XHRwYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICk7XG5cblx0XHRcdHBhbiggcGFuRGVsdGEueCwgcGFuRGVsdGEueSApO1xuXG5cdFx0XHRwYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcblxuXHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlVXAnICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVNb3VzZVdoZWVsKCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlV2hlZWwnICk7XG5cblx0XHRcdGlmICggZXZlbnQuZGVsdGFZIDwgMCApIHtcblxuXHRcdFx0XHRkb2xseU91dCggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggZXZlbnQuZGVsdGFZID4gMCApIHtcblxuXHRcdFx0XHRkb2xseUluKCBnZXRab29tU2NhbGUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlS2V5RG93biggZXZlbnQgKSB7XG5cblx0XHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVLZXlEb3duJyApO1xuXG5cdFx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXG5cdFx0XHRcdGNhc2Ugc2NvcGUua2V5cy5VUDpcblx0XHRcdFx0XHRwYW4oIDAsIHNjb3BlLmtleVBhblNwZWVkICk7XG5cdFx0XHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBzY29wZS5rZXlzLkJPVFRPTTpcblx0XHRcdFx0XHRwYW4oIDAsIC0gc2NvcGUua2V5UGFuU3BlZWQgKTtcblx0XHRcdFx0XHRzY29wZS51cGRhdGUoKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIHNjb3BlLmtleXMuTEVGVDpcblx0XHRcdFx0XHRwYW4oIHNjb3BlLmtleVBhblNwZWVkLCAwICk7XG5cdFx0XHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBzY29wZS5rZXlzLlJJR0hUOlxuXHRcdFx0XHRcdHBhbiggLSBzY29wZS5rZXlQYW5TcGVlZCwgMCApO1xuXHRcdFx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0Um90YXRlKCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoU3RhcnRSb3RhdGUnICk7XG5cblx0XHRcdHJvdGF0ZVN0YXJ0LnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnREb2xseSggZXZlbnQgKSB7XG5cblx0XHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaFN0YXJ0RG9sbHknICk7XG5cblx0XHRcdHZhciBkeCA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCAtIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWDtcblx0XHRcdHZhciBkeSA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSAtIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWTtcblxuXHRcdFx0dmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xuXG5cdFx0XHRkb2xseVN0YXJ0LnNldCggMCwgZGlzdGFuY2UgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnRQYW4oIGV2ZW50ICkge1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hTdGFydFBhbicgKTtcblxuXHRcdFx0cGFuU3RhcnQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlUm90YXRlKCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoTW92ZVJvdGF0ZScgKTtcblxuXHRcdFx0cm90YXRlRW5kLnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcblx0XHRcdHJvdGF0ZURlbHRhLnN1YlZlY3RvcnMoIHJvdGF0ZUVuZCwgcm90YXRlU3RhcnQgKTtcblxuXHRcdFx0dmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cblx0XHRcdC8vIHJvdGF0aW5nIGFjcm9zcyB3aG9sZSBzY3JlZW4gZ29lcyAzNjAgZGVncmVlcyBhcm91bmRcblx0XHRcdHJvdGF0ZUxlZnQoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50V2lkdGggKiBzY29wZS5yb3RhdGVTcGVlZCApO1xuXG5cdFx0XHQvLyByb3RhdGluZyB1cCBhbmQgZG93biBhbG9uZyB3aG9sZSBzY3JlZW4gYXR0ZW1wdHMgdG8gZ28gMzYwLCBidXQgbGltaXRlZCB0byAxODBcblx0XHRcdHJvdGF0ZVVwKCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnkgLyBlbGVtZW50LmNsaWVudEhlaWdodCAqIHNjb3BlLnJvdGF0ZVNwZWVkICk7XG5cblx0XHRcdHJvdGF0ZVN0YXJ0LmNvcHkoIHJvdGF0ZUVuZCApO1xuXG5cdFx0XHRzY29wZS51cGRhdGUoKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZURvbGx5KCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoTW92ZURvbGx5JyApO1xuXG5cdFx0XHR2YXIgZHggPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVggLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVg7XG5cdFx0XHR2YXIgZHkgPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVk7XG5cblx0XHRcdHZhciBkaXN0YW5jZSA9IE1hdGguc3FydCggZHggKiBkeCArIGR5ICogZHkgKTtcblxuXHRcdFx0ZG9sbHlFbmQuc2V0KCAwLCBkaXN0YW5jZSApO1xuXG5cdFx0XHRkb2xseURlbHRhLnN1YlZlY3RvcnMoIGRvbGx5RW5kLCBkb2xseVN0YXJ0ICk7XG5cblx0XHRcdGlmICggZG9sbHlEZWx0YS55ID4gMCApIHtcblxuXHRcdFx0XHRkb2xseU91dCggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggZG9sbHlEZWx0YS55IDwgMCApIHtcblxuXHRcdFx0XHRkb2xseUluKCBnZXRab29tU2NhbGUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRvbGx5U3RhcnQuY29weSggZG9sbHlFbmQgKTtcblxuXHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmVQYW4oIGV2ZW50ICkge1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hNb3ZlUGFuJyApO1xuXG5cdFx0XHRwYW5FbmQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuXG5cdFx0XHRwYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICk7XG5cblx0XHRcdHBhbiggcGFuRGVsdGEueCwgcGFuRGVsdGEueSApO1xuXG5cdFx0XHRwYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcblxuXHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZCggZXZlbnQgKSB7XG5cblx0XHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaEVuZCcgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cdFx0Ly8gZXZlbnQgaGFuZGxlcnMgLSBGU006IGxpc3RlbiBmb3IgZXZlbnRzIGFuZCByZXNldCBzdGF0ZVxuXHRcdC8vXG5cblx0XHRmdW5jdGlvbiBvbk1vdXNlRG93biggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdGlmICggZXZlbnQuYnV0dG9uID09PSBzY29wZS5tb3VzZUJ1dHRvbnMuT1JCSVQgKSB7XG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlRG93blJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlJPVEFURTtcblxuXHRcdFx0fSBlbHNlIGlmICggZXZlbnQuYnV0dG9uID09PSBzY29wZS5tb3VzZUJ1dHRvbnMuWk9PTSApIHtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlRG93bkRvbGx5KCBldmVudCApO1xuXG5cdFx0XHRcdHN0YXRlID0gU1RBVEUuRE9MTFk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGV2ZW50LmJ1dHRvbiA9PT0gc2NvcGUubW91c2VCdXR0b25zLlBBTiApIHtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlTW91c2VEb3duUGFuKCBldmVudCApO1xuXG5cdFx0XHRcdHN0YXRlID0gU1RBVEUuUEFOO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3RhdGUgIT09IFNUQVRFLk5PTkUgKSB7XG5cblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBmYWxzZSApO1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIG9uTW91c2VVcCwgZmFsc2UgKTtcblxuXHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBzdGFydEV2ZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uTW91c2VNb3ZlKCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gU1RBVEUuUk9UQVRFICkge1xuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRoYW5kbGVNb3VzZU1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHN0YXRlID09PSBTVEFURS5ET0xMWSApIHtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlTW92ZURvbGx5KCBldmVudCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBzdGF0ZSA9PT0gU1RBVEUuUEFOICkge1xuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRoYW5kbGVNb3VzZU1vdmVQYW4oIGV2ZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uTW91c2VVcCggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGhhbmRsZU1vdXNlVXAoIGV2ZW50ICk7XG5cblx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSwgZmFsc2UgKTtcblx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZXVwJywgb25Nb3VzZVVwLCBmYWxzZSApO1xuXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBlbmRFdmVudCApO1xuXG5cdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbk1vdXNlV2hlZWwoIGV2ZW50ICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlIHx8IHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlIHx8ICggc3RhdGUgIT09IFNUQVRFLk5PTkUgJiYgc3RhdGUgIT09IFNUQVRFLlJPVEFURSApICkgcmV0dXJuO1xuXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRcdGhhbmRsZU1vdXNlV2hlZWwoIGV2ZW50ICk7XG5cblx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHN0YXJ0RXZlbnQgKTsgLy8gbm90IHN1cmUgd2h5IHRoZXNlIGFyZSBoZXJlLi4uXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBlbmRFdmVudCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25LZXlEb3duKCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSB8fCBzY29wZS5lbmFibGVLZXlzID09PSBmYWxzZSB8fCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRoYW5kbGVLZXlEb3duKCBldmVudCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0c3dpdGNoICggZXZlbnQudG91Y2hlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y2FzZSAxOlx0Ly8gb25lLWZpbmdlcmVkIHRvdWNoOiByb3RhdGVcblxuXHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdGhhbmRsZVRvdWNoU3RhcnRSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlRPVUNIX1JPVEFURTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMjpcdC8vIHR3by1maW5nZXJlZCB0b3VjaDogZG9sbHlcblxuXHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHRoYW5kbGVUb3VjaFN0YXJ0RG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlRPVUNIX0RPTExZO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAzOiAvLyB0aHJlZS1maW5nZXJlZCB0b3VjaDogcGFuXG5cblx0XHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHRoYW5kbGVUb3VjaFN0YXJ0UGFuKCBldmVudCApO1xuXG5cdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5UT1VDSF9QQU47XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5OT05FO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3RhdGUgIT09IFNUQVRFLk5PTkUgKSB7XG5cblx0XHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggc3RhcnRFdmVudCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvblRvdWNoTW92ZSggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuXHRcdFx0c3dpdGNoICggZXZlbnQudG91Y2hlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y2FzZSAxOiAvLyBvbmUtZmluZ2VyZWQgdG91Y2g6IHJvdGF0ZVxuXG5cdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXHRcdFx0XHRcdGlmICggc3RhdGUgIT09IFNUQVRFLlRPVUNIX1JPVEFURSApIHJldHVybjsgLy8gaXMgdGhpcyBuZWVkZWQ/Li4uXG5cblx0XHRcdFx0XHRoYW5kbGVUb3VjaE1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIDI6IC8vIHR3by1maW5nZXJlZCB0b3VjaDogZG9sbHlcblxuXHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cdFx0XHRcdFx0aWYgKCBzdGF0ZSAhPT0gU1RBVEUuVE9VQ0hfRE9MTFkgKSByZXR1cm47IC8vIGlzIHRoaXMgbmVlZGVkPy4uLlxuXG5cdFx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIDM6IC8vIHRocmVlLWZpbmdlcmVkIHRvdWNoOiBwYW5cblxuXHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblx0XHRcdFx0XHRpZiAoIHN0YXRlICE9PSBTVEFURS5UT1VDSF9QQU4gKSByZXR1cm47IC8vIGlzIHRoaXMgbmVlZGVkPy4uLlxuXG5cdFx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlUGFuKCBldmVudCApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25Ub3VjaEVuZCggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGhhbmRsZVRvdWNoRW5kKCBldmVudCApO1xuXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBlbmRFdmVudCApO1xuXG5cdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbkNvbnRleHRNZW51KCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIG9uQ29udGV4dE1lbnUsIGZhbHNlICk7XG5cblx0XHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWRvd24nLCBvbk1vdXNlRG93biwgZmFsc2UgKTtcblx0XHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UgKTtcblxuXHRcdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIGZhbHNlICk7XG5cdFx0c2NvcGUuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAndG91Y2hlbmQnLCBvblRvdWNoRW5kLCBmYWxzZSApO1xuXHRcdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSApO1xuXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgb25LZXlEb3duLCBmYWxzZSApO1xuXG5cdFx0Ly8gZm9yY2UgYW4gdXBkYXRlIGF0IHN0YXJ0XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH07XG5cblx0T3JiaXRDb250cm9scy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlICk7XG5cdE9yYml0Q29udHJvbHMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gT3JiaXRDb250cm9scztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggT3JiaXRDb250cm9scy5wcm90b3R5cGUsIHtcblxuXHRcdGNlbnRlcjoge1xuXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuY2VudGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnRhcmdldCcgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMudGFyZ2V0O1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0Ly8gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuXG5cdFx0bm9ab29tOiB7XG5cblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1pvb20gaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVab29tIGluc3RlYWQuJyApO1xuXHRcdFx0XHRyZXR1cm4gISB0aGlzLmVuYWJsZVpvb207XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9ab29tIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlWm9vbSBpbnN0ZWFkLicgKTtcblx0XHRcdFx0dGhpcy5lbmFibGVab29tID0gISB2YWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdG5vUm90YXRlOiB7XG5cblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1JvdGF0ZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVJvdGF0ZSBpbnN0ZWFkLicgKTtcblx0XHRcdFx0cmV0dXJuICEgdGhpcy5lbmFibGVSb3RhdGU7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9Sb3RhdGUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVSb3RhdGUgaW5zdGVhZC4nICk7XG5cdFx0XHRcdHRoaXMuZW5hYmxlUm90YXRlID0gISB2YWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdG5vUGFuOiB7XG5cblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1BhbiBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVBhbiBpbnN0ZWFkLicgKTtcblx0XHRcdFx0cmV0dXJuICEgdGhpcy5lbmFibGVQYW47XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9QYW4gaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVQYW4gaW5zdGVhZC4nICk7XG5cdFx0XHRcdHRoaXMuZW5hYmxlUGFuID0gISB2YWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdG5vS2V5czoge1xuXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9LZXlzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlS2V5cyBpbnN0ZWFkLicgKTtcblx0XHRcdFx0cmV0dXJuICEgdGhpcy5lbmFibGVLZXlzO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vS2V5cyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZUtleXMgaW5zdGVhZC4nICk7XG5cdFx0XHRcdHRoaXMuZW5hYmxlS2V5cyA9ICEgdmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHRzdGF0aWNNb3ZpbmcgOiB7XG5cblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5zdGF0aWNNb3ZpbmcgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVEYW1waW5nIGluc3RlYWQuJyApO1xuXHRcdFx0XHRyZXR1cm4gISB0aGlzLmVuYWJsZURhbXBpbmc7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuc3RhdGljTW92aW5nIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlRGFtcGluZyBpbnN0ZWFkLicgKTtcblx0XHRcdFx0dGhpcy5lbmFibGVEYW1waW5nID0gISB2YWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdGR5bmFtaWNEYW1waW5nRmFjdG9yIDoge1xuXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuZHluYW1pY0RhbXBpbmdGYWN0b3IgaGFzIGJlZW4gcmVuYW1lZC4gVXNlIC5kYW1waW5nRmFjdG9yIGluc3RlYWQuJyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5kYW1waW5nRmFjdG9yO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLmR5bmFtaWNEYW1waW5nRmFjdG9yIGhhcyBiZWVuIHJlbmFtZWQuIFVzZSAuZGFtcGluZ0ZhY3RvciBpbnN0ZWFkLicgKTtcblx0XHRcdFx0dGhpcy5kYW1waW5nRmFjdG9yID0gdmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9ICk7XG5cblx0cmV0dXJuIE9yYml0Q29udHJvbHM7XG59O1xuIiwiLy8gUG9seWZpbGxzXG5cbmlmICggTnVtYmVyLkVQU0lMT04gPT09IHVuZGVmaW5lZCApIHtcblxuXHROdW1iZXIuRVBTSUxPTiA9IE1hdGgucG93KCAyLCAtIDUyICk7XG5cbn1cblxuaWYgKCBOdW1iZXIuaXNJbnRlZ2VyID09PSB1bmRlZmluZWQgKSB7XG5cblx0Ly8gTWlzc2luZyBpbiBJRVxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9OdW1iZXIvaXNJbnRlZ2VyXG5cblx0TnVtYmVyLmlzSW50ZWdlciA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSggdmFsdWUgKSAmJiBNYXRoLmZsb29yKCB2YWx1ZSApID09PSB2YWx1ZTtcblxuXHR9O1xuXG59XG5cbi8vXG5cbmlmICggTWF0aC5zaWduID09PSB1bmRlZmluZWQgKSB7XG5cblx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9zaWduXG5cblx0TWF0aC5zaWduID0gZnVuY3Rpb24gKCB4ICkge1xuXG5cdFx0cmV0dXJuICggeCA8IDAgKSA/IC0gMSA6ICggeCA+IDAgKSA/IDEgOiArIHg7XG5cblx0fTtcblxufVxuXG5pZiAoICduYW1lJyBpbiBGdW5jdGlvbi5wcm90b3R5cGUgPT09IGZhbHNlICkge1xuXG5cdC8vIE1pc3NpbmcgaW4gSUVcblx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vbmFtZVxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggRnVuY3Rpb24ucHJvdG90eXBlLCAnbmFtZScsIHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy50b1N0cmluZygpLm1hdGNoKCAvXlxccypmdW5jdGlvblxccyooW15cXChcXHNdKikvIClbIDEgXTtcblxuXHRcdH1cblxuXHR9ICk7XG5cbn1cblxuaWYgKCBPYmplY3QuYXNzaWduID09PSB1bmRlZmluZWQgKSB7XG5cblx0Ly8gTWlzc2luZyBpbiBJRVxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXG5cblx0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRPYmplY3QuYXNzaWduID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoICdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG91dHB1dCA9IE9iamVjdCggdGFyZ2V0ICk7XG5cblx0XHRcdGZvciAoIHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXggKysgKSB7XG5cblx0XHRcdFx0dmFyIHNvdXJjZSA9IGFyZ3VtZW50c1sgaW5kZXggXTtcblxuXHRcdFx0XHRpZiAoIHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBuZXh0S2V5IGluIHNvdXJjZSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIHNvdXJjZSwgbmV4dEtleSApICkge1xuXG5cdFx0XHRcdFx0XHRcdG91dHB1dFsgbmV4dEtleSBdID0gc291cmNlWyBuZXh0S2V5IF07XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG91dHB1dDtcblxuXHRcdH07XG5cblx0fSApKCk7XG5cbn1cblxuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL2V2ZW50ZGlzcGF0Y2hlci5qcy9cbiAqL1xuXG5mdW5jdGlvbiBFdmVudERpc3BhdGNoZXIoKSB7fVxuXG5PYmplY3QuYXNzaWduKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlLCB7XG5cblx0YWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcblxuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxpc3RlbmVyc1sgdHlwZSBdID0gW107XG5cblx0XHR9XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgPT09IC0gMSApIHtcblxuXHRcdFx0bGlzdGVuZXJzWyB0eXBlIF0ucHVzaCggbGlzdGVuZXIgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGhhc0V2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblxuXHRcdHJldHVybiBsaXN0ZW5lcnNbIHR5cGUgXSAhPT0gdW5kZWZpbmVkICYmIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgIT09IC0gMTtcblxuXHR9LFxuXG5cdHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblx0XHR2YXIgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBpbmRleCA9IGxpc3RlbmVyQXJyYXkuaW5kZXhPZiggbGlzdGVuZXIgKTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gLSAxICkge1xuXG5cdFx0XHRcdGxpc3RlbmVyQXJyYXkuc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cdFx0dmFyIGxpc3RlbmVyQXJyYXkgPSBsaXN0ZW5lcnNbIGV2ZW50LnR5cGUgXTtcblxuXHRcdGlmICggbGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRldmVudC50YXJnZXQgPSB0aGlzO1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBsaXN0ZW5lckFycmF5LnNsaWNlKCAwICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXlbIGkgXS5jYWxsKCB0aGlzLCBldmVudCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbnZhciBSRVZJU0lPTiA9ICc5NCc7XG52YXIgTU9VU0UgPSB7IExFRlQ6IDAsIE1JRERMRTogMSwgUklHSFQ6IDIgfTtcbnZhciBDdWxsRmFjZU5vbmUgPSAwO1xudmFyIEN1bGxGYWNlQmFjayA9IDE7XG52YXIgQ3VsbEZhY2VGcm9udCA9IDI7XG52YXIgQ3VsbEZhY2VGcm9udEJhY2sgPSAzO1xudmFyIEZyb250RmFjZURpcmVjdGlvbkNXID0gMDtcbnZhciBGcm9udEZhY2VEaXJlY3Rpb25DQ1cgPSAxO1xudmFyIEJhc2ljU2hhZG93TWFwID0gMDtcbnZhciBQQ0ZTaGFkb3dNYXAgPSAxO1xudmFyIFBDRlNvZnRTaGFkb3dNYXAgPSAyO1xudmFyIEZyb250U2lkZSA9IDA7XG52YXIgQmFja1NpZGUgPSAxO1xudmFyIERvdWJsZVNpZGUgPSAyO1xudmFyIEZsYXRTaGFkaW5nID0gMTtcbnZhciBTbW9vdGhTaGFkaW5nID0gMjtcbnZhciBOb0NvbG9ycyA9IDA7XG52YXIgRmFjZUNvbG9ycyA9IDE7XG52YXIgVmVydGV4Q29sb3JzID0gMjtcbnZhciBOb0JsZW5kaW5nID0gMDtcbnZhciBOb3JtYWxCbGVuZGluZyA9IDE7XG52YXIgQWRkaXRpdmVCbGVuZGluZyA9IDI7XG52YXIgU3VidHJhY3RpdmVCbGVuZGluZyA9IDM7XG52YXIgTXVsdGlwbHlCbGVuZGluZyA9IDQ7XG52YXIgQ3VzdG9tQmxlbmRpbmcgPSA1O1xudmFyIEFkZEVxdWF0aW9uID0gMTAwO1xudmFyIFN1YnRyYWN0RXF1YXRpb24gPSAxMDE7XG52YXIgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gPSAxMDI7XG52YXIgTWluRXF1YXRpb24gPSAxMDM7XG52YXIgTWF4RXF1YXRpb24gPSAxMDQ7XG52YXIgWmVyb0ZhY3RvciA9IDIwMDtcbnZhciBPbmVGYWN0b3IgPSAyMDE7XG52YXIgU3JjQ29sb3JGYWN0b3IgPSAyMDI7XG52YXIgT25lTWludXNTcmNDb2xvckZhY3RvciA9IDIwMztcbnZhciBTcmNBbHBoYUZhY3RvciA9IDIwNDtcbnZhciBPbmVNaW51c1NyY0FscGhhRmFjdG9yID0gMjA1O1xudmFyIERzdEFscGhhRmFjdG9yID0gMjA2O1xudmFyIE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgPSAyMDc7XG52YXIgRHN0Q29sb3JGYWN0b3IgPSAyMDg7XG52YXIgT25lTWludXNEc3RDb2xvckZhY3RvciA9IDIwOTtcbnZhciBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yID0gMjEwO1xudmFyIE5ldmVyRGVwdGggPSAwO1xudmFyIEFsd2F5c0RlcHRoID0gMTtcbnZhciBMZXNzRGVwdGggPSAyO1xudmFyIExlc3NFcXVhbERlcHRoID0gMztcbnZhciBFcXVhbERlcHRoID0gNDtcbnZhciBHcmVhdGVyRXF1YWxEZXB0aCA9IDU7XG52YXIgR3JlYXRlckRlcHRoID0gNjtcbnZhciBOb3RFcXVhbERlcHRoID0gNztcbnZhciBNdWx0aXBseU9wZXJhdGlvbiA9IDA7XG52YXIgTWl4T3BlcmF0aW9uID0gMTtcbnZhciBBZGRPcGVyYXRpb24gPSAyO1xudmFyIE5vVG9uZU1hcHBpbmcgPSAwO1xudmFyIExpbmVhclRvbmVNYXBwaW5nID0gMTtcbnZhciBSZWluaGFyZFRvbmVNYXBwaW5nID0gMjtcbnZhciBVbmNoYXJ0ZWQyVG9uZU1hcHBpbmcgPSAzO1xudmFyIENpbmVvblRvbmVNYXBwaW5nID0gNDtcbnZhciBVVk1hcHBpbmcgPSAzMDA7XG52YXIgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nID0gMzAxO1xudmFyIEN1YmVSZWZyYWN0aW9uTWFwcGluZyA9IDMwMjtcbnZhciBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyA9IDMwMztcbnZhciBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyA9IDMwNDtcbnZhciBTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZyA9IDMwNTtcbnZhciBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyA9IDMwNjtcbnZhciBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZyA9IDMwNztcbnZhciBSZXBlYXRXcmFwcGluZyA9IDEwMDA7XG52YXIgQ2xhbXBUb0VkZ2VXcmFwcGluZyA9IDEwMDE7XG52YXIgTWlycm9yZWRSZXBlYXRXcmFwcGluZyA9IDEwMDI7XG52YXIgTmVhcmVzdEZpbHRlciA9IDEwMDM7XG52YXIgTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA0O1xudmFyIE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIgPSAxMDA1O1xudmFyIExpbmVhckZpbHRlciA9IDEwMDY7XG52YXIgTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciA9IDEwMDc7XG52YXIgTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyID0gMTAwODtcbnZhciBVbnNpZ25lZEJ5dGVUeXBlID0gMTAwOTtcbnZhciBCeXRlVHlwZSA9IDEwMTA7XG52YXIgU2hvcnRUeXBlID0gMTAxMTtcbnZhciBVbnNpZ25lZFNob3J0VHlwZSA9IDEwMTI7XG52YXIgSW50VHlwZSA9IDEwMTM7XG52YXIgVW5zaWduZWRJbnRUeXBlID0gMTAxNDtcbnZhciBGbG9hdFR5cGUgPSAxMDE1O1xudmFyIEhhbGZGbG9hdFR5cGUgPSAxMDE2O1xudmFyIFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSA9IDEwMTc7XG52YXIgVW5zaWduZWRTaG9ydDU1NTFUeXBlID0gMTAxODtcbnZhciBVbnNpZ25lZFNob3J0NTY1VHlwZSA9IDEwMTk7XG52YXIgVW5zaWduZWRJbnQyNDhUeXBlID0gMTAyMDtcbnZhciBBbHBoYUZvcm1hdCA9IDEwMjE7XG52YXIgUkdCRm9ybWF0ID0gMTAyMjtcbnZhciBSR0JBRm9ybWF0ID0gMTAyMztcbnZhciBMdW1pbmFuY2VGb3JtYXQgPSAxMDI0O1xudmFyIEx1bWluYW5jZUFscGhhRm9ybWF0ID0gMTAyNTtcbnZhciBSR0JFRm9ybWF0ID0gUkdCQUZvcm1hdDtcbnZhciBEZXB0aEZvcm1hdCA9IDEwMjY7XG52YXIgRGVwdGhTdGVuY2lsRm9ybWF0ID0gMTAyNztcbnZhciBSR0JfUzNUQ19EWFQxX0Zvcm1hdCA9IDMzNzc2O1xudmFyIFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCA9IDMzNzc3O1xudmFyIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCA9IDMzNzc4O1xudmFyIFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCA9IDMzNzc5O1xudmFyIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ID0gMzU4NDA7XG52YXIgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgPSAzNTg0MTtcbnZhciBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MjtcbnZhciBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgPSAzNTg0MztcbnZhciBSR0JfRVRDMV9Gb3JtYXQgPSAzNjE5NjtcbnZhciBSR0JBX0FTVENfNHg0X0Zvcm1hdCA9IDM3ODA4O1xudmFyIFJHQkFfQVNUQ181eDRfRm9ybWF0ID0gMzc4MDk7XG52YXIgUkdCQV9BU1RDXzV4NV9Gb3JtYXQgPSAzNzgxMDtcbnZhciBSR0JBX0FTVENfNng1X0Zvcm1hdCA9IDM3ODExO1xudmFyIFJHQkFfQVNUQ182eDZfRm9ybWF0ID0gMzc4MTI7XG52YXIgUkdCQV9BU1RDXzh4NV9Gb3JtYXQgPSAzNzgxMztcbnZhciBSR0JBX0FTVENfOHg2X0Zvcm1hdCA9IDM3ODE0O1xudmFyIFJHQkFfQVNUQ184eDhfRm9ybWF0ID0gMzc4MTU7XG52YXIgUkdCQV9BU1RDXzEweDVfRm9ybWF0ID0gMzc4MTY7XG52YXIgUkdCQV9BU1RDXzEweDZfRm9ybWF0ID0gMzc4MTc7XG52YXIgUkdCQV9BU1RDXzEweDhfRm9ybWF0ID0gMzc4MTg7XG52YXIgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCA9IDM3ODE5O1xudmFyIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgPSAzNzgyMDtcbnZhciBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ID0gMzc4MjE7XG52YXIgTG9vcE9uY2UgPSAyMjAwO1xudmFyIExvb3BSZXBlYXQgPSAyMjAxO1xudmFyIExvb3BQaW5nUG9uZyA9IDIyMDI7XG52YXIgSW50ZXJwb2xhdGVEaXNjcmV0ZSA9IDIzMDA7XG52YXIgSW50ZXJwb2xhdGVMaW5lYXIgPSAyMzAxO1xudmFyIEludGVycG9sYXRlU21vb3RoID0gMjMwMjtcbnZhciBaZXJvQ3VydmF0dXJlRW5kaW5nID0gMjQwMDtcbnZhciBaZXJvU2xvcGVFbmRpbmcgPSAyNDAxO1xudmFyIFdyYXBBcm91bmRFbmRpbmcgPSAyNDAyO1xudmFyIFRyaWFuZ2xlc0RyYXdNb2RlID0gMDtcbnZhciBUcmlhbmdsZVN0cmlwRHJhd01vZGUgPSAxO1xudmFyIFRyaWFuZ2xlRmFuRHJhd01vZGUgPSAyO1xudmFyIExpbmVhckVuY29kaW5nID0gMzAwMDtcbnZhciBzUkdCRW5jb2RpbmcgPSAzMDAxO1xudmFyIEdhbW1hRW5jb2RpbmcgPSAzMDA3O1xudmFyIFJHQkVFbmNvZGluZyA9IDMwMDI7XG52YXIgTG9nTHV2RW5jb2RpbmcgPSAzMDAzO1xudmFyIFJHQk03RW5jb2RpbmcgPSAzMDA0O1xudmFyIFJHQk0xNkVuY29kaW5nID0gMzAwNTtcbnZhciBSR0JERW5jb2RpbmcgPSAzMDA2O1xudmFyIEJhc2ljRGVwdGhQYWNraW5nID0gMzIwMDtcbnZhciBSR0JBRGVwdGhQYWNraW5nID0gMzIwMTtcbnZhciBUYW5nZW50U3BhY2VOb3JtYWxNYXAgPSAwO1xudmFyIE9iamVjdFNwYWNlTm9ybWFsTWFwID0gMTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgX01hdGggPSB7XG5cblx0REVHMlJBRDogTWF0aC5QSSAvIDE4MCxcblx0UkFEMkRFRzogMTgwIC8gTWF0aC5QSSxcblxuXHRnZW5lcmF0ZVVVSUQ6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxOTYzMTM2IzIxOTYzMTM2XG5cblx0XHR2YXIgbHV0ID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCAyNTY7IGkgKysgKSB7XG5cblx0XHRcdGx1dFsgaSBdID0gKCBpIDwgMTYgPyAnMCcgOiAnJyApICsgKCBpICkudG9TdHJpbmcoIDE2ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xuXG5cdFx0XHR2YXIgZDAgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgZDEgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgZDIgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgZDMgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0XHR2YXIgdXVpZCA9IGx1dFsgZDAgJiAweGZmIF0gKyBsdXRbIGQwID4+IDggJiAweGZmIF0gKyBsdXRbIGQwID4+IDE2ICYgMHhmZiBdICsgbHV0WyBkMCA+PiAyNCAmIDB4ZmYgXSArICctJyArXG5cdFx0XHRcdGx1dFsgZDEgJiAweGZmIF0gKyBsdXRbIGQxID4+IDggJiAweGZmIF0gKyAnLScgKyBsdXRbIGQxID4+IDE2ICYgMHgwZiB8IDB4NDAgXSArIGx1dFsgZDEgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0XHRsdXRbIGQyICYgMHgzZiB8IDB4ODAgXSArIGx1dFsgZDIgPj4gOCAmIDB4ZmYgXSArICctJyArIGx1dFsgZDIgPj4gMTYgJiAweGZmIF0gKyBsdXRbIGQyID4+IDI0ICYgMHhmZiBdICtcblx0XHRcdFx0bHV0WyBkMyAmIDB4ZmYgXSArIGx1dFsgZDMgPj4gOCAmIDB4ZmYgXSArIGx1dFsgZDMgPj4gMTYgJiAweGZmIF0gKyBsdXRbIGQzID4+IDI0ICYgMHhmZiBdO1xuXG5cdFx0XHQvLyAudG9VcHBlckNhc2UoKSBoZXJlIGZsYXR0ZW5zIGNvbmNhdGVuYXRlZCBzdHJpbmdzIHRvIHNhdmUgaGVhcCBtZW1vcnkgc3BhY2UuXG5cdFx0XHRyZXR1cm4gdXVpZC50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0fTtcblxuXHR9ICkoKSxcblxuXHRjbGFtcDogZnVuY3Rpb24gKCB2YWx1ZSwgbWluLCBtYXggKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG1heCwgdmFsdWUgKSApO1xuXG5cdH0sXG5cblx0Ly8gY29tcHV0ZSBldWNsaWRpYW4gbW9kdWxvIG9mIG0gJSBuXG5cdC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vZHVsb19vcGVyYXRpb25cblxuXHRldWNsaWRlYW5Nb2R1bG86IGZ1bmN0aW9uICggbiwgbSApIHtcblxuXHRcdHJldHVybiAoICggbiAlIG0gKSArIG0gKSAlIG07XG5cblx0fSxcblxuXHQvLyBMaW5lYXIgbWFwcGluZyBmcm9tIHJhbmdlIDxhMSwgYTI+IHRvIHJhbmdlIDxiMSwgYjI+XG5cblx0bWFwTGluZWFyOiBmdW5jdGlvbiAoIHgsIGExLCBhMiwgYjEsIGIyICkge1xuXG5cdFx0cmV0dXJuIGIxICsgKCB4IC0gYTEgKSAqICggYjIgLSBiMSApIC8gKCBhMiAtIGExICk7XG5cblx0fSxcblxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaW5lYXJfaW50ZXJwb2xhdGlvblxuXG5cdGxlcnA6IGZ1bmN0aW9uICggeCwgeSwgdCApIHtcblxuXHRcdHJldHVybiAoIDEgLSB0ICkgKiB4ICsgdCAqIHk7XG5cblx0fSxcblxuXHQvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Ntb290aHN0ZXBcblxuXHRzbW9vdGhzdGVwOiBmdW5jdGlvbiAoIHgsIG1pbiwgbWF4ICkge1xuXG5cdFx0aWYgKCB4IDw9IG1pbiApIHJldHVybiAwO1xuXHRcdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHRcdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XG5cblx0XHRyZXR1cm4geCAqIHggKiAoIDMgLSAyICogeCApO1xuXG5cdH0sXG5cblx0c21vb3RoZXJzdGVwOiBmdW5jdGlvbiAoIHgsIG1pbiwgbWF4ICkge1xuXG5cdFx0aWYgKCB4IDw9IG1pbiApIHJldHVybiAwO1xuXHRcdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHRcdHggPSAoIHggLSBtaW4gKSAvICggbWF4IC0gbWluICk7XG5cblx0XHRyZXR1cm4geCAqIHggKiB4ICogKCB4ICogKCB4ICogNiAtIDE1ICkgKyAxMCApO1xuXG5cdH0sXG5cblx0Ly8gUmFuZG9tIGludGVnZXIgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxuXG5cdHJhbmRJbnQ6IGZ1bmN0aW9uICggbG93LCBoaWdoICkge1xuXG5cdFx0cmV0dXJuIGxvdyArIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKyAxICkgKTtcblxuXHR9LFxuXG5cdC8vIFJhbmRvbSBmbG9hdCBmcm9tIDxsb3csIGhpZ2g+IGludGVydmFsXG5cblx0cmFuZEZsb2F0OiBmdW5jdGlvbiAoIGxvdywgaGlnaCApIHtcblxuXHRcdHJldHVybiBsb3cgKyBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICk7XG5cblx0fSxcblxuXHQvLyBSYW5kb20gZmxvYXQgZnJvbSA8LXJhbmdlLzIsIHJhbmdlLzI+IGludGVydmFsXG5cblx0cmFuZEZsb2F0U3ByZWFkOiBmdW5jdGlvbiAoIHJhbmdlICkge1xuXG5cdFx0cmV0dXJuIHJhbmdlICogKCAwLjUgLSBNYXRoLnJhbmRvbSgpICk7XG5cblx0fSxcblxuXHRkZWdUb1JhZDogZnVuY3Rpb24gKCBkZWdyZWVzICkge1xuXG5cdFx0cmV0dXJuIGRlZ3JlZXMgKiBfTWF0aC5ERUcyUkFEO1xuXG5cdH0sXG5cblx0cmFkVG9EZWc6IGZ1bmN0aW9uICggcmFkaWFucyApIHtcblxuXHRcdHJldHVybiByYWRpYW5zICogX01hdGguUkFEMkRFRztcblxuXHR9LFxuXG5cdGlzUG93ZXJPZlR3bzogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHJldHVybiAoIHZhbHVlICYgKCB2YWx1ZSAtIDEgKSApID09PSAwICYmIHZhbHVlICE9PSAwO1xuXG5cdH0sXG5cblx0Y2VpbFBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguY2VpbCggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XG5cblx0fSxcblxuXHRmbG9vclBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguZmxvb3IoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy9cbiAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKi9cblxuZnVuY3Rpb24gVmVjdG9yMiggeCwgeSApIHtcblxuXHR0aGlzLnggPSB4IHx8IDA7XG5cdHRoaXMueSA9IHkgfHwgMDtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVmVjdG9yMi5wcm90b3R5cGUsIHtcblxuXHRcIndpZHRoXCI6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy54O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy54ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRcImhlaWdodFwiOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMueTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMueSA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3IyLnByb3RvdHlwZSwge1xuXG5cdGlzVmVjdG9yMjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFg6IGZ1bmN0aW9uICggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnkgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxlZFZlY3RvcjogZnVuY3Rpb24gKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YjogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGl2aWRlOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggLz0gdi54O1xuXHRcdHRoaXMueSAvPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpdmlkZVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXgzOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueTtcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeSArIGVbIDYgXTtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWluOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWF4OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXA6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pbi54LCBNYXRoLm1pbiggbWF4LngsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pbi55LCBNYXRoLm1pbiggbWF4LnksIHRoaXMueSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wU2NhbGFyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbWluID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgbWF4ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjbGFtcFNjYWxhciggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHRcdG1pbi5zZXQoIG1pblZhbCwgbWluVmFsICk7XG5cdFx0XHRtYXguc2V0KCBtYXhWYWwsIG1heFZhbCApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jbGFtcCggbWluLCBtYXggKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNsYW1wTGVuZ3RoOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIGxlbmd0aCB8fCAxICkubXVsdGlwbHlTY2FsYXIoIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIGxlbmd0aCApICkgKTtcblxuXHR9LFxuXG5cdGZsb29yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2VpbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdW5kVG9aZXJvOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSAoIHRoaXMueCA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy54ICkgOiBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSAoIHRoaXMueSA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy55ICkgOiBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bmVnYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSAtIHRoaXMueDtcblx0XHR0aGlzLnkgPSAtIHRoaXMueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZG90OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55O1xuXG5cdH0sXG5cblx0bGVuZ3RoU3E6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnk7XG5cblx0fSxcblxuXHRsZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSApO1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuTGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApO1xuXG5cdH0sXG5cblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH0sXG5cblx0YW5nbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGNvbXB1dGVzIHRoZSBhbmdsZSBpbiByYWRpYW5zIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzXG5cblx0XHR2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKCB0aGlzLnksIHRoaXMueCApO1xuXG5cdFx0aWYgKCBhbmdsZSA8IDAgKSBhbmdsZSArPSAyICogTWF0aC5QSTtcblxuXHRcdHJldHVybiBhbmdsZTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG86IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1NxdWFyZWQ6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHZhciBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2Lnk7XG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuRGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKTtcblxuXHR9LFxuXG5cdHNldExlbmd0aDogZnVuY3Rpb24gKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fSxcblxuXHRsZXJwOiBmdW5jdGlvbiAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsZXJwVmVjdG9yczogZnVuY3Rpb24gKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyggdjIsIHYxICkubXVsdGlwbHlTY2FsYXIoIGFscGhhICkuYWRkKCB2MSApO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy54ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMueSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3RhdGVBcm91bmQ6IGZ1bmN0aW9uICggY2VudGVyLCBhbmdsZSApIHtcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIGFuZ2xlICksIHMgPSBNYXRoLnNpbiggYW5nbGUgKTtcblxuXHRcdHZhciB4ID0gdGhpcy54IC0gY2VudGVyLng7XG5cdFx0dmFyIHkgPSB0aGlzLnkgLSBjZW50ZXIueTtcblxuXHRcdHRoaXMueCA9IHggKiBjIC0geSAqIHMgKyBjZW50ZXIueDtcblx0XHR0aGlzLnkgPSB4ICogcyArIHkgKiBjICsgY2VudGVyLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBzdXBlcmVnZ2JlcnQgLyBodHRwOi8vd3d3LnBhdWxicnVudC5jby51ay9cbiAqIEBhdXRob3IgcGhpbG9nYiAvIGh0dHA6Ly9ibG9nLnRoZWppdC5vcmcvXG4gKiBAYXV0aG9yIGpvcmRpX3JvcyAvIGh0dHA6Ly9wbGF0dHNvZnQuY29tXG4gKiBAYXV0aG9yIEQxcGxvMWQgLyBodHRwOi8vZ2l0aHViLmNvbS9EMXBsbzFkXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgdGlta25pcCAvIGh0dHA6Ly93d3cuZmxvb3JwbGFubmVyLmNvbS9cbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIE1hdHJpeDQoKSB7XG5cblx0dGhpcy5lbGVtZW50cyA9IFtcblxuXHRcdDEsIDAsIDAsIDAsXG5cdFx0MCwgMSwgMCwgMCxcblx0XHQwLCAwLCAxLCAwLFxuXHRcdDAsIDAsIDAsIDFcblxuXHRdO1xuXG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC4nICk7XG5cblx0fVxuXG59XG5cbk9iamVjdC5hc3NpZ24oIE1hdHJpeDQucHJvdG90eXBlLCB7XG5cblx0aXNNYXRyaXg0OiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCBuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG4xMTsgdGVbIDQgXSA9IG4xMjsgdGVbIDggXSA9IG4xMzsgdGVbIDEyIF0gPSBuMTQ7XG5cdFx0dGVbIDEgXSA9IG4yMTsgdGVbIDUgXSA9IG4yMjsgdGVbIDkgXSA9IG4yMzsgdGVbIDEzIF0gPSBuMjQ7XG5cdFx0dGVbIDIgXSA9IG4zMTsgdGVbIDYgXSA9IG4zMjsgdGVbIDEwIF0gPSBuMzM7IHRlWyAxNCBdID0gbjM0O1xuXHRcdHRlWyAzIF0gPSBuNDE7IHRlWyA3IF0gPSBuNDI7IHRlWyAxMSBdID0gbjQzOyB0ZVsgMTUgXSA9IG40NDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0aWRlbnRpdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLCAwLFxuXHRcdFx0MCwgMSwgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KCB0aGlzLmVsZW1lbnRzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbWVbIDAgXTsgdGVbIDEgXSA9IG1lWyAxIF07IHRlWyAyIF0gPSBtZVsgMiBdOyB0ZVsgMyBdID0gbWVbIDMgXTtcblx0XHR0ZVsgNCBdID0gbWVbIDQgXTsgdGVbIDUgXSA9IG1lWyA1IF07IHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTtcblx0XHR0ZVsgOCBdID0gbWVbIDggXTsgdGVbIDkgXSA9IG1lWyA5IF07IHRlWyAxMCBdID0gbWVbIDEwIF07IHRlWyAxMSBdID0gbWVbIDExIF07XG5cdFx0dGVbIDEyIF0gPSBtZVsgMTIgXTsgdGVbIDEzIF0gPSBtZVsgMTMgXTsgdGVbIDE0IF0gPSBtZVsgMTQgXTsgdGVbIDE1IF0gPSBtZVsgMTUgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVBvc2l0aW9uOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0ZVsgMTIgXSA9IG1lWyAxMiBdO1xuXHRcdHRlWyAxMyBdID0gbWVbIDEzIF07XG5cdFx0dGVbIDE0IF0gPSBtZVsgMTQgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXh0cmFjdEJhc2lzOiBmdW5jdGlvbiAoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7XG5cblx0XHR4QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAwICk7XG5cdFx0eUF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMSApO1xuXHRcdHpBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZUJhc2lzOiBmdW5jdGlvbiAoIHhBeGlzLCB5QXhpcywgekF4aXMgKSB7XG5cblx0XHR0aGlzLnNldChcblx0XHRcdHhBeGlzLngsIHlBeGlzLngsIHpBeGlzLngsIDAsXG5cdFx0XHR4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLFxuXHRcdFx0eEF4aXMueiwgeUF4aXMueiwgekF4aXMueiwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHRyYWN0Um90YXRpb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZXh0cmFjdFJvdGF0aW9uKCBtICkge1xuXG5cdFx0XHQvLyB0aGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IHJlZmxlY3Rpb24gbWF0cmljZXNcblxuXHRcdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHRcdHZhciBzY2FsZVggPSAxIC8gdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdFx0dmFyIHNjYWxlWSA9IDEgLyB2MS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XG5cdFx0XHR2YXIgc2NhbGVaID0gMSAvIHYxLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDIgKS5sZW5ndGgoKTtcblxuXHRcdFx0dGVbIDAgXSA9IG1lWyAwIF0gKiBzY2FsZVg7XG5cdFx0XHR0ZVsgMSBdID0gbWVbIDEgXSAqIHNjYWxlWDtcblx0XHRcdHRlWyAyIF0gPSBtZVsgMiBdICogc2NhbGVYO1xuXHRcdFx0dGVbIDMgXSA9IDA7XG5cblx0XHRcdHRlWyA0IF0gPSBtZVsgNCBdICogc2NhbGVZO1xuXHRcdFx0dGVbIDUgXSA9IG1lWyA1IF0gKiBzY2FsZVk7XG5cdFx0XHR0ZVsgNiBdID0gbWVbIDYgXSAqIHNjYWxlWTtcblx0XHRcdHRlWyA3IF0gPSAwO1xuXG5cdFx0XHR0ZVsgOCBdID0gbWVbIDggXSAqIHNjYWxlWjtcblx0XHRcdHRlWyA5IF0gPSBtZVsgOSBdICogc2NhbGVaO1xuXHRcdFx0dGVbIDEwIF0gPSBtZVsgMTAgXSAqIHNjYWxlWjtcblx0XHRcdHRlWyAxMSBdID0gMDtcblxuXHRcdFx0dGVbIDEyIF0gPSAwO1xuXHRcdFx0dGVbIDEzIF0gPSAwO1xuXHRcdFx0dGVbIDE0IF0gPSAwO1xuXHRcdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdG1ha2VSb3RhdGlvbkZyb21FdWxlcjogZnVuY3Rpb24gKCBldWxlciApIHtcblxuXHRcdGlmICggISAoIGV1bGVyICYmIGV1bGVyLmlzRXVsZXIgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5tYWtlUm90YXRpb25Gcm9tRXVsZXIoKSBub3cgZXhwZWN0cyBhIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuJyApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciB4ID0gZXVsZXIueCwgeSA9IGV1bGVyLnksIHogPSBldWxlci56O1xuXHRcdHZhciBhID0gTWF0aC5jb3MoIHggKSwgYiA9IE1hdGguc2luKCB4ICk7XG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggeSApLCBkID0gTWF0aC5zaW4oIHkgKTtcblx0XHR2YXIgZSA9IE1hdGguY29zKCB6ICksIGYgPSBNYXRoLnNpbiggeiApO1xuXG5cdFx0aWYgKCBldWxlci5vcmRlciA9PT0gJ1hZWicgKSB7XG5cblx0XHRcdHZhciBhZSA9IGEgKiBlLCBhZiA9IGEgKiBmLCBiZSA9IGIgKiBlLCBiZiA9IGIgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gLSBjICogZjtcblx0XHRcdHRlWyA4IF0gPSBkO1xuXG5cdFx0XHR0ZVsgMSBdID0gYWYgKyBiZSAqIGQ7XG5cdFx0XHR0ZVsgNSBdID0gYWUgLSBiZiAqIGQ7XG5cdFx0XHR0ZVsgOSBdID0gLSBiICogYztcblxuXHRcdFx0dGVbIDIgXSA9IGJmIC0gYWUgKiBkO1xuXHRcdFx0dGVbIDYgXSA9IGJlICsgYWYgKiBkO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWVhaJyApIHtcblxuXHRcdFx0dmFyIGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjZSArIGRmICogYjtcblx0XHRcdHRlWyA0IF0gPSBkZSAqIGIgLSBjZjtcblx0XHRcdHRlWyA4IF0gPSBhICogZDtcblxuXHRcdFx0dGVbIDEgXSA9IGEgKiBmO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IC0gYjtcblxuXHRcdFx0dGVbIDIgXSA9IGNmICogYiAtIGRlO1xuXHRcdFx0dGVbIDYgXSA9IGRmICsgY2UgKiBiO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWlhZJyApIHtcblxuXHRcdFx0dmFyIGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjZSAtIGRmICogYjtcblx0XHRcdHRlWyA0IF0gPSAtIGEgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGRlICsgY2YgKiBiO1xuXG5cdFx0XHR0ZVsgMSBdID0gY2YgKyBkZSAqIGI7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gZGYgLSBjZSAqIGI7XG5cblx0XHRcdHRlWyAyIF0gPSAtIGEgKiBkO1xuXHRcdFx0dGVbIDYgXSA9IGI7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdaWVgnICkge1xuXG5cdFx0XHR2YXIgYWUgPSBhICogZSwgYWYgPSBhICogZiwgYmUgPSBiICogZSwgYmYgPSBiICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IGJlICogZCAtIGFmO1xuXHRcdFx0dGVbIDggXSA9IGFlICogZCArIGJmO1xuXG5cdFx0XHR0ZVsgMSBdID0gYyAqIGY7XG5cdFx0XHR0ZVsgNSBdID0gYmYgKiBkICsgYWU7XG5cdFx0XHR0ZVsgOSBdID0gYWYgKiBkIC0gYmU7XG5cblx0XHRcdHRlWyAyIF0gPSAtIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYiAqIGM7XG5cdFx0XHR0ZVsgMTAgXSA9IGEgKiBjO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdZWlgnICkge1xuXG5cdFx0XHR2YXIgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IGJkIC0gYWMgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGJjICogZiArIGFkO1xuXG5cdFx0XHR0ZVsgMSBdID0gZjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSAtIGIgKiBlO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBkICogZTtcblx0XHRcdHRlWyA2IF0gPSBhZCAqIGYgKyBiYztcblx0XHRcdHRlWyAxMCBdID0gYWMgLSBiZCAqIGY7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1haWScgKSB7XG5cblx0XHRcdHZhciBhYyA9IGEgKiBjLCBhZCA9IGEgKiBkLCBiYyA9IGIgKiBjLCBiZCA9IGIgKiBkO1xuXG5cdFx0XHR0ZVsgMCBdID0gYyAqIGU7XG5cdFx0XHR0ZVsgNCBdID0gLSBmO1xuXHRcdFx0dGVbIDggXSA9IGQgKiBlO1xuXG5cdFx0XHR0ZVsgMSBdID0gYWMgKiBmICsgYmQ7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gYWQgKiBmIC0gYmM7XG5cblx0XHRcdHRlWyAyIF0gPSBiYyAqIGYgLSBhZDtcblx0XHRcdHRlWyA2IF0gPSBiICogZTtcblx0XHRcdHRlWyAxMCBdID0gYmQgKiBmICsgYWM7XG5cblx0XHR9XG5cblx0XHQvLyBib3R0b20gcm93XG5cdFx0dGVbIDMgXSA9IDA7XG5cdFx0dGVbIDcgXSA9IDA7XG5cdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0Ly8gbGFzdCBjb2x1bW5cblx0XHR0ZVsgMTIgXSA9IDA7XG5cdFx0dGVbIDEzIF0gPSAwO1xuXHRcdHRlWyAxNCBdID0gMDtcblx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgemVybyA9IG5ldyBWZWN0b3IzKCAwLCAwLCAwICk7XG5cdFx0dmFyIG9uZSA9IG5ldyBWZWN0b3IzKCAxLCAxLCAxICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmNvbXBvc2UoIHplcm8sIHEsIG9uZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bG9va0F0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgeCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHkgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB6ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBsb29rQXQoIGV5ZSwgdGFyZ2V0LCB1cCApIHtcblxuXHRcdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdFx0ei5zdWJWZWN0b3JzKCBleWUsIHRhcmdldCApO1xuXG5cdFx0XHRpZiAoIHoubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBleWUgYW5kIHRhcmdldCBhcmUgaW4gdGhlIHNhbWUgcG9zaXRpb25cblxuXHRcdFx0XHR6LnogPSAxO1xuXG5cdFx0XHR9XG5cblx0XHRcdHoubm9ybWFsaXplKCk7XG5cdFx0XHR4LmNyb3NzVmVjdG9ycyggdXAsIHogKTtcblxuXHRcdFx0aWYgKCB4Lmxlbmd0aFNxKCkgPT09IDAgKSB7XG5cblx0XHRcdFx0Ly8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXG5cblx0XHRcdFx0aWYgKCBNYXRoLmFicyggdXAueiApID09PSAxICkge1xuXG5cdFx0XHRcdFx0ei54ICs9IDAuMDAwMTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ei56ICs9IDAuMDAwMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ei5ub3JtYWxpemUoKTtcblx0XHRcdFx0eC5jcm9zc1ZlY3RvcnMoIHVwLCB6ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0eC5ub3JtYWxpemUoKTtcblx0XHRcdHkuY3Jvc3NWZWN0b3JzKCB6LCB4ICk7XG5cblx0XHRcdHRlWyAwIF0gPSB4Lng7IHRlWyA0IF0gPSB5Lng7IHRlWyA4IF0gPSB6Lng7XG5cdFx0XHR0ZVsgMSBdID0geC55OyB0ZVsgNSBdID0geS55OyB0ZVsgOSBdID0gei55O1xuXHRcdFx0dGVbIDIgXSA9IHguejsgdGVbIDYgXSA9IHkuejsgdGVbIDEwIF0gPSB6Lno7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bXVsdGlwbHk6IGZ1bmN0aW9uICggbSwgbiApIHtcblxuXHRcdGlmICggbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseU1hdHJpY2VzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCBtLCBuICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLCBtICk7XG5cblx0fSxcblxuXHRwcmVtdWx0aXBseTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlNYXRyaWNlczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dmFyIGFlID0gYS5lbGVtZW50cztcblx0XHR2YXIgYmUgPSBiLmVsZW1lbnRzO1xuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgYTExID0gYWVbIDAgXSwgYTEyID0gYWVbIDQgXSwgYTEzID0gYWVbIDggXSwgYTE0ID0gYWVbIDEyIF07XG5cdFx0dmFyIGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA1IF0sIGEyMyA9IGFlWyA5IF0sIGEyNCA9IGFlWyAxMyBdO1xuXHRcdHZhciBhMzEgPSBhZVsgMiBdLCBhMzIgPSBhZVsgNiBdLCBhMzMgPSBhZVsgMTAgXSwgYTM0ID0gYWVbIDE0IF07XG5cdFx0dmFyIGE0MSA9IGFlWyAzIF0sIGE0MiA9IGFlWyA3IF0sIGE0MyA9IGFlWyAxMSBdLCBhNDQgPSBhZVsgMTUgXTtcblxuXHRcdHZhciBiMTEgPSBiZVsgMCBdLCBiMTIgPSBiZVsgNCBdLCBiMTMgPSBiZVsgOCBdLCBiMTQgPSBiZVsgMTIgXTtcblx0XHR2YXIgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDUgXSwgYjIzID0gYmVbIDkgXSwgYjI0ID0gYmVbIDEzIF07XG5cdFx0dmFyIGIzMSA9IGJlWyAyIF0sIGIzMiA9IGJlWyA2IF0sIGIzMyA9IGJlWyAxMCBdLCBiMzQgPSBiZVsgMTQgXTtcblx0XHR2YXIgYjQxID0gYmVbIDMgXSwgYjQyID0gYmVbIDcgXSwgYjQzID0gYmVbIDExIF0sIGI0NCA9IGJlWyAxNSBdO1xuXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMSArIGExNCAqIGI0MTtcblx0XHR0ZVsgNCBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyICsgYTE0ICogYjQyO1xuXHRcdHRlWyA4IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzMgKyBhMTQgKiBiNDM7XG5cdFx0dGVbIDEyIF0gPSBhMTEgKiBiMTQgKyBhMTIgKiBiMjQgKyBhMTMgKiBiMzQgKyBhMTQgKiBiNDQ7XG5cblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxICsgYTI0ICogYjQxO1xuXHRcdHRlWyA1IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzIgKyBhMjQgKiBiNDI7XG5cdFx0dGVbIDkgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMyArIGEyNCAqIGI0Mztcblx0XHR0ZVsgMTMgXSA9IGEyMSAqIGIxNCArIGEyMiAqIGIyNCArIGEyMyAqIGIzNCArIGEyNCAqIGI0NDtcblxuXHRcdHRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzEgKyBhMzQgKiBiNDE7XG5cdFx0dGVbIDYgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMiArIGEzNCAqIGI0Mjtcblx0XHR0ZVsgMTAgXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMyArIGEzNCAqIGI0Mztcblx0XHR0ZVsgMTQgXSA9IGEzMSAqIGIxNCArIGEzMiAqIGIyNCArIGEzMyAqIGIzNCArIGEzNCAqIGI0NDtcblxuXHRcdHRlWyAzIF0gPSBhNDEgKiBiMTEgKyBhNDIgKiBiMjEgKyBhNDMgKiBiMzEgKyBhNDQgKiBiNDE7XG5cdFx0dGVbIDcgXSA9IGE0MSAqIGIxMiArIGE0MiAqIGIyMiArIGE0MyAqIGIzMiArIGE0NCAqIGI0Mjtcblx0XHR0ZVsgMTEgXSA9IGE0MSAqIGIxMyArIGE0MiAqIGIyMyArIGE0MyAqIGIzMyArIGE0NCAqIGI0Mztcblx0XHR0ZVsgMTUgXSA9IGE0MSAqIGIxNCArIGE0MiAqIGIyNCArIGE0MyAqIGIzNCArIGE0NCAqIGI0NDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICo9IHM7IHRlWyA0IF0gKj0gczsgdGVbIDggXSAqPSBzOyB0ZVsgMTIgXSAqPSBzO1xuXHRcdHRlWyAxIF0gKj0gczsgdGVbIDUgXSAqPSBzOyB0ZVsgOSBdICo9IHM7IHRlWyAxMyBdICo9IHM7XG5cdFx0dGVbIDIgXSAqPSBzOyB0ZVsgNiBdICo9IHM7IHRlWyAxMCBdICo9IHM7IHRlWyAxNCBdICo9IHM7XG5cdFx0dGVbIDMgXSAqPSBzOyB0ZVsgNyBdICo9IHM7IHRlWyAxMSBdICo9IHM7IHRlWyAxNSBdICo9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5VG9CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHYxLnggPSBhdHRyaWJ1dGUuZ2V0WCggaSApO1xuXHRcdFx0XHR2MS55ID0gYXR0cmlidXRlLmdldFkoIGkgKTtcblx0XHRcdFx0djEueiA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7XG5cblx0XHRcdFx0djEuYXBwbHlNYXRyaXg0KCB0aGlzICk7XG5cblx0XHRcdFx0YXR0cmlidXRlLnNldFhZWiggaSwgdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhdHRyaWJ1dGU7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRkZXRlcm1pbmFudDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBuMTEgPSB0ZVsgMCBdLCBuMTIgPSB0ZVsgNCBdLCBuMTMgPSB0ZVsgOCBdLCBuMTQgPSB0ZVsgMTIgXTtcblx0XHR2YXIgbjIxID0gdGVbIDEgXSwgbjIyID0gdGVbIDUgXSwgbjIzID0gdGVbIDkgXSwgbjI0ID0gdGVbIDEzIF07XG5cdFx0dmFyIG4zMSA9IHRlWyAyIF0sIG4zMiA9IHRlWyA2IF0sIG4zMyA9IHRlWyAxMCBdLCBuMzQgPSB0ZVsgMTQgXTtcblx0XHR2YXIgbjQxID0gdGVbIDMgXSwgbjQyID0gdGVbIDcgXSwgbjQzID0gdGVbIDExIF0sIG40NCA9IHRlWyAxNSBdO1xuXG5cdFx0Ly9UT0RPOiBtYWtlIHRoaXMgbW9yZSBlZmZpY2llbnRcblx0XHQvLyggYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtIClcblxuXHRcdHJldHVybiAoXG5cdFx0XHRuNDEgKiAoXG5cdFx0XHRcdCsgbjE0ICogbjIzICogbjMyXG5cdFx0XHRcdCAtIG4xMyAqIG4yNCAqIG4zMlxuXHRcdFx0XHQgLSBuMTQgKiBuMjIgKiBuMzNcblx0XHRcdFx0ICsgbjEyICogbjI0ICogbjMzXG5cdFx0XHRcdCArIG4xMyAqIG4yMiAqIG4zNFxuXHRcdFx0XHQgLSBuMTIgKiBuMjMgKiBuMzRcblx0XHRcdCkgK1xuXHRcdFx0bjQyICogKFxuXHRcdFx0XHQrIG4xMSAqIG4yMyAqIG4zNFxuXHRcdFx0XHQgLSBuMTEgKiBuMjQgKiBuMzNcblx0XHRcdFx0ICsgbjE0ICogbjIxICogbjMzXG5cdFx0XHRcdCAtIG4xMyAqIG4yMSAqIG4zNFxuXHRcdFx0XHQgKyBuMTMgKiBuMjQgKiBuMzFcblx0XHRcdFx0IC0gbjE0ICogbjIzICogbjMxXG5cdFx0XHQpICtcblx0XHRcdG40MyAqIChcblx0XHRcdFx0KyBuMTEgKiBuMjQgKiBuMzJcblx0XHRcdFx0IC0gbjExICogbjIyICogbjM0XG5cdFx0XHRcdCAtIG4xNCAqIG4yMSAqIG4zMlxuXHRcdFx0XHQgKyBuMTIgKiBuMjEgKiBuMzRcblx0XHRcdFx0ICsgbjE0ICogbjIyICogbjMxXG5cdFx0XHRcdCAtIG4xMiAqIG4yNCAqIG4zMVxuXHRcdFx0KSArXG5cdFx0XHRuNDQgKiAoXG5cdFx0XHRcdC0gbjEzICogbjIyICogbjMxXG5cdFx0XHRcdCAtIG4xMSAqIG4yMyAqIG4zMlxuXHRcdFx0XHQgKyBuMTEgKiBuMjIgKiBuMzNcblx0XHRcdFx0ICsgbjEzICogbjIxICogbjMyXG5cdFx0XHRcdCAtIG4xMiAqIG4yMSAqIG4zM1xuXHRcdFx0XHQgKyBuMTIgKiBuMjMgKiBuMzFcblx0XHRcdClcblxuXHRcdCk7XG5cblx0fSxcblxuXHR0cmFuc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIHRtcDtcblxuXHRcdHRtcCA9IHRlWyAxIF07IHRlWyAxIF0gPSB0ZVsgNCBdOyB0ZVsgNCBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyAyIF07IHRlWyAyIF0gPSB0ZVsgOCBdOyB0ZVsgOCBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyA2IF07IHRlWyA2IF0gPSB0ZVsgOSBdOyB0ZVsgOSBdID0gdG1wO1xuXG5cdFx0dG1wID0gdGVbIDMgXTsgdGVbIDMgXSA9IHRlWyAxMiBdOyB0ZVsgMTIgXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgNyBdOyB0ZVsgNyBdID0gdGVbIDEzIF07IHRlWyAxMyBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyAxMSBdOyB0ZVsgMTEgXSA9IHRlWyAxNCBdOyB0ZVsgMTQgXSA9IHRtcDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UG9zaXRpb246IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMTIgXSA9IHYueDtcblx0XHR0ZVsgMTMgXSA9IHYueTtcblx0XHR0ZVsgMTQgXSA9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0SW52ZXJzZTogZnVuY3Rpb24gKCBtLCB0aHJvd09uRGVnZW5lcmF0ZSApIHtcblxuXHRcdC8vIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bVxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cdFx0XHRtZSA9IG0uZWxlbWVudHMsXG5cblx0XHRcdG4xMSA9IG1lWyAwIF0sIG4yMSA9IG1lWyAxIF0sIG4zMSA9IG1lWyAyIF0sIG40MSA9IG1lWyAzIF0sXG5cdFx0XHRuMTIgPSBtZVsgNCBdLCBuMjIgPSBtZVsgNSBdLCBuMzIgPSBtZVsgNiBdLCBuNDIgPSBtZVsgNyBdLFxuXHRcdFx0bjEzID0gbWVbIDggXSwgbjIzID0gbWVbIDkgXSwgbjMzID0gbWVbIDEwIF0sIG40MyA9IG1lWyAxMSBdLFxuXHRcdFx0bjE0ID0gbWVbIDEyIF0sIG4yNCA9IG1lWyAxMyBdLCBuMzQgPSBtZVsgMTQgXSwgbjQ0ID0gbWVbIDE1IF0sXG5cblx0XHRcdHQxMSA9IG4yMyAqIG4zNCAqIG40MiAtIG4yNCAqIG4zMyAqIG40MiArIG4yNCAqIG4zMiAqIG40MyAtIG4yMiAqIG4zNCAqIG40MyAtIG4yMyAqIG4zMiAqIG40NCArIG4yMiAqIG4zMyAqIG40NCxcblx0XHRcdHQxMiA9IG4xNCAqIG4zMyAqIG40MiAtIG4xMyAqIG4zNCAqIG40MiAtIG4xNCAqIG4zMiAqIG40MyArIG4xMiAqIG4zNCAqIG40MyArIG4xMyAqIG4zMiAqIG40NCAtIG4xMiAqIG4zMyAqIG40NCxcblx0XHRcdHQxMyA9IG4xMyAqIG4yNCAqIG40MiAtIG4xNCAqIG4yMyAqIG40MiArIG4xNCAqIG4yMiAqIG40MyAtIG4xMiAqIG4yNCAqIG40MyAtIG4xMyAqIG4yMiAqIG40NCArIG4xMiAqIG4yMyAqIG40NCxcblx0XHRcdHQxNCA9IG4xNCAqIG4yMyAqIG4zMiAtIG4xMyAqIG4yNCAqIG4zMiAtIG4xNCAqIG4yMiAqIG4zMyArIG4xMiAqIG4yNCAqIG4zMyArIG4xMyAqIG4yMiAqIG4zNCAtIG4xMiAqIG4yMyAqIG4zNDtcblxuXHRcdHZhciBkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTMgKyBuNDEgKiB0MTQ7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHtcblxuXHRcdFx0dmFyIG1zZyA9IFwiVEhSRUUuTWF0cml4NDogLmdldEludmVyc2UoKSBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCI7XG5cblx0XHRcdGlmICggdGhyb3dPbkRlZ2VuZXJhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIG1zZyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmlkZW50aXR5KCk7XG5cblx0XHR9XG5cblx0XHR2YXIgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjI0ICogbjMzICogbjQxIC0gbjIzICogbjM0ICogbjQxIC0gbjI0ICogbjMxICogbjQzICsgbjIxICogbjM0ICogbjQzICsgbjIzICogbjMxICogbjQ0IC0gbjIxICogbjMzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjIyICogbjM0ICogbjQxIC0gbjI0ICogbjMyICogbjQxICsgbjI0ICogbjMxICogbjQyIC0gbjIxICogbjM0ICogbjQyIC0gbjIyICogbjMxICogbjQ0ICsgbjIxICogbjMyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDMgXSA9ICggbjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgNCBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4xMyAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMyAqIG40MSArIG4xNCAqIG4zMSAqIG40MyAtIG4xMSAqIG4zNCAqIG40MyAtIG4xMyAqIG4zMSAqIG40NCArIG4xMSAqIG4zMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA2IF0gPSAoIG4xNCAqIG4zMiAqIG40MSAtIG4xMiAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMSAqIG40MiArIG4xMSAqIG4zNCAqIG40MiArIG4xMiAqIG4zMSAqIG40NCAtIG4xMSAqIG4zMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA3IF0gPSAoIG4xMiAqIG4zMyAqIG40MSAtIG4xMyAqIG4zMiAqIG40MSArIG4xMyAqIG4zMSAqIG40MiAtIG4xMSAqIG4zMyAqIG40MiAtIG4xMiAqIG4zMSAqIG40MyArIG4xMSAqIG4zMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDggXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgOSBdID0gKCBuMTQgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjEgKiBuNDMgKyBuMTEgKiBuMjQgKiBuNDMgKyBuMTMgKiBuMjEgKiBuNDQgLSBuMTEgKiBuMjMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMTAgXSA9ICggbjEyICogbjI0ICogbjQxIC0gbjE0ICogbjIyICogbjQxICsgbjE0ICogbjIxICogbjQyIC0gbjExICogbjI0ICogbjQyIC0gbjEyICogbjIxICogbjQ0ICsgbjExICogbjIyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDExIF0gPSAoIG4xMyAqIG4yMiAqIG40MSAtIG4xMiAqIG4yMyAqIG40MSAtIG4xMyAqIG4yMSAqIG40MiArIG4xMSAqIG4yMyAqIG40MiArIG4xMiAqIG4yMSAqIG40MyAtIG4xMSAqIG4yMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDEyIF0gPSB0MTQgKiBkZXRJbnY7XG5cdFx0dGVbIDEzIF0gPSAoIG4xMyAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMyAqIG4zMSArIG4xNCAqIG4yMSAqIG4zMyAtIG4xMSAqIG4yNCAqIG4zMyAtIG4xMyAqIG4yMSAqIG4zNCArIG4xMSAqIG4yMyAqIG4zNCApICogZGV0SW52O1xuXHRcdHRlWyAxNCBdID0gKCBuMTQgKiBuMjIgKiBuMzEgLSBuMTIgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjEgKiBuMzIgKyBuMTEgKiBuMjQgKiBuMzIgKyBuMTIgKiBuMjEgKiBuMzQgLSBuMTEgKiBuMjIgKiBuMzQgKSAqIGRldEludjtcblx0XHR0ZVsgMTUgXSA9ICggbjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzICkgKiBkZXRJbnY7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciB4ID0gdi54LCB5ID0gdi55LCB6ID0gdi56O1xuXG5cdFx0dGVbIDAgXSAqPSB4OyB0ZVsgNCBdICo9IHk7IHRlWyA4IF0gKj0gejtcblx0XHR0ZVsgMSBdICo9IHg7IHRlWyA1IF0gKj0geTsgdGVbIDkgXSAqPSB6O1xuXHRcdHRlWyAyIF0gKj0geDsgdGVbIDYgXSAqPSB5OyB0ZVsgMTAgXSAqPSB6O1xuXHRcdHRlWyAzIF0gKj0geDsgdGVbIDcgXSAqPSB5OyB0ZVsgMTEgXSAqPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRNYXhTY2FsZU9uQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBzY2FsZVhTcSA9IHRlWyAwIF0gKiB0ZVsgMCBdICsgdGVbIDEgXSAqIHRlWyAxIF0gKyB0ZVsgMiBdICogdGVbIDIgXTtcblx0XHR2YXIgc2NhbGVZU3EgPSB0ZVsgNCBdICogdGVbIDQgXSArIHRlWyA1IF0gKiB0ZVsgNSBdICsgdGVbIDYgXSAqIHRlWyA2IF07XG5cdFx0dmFyIHNjYWxlWlNxID0gdGVbIDggXSAqIHRlWyA4IF0gKyB0ZVsgOSBdICogdGVbIDkgXSArIHRlWyAxMCBdICogdGVbIDEwIF07XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLm1heCggc2NhbGVYU3EsIHNjYWxlWVNxLCBzY2FsZVpTcSApICk7XG5cblx0fSxcblxuXHRtYWtlVHJhbnNsYXRpb246IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLCB4LFxuXHRcdFx0MCwgMSwgMCwgeSxcblx0XHRcdDAsIDAsIDEsIHosXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25YOiBmdW5jdGlvbiAoIHRoZXRhICkge1xuXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCBjLCAtIHMsIDAsXG5cdFx0XHQwLCBzLCBjLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVJvdGF0aW9uWTogZnVuY3Rpb24gKCB0aGV0YSApIHtcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQgYywgMCwgcywgMCxcblx0XHRcdCAwLCAxLCAwLCAwLFxuXHRcdFx0LSBzLCAwLCBjLCAwLFxuXHRcdFx0IDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VSb3RhdGlvblo6IGZ1bmN0aW9uICggdGhldGEgKSB7XG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0YywgLSBzLCAwLCAwLFxuXHRcdFx0cywgYywgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25BeGlzOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gQmFzZWQgb24gaHR0cDovL3d3dy5nYW1lZGV2Lm5ldC9yZWZlcmVuY2UvYXJ0aWNsZXMvYXJ0aWNsZTExOTkuYXNwXG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCBhbmdsZSApO1xuXHRcdHZhciBzID0gTWF0aC5zaW4oIGFuZ2xlICk7XG5cdFx0dmFyIHQgPSAxIC0gYztcblx0XHR2YXIgeCA9IGF4aXMueCwgeSA9IGF4aXMueSwgeiA9IGF4aXMuejtcblx0XHR2YXIgdHggPSB0ICogeCwgdHkgPSB0ICogeTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHR0eCAqIHggKyBjLCB0eCAqIHkgLSBzICogeiwgdHggKiB6ICsgcyAqIHksIDAsXG5cdFx0XHR0eCAqIHkgKyBzICogeiwgdHkgKiB5ICsgYywgdHkgKiB6IC0gcyAqIHgsIDAsXG5cdFx0XHR0eCAqIHogLSBzICogeSwgdHkgKiB6ICsgcyAqIHgsIHQgKiB6ICogeiArIGMsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0IHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVNjYWxlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0eCwgMCwgMCwgMCxcblx0XHRcdDAsIHksIDAsIDAsXG5cdFx0XHQwLCAwLCB6LCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVNoZWFyOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgeSwgeiwgMCxcblx0XHRcdHgsIDEsIHosIDAsXG5cdFx0XHR4LCB5LCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29tcG9zZTogZnVuY3Rpb24gKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIHggPSBxdWF0ZXJuaW9uLl94LCB5ID0gcXVhdGVybmlvbi5feSwgeiA9IHF1YXRlcm5pb24uX3osIHcgPSBxdWF0ZXJuaW9uLl93O1xuXHRcdHZhciB4MiA9IHggKyB4LFx0eTIgPSB5ICsgeSwgejIgPSB6ICsgejtcblx0XHR2YXIgeHggPSB4ICogeDIsIHh5ID0geCAqIHkyLCB4eiA9IHggKiB6Mjtcblx0XHR2YXIgeXkgPSB5ICogeTIsIHl6ID0geSAqIHoyLCB6eiA9IHogKiB6Mjtcblx0XHR2YXIgd3ggPSB3ICogeDIsIHd5ID0gdyAqIHkyLCB3eiA9IHcgKiB6MjtcblxuXHRcdHZhciBzeCA9IHNjYWxlLngsIHN5ID0gc2NhbGUueSwgc3ogPSBzY2FsZS56O1xuXG5cdCAgICAgICAgdGVbIDAgXSA9ICggMSAtICggeXkgKyB6eiApICkgKiBzeDtcblx0ICAgICAgICB0ZVsgMSBdID0gKCB4eSArIHd6ICkgKiBzeDtcblx0ICAgICAgICB0ZVsgMiBdID0gKCB4eiAtIHd5ICkgKiBzeDtcblx0ICAgICAgICB0ZVsgMyBdID0gMDtcblxuXHQgICAgICAgIHRlWyA0IF0gPSAoIHh5IC0gd3ogKSAqIHN5O1xuXHQgICAgICAgIHRlWyA1IF0gPSAoIDEgLSAoIHh4ICsgenogKSApICogc3k7XG5cdCAgICAgICAgdGVbIDYgXSA9ICggeXogKyB3eCApICogc3k7XG5cdCAgICAgICAgdGVbIDcgXSA9IDA7XG5cblx0ICAgICAgICB0ZVsgOCBdID0gKCB4eiArIHd5ICkgKiBzejtcblx0ICAgICAgICB0ZVsgOSBdID0gKCB5eiAtIHd4ICkgKiBzejtcblx0ICAgICAgICB0ZVsgMTAgXSA9ICggMSAtICggeHggKyB5eSApICkgKiBzejtcblx0ICAgICAgICB0ZVsgMTEgXSA9IDA7XG5cblx0ICAgICAgICB0ZVsgMTIgXSA9IHBvc2l0aW9uLng7XG5cdCAgICAgICAgdGVbIDEzIF0gPSBwb3NpdGlvbi55O1xuXHQgICAgICAgIHRlWyAxNCBdID0gcG9zaXRpb24uejtcblx0ICAgICAgICB0ZVsgMTUgXSA9IDE7XG5cblx0ICAgICAgICByZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRlY29tcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRcdHZhciBzeCA9IHZlY3Rvci5zZXQoIHRlWyAwIF0sIHRlWyAxIF0sIHRlWyAyIF0gKS5sZW5ndGgoKTtcblx0XHRcdHZhciBzeSA9IHZlY3Rvci5zZXQoIHRlWyA0IF0sIHRlWyA1IF0sIHRlWyA2IF0gKS5sZW5ndGgoKTtcblx0XHRcdHZhciBzeiA9IHZlY3Rvci5zZXQoIHRlWyA4IF0sIHRlWyA5IF0sIHRlWyAxMCBdICkubGVuZ3RoKCk7XG5cblx0XHRcdC8vIGlmIGRldGVybWluZSBpcyBuZWdhdGl2ZSwgd2UgbmVlZCB0byBpbnZlcnQgb25lIHNjYWxlXG5cdFx0XHR2YXIgZGV0ID0gdGhpcy5kZXRlcm1pbmFudCgpO1xuXHRcdFx0aWYgKCBkZXQgPCAwICkgc3ggPSAtIHN4O1xuXG5cdFx0XHRwb3NpdGlvbi54ID0gdGVbIDEyIF07XG5cdFx0XHRwb3NpdGlvbi55ID0gdGVbIDEzIF07XG5cdFx0XHRwb3NpdGlvbi56ID0gdGVbIDE0IF07XG5cblx0XHRcdC8vIHNjYWxlIHRoZSByb3RhdGlvbiBwYXJ0XG5cdFx0XHRtYXRyaXguY29weSggdGhpcyApO1xuXG5cdFx0XHR2YXIgaW52U1ggPSAxIC8gc3g7XG5cdFx0XHR2YXIgaW52U1kgPSAxIC8gc3k7XG5cdFx0XHR2YXIgaW52U1ogPSAxIC8gc3o7XG5cblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgMCBdICo9IGludlNYO1xuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxIF0gKj0gaW52U1g7XG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDIgXSAqPSBpbnZTWDtcblxuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyA0IF0gKj0gaW52U1k7XG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDUgXSAqPSBpbnZTWTtcblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgNiBdICo9IGludlNZO1xuXG5cdFx0XHRtYXRyaXguZWxlbWVudHNbIDggXSAqPSBpbnZTWjtcblx0XHRcdG1hdHJpeC5lbGVtZW50c1sgOSBdICo9IGludlNaO1xuXHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxMCBdICo9IGludlNaO1xuXG5cdFx0XHRxdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggbWF0cml4ICk7XG5cblx0XHRcdHNjYWxlLnggPSBzeDtcblx0XHRcdHNjYWxlLnkgPSBzeTtcblx0XHRcdHNjYWxlLnogPSBzejtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRtYWtlUGVyc3BlY3RpdmU6IGZ1bmN0aW9uICggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSB7XG5cblx0XHRpZiAoIGZhciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubWFrZVBlcnNwZWN0aXZlKCkgaGFzIGJlZW4gcmVkZWZpbmVkIGFuZCBoYXMgYSBuZXcgc2lnbmF0dXJlLiBQbGVhc2UgY2hlY2sgdGhlIGRvY3MuJyApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHR2YXIgeCA9IDIgKiBuZWFyIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHR2YXIgeSA9IDIgKiBuZWFyIC8gKCB0b3AgLSBib3R0b20gKTtcblxuXHRcdHZhciBhID0gKCByaWdodCArIGxlZnQgKSAvICggcmlnaHQgLSBsZWZ0ICk7XG5cdFx0dmFyIGIgPSAoIHRvcCArIGJvdHRvbSApIC8gKCB0b3AgLSBib3R0b20gKTtcblx0XHR2YXIgYyA9IC0gKCBmYXIgKyBuZWFyICkgLyAoIGZhciAtIG5lYXIgKTtcblx0XHR2YXIgZCA9IC0gMiAqIGZhciAqIG5lYXIgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdHRlWyAwIF0gPSB4O1x0dGVbIDQgXSA9IDA7XHR0ZVsgOCBdID0gYTtcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMSBdID0gMDtcdHRlWyA1IF0gPSB5O1x0dGVbIDkgXSA9IGI7XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDIgXSA9IDA7XHR0ZVsgNiBdID0gMDtcdHRlWyAxMCBdID0gYztcdHRlWyAxNCBdID0gZDtcblx0XHR0ZVsgMyBdID0gMDtcdHRlWyA3IF0gPSAwO1x0dGVbIDExIF0gPSAtIDE7XHR0ZVsgMTUgXSA9IDA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VPcnRob2dyYXBoaWM6IGZ1bmN0aW9uICggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciB3ID0gMS4wIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHR2YXIgaCA9IDEuMCAvICggdG9wIC0gYm90dG9tICk7XG5cdFx0dmFyIHAgPSAxLjAgLyAoIGZhciAtIG5lYXIgKTtcblxuXHRcdHZhciB4ID0gKCByaWdodCArIGxlZnQgKSAqIHc7XG5cdFx0dmFyIHkgPSAoIHRvcCArIGJvdHRvbSApICogaDtcblx0XHR2YXIgeiA9ICggZmFyICsgbmVhciApICogcDtcblxuXHRcdHRlWyAwIF0gPSAyICogdztcdHRlWyA0IF0gPSAwO1x0dGVbIDggXSA9IDA7XHR0ZVsgMTIgXSA9IC0geDtcblx0XHR0ZVsgMSBdID0gMDtcdHRlWyA1IF0gPSAyICogaDtcdHRlWyA5IF0gPSAwO1x0dGVbIDEzIF0gPSAtIHk7XG5cdFx0dGVbIDIgXSA9IDA7XHR0ZVsgNiBdID0gMDtcdHRlWyAxMCBdID0gLSAyICogcDtcdHRlWyAxNCBdID0gLSB6O1xuXHRcdHRlWyAzIF0gPSAwO1x0dGVbIDcgXSA9IDA7XHR0ZVsgMTEgXSA9IDA7XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCAxNjsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5lbGVtZW50c1sgaSBdID0gYXJyYXlbIGkgKyBvZmZzZXQgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0ZVsgMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0ZVsgMSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0ZVsgMiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDQgXSA9IHRlWyA0IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDUgXSA9IHRlWyA1IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgOCBdID0gdGVbIDggXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgOSBdID0gdGVbIDkgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTAgXSA9IHRlWyAxMCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMSBdID0gdGVbIDExIF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgMTIgXSA9IHRlWyAxMiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMyBdID0gdGVbIDEzIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDE0IF0gPSB0ZVsgMTQgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTUgXSA9IHRlWyAxNSBdO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKi9cblxuZnVuY3Rpb24gUXVhdGVybmlvbiggeCwgeSwgeiwgdyApIHtcblxuXHR0aGlzLl94ID0geCB8fCAwO1xuXHR0aGlzLl95ID0geSB8fCAwO1xuXHR0aGlzLl96ID0geiB8fCAwO1xuXHR0aGlzLl93ID0gKCB3ICE9PSB1bmRlZmluZWQgKSA/IHcgOiAxO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFF1YXRlcm5pb24sIHtcblxuXHRzbGVycDogZnVuY3Rpb24gKCBxYSwgcWIsIHFtLCB0ICkge1xuXG5cdFx0cmV0dXJuIHFtLmNvcHkoIHFhICkuc2xlcnAoIHFiLCB0ICk7XG5cblx0fSxcblxuXHRzbGVycEZsYXQ6IGZ1bmN0aW9uICggZHN0LCBkc3RPZmZzZXQsIHNyYzAsIHNyY09mZnNldDAsIHNyYzEsIHNyY09mZnNldDEsIHQgKSB7XG5cblx0XHQvLyBmdXp6LWZyZWUsIGFycmF5LWJhc2VkIFF1YXRlcm5pb24gU0xFUlAgb3BlcmF0aW9uXG5cblx0XHR2YXIgeDAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMCBdLFxuXHRcdFx0eTAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMSBdLFxuXHRcdFx0ejAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMiBdLFxuXHRcdFx0dzAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMyBdLFxuXG5cdFx0XHR4MSA9IHNyYzFbIHNyY09mZnNldDEgKyAwIF0sXG5cdFx0XHR5MSA9IHNyYzFbIHNyY09mZnNldDEgKyAxIF0sXG5cdFx0XHR6MSA9IHNyYzFbIHNyY09mZnNldDEgKyAyIF0sXG5cdFx0XHR3MSA9IHNyYzFbIHNyY09mZnNldDEgKyAzIF07XG5cblx0XHRpZiAoIHcwICE9PSB3MSB8fCB4MCAhPT0geDEgfHwgeTAgIT09IHkxIHx8IHowICE9PSB6MSApIHtcblxuXHRcdFx0dmFyIHMgPSAxIC0gdCxcblxuXHRcdFx0XHRjb3MgPSB4MCAqIHgxICsgeTAgKiB5MSArIHowICogejEgKyB3MCAqIHcxLFxuXG5cdFx0XHRcdGRpciA9ICggY29zID49IDAgPyAxIDogLSAxICksXG5cdFx0XHRcdHNxclNpbiA9IDEgLSBjb3MgKiBjb3M7XG5cblx0XHRcdC8vIFNraXAgdGhlIFNsZXJwIGZvciB0aW55IHN0ZXBzIHRvIGF2b2lkIG51bWVyaWMgcHJvYmxlbXM6XG5cdFx0XHRpZiAoIHNxclNpbiA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdHZhciBzaW4gPSBNYXRoLnNxcnQoIHNxclNpbiApLFxuXHRcdFx0XHRcdGxlbiA9IE1hdGguYXRhbjIoIHNpbiwgY29zICogZGlyICk7XG5cblx0XHRcdFx0cyA9IE1hdGguc2luKCBzICogbGVuICkgLyBzaW47XG5cdFx0XHRcdHQgPSBNYXRoLnNpbiggdCAqIGxlbiApIC8gc2luO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB0RGlyID0gdCAqIGRpcjtcblxuXHRcdFx0eDAgPSB4MCAqIHMgKyB4MSAqIHREaXI7XG5cdFx0XHR5MCA9IHkwICogcyArIHkxICogdERpcjtcblx0XHRcdHowID0gejAgKiBzICsgejEgKiB0RGlyO1xuXHRcdFx0dzAgPSB3MCAqIHMgKyB3MSAqIHREaXI7XG5cblx0XHRcdC8vIE5vcm1hbGl6ZSBpbiBjYXNlIHdlIGp1c3QgZGlkIGEgbGVycDpcblx0XHRcdGlmICggcyA9PT0gMSAtIHQgKSB7XG5cblx0XHRcdFx0dmFyIGYgPSAxIC8gTWF0aC5zcXJ0KCB4MCAqIHgwICsgeTAgKiB5MCArIHowICogejAgKyB3MCAqIHcwICk7XG5cblx0XHRcdFx0eDAgKj0gZjtcblx0XHRcdFx0eTAgKj0gZjtcblx0XHRcdFx0ejAgKj0gZjtcblx0XHRcdFx0dzAgKj0gZjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZHN0WyBkc3RPZmZzZXQgXSA9IHgwO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMSBdID0geTA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDMgXSA9IHcwO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggUXVhdGVybmlvbi5wcm90b3R5cGUsIHtcblxuXHR4OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX3g7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLl94ID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHk6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5feTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX3kgPSB2YWx1ZTtcblx0XHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0ejoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl96O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHR9XG5cblx0fSxcblxuXHR3OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX3c7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLl93ID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggUXVhdGVybmlvbi5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX3cgPSB3O1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3osIHRoaXMuX3cgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggcXVhdGVybmlvbiApIHtcblxuXHRcdHRoaXMuX3ggPSBxdWF0ZXJuaW9uLng7XG5cdFx0dGhpcy5feSA9IHF1YXRlcm5pb24ueTtcblx0XHR0aGlzLl96ID0gcXVhdGVybmlvbi56O1xuXHRcdHRoaXMuX3cgPSBxdWF0ZXJuaW9uLnc7XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUV1bGVyOiBmdW5jdGlvbiAoIGV1bGVyLCB1cGRhdGUgKSB7XG5cblx0XHRpZiAoICEgKCBldWxlciAmJiBldWxlci5pc0V1bGVyICkgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLlF1YXRlcm5pb246IC5zZXRGcm9tRXVsZXIoKSBub3cgZXhwZWN0cyBhbiBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTtcblxuXHRcdH1cblxuXHRcdHZhciB4ID0gZXVsZXIuX3gsIHkgPSBldWxlci5feSwgeiA9IGV1bGVyLl96LCBvcmRlciA9IGV1bGVyLm9yZGVyO1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5tYXRod29ya3MuY29tL21hdGxhYmNlbnRyYWwvZmlsZWV4Y2hhbmdlL1xuXHRcdC8vIFx0MjA2OTYtZnVuY3Rpb24tdG8tY29udmVydC1iZXR3ZWVuLWRjbS1ldWxlci1hbmdsZXMtcXVhdGVybmlvbnMtYW5kLWV1bGVyLXZlY3RvcnMvXG5cdFx0Ly9cdGNvbnRlbnQvU3BpbkNhbGMubVxuXG5cdFx0dmFyIGNvcyA9IE1hdGguY29zO1xuXHRcdHZhciBzaW4gPSBNYXRoLnNpbjtcblxuXHRcdHZhciBjMSA9IGNvcyggeCAvIDIgKTtcblx0XHR2YXIgYzIgPSBjb3MoIHkgLyAyICk7XG5cdFx0dmFyIGMzID0gY29zKCB6IC8gMiApO1xuXG5cdFx0dmFyIHMxID0gc2luKCB4IC8gMiApO1xuXHRcdHZhciBzMiA9IHNpbiggeSAvIDIgKTtcblx0XHR2YXIgczMgPSBzaW4oIHogLyAyICk7XG5cblx0XHRpZiAoIG9yZGVyID09PSAnWFlaJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWVhaJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWlhZJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWllYJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWVpYJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWFpZJyApIHtcblxuXHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblxuXHRcdH1cblxuXHRcdGlmICggdXBkYXRlICE9PSBmYWxzZSApIHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQXhpc0FuZ2xlOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL2FuZ2xlVG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxuXG5cdFx0Ly8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcblxuXHRcdHZhciBoYWxmQW5nbGUgPSBhbmdsZSAvIDIsIHMgPSBNYXRoLnNpbiggaGFsZkFuZ2xlICk7XG5cblx0XHR0aGlzLl94ID0gYXhpcy54ICogcztcblx0XHR0aGlzLl95ID0gYXhpcy55ICogcztcblx0XHR0aGlzLl96ID0gYXhpcy56ICogcztcblx0XHR0aGlzLl93ID0gTWF0aC5jb3MoIGhhbGZBbmdsZSApO1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Sb3RhdGlvbk1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHR2YXIgdGUgPSBtLmVsZW1lbnRzLFxuXG5cdFx0XHRtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdLFxuXHRcdFx0bTIxID0gdGVbIDEgXSwgbTIyID0gdGVbIDUgXSwgbTIzID0gdGVbIDkgXSxcblx0XHRcdG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdLFxuXG5cdFx0XHR0cmFjZSA9IG0xMSArIG0yMiArIG0zMyxcblx0XHRcdHM7XG5cblx0XHRpZiAoIHRyYWNlID4gMCApIHtcblxuXHRcdFx0cyA9IDAuNSAvIE1hdGguc3FydCggdHJhY2UgKyAxLjAgKTtcblxuXHRcdFx0dGhpcy5fdyA9IDAuMjUgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTMyIC0gbTIzICkgKiBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTEzIC0gbTMxICkgKiBzO1xuXHRcdFx0dGhpcy5feiA9ICggbTIxIC0gbTEyICkgKiBzO1xuXG5cdFx0fSBlbHNlIGlmICggbTExID4gbTIyICYmIG0xMSA+IG0zMyApIHtcblxuXHRcdFx0cyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTExIC0gbTIyIC0gbTMzICk7XG5cblx0XHRcdHRoaXMuX3cgPSAoIG0zMiAtIG0yMyApIC8gcztcblx0XHRcdHRoaXMuX3ggPSAwLjI1ICogcztcblx0XHRcdHRoaXMuX3kgPSAoIG0xMiArIG0yMSApIC8gcztcblx0XHRcdHRoaXMuX3ogPSAoIG0xMyArIG0zMSApIC8gcztcblxuXHRcdH0gZWxzZSBpZiAoIG0yMiA+IG0zMyApIHtcblxuXHRcdFx0cyA9IDIuMCAqIE1hdGguc3FydCggMS4wICsgbTIyIC0gbTExIC0gbTMzICk7XG5cblx0XHRcdHRoaXMuX3cgPSAoIG0xMyAtIG0zMSApIC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0xMiArIG0yMSApIC8gcztcblx0XHRcdHRoaXMuX3kgPSAwLjI1ICogcztcblx0XHRcdHRoaXMuX3ogPSAoIG0yMyArIG0zMiApIC8gcztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0zMyAtIG0xMSAtIG0yMiApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMjEgLSBtMTIgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMTMgKyBtMzEgKSAvIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMjMgKyBtMzIgKSAvIHM7XG5cdFx0XHR0aGlzLl96ID0gMC4yNSAqIHM7XG5cblx0XHR9XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVVuaXRWZWN0b3JzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBhc3N1bWVzIGRpcmVjdGlvbiB2ZWN0b3JzIHZGcm9tIGFuZCB2VG8gYXJlIG5vcm1hbGl6ZWRcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHI7XG5cblx0XHR2YXIgRVBTID0gMC4wMDAwMDE7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbVVuaXRWZWN0b3JzKCB2RnJvbSwgdlRvICkge1xuXG5cdFx0XHRpZiAoIHYxID09PSB1bmRlZmluZWQgKSB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdHIgPSB2RnJvbS5kb3QoIHZUbyApICsgMTtcblxuXHRcdFx0aWYgKCByIDwgRVBTICkge1xuXG5cdFx0XHRcdHIgPSAwO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIHZGcm9tLnggKSA+IE1hdGguYWJzKCB2RnJvbS56ICkgKSB7XG5cblx0XHRcdFx0XHR2MS5zZXQoIC0gdkZyb20ueSwgdkZyb20ueCwgMCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR2MS5zZXQoIDAsIC0gdkZyb20ueiwgdkZyb20ueSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2MS5jcm9zc1ZlY3RvcnMoIHZGcm9tLCB2VG8gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl94ID0gdjEueDtcblx0XHRcdHRoaXMuX3kgPSB2MS55O1xuXHRcdFx0dGhpcy5feiA9IHYxLno7XG5cdFx0XHR0aGlzLl93ID0gcjtcblxuXHRcdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRpbnZlcnNlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBxdWF0ZXJuaW9uIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxuXG5cdFx0cmV0dXJuIHRoaXMuY29uanVnYXRlKCk7XG5cblx0fSxcblxuXHRjb25qdWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuX3ggKj0gLSAxO1xuXHRcdHRoaXMuX3kgKj0gLSAxO1xuXHRcdHRoaXMuX3ogKj0gLSAxO1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRvdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ggKiB2Ll94ICsgdGhpcy5feSAqIHYuX3kgKyB0aGlzLl96ICogdi5feiArIHRoaXMuX3cgKiB2Ll93O1xuXG5cdH0sXG5cblx0bGVuZ3RoU3E6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl94ICogdGhpcy5feCArIHRoaXMuX3kgKiB0aGlzLl95ICsgdGhpcy5feiAqIHRoaXMuX3ogKyB0aGlzLl93ICogdGhpcy5fdztcblxuXHR9LFxuXG5cdGxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5feCAqIHRoaXMuX3ggKyB0aGlzLl95ICogdGhpcy5feSArIHRoaXMuX3ogKiB0aGlzLl96ICsgdGhpcy5fdyAqIHRoaXMuX3cgKTtcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGwgPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0aWYgKCBsID09PSAwICkge1xuXG5cdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdHRoaXMuX3kgPSAwO1xuXHRcdFx0dGhpcy5feiA9IDA7XG5cdFx0XHR0aGlzLl93ID0gMTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGwgPSAxIC8gbDtcblxuXHRcdFx0dGhpcy5feCA9IHRoaXMuX3ggKiBsO1xuXHRcdFx0dGhpcy5feSA9IHRoaXMuX3kgKiBsO1xuXHRcdFx0dGhpcy5feiA9IHRoaXMuX3ogKiBsO1xuXHRcdFx0dGhpcy5fdyA9IHRoaXMuX3cgKiBsO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIHEsIHAgKSB7XG5cblx0XHRpZiAoIHAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlRdWF0ZXJuaW9ucyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggdGhpcywgcSApO1xuXG5cdH0sXG5cblx0cHJlbXVsdGlwbHk6IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoIHEsIHRoaXMgKTtcblxuXHR9LFxuXG5cdG11bHRpcGx5UXVhdGVybmlvbnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdC8vIGZyb20gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9yZWFsTm9ybWVkQWxnZWJyYS9xdWF0ZXJuaW9ucy9jb2RlL2luZGV4Lmh0bVxuXG5cdFx0dmFyIHFheCA9IGEuX3gsIHFheSA9IGEuX3ksIHFheiA9IGEuX3osIHFhdyA9IGEuX3c7XG5cdFx0dmFyIHFieCA9IGIuX3gsIHFieSA9IGIuX3ksIHFieiA9IGIuX3osIHFidyA9IGIuX3c7XG5cblx0XHR0aGlzLl94ID0gcWF4ICogcWJ3ICsgcWF3ICogcWJ4ICsgcWF5ICogcWJ6IC0gcWF6ICogcWJ5O1xuXHRcdHRoaXMuX3kgPSBxYXkgKiBxYncgKyBxYXcgKiBxYnkgKyBxYXogKiBxYnggLSBxYXggKiBxYno7XG5cdFx0dGhpcy5feiA9IHFheiAqIHFidyArIHFhdyAqIHFieiArIHFheCAqIHFieSAtIHFheSAqIHFieDtcblx0XHR0aGlzLl93ID0gcWF3ICogcWJ3IC0gcWF4ICogcWJ4IC0gcWF5ICogcWJ5IC0gcWF6ICogcWJ6O1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNsZXJwOiBmdW5jdGlvbiAoIHFiLCB0ICkge1xuXG5cdFx0aWYgKCB0ID09PSAwICkgcmV0dXJuIHRoaXM7XG5cdFx0aWYgKCB0ID09PSAxICkgcmV0dXJuIHRoaXMuY29weSggcWIgKTtcblxuXHRcdHZhciB4ID0gdGhpcy5feCwgeSA9IHRoaXMuX3ksIHogPSB0aGlzLl96LCB3ID0gdGhpcy5fdztcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvc2xlcnAvXG5cblx0XHR2YXIgY29zSGFsZlRoZXRhID0gdyAqIHFiLl93ICsgeCAqIHFiLl94ICsgeSAqIHFiLl95ICsgeiAqIHFiLl96O1xuXG5cdFx0aWYgKCBjb3NIYWxmVGhldGEgPCAwICkge1xuXG5cdFx0XHR0aGlzLl93ID0gLSBxYi5fdztcblx0XHRcdHRoaXMuX3ggPSAtIHFiLl94O1xuXHRcdFx0dGhpcy5feSA9IC0gcWIuX3k7XG5cdFx0XHR0aGlzLl96ID0gLSBxYi5fejtcblxuXHRcdFx0Y29zSGFsZlRoZXRhID0gLSBjb3NIYWxmVGhldGE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmNvcHkoIHFiICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNvc0hhbGZUaGV0YSA+PSAxLjAgKSB7XG5cblx0XHRcdHRoaXMuX3cgPSB3O1xuXHRcdFx0dGhpcy5feCA9IHg7XG5cdFx0XHR0aGlzLl95ID0geTtcblx0XHRcdHRoaXMuX3ogPSB6O1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdHZhciBzcXJTaW5IYWxmVGhldGEgPSAxLjAgLSBjb3NIYWxmVGhldGEgKiBjb3NIYWxmVGhldGE7XG5cblx0XHRpZiAoIHNxclNpbkhhbGZUaGV0YSA8PSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0dmFyIHMgPSAxIC0gdDtcblx0XHRcdHRoaXMuX3cgPSBzICogdyArIHQgKiB0aGlzLl93O1xuXHRcdFx0dGhpcy5feCA9IHMgKiB4ICsgdCAqIHRoaXMuX3g7XG5cdFx0XHR0aGlzLl95ID0gcyAqIHkgKyB0ICogdGhpcy5feTtcblx0XHRcdHRoaXMuX3ogPSBzICogeiArIHQgKiB0aGlzLl96O1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcblxuXHRcdH1cblxuXHRcdHZhciBzaW5IYWxmVGhldGEgPSBNYXRoLnNxcnQoIHNxclNpbkhhbGZUaGV0YSApO1xuXHRcdHZhciBoYWxmVGhldGEgPSBNYXRoLmF0YW4yKCBzaW5IYWxmVGhldGEsIGNvc0hhbGZUaGV0YSApO1xuXHRcdHZhciByYXRpb0EgPSBNYXRoLnNpbiggKCAxIC0gdCApICogaGFsZlRoZXRhICkgLyBzaW5IYWxmVGhldGEsXG5cdFx0XHRyYXRpb0IgPSBNYXRoLnNpbiggdCAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhO1xuXG5cdFx0dGhpcy5fdyA9ICggdyAqIHJhdGlvQSArIHRoaXMuX3cgKiByYXRpb0IgKTtcblx0XHR0aGlzLl94ID0gKCB4ICogcmF0aW9BICsgdGhpcy5feCAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3kgPSAoIHkgKiByYXRpb0EgKyB0aGlzLl95ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feiA9ICggeiAqIHJhdGlvQSArIHRoaXMuX3ogKiByYXRpb0IgKTtcblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggcXVhdGVybmlvbiApIHtcblxuXHRcdHJldHVybiAoIHF1YXRlcm5pb24uX3ggPT09IHRoaXMuX3ggKSAmJiAoIHF1YXRlcm5pb24uX3kgPT09IHRoaXMuX3kgKSAmJiAoIHF1YXRlcm5pb24uX3ogPT09IHRoaXMuX3ogKSAmJiAoIHF1YXRlcm5pb24uX3cgPT09IHRoaXMuX3cgKTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR0aGlzLl94ID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMuX3kgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMuX3ogPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xuXHRcdHRoaXMuX3cgPSBhcnJheVsgb2Zmc2V0ICsgMyBdO1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLl94O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLl95O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLl96O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0aGlzLl93O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0b25DaGFuZ2U6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0b25DaGFuZ2VDYWxsYmFjazogZnVuY3Rpb24gKCkge31cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGtpbGUgLyBodHRwOi8va2lsZS5zdHJhdmFnYW56YS5vcmcvXG4gKiBAYXV0aG9yIHBoaWxvZ2IgLyBodHRwOi8vYmxvZy50aGVqaXQub3JnL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBWZWN0b3IzKCB4LCB5LCB6ICkge1xuXG5cdHRoaXMueCA9IHggfHwgMDtcblx0dGhpcy55ID0geSB8fCAwO1xuXHR0aGlzLnogPSB6IHx8IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggVmVjdG9yMy5wcm90b3R5cGUsIHtcblxuXHRpc1ZlY3RvcjM6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cdFx0dGhpcy56ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYOiBmdW5jdGlvbiAoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbiAoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRaOiBmdW5jdGlvbiAoIHogKSB7XG5cblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IHRoaXMueiA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRjYXNlIDI6IHJldHVybiB0aGlzLno7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnksIHRoaXMueiApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gdi54O1xuXHRcdHRoaXMueSA9IHYueTtcblx0XHR0aGlzLnogPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cdFx0dGhpcy56ICs9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gcztcblx0XHR0aGlzLnkgKz0gcztcblx0XHR0aGlzLnogKz0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xuXHRcdHRoaXMueSA9IGEueSArIGIueTtcblx0XHR0aGlzLnogPSBhLnogKyBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxlZFZlY3RvcjogZnVuY3Rpb24gKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cdFx0dGhpcy56ICs9IHYueiAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YjogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cdFx0dGhpcy56IC09IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnggLT0gcztcblx0XHR0aGlzLnkgLT0gcztcblx0XHR0aGlzLnogLT0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54IC0gYi54O1xuXHRcdHRoaXMueSA9IGEueSAtIGIueTtcblx0XHR0aGlzLnogPSBhLnogLSBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCAqPSB2Lng7XG5cdFx0dGhpcy55ICo9IHYueTtcblx0XHR0aGlzLnogKj0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKiBiLng7XG5cdFx0dGhpcy55ID0gYS55ICogYi55O1xuXHRcdHRoaXMueiA9IGEueiAqIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlFdWxlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGFwcGx5RXVsZXIoIGV1bGVyICkge1xuXG5cdFx0XHRpZiAoICEgKCBldWxlciAmJiBldWxlci5pc0V1bGVyICkgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlZlY3RvcjM6IC5hcHBseUV1bGVyKCkgbm93IGV4cGVjdHMgYW4gRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uLnNldEZyb21FdWxlciggZXVsZXIgKSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YXBwbHlBeGlzQW5nbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhcHBseUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRhcHBseU1hdHJpeDM6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyAzIF0gKiB5ICsgZVsgNiBdICogejtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXSAqIHo7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHZhciB3ID0gMSAvICggZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKTtcblxuXHRcdHRoaXMueCA9ICggZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSApICogdztcblx0XHR0aGlzLnkgPSAoIGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogeiArIGVbIDEzIF0gKSAqIHc7XG5cdFx0dGhpcy56ID0gKCBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSApICogdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlRdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHR2YXIgcXggPSBxLngsIHF5ID0gcS55LCBxeiA9IHEueiwgcXcgPSBxLnc7XG5cblx0XHQvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY3RvclxuXG5cdFx0dmFyIGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuXHRcdHZhciBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcblx0XHR2YXIgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHg7XG5cdFx0dmFyIGl3ID0gLSBxeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG5cblx0XHQvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG5cblx0XHR0aGlzLnggPSBpeCAqIHF3ICsgaXcgKiAtIHF4ICsgaXkgKiAtIHF6IC0gaXogKiAtIHF5O1xuXHRcdHRoaXMueSA9IGl5ICogcXcgKyBpdyAqIC0gcXkgKyBpeiAqIC0gcXggLSBpeCAqIC0gcXo7XG5cdFx0dGhpcy56ID0gaXogKiBxdyArIGl3ICogLSBxeiArIGl4ICogLSBxeSAtIGl5ICogLSBxeDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cHJvamVjdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcHJvamVjdCggY2FtZXJhICkge1xuXG5cdFx0XHRtYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIG1hdHJpeC5nZXRJbnZlcnNlKCBjYW1lcmEubWF0cml4V29ybGQgKSApO1xuXHRcdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHVucHJvamVjdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdW5wcm9qZWN0KCBjYW1lcmEgKSB7XG5cblx0XHRcdG1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEubWF0cml4V29ybGQsIG1hdHJpeC5nZXRJbnZlcnNlKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dHJhbnNmb3JtRGlyZWN0aW9uOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHQvLyBpbnB1dDogVEhSRUUuTWF0cml4NCBhZmZpbmUgbWF0cml4XG5cdFx0Ly8gdmVjdG9yIGludGVycHJldGVkIGFzIGEgZGlyZWN0aW9uXG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHo7XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6O1xuXHRcdHRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA2IF0gKiB5ICsgZVsgMTAgXSAqIHo7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcblxuXHR9LFxuXG5cdGRpdmlkZTogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54IC89IHYueDtcblx0XHR0aGlzLnkgLz0gdi55O1xuXHRcdHRoaXMueiAvPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpdmlkZVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH0sXG5cblx0bWluOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1pbiggdGhpcy56LCB2LnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWF4OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggdGhpcy56LCB2LnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXA6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pbi54LCBNYXRoLm1pbiggbWF4LngsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pbi55LCBNYXRoLm1pbiggbWF4LnksIHRoaXMueSApICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIG1pbi56LCBNYXRoLm1pbiggbWF4LnosIHRoaXMueiApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wU2NhbGFyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbWluID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgbWF4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjbGFtcFNjYWxhciggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHRcdG1pbi5zZXQoIG1pblZhbCwgbWluVmFsLCBtaW5WYWwgKTtcblx0XHRcdG1heC5zZXQoIG1heFZhbCwgbWF4VmFsLCBtYXhWYWwgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY2xhbXAoIG1pbiwgbWF4ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbGFtcExlbmd0aDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fSxcblxuXHRmbG9vcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5mbG9vciggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNlaWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmNlaWwoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5yb3VuZCggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdW5kVG9aZXJvOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSAoIHRoaXMueCA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy54ICkgOiBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSAoIHRoaXMueSA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy55ICkgOiBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSAoIHRoaXMueiA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy56ICkgOiBNYXRoLmZsb29yKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bmVnYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSAtIHRoaXMueDtcblx0XHR0aGlzLnkgPSAtIHRoaXMueTtcblx0XHR0aGlzLnogPSAtIHRoaXMuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZG90OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56O1xuXG5cdH0sXG5cblx0Ly8gVE9ETyBsZW5ndGhTcXVhcmVkP1xuXG5cdGxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56O1xuXG5cdH0sXG5cblx0bGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKTtcblxuXHR9LFxuXG5cdG1hbmhhdHRhbkxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKTtcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcblxuXHR9LFxuXG5cdHNldExlbmd0aDogZnVuY3Rpb24gKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fSxcblxuXHRsZXJwOiBmdW5jdGlvbiAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXHRcdHRoaXMueiArPSAoIHYueiAtIHRoaXMueiApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGxlcnBWZWN0b3JzOiBmdW5jdGlvbiAoIHYxLCB2MiwgYWxwaGEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2MiwgdjEgKS5tdWx0aXBseVNjYWxhciggYWxwaGEgKS5hZGQoIHYxICk7XG5cblx0fSxcblxuXHRjcm9zczogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5jcm9zcygpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmNyb3NzVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5jcm9zc1ZlY3RvcnMoIHRoaXMsIHYgKTtcblxuXHR9LFxuXG5cdGNyb3NzVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dmFyIGF4ID0gYS54LCBheSA9IGEueSwgYXogPSBhLno7XG5cdFx0dmFyIGJ4ID0gYi54LCBieSA9IGIueSwgYnogPSBiLno7XG5cblx0XHR0aGlzLnggPSBheSAqIGJ6IC0gYXogKiBieTtcblx0XHR0aGlzLnkgPSBheiAqIGJ4IC0gYXggKiBiejtcblx0XHR0aGlzLnogPSBheCAqIGJ5IC0gYXkgKiBieDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cHJvamVjdE9uVmVjdG9yOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdHZhciBzY2FsYXIgPSB2ZWN0b3IuZG90KCB0aGlzICkgLyB2ZWN0b3IubGVuZ3RoU3EoKTtcblxuXHRcdHJldHVybiB0aGlzLmNvcHkoIHZlY3RvciApLm11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKTtcblxuXHR9LFxuXG5cdHByb2plY3RPblBsYW5lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHByb2plY3RPblBsYW5lKCBwbGFuZU5vcm1hbCApIHtcblxuXHRcdFx0djEuY29weSggdGhpcyApLnByb2plY3RPblZlY3RvciggcGxhbmVOb3JtYWwgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc3ViKCB2MSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cmVmbGVjdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcmVmbGVjdCBpbmNpZGVudCB2ZWN0b3Igb2ZmIHBsYW5lIG9ydGhvZ29uYWwgdG8gbm9ybWFsXG5cdFx0Ly8gbm9ybWFsIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByZWZsZWN0KCBub3JtYWwgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnN1YiggdjEuY29weSggbm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIDIgKiB0aGlzLmRvdCggbm9ybWFsICkgKSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YW5nbGVUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dmFyIHRoZXRhID0gdGhpcy5kb3QoIHYgKSAvICggTWF0aC5zcXJ0KCB0aGlzLmxlbmd0aFNxKCkgKiB2Lmxlbmd0aFNxKCkgKSApO1xuXG5cdFx0Ly8gY2xhbXAsIHRvIGhhbmRsZSBudW1lcmljYWwgcHJvYmxlbXNcblxuXHRcdHJldHVybiBNYXRoLmFjb3MoIF9NYXRoLmNsYW1wKCB0aGV0YSwgLSAxLCAxICkgKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG86IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1NxdWFyZWQ6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHZhciBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2LnksIGR6ID0gdGhpcy56IC0gdi56O1xuXG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5ICsgZHogKiBkejtcblxuXHR9LFxuXG5cdG1hbmhhdHRhbkRpc3RhbmNlVG86IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54IC0gdi54ICkgKyBNYXRoLmFicyggdGhpcy55IC0gdi55ICkgKyBNYXRoLmFicyggdGhpcy56IC0gdi56ICk7XG5cblx0fSxcblxuXHRzZXRGcm9tU3BoZXJpY2FsOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR2YXIgc2luUGhpUmFkaXVzID0gTWF0aC5zaW4oIHMucGhpICkgKiBzLnJhZGl1cztcblxuXHRcdHRoaXMueCA9IHNpblBoaVJhZGl1cyAqIE1hdGguc2luKCBzLnRoZXRhICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jb3MoIHMucGhpICkgKiBzLnJhZGl1cztcblx0XHR0aGlzLnogPSBzaW5QaGlSYWRpdXMgKiBNYXRoLmNvcyggcy50aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQ3lsaW5kcmljYWw6IGZ1bmN0aW9uICggYyApIHtcblxuXHRcdHRoaXMueCA9IGMucmFkaXVzICogTWF0aC5zaW4oIGMudGhldGEgKTtcblx0XHR0aGlzLnkgPSBjLnk7XG5cdFx0dGhpcy56ID0gYy5yYWRpdXMgKiBNYXRoLmNvcyggYy50aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTWF0cml4UG9zaXRpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDEyIF07XG5cdFx0dGhpcy55ID0gZVsgMTMgXTtcblx0XHR0aGlzLnogPSBlWyAxNCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTWF0cml4U2NhbGU6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciBzeCA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdHZhciBzeSA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMSApLmxlbmd0aCgpO1xuXHRcdHZhciBzeiA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xuXG5cdFx0dGhpcy54ID0gc3g7XG5cdFx0dGhpcy55ID0gc3k7XG5cdFx0dGhpcy56ID0gc3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXhDb2x1bW46IGZ1bmN0aW9uICggbSwgaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5mcm9tQXJyYXkoIG0uZWxlbWVudHMsIGluZGV4ICogNCApO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICYmICggdi56ID09PSB0aGlzLnogKSApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy56ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gTWF0cml4MygpIHtcblxuXHR0aGlzLmVsZW1lbnRzID0gW1xuXG5cdFx0MSwgMCwgMCxcblx0XHQwLCAxLCAwLFxuXHRcdDAsIDAsIDFcblxuXHRdO1xuXG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4MzogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC4nICk7XG5cblx0fVxuXG59XG5cbk9iamVjdC5hc3NpZ24oIE1hdHJpeDMucHJvdG90eXBlLCB7XG5cblx0aXNNYXRyaXgzOiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCBuMTEsIG4xMiwgbjEzLCBuMjEsIG4yMiwgbjIzLCBuMzEsIG4zMiwgbjMzICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBuMTE7IHRlWyAxIF0gPSBuMjE7IHRlWyAyIF0gPSBuMzE7XG5cdFx0dGVbIDMgXSA9IG4xMjsgdGVbIDQgXSA9IG4yMjsgdGVbIDUgXSA9IG4zMjtcblx0XHR0ZVsgNiBdID0gbjEzOyB0ZVsgNyBdID0gbjIzOyB0ZVsgOCBdID0gbjMzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpZGVudGl0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmZyb21BcnJheSggdGhpcy5lbGVtZW50cyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHR2YXIgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF07IHRlWyAxIF0gPSBtZVsgMSBdOyB0ZVsgMiBdID0gbWVbIDIgXTtcblx0XHR0ZVsgMyBdID0gbWVbIDMgXTsgdGVbIDQgXSA9IG1lWyA0IF07IHRlWyA1IF0gPSBtZVsgNSBdO1xuXHRcdHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTsgdGVbIDggXSA9IG1lWyA4IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXg0OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdG1lWyAwIF0sIG1lWyA0IF0sIG1lWyA4IF0sXG5cdFx0XHRtZVsgMSBdLCBtZVsgNSBdLCBtZVsgOSBdLFxuXHRcdFx0bWVbIDIgXSwgbWVbIDYgXSwgbWVbIDEwIF1cblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5VG9CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHYxLnggPSBhdHRyaWJ1dGUuZ2V0WCggaSApO1xuXHRcdFx0XHR2MS55ID0gYXR0cmlidXRlLmdldFkoIGkgKTtcblx0XHRcdFx0djEueiA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7XG5cblx0XHRcdFx0djEuYXBwbHlNYXRyaXgzKCB0aGlzICk7XG5cblx0XHRcdFx0YXR0cmlidXRlLnNldFhZWiggaSwgdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhdHRyaWJ1dGU7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRtdWx0aXBseTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggdGhpcywgbSApO1xuXG5cdH0sXG5cblx0cHJlbXVsdGlwbHk6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIHRoaXMgKTtcblxuXHR9LFxuXG5cdG11bHRpcGx5TWF0cmljZXM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHZhciBhZSA9IGEuZWxlbWVudHM7XG5cdFx0dmFyIGJlID0gYi5lbGVtZW50cztcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIGExMSA9IGFlWyAwIF0sIGExMiA9IGFlWyAzIF0sIGExMyA9IGFlWyA2IF07XG5cdFx0dmFyIGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA0IF0sIGEyMyA9IGFlWyA3IF07XG5cdFx0dmFyIGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA1IF0sIGEzMyA9IGFlWyA4IF07XG5cblx0XHR2YXIgYjExID0gYmVbIDAgXSwgYjEyID0gYmVbIDMgXSwgYjEzID0gYmVbIDYgXTtcblx0XHR2YXIgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDQgXSwgYjIzID0gYmVbIDcgXTtcblx0XHR2YXIgYjMxID0gYmVbIDIgXSwgYjMyID0gYmVbIDUgXSwgYjMzID0gYmVbIDggXTtcblxuXHRcdHRlWyAwIF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzE7XG5cdFx0dGVbIDMgXSA9IGExMSAqIGIxMiArIGExMiAqIGIyMiArIGExMyAqIGIzMjtcblx0XHR0ZVsgNiBdID0gYTExICogYjEzICsgYTEyICogYjIzICsgYTEzICogYjMzO1xuXG5cdFx0dGVbIDEgXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMTtcblx0XHR0ZVsgNCBdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyO1xuXHRcdHRlWyA3IF0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzM7XG5cblx0XHR0ZVsgMiBdID0gYTMxICogYjExICsgYTMyICogYjIxICsgYTMzICogYjMxO1xuXHRcdHRlWyA1IF0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzI7XG5cdFx0dGVbIDggXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICo9IHM7IHRlWyAzIF0gKj0gczsgdGVbIDYgXSAqPSBzO1xuXHRcdHRlWyAxIF0gKj0gczsgdGVbIDQgXSAqPSBzOyB0ZVsgNyBdICo9IHM7XG5cdFx0dGVbIDIgXSAqPSBzOyB0ZVsgNSBdICo9IHM7IHRlWyA4IF0gKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGV0ZXJtaW5hbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgYSA9IHRlWyAwIF0sIGIgPSB0ZVsgMSBdLCBjID0gdGVbIDIgXSxcblx0XHRcdGQgPSB0ZVsgMyBdLCBlID0gdGVbIDQgXSwgZiA9IHRlWyA1IF0sXG5cdFx0XHRnID0gdGVbIDYgXSwgaCA9IHRlWyA3IF0sIGkgPSB0ZVsgOCBdO1xuXG5cdFx0cmV0dXJuIGEgKiBlICogaSAtIGEgKiBmICogaCAtIGIgKiBkICogaSArIGIgKiBmICogZyArIGMgKiBkICogaCAtIGMgKiBlICogZztcblxuXHR9LFxuXG5cdGdldEludmVyc2U6IGZ1bmN0aW9uICggbWF0cml4LCB0aHJvd09uRGVnZW5lcmF0ZSApIHtcblxuXHRcdGlmICggbWF0cml4ICYmIG1hdHJpeC5pc01hdHJpeDQgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoIFwiVEhSRUUuTWF0cml4MzogLmdldEludmVyc2UoKSBubyBsb25nZXIgdGFrZXMgYSBNYXRyaXg0IGFyZ3VtZW50LlwiICk7XG5cblx0XHR9XG5cblx0XHR2YXIgbWUgPSBtYXRyaXguZWxlbWVudHMsXG5cdFx0XHR0ZSA9IHRoaXMuZWxlbWVudHMsXG5cblx0XHRcdG4xMSA9IG1lWyAwIF0sIG4yMSA9IG1lWyAxIF0sIG4zMSA9IG1lWyAyIF0sXG5cdFx0XHRuMTIgPSBtZVsgMyBdLCBuMjIgPSBtZVsgNCBdLCBuMzIgPSBtZVsgNSBdLFxuXHRcdFx0bjEzID0gbWVbIDYgXSwgbjIzID0gbWVbIDcgXSwgbjMzID0gbWVbIDggXSxcblxuXHRcdFx0dDExID0gbjMzICogbjIyIC0gbjMyICogbjIzLFxuXHRcdFx0dDEyID0gbjMyICogbjEzIC0gbjMzICogbjEyLFxuXHRcdFx0dDEzID0gbjIzICogbjEyIC0gbjIyICogbjEzLFxuXG5cdFx0XHRkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTM7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHtcblxuXHRcdFx0dmFyIG1zZyA9IFwiVEhSRUUuTWF0cml4MzogLmdldEludmVyc2UoKSBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCI7XG5cblx0XHRcdGlmICggdGhyb3dPbkRlZ2VuZXJhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIG1zZyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLmlkZW50aXR5KCk7XG5cblx0XHR9XG5cblx0XHR2YXIgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjMxICogbjIzIC0gbjMzICogbjIxICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjMyICogbjIxIC0gbjMxICogbjIyICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgMyBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA0IF0gPSAoIG4zMyAqIG4xMSAtIG4zMSAqIG4xMyApICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4zMSAqIG4xMiAtIG4zMiAqIG4xMSApICogZGV0SW52O1xuXG5cdFx0dGVbIDYgXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgNyBdID0gKCBuMjEgKiBuMTMgLSBuMjMgKiBuMTEgKSAqIGRldEludjtcblx0XHR0ZVsgOCBdID0gKCBuMjIgKiBuMTEgLSBuMjEgKiBuMTIgKSAqIGRldEludjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdG1wLCBtID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRtcCA9IG1bIDEgXTsgbVsgMSBdID0gbVsgMyBdOyBtWyAzIF0gPSB0bXA7XG5cdFx0dG1wID0gbVsgMiBdOyBtWyAyIF0gPSBtWyA2IF07IG1bIDYgXSA9IHRtcDtcblx0XHR0bXAgPSBtWyA1IF07IG1bIDUgXSA9IG1bIDcgXTsgbVsgNyBdID0gdG1wO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXROb3JtYWxNYXRyaXg6IGZ1bmN0aW9uICggbWF0cml4NCApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXg0KCBtYXRyaXg0ICkuZ2V0SW52ZXJzZSggdGhpcyApLnRyYW5zcG9zZSgpO1xuXG5cdH0sXG5cblx0dHJhbnNwb3NlSW50b0FycmF5OiBmdW5jdGlvbiAoIHIgKSB7XG5cblx0XHR2YXIgbSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRyWyAwIF0gPSBtWyAwIF07XG5cdFx0clsgMSBdID0gbVsgMyBdO1xuXHRcdHJbIDIgXSA9IG1bIDYgXTtcblx0XHRyWyAzIF0gPSBtWyAxIF07XG5cdFx0clsgNCBdID0gbVsgNCBdO1xuXHRcdHJbIDUgXSA9IG1bIDcgXTtcblx0XHRyWyA2IF0gPSBtWyAyIF07XG5cdFx0clsgNyBdID0gbVsgNSBdO1xuXHRcdHJbIDggXSA9IG1bIDggXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0VXZUcmFuc2Zvcm06IGZ1bmN0aW9uICggdHgsIHR5LCBzeCwgc3ksIHJvdGF0aW9uLCBjeCwgY3kgKSB7XG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCByb3RhdGlvbiApO1xuXHRcdHZhciBzID0gTWF0aC5zaW4oIHJvdGF0aW9uICk7XG5cblx0XHR0aGlzLnNldChcblx0XHRcdHN4ICogYywgc3ggKiBzLCAtIHN4ICogKCBjICogY3ggKyBzICogY3kgKSArIGN4ICsgdHgsXG5cdFx0XHQtIHN5ICogcywgc3kgKiBjLCAtIHN5ICogKCAtIHMgKiBjeCArIGMgKiBjeSApICsgY3kgKyB0eSxcblx0XHRcdDAsIDAsIDFcblx0XHQpO1xuXG5cdH0sXG5cblx0c2NhbGU6IGZ1bmN0aW9uICggc3gsIHN5ICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gc3g7IHRlWyAzIF0gKj0gc3g7IHRlWyA2IF0gKj0gc3g7XG5cdFx0dGVbIDEgXSAqPSBzeTsgdGVbIDQgXSAqPSBzeTsgdGVbIDcgXSAqPSBzeTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm90YXRlOiBmdW5jdGlvbiAoIHRoZXRhICkge1xuXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggdGhldGEgKTtcblx0XHR2YXIgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBhMTEgPSB0ZVsgMCBdLCBhMTIgPSB0ZVsgMyBdLCBhMTMgPSB0ZVsgNiBdO1xuXHRcdHZhciBhMjEgPSB0ZVsgMSBdLCBhMjIgPSB0ZVsgNCBdLCBhMjMgPSB0ZVsgNyBdO1xuXG5cdFx0dGVbIDAgXSA9IGMgKiBhMTEgKyBzICogYTIxO1xuXHRcdHRlWyAzIF0gPSBjICogYTEyICsgcyAqIGEyMjtcblx0XHR0ZVsgNiBdID0gYyAqIGExMyArIHMgKiBhMjM7XG5cblx0XHR0ZVsgMSBdID0gLSBzICogYTExICsgYyAqIGEyMTtcblx0XHR0ZVsgNCBdID0gLSBzICogYTEyICsgYyAqIGEyMjtcblx0XHR0ZVsgNyBdID0gLSBzICogYTEzICsgYyAqIGEyMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIHR4LCB0eSApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICs9IHR4ICogdGVbIDIgXTsgdGVbIDMgXSArPSB0eCAqIHRlWyA1IF07IHRlWyA2IF0gKz0gdHggKiB0ZVsgOCBdO1xuXHRcdHRlWyAxIF0gKz0gdHkgKiB0ZVsgMiBdOyB0ZVsgNCBdICs9IHR5ICogdGVbIDUgXTsgdGVbIDcgXSArPSB0eSAqIHRlWyA4IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGVbIGkgXSAhPT0gbWVbIGkgXSApIHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZWxlbWVudHNbIGkgXSA9IGFycmF5WyBpICsgb2Zmc2V0IF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGVbIDAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGVbIDEgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA1IF0gPSB0ZVsgNSBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDggXSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIHN6aW1layAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvXG4gKi9cblxudmFyIHRleHR1cmVJZCA9IDA7XG5cbmZ1bmN0aW9uIFRleHR1cmUoIGltYWdlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogdGV4dHVyZUlkICsrIH0gKTtcblxuXHR0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTtcblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmltYWdlID0gaW1hZ2UgIT09IHVuZGVmaW5lZCA/IGltYWdlIDogVGV4dHVyZS5ERUZBVUxUX0lNQUdFO1xuXHR0aGlzLm1pcG1hcHMgPSBbXTtcblxuXHR0aGlzLm1hcHBpbmcgPSBtYXBwaW5nICE9PSB1bmRlZmluZWQgPyBtYXBwaW5nIDogVGV4dHVyZS5ERUZBVUxUX01BUFBJTkc7XG5cblx0dGhpcy53cmFwUyA9IHdyYXBTICE9PSB1bmRlZmluZWQgPyB3cmFwUyA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cdHRoaXMud3JhcFQgPSB3cmFwVCAhPT0gdW5kZWZpbmVkID8gd3JhcFQgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXI7XG5cblx0dGhpcy5hbmlzb3Ryb3B5ID0gYW5pc290cm9weSAhPT0gdW5kZWZpbmVkID8gYW5pc290cm9weSA6IDE7XG5cblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQgIT09IHVuZGVmaW5lZCA/IGZvcm1hdCA6IFJHQkFGb3JtYXQ7XG5cdHRoaXMudHlwZSA9IHR5cGUgIT09IHVuZGVmaW5lZCA/IHR5cGUgOiBVbnNpZ25lZEJ5dGVUeXBlO1xuXG5cdHRoaXMub2Zmc2V0ID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcblx0dGhpcy5yZXBlYXQgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXHR0aGlzLmNlbnRlciA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XG5cdHRoaXMucm90YXRpb24gPSAwO1xuXG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG5cdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDMoKTtcblxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHRydWU7XG5cdHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlO1xuXHR0aGlzLmZsaXBZID0gdHJ1ZTtcblx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSA0O1x0Ly8gdmFsaWQgdmFsdWVzOiAxLCAyLCA0LCA4IChzZWUgaHR0cDovL3d3dy5raHJvbm9zLm9yZy9vcGVuZ2xlcy9zZGsvZG9jcy9tYW4veGh0bWwvZ2xQaXhlbFN0b3JlaS54bWwpXG5cblx0Ly8gVmFsdWVzIG9mIGVuY29kaW5nICE9PSBUSFJFRS5MaW5lYXJFbmNvZGluZyBvbmx5IHN1cHBvcnRlZCBvbiBtYXAsIGVudk1hcCBhbmQgZW1pc3NpdmVNYXAuXG5cdC8vXG5cdC8vIEFsc28gY2hhbmdpbmcgdGhlIGVuY29kaW5nIGFmdGVyIGFscmVhZHkgdXNlZCBieSBhIE1hdGVyaWFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgbWFrZSB0aGUgTWF0ZXJpYWxcblx0Ly8gdXBkYXRlLiAgWW91IG5lZWQgdG8gZXhwbGljaXRseSBjYWxsIE1hdGVyaWFsLm5lZWRzVXBkYXRlIHRvIHRyaWdnZXIgaXQgdG8gcmVjb21waWxlLlxuXHR0aGlzLmVuY29kaW5nID0gZW5jb2RpbmcgIT09IHVuZGVmaW5lZCA/IGVuY29kaW5nIDogTGluZWFyRW5jb2Rpbmc7XG5cblx0dGhpcy52ZXJzaW9uID0gMDtcblx0dGhpcy5vblVwZGF0ZSA9IG51bGw7XG5cbn1cblxuVGV4dHVyZS5ERUZBVUxUX0lNQUdFID0gdW5kZWZpbmVkO1xuVGV4dHVyZS5ERUZBVUxUX01BUFBJTkcgPSBVVk1hcHBpbmc7XG5cblRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFRleHR1cmUsXG5cblx0aXNUZXh0dXJlOiB0cnVlLFxuXG5cdHVwZGF0ZU1hdHJpeDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5tYXRyaXguc2V0VXZUcmFuc2Zvcm0oIHRoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnksIHRoaXMucmVwZWF0LngsIHRoaXMucmVwZWF0LnksIHRoaXMucm90YXRpb24sIHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnkgKTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0dGhpcy5pbWFnZSA9IHNvdXJjZS5pbWFnZTtcblx0XHR0aGlzLm1pcG1hcHMgPSBzb3VyY2UubWlwbWFwcy5zbGljZSggMCApO1xuXG5cdFx0dGhpcy5tYXBwaW5nID0gc291cmNlLm1hcHBpbmc7XG5cblx0XHR0aGlzLndyYXBTID0gc291cmNlLndyYXBTO1xuXHRcdHRoaXMud3JhcFQgPSBzb3VyY2Uud3JhcFQ7XG5cblx0XHR0aGlzLm1hZ0ZpbHRlciA9IHNvdXJjZS5tYWdGaWx0ZXI7XG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBzb3VyY2UubWluRmlsdGVyO1xuXG5cdFx0dGhpcy5hbmlzb3Ryb3B5ID0gc291cmNlLmFuaXNvdHJvcHk7XG5cblx0XHR0aGlzLmZvcm1hdCA9IHNvdXJjZS5mb3JtYXQ7XG5cdFx0dGhpcy50eXBlID0gc291cmNlLnR5cGU7XG5cblx0XHR0aGlzLm9mZnNldC5jb3B5KCBzb3VyY2Uub2Zmc2V0ICk7XG5cdFx0dGhpcy5yZXBlYXQuY29weSggc291cmNlLnJlcGVhdCApO1xuXHRcdHRoaXMuY2VudGVyLmNvcHkoIHNvdXJjZS5jZW50ZXIgKTtcblx0XHR0aGlzLnJvdGF0aW9uID0gc291cmNlLnJvdGF0aW9uO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXguY29weSggc291cmNlLm1hdHJpeCApO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBzb3VyY2UuZ2VuZXJhdGVNaXBtYXBzO1xuXHRcdHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IHNvdXJjZS5wcmVtdWx0aXBseUFscGhhO1xuXHRcdHRoaXMuZmxpcFkgPSBzb3VyY2UuZmxpcFk7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSBzb3VyY2UudW5wYWNrQWxpZ25tZW50O1xuXHRcdHRoaXMuZW5jb2RpbmcgPSBzb3VyY2UuZW5jb2Rpbmc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0aWYgKCAhIGlzUm9vdE9iamVjdCAmJiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gbWV0YS50ZXh0dXJlc1sgdGhpcy51dWlkIF07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXREYXRhVVJMKCBpbWFnZSApIHtcblxuXHRcdFx0dmFyIGNhbnZhcztcblxuXHRcdFx0aWYgKCBpbWFnZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50ICkge1xuXG5cdFx0XHRcdGNhbnZhcyA9IGltYWdlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnY2FudmFzJyApO1xuXHRcdFx0XHRjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcblx0XHRcdFx0Y2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcblxuXHRcdFx0XHR2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cblx0XHRcdFx0aWYgKCBpbWFnZSBpbnN0YW5jZW9mIEltYWdlRGF0YSApIHtcblxuXHRcdFx0XHRcdGNvbnRleHQucHV0SW1hZ2VEYXRhKCBpbWFnZSwgMCwgMCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjYW52YXMud2lkdGggPiAyMDQ4IHx8IGNhbnZhcy5oZWlnaHQgPiAyMDQ4ICkge1xuXG5cdFx0XHRcdHJldHVybiBjYW52YXMudG9EYXRhVVJMKCAnaW1hZ2UvanBlZycsIDAuNiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBjYW52YXMudG9EYXRhVVJMKCAnaW1hZ2UvcG5nJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgb3V0cHV0ID0ge1xuXG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdUZXh0dXJlJyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnVGV4dHVyZS50b0pTT04nXG5cdFx0XHR9LFxuXG5cdFx0XHR1dWlkOiB0aGlzLnV1aWQsXG5cdFx0XHRuYW1lOiB0aGlzLm5hbWUsXG5cblx0XHRcdG1hcHBpbmc6IHRoaXMubWFwcGluZyxcblxuXHRcdFx0cmVwZWF0OiBbIHRoaXMucmVwZWF0LngsIHRoaXMucmVwZWF0LnkgXSxcblx0XHRcdG9mZnNldDogWyB0aGlzLm9mZnNldC54LCB0aGlzLm9mZnNldC55IF0sXG5cdFx0XHRjZW50ZXI6IFsgdGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSBdLFxuXHRcdFx0cm90YXRpb246IHRoaXMucm90YXRpb24sXG5cblx0XHRcdHdyYXA6IFsgdGhpcy53cmFwUywgdGhpcy53cmFwVCBdLFxuXG5cdFx0XHRmb3JtYXQ6IHRoaXMuZm9ybWF0LFxuXHRcdFx0bWluRmlsdGVyOiB0aGlzLm1pbkZpbHRlcixcblx0XHRcdG1hZ0ZpbHRlcjogdGhpcy5tYWdGaWx0ZXIsXG5cdFx0XHRhbmlzb3Ryb3B5OiB0aGlzLmFuaXNvdHJvcHksXG5cblx0XHRcdGZsaXBZOiB0aGlzLmZsaXBZXG5cblx0XHR9O1xuXG5cdFx0aWYgKCB0aGlzLmltYWdlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFRPRE86IE1vdmUgdG8gVEhSRUUuSW1hZ2VcblxuXHRcdFx0dmFyIGltYWdlID0gdGhpcy5pbWFnZTtcblxuXHRcdFx0aWYgKCBpbWFnZS51dWlkID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aW1hZ2UudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpOyAvLyBVR0hcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEuaW1hZ2VzWyBpbWFnZS51dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR2YXIgdXJsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggaW1hZ2UgKSApIHtcblxuXHRcdFx0XHRcdC8vIHByb2Nlc3MgYXJyYXkgb2YgaW1hZ2VzIGUuZy4gQ3ViZVRleHR1cmVcblxuXHRcdFx0XHRcdHVybCA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaW1hZ2UubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0dXJsLnB1c2goIGdldERhdGFVUkwoIGltYWdlWyBpIF0gKSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBwcm9jZXNzIHNpbmdsZSBpbWFnZVxuXG5cdFx0XHRcdFx0dXJsID0gZ2V0RGF0YVVSTCggaW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWV0YS5pbWFnZXNbIGltYWdlLnV1aWQgXSA9IHtcblx0XHRcdFx0XHR1dWlkOiBpbWFnZS51dWlkLFxuXHRcdFx0XHRcdHVybDogdXJsXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdFx0b3V0cHV0LmltYWdlID0gaW1hZ2UudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggISBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdID0gb3V0cHV0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHR9LFxuXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH0sXG5cblx0dHJhbnNmb3JtVXY6IGZ1bmN0aW9uICggdXYgKSB7XG5cblx0XHRpZiAoIHRoaXMubWFwcGluZyAhPT0gVVZNYXBwaW5nICkgcmV0dXJuO1xuXG5cdFx0dXYuYXBwbHlNYXRyaXgzKCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0aWYgKCB1di54IDwgMCB8fCB1di54ID4gMSApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy53cmFwUyApIHtcblxuXHRcdFx0XHRjYXNlIFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueCA9IHV2LnggPCAwID8gMCA6IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggTWF0aC5mbG9vciggdXYueCApICUgMiApID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHR1di54ID0gTWF0aC5jZWlsKCB1di54ICkgLSB1di54O1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dXYueCA9IHV2LnggLSBNYXRoLmZsb29yKCB1di54ICk7XG5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdXYueSA8IDAgfHwgdXYueSA+IDEgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMud3JhcFQgKSB7XG5cblx0XHRcdFx0Y2FzZSBSZXBlYXRXcmFwcGluZzpcblxuXHRcdFx0XHRcdHV2LnkgPSB1di55IC0gTWF0aC5mbG9vciggdXYueSApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgQ2xhbXBUb0VkZ2VXcmFwcGluZzpcblxuXHRcdFx0XHRcdHV2LnkgPSB1di55IDwgMCA/IDAgOiAxO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgTWlycm9yZWRSZXBlYXRXcmFwcGluZzpcblxuXHRcdFx0XHRcdGlmICggTWF0aC5hYnMoIE1hdGguZmxvb3IoIHV2LnkgKSAlIDIgKSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0dXYueSA9IE1hdGguY2VpbCggdXYueSApIC0gdXYueTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHV2LnkgPSB1di55IC0gTWF0aC5mbG9vciggdXYueSApO1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZmxpcFkgKSB7XG5cblx0XHRcdHV2LnkgPSAxIC0gdXYueTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBUZXh0dXJlLnByb3RvdHlwZSwgXCJuZWVkc1VwZGF0ZVwiLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIHN1cGVyZWdnYmVydCAvIGh0dHA6Ly93d3cucGF1bGJydW50LmNvLnVrL1xuICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGVncmFldGhlciAvIGh0dHA6Ly9lZ3JhZXRoZXIuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gVmVjdG9yNCggeCwgeSwgeiwgdyApIHtcblxuXHR0aGlzLnggPSB4IHx8IDA7XG5cdHRoaXMueSA9IHkgfHwgMDtcblx0dGhpcy56ID0geiB8fCAwO1xuXHR0aGlzLncgPSAoIHcgIT09IHVuZGVmaW5lZCApID8gdyA6IDE7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggVmVjdG9yNC5wcm90b3R5cGUsIHtcblxuXHRpc1ZlY3RvcjQ6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblx0XHR0aGlzLncgPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xuXHRcdHRoaXMueSA9IHNjYWxhcjtcblx0XHR0aGlzLnogPSBzY2FsYXI7XG5cdFx0dGhpcy53ID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYOiBmdW5jdGlvbiAoIHggKSB7XG5cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbiAoIHkgKSB7XG5cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRaOiBmdW5jdGlvbiAoIHogKSB7XG5cblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRXOiBmdW5jdGlvbiAoIHcgKSB7XG5cblx0XHR0aGlzLncgPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IHRoaXMueiA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMzogdGhpcy53ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0Q29tcG9uZW50OiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcblx0XHRcdGNhc2UgMTogcmV0dXJuIHRoaXMueTtcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcblx0XHRcdGNhc2UgMzogcmV0dXJuIHRoaXMudztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cdFx0dGhpcy56ID0gdi56O1xuXHRcdHRoaXMudyA9ICggdi53ICE9PSB1bmRlZmluZWQgKSA/IHYudyA6IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cdFx0dGhpcy56ICs9IHYuejtcblx0XHR0aGlzLncgKz0gdi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXHRcdHRoaXMueiArPSBzO1xuXHRcdHRoaXMudyArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXHRcdHRoaXMueiA9IGEueiArIGIuejtcblx0XHR0aGlzLncgPSBhLncgKyBiLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxlZFZlY3RvcjogZnVuY3Rpb24gKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cdFx0dGhpcy56ICs9IHYueiAqIHM7XG5cdFx0dGhpcy53ICs9IHYudyAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YjogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjQ6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cdFx0dGhpcy56IC09IHYuejtcblx0XHR0aGlzLncgLT0gdi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWJTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXHRcdHRoaXMueiAtPSBzO1xuXHRcdHRoaXMudyAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWJWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXHRcdHRoaXMueiA9IGEueiAtIGIuejtcblx0XHR0aGlzLncgPSBhLncgLSBiLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblx0XHR0aGlzLnogKj0gc2NhbGFyO1xuXHRcdHRoaXMudyAqPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLnosIHcgPSB0aGlzLnc7XG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSAqIHc7XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6ICsgZVsgMTMgXSAqIHc7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogeiArIGVbIDE0IF0gKiB3O1xuXHRcdHRoaXMudyA9IGVbIDMgXSAqIHggKyBlWyA3IF0gKiB5ICsgZVsgMTEgXSAqIHogKyBlWyAxNSBdICogdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGl2aWRlU2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKCAxIC8gc2NhbGFyICk7XG5cblx0fSxcblxuXHRzZXRBeGlzQW5nbGVGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL3F1YXRlcm5pb25Ub0FuZ2xlL2luZGV4Lmh0bVxuXG5cdFx0Ly8gcSBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdHRoaXMudyA9IDIgKiBNYXRoLmFjb3MoIHEudyApO1xuXG5cdFx0dmFyIHMgPSBNYXRoLnNxcnQoIDEgLSBxLncgKiBxLncgKTtcblxuXHRcdGlmICggcyA8IDAuMDAwMSApIHtcblxuXHRcdFx0dGhpcy54ID0gMTtcblx0XHRcdHRoaXMueSA9IDA7XG5cdFx0XHR0aGlzLnogPSAwO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy54ID0gcS54IC8gcztcblx0XHRcdHRoaXMueSA9IHEueSAvIHM7XG5cdFx0XHR0aGlzLnogPSBxLnogLyBzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRBeGlzQW5nbGVGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb0FuZ2xlL2luZGV4Lmh0bVxuXG5cdFx0Ly8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcblxuXHRcdHZhciBhbmdsZSwgeCwgeSwgeixcdFx0Ly8gdmFyaWFibGVzIGZvciByZXN1bHRcblx0XHRcdGVwc2lsb24gPSAwLjAxLFx0XHQvLyBtYXJnaW4gdG8gYWxsb3cgZm9yIHJvdW5kaW5nIGVycm9yc1xuXHRcdFx0ZXBzaWxvbjIgPSAwLjEsXHRcdC8vIG1hcmdpbiB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIDAgYW5kIDE4MCBkZWdyZWVzXG5cblx0XHRcdHRlID0gbS5lbGVtZW50cyxcblxuXHRcdFx0bTExID0gdGVbIDAgXSwgbTEyID0gdGVbIDQgXSwgbTEzID0gdGVbIDggXSxcblx0XHRcdG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF0sXG5cdFx0XHRtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXTtcblxuXHRcdGlmICggKCBNYXRoLmFicyggbTEyIC0gbTIxICkgPCBlcHNpbG9uICkgJiZcblx0XHQgICAgICggTWF0aC5hYnMoIG0xMyAtIG0zMSApIDwgZXBzaWxvbiApICYmXG5cdFx0ICAgICAoIE1hdGguYWJzKCBtMjMgLSBtMzIgKSA8IGVwc2lsb24gKSApIHtcblxuXHRcdFx0Ly8gc2luZ3VsYXJpdHkgZm91bmRcblx0XHRcdC8vIGZpcnN0IGNoZWNrIGZvciBpZGVudGl0eSBtYXRyaXggd2hpY2ggbXVzdCBoYXZlICsxIGZvciBhbGwgdGVybXNcblx0XHRcdC8vIGluIGxlYWRpbmcgZGlhZ29uYWwgYW5kIHplcm8gaW4gb3RoZXIgdGVybXNcblxuXHRcdFx0aWYgKCAoIE1hdGguYWJzKCBtMTIgKyBtMjEgKSA8IGVwc2lsb24yICkgJiZcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTEzICsgbTMxICkgPCBlcHNpbG9uMiApICYmXG5cdFx0XHQgICAgICggTWF0aC5hYnMoIG0yMyArIG0zMiApIDwgZXBzaWxvbjIgKSAmJlxuXHRcdFx0ICAgICAoIE1hdGguYWJzKCBtMTEgKyBtMjIgKyBtMzMgLSAzICkgPCBlcHNpbG9uMiApICkge1xuXG5cdFx0XHRcdC8vIHRoaXMgc2luZ3VsYXJpdHkgaXMgaWRlbnRpdHkgbWF0cml4IHNvIGFuZ2xlID0gMFxuXG5cdFx0XHRcdHRoaXMuc2V0KCAxLCAwLCAwLCAwICk7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXM7IC8vIHplcm8gYW5nbGUsIGFyYml0cmFyeSBheGlzXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHRoaXMgc2luZ3VsYXJpdHkgaXMgYW5nbGUgPSAxODBcblxuXHRcdFx0YW5nbGUgPSBNYXRoLlBJO1xuXG5cdFx0XHR2YXIgeHggPSAoIG0xMSArIDEgKSAvIDI7XG5cdFx0XHR2YXIgeXkgPSAoIG0yMiArIDEgKSAvIDI7XG5cdFx0XHR2YXIgenogPSAoIG0zMyArIDEgKSAvIDI7XG5cdFx0XHR2YXIgeHkgPSAoIG0xMiArIG0yMSApIC8gNDtcblx0XHRcdHZhciB4eiA9ICggbTEzICsgbTMxICkgLyA0O1xuXHRcdFx0dmFyIHl6ID0gKCBtMjMgKyBtMzIgKSAvIDQ7XG5cblx0XHRcdGlmICggKCB4eCA+IHl5ICkgJiYgKCB4eCA+IHp6ICkgKSB7XG5cblx0XHRcdFx0Ly8gbTExIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm1cblxuXHRcdFx0XHRpZiAoIHh4IDwgZXBzaWxvbiApIHtcblxuXHRcdFx0XHRcdHggPSAwO1xuXHRcdFx0XHRcdHkgPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR6ID0gMC43MDcxMDY3ODE7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHggPSBNYXRoLnNxcnQoIHh4ICk7XG5cdFx0XHRcdFx0eSA9IHh5IC8geDtcblx0XHRcdFx0XHR6ID0geHogLyB4O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggeXkgPiB6eiApIHtcblxuXHRcdFx0XHQvLyBtMjIgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybVxuXG5cdFx0XHRcdGlmICggeXkgPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHkgPSAwO1xuXHRcdFx0XHRcdHogPSAwLjcwNzEwNjc4MTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eSA9IE1hdGguc3FydCggeXkgKTtcblx0XHRcdFx0XHR4ID0geHkgLyB5O1xuXHRcdFx0XHRcdHogPSB5eiAvIHk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG0zMyBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtIHNvIGJhc2UgcmVzdWx0IG9uIHRoaXNcblxuXHRcdFx0XHRpZiAoIHp6IDwgZXBzaWxvbiApIHtcblxuXHRcdFx0XHRcdHggPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR5ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eiA9IDA7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHogPSBNYXRoLnNxcnQoIHp6ICk7XG5cdFx0XHRcdFx0eCA9IHh6IC8gejtcblx0XHRcdFx0XHR5ID0geXogLyB6O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNldCggeCwgeSwgeiwgYW5nbGUgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7IC8vIHJldHVybiAxODAgZGVnIHJvdGF0aW9uXG5cblx0XHR9XG5cblx0XHQvLyBhcyB3ZSBoYXZlIHJlYWNoZWQgaGVyZSB0aGVyZSBhcmUgbm8gc2luZ3VsYXJpdGllcyBzbyB3ZSBjYW4gaGFuZGxlIG5vcm1hbGx5XG5cblx0XHR2YXIgcyA9IE1hdGguc3FydCggKCBtMzIgLSBtMjMgKSAqICggbTMyIC0gbTIzICkgK1xuXHRcdCAgICAgICAgICAgICAgICAgICAoIG0xMyAtIG0zMSApICogKCBtMTMgLSBtMzEgKSArXG5cdFx0ICAgICAgICAgICAgICAgICAgICggbTIxIC0gbTEyICkgKiAoIG0yMSAtIG0xMiApICk7IC8vIHVzZWQgdG8gbm9ybWFsaXplXG5cblx0XHRpZiAoIE1hdGguYWJzKCBzICkgPCAwLjAwMSApIHMgPSAxO1xuXG5cdFx0Ly8gcHJldmVudCBkaXZpZGUgYnkgemVybywgc2hvdWxkIG5vdCBoYXBwZW4gaWYgbWF0cml4IGlzIG9ydGhvZ29uYWwgYW5kIHNob3VsZCBiZVxuXHRcdC8vIGNhdWdodCBieSBzaW5ndWxhcml0eSB0ZXN0IGFib3ZlLCBidXQgSSd2ZSBsZWZ0IGl0IGluIGp1c3QgaW4gY2FzZVxuXG5cdFx0dGhpcy54ID0gKCBtMzIgLSBtMjMgKSAvIHM7XG5cdFx0dGhpcy55ID0gKCBtMTMgLSBtMzEgKSAvIHM7XG5cdFx0dGhpcy56ID0gKCBtMjEgLSBtMTIgKSAvIHM7XG5cdFx0dGhpcy53ID0gTWF0aC5hY29zKCAoIG0xMSArIG0yMiArIG0zMyAtIDEgKSAvIDIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWluOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1pbiggdGhpcy56LCB2LnogKTtcblx0XHR0aGlzLncgPSBNYXRoLm1pbiggdGhpcy53LCB2LncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWF4OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggdGhpcy56LCB2LnogKTtcblx0XHR0aGlzLncgPSBNYXRoLm1heCggdGhpcy53LCB2LncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXA6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pbi54LCBNYXRoLm1pbiggbWF4LngsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pbi55LCBNYXRoLm1pbiggbWF4LnksIHRoaXMueSApICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIG1pbi56LCBNYXRoLm1pbiggbWF4LnosIHRoaXMueiApICk7XG5cdFx0dGhpcy53ID0gTWF0aC5tYXgoIG1pbi53LCBNYXRoLm1pbiggbWF4LncsIHRoaXMudyApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wU2NhbGFyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbWluLCBtYXg7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY2xhbXBTY2FsYXIoIG1pblZhbCwgbWF4VmFsICkge1xuXG5cdFx0XHRpZiAoIG1pbiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1pbiA9IG5ldyBWZWN0b3I0KCk7XG5cdFx0XHRcdG1heCA9IG5ldyBWZWN0b3I0KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0bWluLnNldCggbWluVmFsLCBtaW5WYWwsIG1pblZhbCwgbWluVmFsICk7XG5cdFx0XHRtYXguc2V0KCBtYXhWYWwsIG1heFZhbCwgbWF4VmFsLCBtYXhWYWwgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY2xhbXAoIG1pbiwgbWF4ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbGFtcExlbmd0aDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fSxcblxuXHRmbG9vcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5mbG9vciggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5mbG9vciggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNlaWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmNlaWwoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9IE1hdGguY2VpbCggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLnJvdW5kKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmRUb1plcm86IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9ICggdGhpcy54IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnggKSA6IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9ICggdGhpcy55IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9ICggdGhpcy56IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnogKSA6IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9ICggdGhpcy53IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLncgKSA6IE1hdGguZmxvb3IoIHRoaXMudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXHRcdHRoaXMueiA9IC0gdGhpcy56O1xuXHRcdHRoaXMudyA9IC0gdGhpcy53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkb3Q6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2LnogKyB0aGlzLncgKiB2Lnc7XG5cblx0fSxcblxuXHRsZW5ndGhTcTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudztcblxuXHR9LFxuXG5cdGxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53ICk7XG5cblx0fSxcblxuXHRtYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICkgKyBNYXRoLmFicyggdGhpcy56ICkgKyBNYXRoLmFicyggdGhpcy53ICk7XG5cblx0fSxcblxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggdGhpcy5sZW5ndGgoKSB8fCAxICk7XG5cblx0fSxcblxuXHRzZXRMZW5ndGg6IGZ1bmN0aW9uICggbGVuZ3RoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApO1xuXG5cdH0sXG5cblx0bGVycDogZnVuY3Rpb24gKCB2LCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7XG5cdFx0dGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogKz0gKCB2LnogLSB0aGlzLnogKSAqIGFscGhhO1xuXHRcdHRoaXMudyArPSAoIHYudyAtIHRoaXMudyApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGxlcnBWZWN0b3JzOiBmdW5jdGlvbiAoIHYxLCB2MiwgYWxwaGEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2MiwgdjEgKS5tdWx0aXBseVNjYWxhciggYWxwaGEgKS5hZGQoIHYxICk7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICYmICggdi53ID09PSB0aGlzLncgKSApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cdFx0dGhpcy53ID0gYXJyYXlbIG9mZnNldCArIDMgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMudztcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXHRcdHRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKCBpbmRleCApO1xuXHRcdHRoaXMudyA9IGF0dHJpYnV0ZS5nZXRXKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBzemltZWsgLyBodHRwczovL2dpdGh1Yi5jb20vc3ppbWVrL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgTWFyaXVzIEtpbnRlbCAvIGh0dHBzOi8vZ2l0aHViLmNvbS9raW50ZWxcbiAqL1xuXG4vKlxuIEluIG9wdGlvbnMsIHdlIGNhbiBzcGVjaWZ5OlxuICogVGV4dHVyZSBwYXJhbWV0ZXJzIGZvciBhbiBhdXRvLWdlbmVyYXRlZCB0YXJnZXQgdGV4dHVyZVxuICogZGVwdGhCdWZmZXIvc3RlbmNpbEJ1ZmZlcjogQm9vbGVhbnMgdG8gaW5kaWNhdGUgaWYgd2Ugc2hvdWxkIGdlbmVyYXRlIHRoZXNlIGJ1ZmZlcnNcbiovXG5mdW5jdGlvbiBXZWJHTFJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApIHtcblxuXHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdHRoaXMuc2Npc3NvciA9IG5ldyBWZWN0b3I0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdHRoaXMuc2Npc3NvclRlc3QgPSBmYWxzZTtcblxuXHR0aGlzLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRpZiAoIG9wdGlvbnMubWluRmlsdGVyID09PSB1bmRlZmluZWQgKSBvcHRpb25zLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcblxuXHR0aGlzLnRleHR1cmUgPSBuZXcgVGV4dHVyZSggdW5kZWZpbmVkLCB1bmRlZmluZWQsIG9wdGlvbnMud3JhcFMsIG9wdGlvbnMud3JhcFQsIG9wdGlvbnMubWFnRmlsdGVyLCBvcHRpb25zLm1pbkZpbHRlciwgb3B0aW9ucy5mb3JtYXQsIG9wdGlvbnMudHlwZSwgb3B0aW9ucy5hbmlzb3Ryb3B5LCBvcHRpb25zLmVuY29kaW5nICk7XG5cblx0dGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyA6IHRydWU7XG5cblx0dGhpcy5kZXB0aEJ1ZmZlciA9IG9wdGlvbnMuZGVwdGhCdWZmZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGhCdWZmZXIgOiB0cnVlO1xuXHR0aGlzLnN0ZW5jaWxCdWZmZXIgPSBvcHRpb25zLnN0ZW5jaWxCdWZmZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlbmNpbEJ1ZmZlciA6IHRydWU7XG5cdHRoaXMuZGVwdGhUZXh0dXJlID0gb3B0aW9ucy5kZXB0aFRleHR1cmUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGhUZXh0dXJlIDogbnVsbDtcblxufVxuXG5XZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogV2ViR0xSZW5kZXJUYXJnZXQsXG5cblx0aXNXZWJHTFJlbmRlclRhcmdldDogdHJ1ZSxcblxuXHRzZXRTaXplOiBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRpZiAoIHRoaXMud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuaGVpZ2h0ICE9PSBoZWlnaHQgKSB7XG5cblx0XHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlld3BvcnQuc2V0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0dGhpcy5zY2lzc29yLnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy53aWR0aCA9IHNvdXJjZS53aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XG5cblx0XHR0aGlzLnZpZXdwb3J0LmNvcHkoIHNvdXJjZS52aWV3cG9ydCApO1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gc291cmNlLnRleHR1cmUuY2xvbmUoKTtcblxuXHRcdHRoaXMuZGVwdGhCdWZmZXIgPSBzb3VyY2UuZGVwdGhCdWZmZXI7XG5cdFx0dGhpcy5zdGVuY2lsQnVmZmVyID0gc291cmNlLnN0ZW5jaWxCdWZmZXI7XG5cdFx0dGhpcy5kZXB0aFRleHR1cmUgPSBzb3VyY2UuZGVwdGhUZXh0dXJlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJUYXJnZXRDdWJlKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICkge1xuXG5cdFdlYkdMUmVuZGVyVGFyZ2V0LmNhbGwoIHRoaXMsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKTtcblxuXHR0aGlzLmFjdGl2ZUN1YmVGYWNlID0gMDsgLy8gUFggMCwgTlggMSwgUFkgMiwgTlkgMywgUFogNCwgTlogNVxuXHR0aGlzLmFjdGl2ZU1pcE1hcExldmVsID0gMDtcblxufVxuXG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlICk7XG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2ViR0xSZW5kZXJUYXJnZXRDdWJlO1xuXG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIERhdGFUZXh0dXJlKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApO1xuXG5cdHRoaXMuaW1hZ2UgPSB7IGRhdGE6IGRhdGEsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblxuXHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcblx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IE5lYXJlc3RGaWx0ZXI7XG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXHR0aGlzLnVucGFja0FsaWdubWVudCA9IDE7XG5cbn1cblxuRGF0YVRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkRhdGFUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERhdGFUZXh0dXJlO1xuXG5EYXRhVGV4dHVyZS5wcm90b3R5cGUuaXNEYXRhVGV4dHVyZSA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gQm94MyggbWluLCBtYXggKSB7XG5cblx0dGhpcy5taW4gPSAoIG1pbiAhPT0gdW5kZWZpbmVkICkgPyBtaW4gOiBuZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApO1xuXHR0aGlzLm1heCA9ICggbWF4ICE9PSB1bmRlZmluZWQgKSA/IG1heCA6IG5ldyBWZWN0b3IzKCAtIEluZmluaXR5LCAtIEluZmluaXR5LCAtIEluZmluaXR5ICk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQm94My5wcm90b3R5cGUsIHtcblxuXHRpc0JveDM6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSApIHtcblxuXHRcdHZhciBtaW5YID0gKyBJbmZpbml0eTtcblx0XHR2YXIgbWluWSA9ICsgSW5maW5pdHk7XG5cdFx0dmFyIG1pblogPSArIEluZmluaXR5O1xuXG5cdFx0dmFyIG1heFggPSAtIEluZmluaXR5O1xuXHRcdHZhciBtYXhZID0gLSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WiA9IC0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdHZhciB4ID0gYXJyYXlbIGkgXTtcblx0XHRcdHZhciB5ID0gYXJyYXlbIGkgKyAxIF07XG5cdFx0XHR2YXIgeiA9IGFycmF5WyBpICsgMiBdO1xuXG5cdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRpZiAoIHkgPCBtaW5ZICkgbWluWSA9IHk7XG5cdFx0XHRpZiAoIHogPCBtaW5aICkgbWluWiA9IHo7XG5cblx0XHRcdGlmICggeCA+IG1heFggKSBtYXhYID0geDtcblx0XHRcdGlmICggeSA+IG1heFkgKSBtYXhZID0geTtcblx0XHRcdGlmICggeiA+IG1heFogKSBtYXhaID0gejtcblxuXHRcdH1cblxuXHRcdHRoaXMubWluLnNldCggbWluWCwgbWluWSwgbWluWiApO1xuXHRcdHRoaXMubWF4LnNldCggbWF4WCwgbWF4WSwgbWF4WiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQnVmZmVyQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSApIHtcblxuXHRcdHZhciBtaW5YID0gKyBJbmZpbml0eTtcblx0XHR2YXIgbWluWSA9ICsgSW5maW5pdHk7XG5cdFx0dmFyIG1pblogPSArIEluZmluaXR5O1xuXG5cdFx0dmFyIG1heFggPSAtIEluZmluaXR5O1xuXHRcdHZhciBtYXhZID0gLSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WiA9IC0gSW5maW5pdHk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgeCA9IGF0dHJpYnV0ZS5nZXRYKCBpICk7XG5cdFx0XHR2YXIgeSA9IGF0dHJpYnV0ZS5nZXRZKCBpICk7XG5cdFx0XHR2YXIgeiA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7XG5cblx0XHRcdGlmICggeCA8IG1pblggKSBtaW5YID0geDtcblx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdGlmICggeiA8IG1pblogKSBtaW5aID0gejtcblxuXHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0aWYgKCB5ID4gbWF4WSApIG1heFkgPSB5O1xuXHRcdFx0aWYgKCB6ID4gbWF4WiApIG1heFogPSB6O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5taW4uc2V0KCBtaW5YLCBtaW5ZLCBtaW5aICk7XG5cdFx0dGhpcy5tYXguc2V0KCBtYXhYLCBtYXhZLCBtYXhaICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNlbnRlckFuZFNpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbUNlbnRlckFuZFNpemUoIGNlbnRlciwgc2l6ZSApIHtcblxuXHRcdFx0dmFyIGhhbGZTaXplID0gdjEuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHRcdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdFx0dGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNldEZyb21PYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdHJldHVybiB0aGlzLmV4cGFuZEJ5T2JqZWN0KCBvYmplY3QgKTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLmNvcHkoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5jb3B5KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VFbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5taW4ueCA9IHRoaXMubWluLnkgPSB0aGlzLm1pbi56ID0gKyBJbmZpbml0eTtcblx0XHR0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IHRoaXMubWF4LnogPSAtIEluZmluaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpc0VtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyB0aGlzIGlzIGEgbW9yZSByb2J1c3QgY2hlY2sgZm9yIGVtcHR5IHRoYW4gKCB2b2x1bWUgPD0gMCApIGJlY2F1c2Ugdm9sdW1lIGNhbiBnZXQgcG9zaXRpdmUgd2l0aCB0d28gbmVnYXRpdmUgYXhlc1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXgueCA8IHRoaXMubWluLnggKSB8fCAoIHRoaXMubWF4LnkgPCB0aGlzLm1pbi55ICkgfHwgKCB0aGlzLm1heC56IDwgdGhpcy5taW4ueiApO1xuXG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRDZW50ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAsIDAgKSA6IHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLm1pbiwgdGhpcy5tYXggKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cblx0fSxcblxuXHRnZXRTaXplOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRTaXplKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7XG5cblx0fSxcblxuXHRleHBhbmRCeVBvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBwb2ludCApO1xuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlWZWN0b3I6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0dGhpcy5taW4uc3ViKCB2ZWN0b3IgKTtcblx0XHR0aGlzLm1heC5hZGQoIHZlY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHBhbmRCeVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGRTY2FsYXIoIC0gc2NhbGFyICk7XG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKCBzY2FsYXIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlPYmplY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIENvbXB1dGVzIHRoZSB3b3JsZC1heGlzLWFsaWduZWQgYm91bmRpbmcgYm94IG9mIGFuIG9iamVjdCAoaW5jbHVkaW5nIGl0cyBjaGlsZHJlbiksXG5cdFx0Ly8gYWNjb3VudGluZyBmb3IgYm90aCB0aGUgb2JqZWN0J3MsIGFuZCBjaGlsZHJlbidzLCB3b3JsZCB0cmFuc2Zvcm1zXG5cblx0XHR2YXIgc2NvcGUsIGksIGw7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gdHJhdmVyc2UoIG5vZGUgKSB7XG5cblx0XHRcdHZhciBnZW9tZXRyeSA9IG5vZGUuZ2VvbWV0cnk7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblxuXHRcdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0djEuY29weSggdmVydGljZXNbIGkgXSApO1xuXHRcdFx0XHRcdFx0djEuYXBwbHlNYXRyaXg0KCBub2RlLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0XHRcdHNjb3BlLmV4cGFuZEJ5UG9pbnQoIHYxICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHYxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaSApLmFwcGx5TWF0cml4NCggbm9kZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdFx0XHRcdHNjb3BlLmV4cGFuZEJ5UG9pbnQoIHYxICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBleHBhbmRCeU9iamVjdCggb2JqZWN0ICkge1xuXG5cdFx0XHRzY29wZSA9IHRoaXM7XG5cblx0XHRcdG9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHRvYmplY3QudHJhdmVyc2UoIHRyYXZlcnNlICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiBwb2ludC54IDwgdGhpcy5taW4ueCB8fCBwb2ludC54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0cG9pbnQueSA8IHRoaXMubWluLnkgfHwgcG9pbnQueSA+IHRoaXMubWF4LnkgfHxcblx0XHRcdHBvaW50LnogPCB0aGlzLm1pbi56IHx8IHBvaW50LnogPiB0aGlzLm1heC56ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH0sXG5cblx0Y29udGFpbnNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWluLnggPD0gYm94Lm1pbi54ICYmIGJveC5tYXgueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueSAmJlxuXHRcdFx0dGhpcy5taW4ueiA8PSBib3gubWluLnogJiYgYm94Lm1heC56IDw9IHRoaXMubWF4Lno7XG5cblx0fSxcblxuXHRnZXRQYXJhbWV0ZXI6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdC8vIFRoaXMgY2FuIHBvdGVudGlhbGx5IGhhdmUgYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgYm94XG5cdFx0Ly8gaGFzIGEgc2l6ZSBkaW1lbnNpb24gb2YgMC5cblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRQYXJhbWV0ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KFxuXHRcdFx0KCBwb2ludC54IC0gdGhpcy5taW4ueCApIC8gKCB0aGlzLm1heC54IC0gdGhpcy5taW4ueCApLFxuXHRcdFx0KCBwb2ludC55IC0gdGhpcy5taW4ueSApIC8gKCB0aGlzLm1heC55IC0gdGhpcy5taW4ueSApLFxuXHRcdFx0KCBwb2ludC56IC0gdGhpcy5taW4ueiApIC8gKCB0aGlzLm1heC56IC0gdGhpcy5taW4ueiApXG5cdFx0KTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Ly8gdXNpbmcgNiBzcGxpdHRpbmcgcGxhbmVzIHRvIHJ1bGUgb3V0IGludGVyc2VjdGlvbnMuXG5cdFx0cmV0dXJuIGJveC5tYXgueCA8IHRoaXMubWluLnggfHwgYm94Lm1pbi54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0Ym94Lm1heC55IDwgdGhpcy5taW4ueSB8fCBib3gubWluLnkgPiB0aGlzLm1heC55IHx8XG5cdFx0XHRib3gubWF4LnogPCB0aGlzLm1pbi56IHx8IGJveC5taW4ueiA+IHRoaXMubWF4LnogPyBmYWxzZSA6IHRydWU7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzU3BoZXJlOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBjbG9zZXN0UG9pbnQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHtcblxuXHRcdFx0Ly8gRmluZCB0aGUgcG9pbnQgb24gdGhlIEFBQkIgY2xvc2VzdCB0byB0aGUgc3BoZXJlIGNlbnRlci5cblx0XHRcdHRoaXMuY2xhbXBQb2ludCggc3BoZXJlLmNlbnRlciwgY2xvc2VzdFBvaW50ICk7XG5cblx0XHRcdC8vIElmIHRoYXQgcG9pbnQgaXMgaW5zaWRlIHRoZSBzcGhlcmUsIHRoZSBBQUJCIGFuZCBzcGhlcmUgaW50ZXJzZWN0LlxuXHRcdFx0cmV0dXJuIGNsb3Nlc3RQb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTtcblxuXHRcdH07XG5cblx0fSApKCksXG5cblx0aW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0Ly8gV2UgY29tcHV0ZSB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBkb3QgcHJvZHVjdCB2YWx1ZXMuIElmIHRob3NlIHZhbHVlc1xuXHRcdC8vIGFyZSBvbiB0aGUgc2FtZSBzaWRlIChiYWNrIG9yIGZyb250KSBvZiB0aGUgcGxhbmUsIHRoZW4gdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLlxuXG5cdFx0dmFyIG1pbiwgbWF4O1xuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueCA+IDAgKSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcblx0XHRcdG1heCA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5taW4ueDtcblxuXHRcdH1cblxuXHRcdGlmICggcGxhbmUubm9ybWFsLnkgPiAwICkge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5tYXgueTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4Lnk7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueiA+IDAgKSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWluICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5tYXguejtcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWluLno7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gKCBtaW4gPD0gcGxhbmUuY29uc3RhbnQgJiYgbWF4ID49IHBsYW5lLmNvbnN0YW50ICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzVHJpYW5nbGU6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gdHJpYW5nbGUgY2VudGVyZWQgdmVydGljZXNcblx0XHR2YXIgdjAgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHYyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIHRyaWFuZ2xlIGVkZ2UgdmVjdG9yc1xuXHRcdHZhciBmMCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGYxID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZjIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIHRlc3RBeGlzID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciBjZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBleHRlbnRzID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciB0cmlhbmdsZU5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRmdW5jdGlvbiBzYXRGb3JBeGVzKCBheGVzICkge1xuXG5cdFx0XHR2YXIgaSwgajtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGogPSBheGVzLmxlbmd0aCAtIDM7IGkgPD0gajsgaSArPSAzICkge1xuXG5cdFx0XHRcdHRlc3RBeGlzLmZyb21BcnJheSggYXhlcywgaSApO1xuXHRcdFx0XHQvLyBwcm9qZWN0IHRoZSBhYWJiIG9udG8gdGhlIHNlcGVyYXRpbmcgYXhpc1xuXHRcdFx0XHR2YXIgciA9IGV4dGVudHMueCAqIE1hdGguYWJzKCB0ZXN0QXhpcy54ICkgKyBleHRlbnRzLnkgKiBNYXRoLmFicyggdGVzdEF4aXMueSApICsgZXh0ZW50cy56ICogTWF0aC5hYnMoIHRlc3RBeGlzLnogKTtcblx0XHRcdFx0Ly8gcHJvamVjdCBhbGwgMyB2ZXJ0aWNlcyBvZiB0aGUgdHJpYW5nbGUgb250byB0aGUgc2VwZXJhdGluZyBheGlzXG5cdFx0XHRcdHZhciBwMCA9IHYwLmRvdCggdGVzdEF4aXMgKTtcblx0XHRcdFx0dmFyIHAxID0gdjEuZG90KCB0ZXN0QXhpcyApO1xuXHRcdFx0XHR2YXIgcDIgPSB2Mi5kb3QoIHRlc3RBeGlzICk7XG5cdFx0XHRcdC8vIGFjdHVhbCB0ZXN0LCBiYXNpY2FsbHkgc2VlIGlmIGVpdGhlciBvZiB0aGUgbW9zdCBleHRyZW1lIG9mIHRoZSB0cmlhbmdsZSBwb2ludHMgaW50ZXJzZWN0cyByXG5cdFx0XHRcdGlmICggTWF0aC5tYXgoIC0gTWF0aC5tYXgoIHAwLCBwMSwgcDIgKSwgTWF0aC5taW4oIHAwLCBwMSwgcDIgKSApID4gciApIHtcblxuXHRcdFx0XHRcdC8vIHBvaW50cyBvZiB0aGUgcHJvamVjdGVkIHRyaWFuZ2xlIGFyZSBvdXRzaWRlIHRoZSBwcm9qZWN0ZWQgaGFsZi1sZW5ndGggb2YgdGhlIGFhYmJcblx0XHRcdFx0XHQvLyB0aGUgYXhpcyBpcyBzZXBlcmF0aW5nIGFuZCB3ZSBjYW4gZXhpdFxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0c1RyaWFuZ2xlKCB0cmlhbmdsZSApIHtcblxuXHRcdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gY29tcHV0ZSBib3ggY2VudGVyIGFuZCBleHRlbnRzXG5cdFx0XHR0aGlzLmdldENlbnRlciggY2VudGVyICk7XG5cdFx0XHRleHRlbnRzLnN1YlZlY3RvcnMoIHRoaXMubWF4LCBjZW50ZXIgKTtcblxuXHRcdFx0Ly8gdHJhbnNsYXRlIHRyaWFuZ2xlIHRvIGFhYmIgb3JpZ2luXG5cdFx0XHR2MC5zdWJWZWN0b3JzKCB0cmlhbmdsZS5hLCBjZW50ZXIgKTtcblx0XHRcdHYxLnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmIsIGNlbnRlciApO1xuXHRcdFx0djIuc3ViVmVjdG9ycyggdHJpYW5nbGUuYywgY2VudGVyICk7XG5cblx0XHRcdC8vIGNvbXB1dGUgZWRnZSB2ZWN0b3JzIGZvciB0cmlhbmdsZVxuXHRcdFx0ZjAuc3ViVmVjdG9ycyggdjEsIHYwICk7XG5cdFx0XHRmMS5zdWJWZWN0b3JzKCB2MiwgdjEgKTtcblx0XHRcdGYyLnN1YlZlY3RvcnMoIHYwLCB2MiApO1xuXG5cdFx0XHQvLyB0ZXN0IGFnYWluc3QgYXhlcyB0aGF0IGFyZSBnaXZlbiBieSBjcm9zcyBwcm9kdWN0IGNvbWJpbmF0aW9ucyBvZiB0aGUgZWRnZXMgb2YgdGhlIHRyaWFuZ2xlIGFuZCB0aGUgZWRnZXMgb2YgdGhlIGFhYmJcblx0XHRcdC8vIG1ha2UgYW4gYXhpcyB0ZXN0aW5nIG9mIGVhY2ggb2YgdGhlIDMgc2lkZXMgb2YgdGhlIGFhYmIgYWdhaW5zdCBlYWNoIG9mIHRoZSAzIHNpZGVzIG9mIHRoZSB0cmlhbmdsZSA9IDkgYXhpcyBvZiBzZXBhcmF0aW9uXG5cdFx0XHQvLyBheGlzX2lqID0gdV9pIHggZl9qICh1MCwgdTEsIHUyID0gZmFjZSBub3JtYWxzIG9mIGFhYmIgPSB4LHkseiBheGVzIHZlY3RvcnMgc2luY2UgYWFiYiBpcyBheGlzIGFsaWduZWQpXG5cdFx0XHR2YXIgYXhlcyA9IFtcblx0XHRcdFx0MCwgLSBmMC56LCBmMC55LCAwLCAtIGYxLnosIGYxLnksIDAsIC0gZjIueiwgZjIueSxcblx0XHRcdFx0ZjAueiwgMCwgLSBmMC54LCBmMS56LCAwLCAtIGYxLngsIGYyLnosIDAsIC0gZjIueCxcblx0XHRcdFx0LSBmMC55LCBmMC54LCAwLCAtIGYxLnksIGYxLngsIDAsIC0gZjIueSwgZjIueCwgMFxuXHRcdFx0XTtcblx0XHRcdGlmICggISBzYXRGb3JBeGVzKCBheGVzICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHRlc3QgMyBmYWNlIG5vcm1hbHMgZnJvbSB0aGUgYWFiYlxuXHRcdFx0YXhlcyA9IFsgMSwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMSBdO1xuXHRcdFx0aWYgKCAhIHNhdEZvckF4ZXMoIGF4ZXMgKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZmluYWxseSB0ZXN0aW5nIHRoZSBmYWNlIG5vcm1hbCBvZiB0aGUgdHJpYW5nbGVcblx0XHRcdC8vIHVzZSBhbHJlYWR5IGV4aXN0aW5nIHRyaWFuZ2xlIGVkZ2UgdmVjdG9ycyBoZXJlXG5cdFx0XHR0cmlhbmdsZU5vcm1hbC5jcm9zc1ZlY3RvcnMoIGYwLCBmMSApO1xuXHRcdFx0YXhlcyA9IFsgdHJpYW5nbGVOb3JtYWwueCwgdHJpYW5nbGVOb3JtYWwueSwgdHJpYW5nbGVOb3JtYWwueiBdO1xuXHRcdFx0cmV0dXJuIHNhdEZvckF4ZXMoIGF4ZXMgKTtcblxuXHRcdH07XG5cblx0fSApKCksXG5cblx0Y2xhbXBQb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmNsYW1wUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdFx0dmFyIGNsYW1wZWRQb2ludCA9IHYxLmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXHRcdFx0cmV0dXJuIGNsYW1wZWRQb2ludC5zdWIoIHBvaW50ICkubGVuZ3RoKCk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRnZXRCb3VuZGluZ1NwaGVyZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBnZXRCb3VuZGluZ1NwaGVyZSggdGFyZ2V0ICkge1xuXG5cdFx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRCb3VuZGluZ1NwaGVyZSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHRcdHRhcmdldCA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmdldENlbnRlciggdGFyZ2V0LmNlbnRlciApO1xuXG5cdFx0XHR0YXJnZXQucmFkaXVzID0gdGhpcy5nZXRTaXplKCB2MSApLmxlbmd0aCgpICogMC41O1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0aW50ZXJzZWN0OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1heCggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1pbiggYm94Lm1heCApO1xuXG5cdFx0Ly8gZW5zdXJlIHRoYXQgaWYgdGhlcmUgaXMgbm8gb3ZlcmxhcCwgdGhlIHJlc3VsdCBpcyBmdWxseSBlbXB0eSwgbm90IHNsaWdodGx5IGVtcHR5IHdpdGggbm9uLWluZi8raW5mIHZhbHVlcyB0aGF0IHdpbGwgY2F1c2Ugc3Vic2VxdWVuY2UgaW50ZXJzZWN0cyB0byBlcnJvbmVvdXNseSByZXR1cm4gdmFsaWQgdmFsdWVzLlxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR1bmlvbjogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5tYXgoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdC8vIHRyYW5zZm9ybSBvZiBlbXB0eSBib3ggaXMgYW4gZW1wdHkgYm94LlxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCApICkgcmV0dXJuIHRoaXM7XG5cblx0XHR2YXIgbSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdHZhciB4YXggPSBtWyAwIF0gKiB0aGlzLm1pbi54LCB4YXkgPSBtWyAxIF0gKiB0aGlzLm1pbi54LCB4YXogPSBtWyAyIF0gKiB0aGlzLm1pbi54O1xuXHRcdHZhciB4YnggPSBtWyAwIF0gKiB0aGlzLm1heC54LCB4YnkgPSBtWyAxIF0gKiB0aGlzLm1heC54LCB4YnogPSBtWyAyIF0gKiB0aGlzLm1heC54O1xuXHRcdHZhciB5YXggPSBtWyA0IF0gKiB0aGlzLm1pbi55LCB5YXkgPSBtWyA1IF0gKiB0aGlzLm1pbi55LCB5YXogPSBtWyA2IF0gKiB0aGlzLm1pbi55O1xuXHRcdHZhciB5YnggPSBtWyA0IF0gKiB0aGlzLm1heC55LCB5YnkgPSBtWyA1IF0gKiB0aGlzLm1heC55LCB5YnogPSBtWyA2IF0gKiB0aGlzLm1heC55O1xuXHRcdHZhciB6YXggPSBtWyA4IF0gKiB0aGlzLm1pbi56LCB6YXkgPSBtWyA5IF0gKiB0aGlzLm1pbi56LCB6YXogPSBtWyAxMCBdICogdGhpcy5taW4uejtcblx0XHR2YXIgemJ4ID0gbVsgOCBdICogdGhpcy5tYXgueiwgemJ5ID0gbVsgOSBdICogdGhpcy5tYXgueiwgemJ6ID0gbVsgMTAgXSAqIHRoaXMubWF4Lno7XG5cblx0XHR0aGlzLm1pbi54ID0gTWF0aC5taW4oIHhheCwgeGJ4ICkgKyBNYXRoLm1pbiggeWF4LCB5YnggKSArIE1hdGgubWluKCB6YXgsIHpieCApICsgbVsgMTIgXTtcblx0XHR0aGlzLm1pbi55ID0gTWF0aC5taW4oIHhheSwgeGJ5ICkgKyBNYXRoLm1pbiggeWF5LCB5YnkgKSArIE1hdGgubWluKCB6YXksIHpieSApICsgbVsgMTMgXTtcblx0XHR0aGlzLm1pbi56ID0gTWF0aC5taW4oIHhheiwgeGJ6ICkgKyBNYXRoLm1pbiggeWF6LCB5YnogKSArIE1hdGgubWluKCB6YXosIHpieiApICsgbVsgMTQgXTtcblx0XHR0aGlzLm1heC54ID0gTWF0aC5tYXgoIHhheCwgeGJ4ICkgKyBNYXRoLm1heCggeWF4LCB5YnggKSArIE1hdGgubWF4KCB6YXgsIHpieCApICsgbVsgMTIgXTtcblx0XHR0aGlzLm1heC55ID0gTWF0aC5tYXgoIHhheSwgeGJ5ICkgKyBNYXRoLm1heCggeWF5LCB5YnkgKSArIE1hdGgubWF4KCB6YXksIHpieSApICsgbVsgMTMgXTtcblx0XHR0aGlzLm1heC56ID0gTWF0aC5tYXgoIHhheiwgeGJ6ICkgKyBNYXRoLm1heCggeWF6LCB5YnogKSArIE1hdGgubWF4KCB6YXosIHpieiApICsgbVsgMTQgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIG9mZnNldCApIHtcblxuXHRcdHRoaXMubWluLmFkZCggb2Zmc2V0ICk7XG5cdFx0dGhpcy5tYXguYWRkKCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHJldHVybiBib3gubWluLmVxdWFscyggdGhpcy5taW4gKSAmJiBib3gubWF4LmVxdWFscyggdGhpcy5tYXggKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFNwaGVyZSggY2VudGVyLCByYWRpdXMgKSB7XG5cblx0dGhpcy5jZW50ZXIgPSAoIGNlbnRlciAhPT0gdW5kZWZpbmVkICkgPyBjZW50ZXIgOiBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnJhZGl1cyA9ICggcmFkaXVzICE9PSB1bmRlZmluZWQgKSA/IHJhZGl1cyA6IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggU3BoZXJlLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBjZW50ZXIsIHJhZGl1cyApIHtcblxuXHRcdHRoaXMuY2VudGVyLmNvcHkoIGNlbnRlciApO1xuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYm94ID0gbmV3IEJveDMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBzZXRGcm9tUG9pbnRzKCBwb2ludHMsIG9wdGlvbmFsQ2VudGVyICkge1xuXG5cdFx0XHR2YXIgY2VudGVyID0gdGhpcy5jZW50ZXI7XG5cblx0XHRcdGlmICggb3B0aW9uYWxDZW50ZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjZW50ZXIuY29weSggb3B0aW9uYWxDZW50ZXIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRib3guc2V0RnJvbVBvaW50cyggcG9pbnRzICkuZ2V0Q2VudGVyKCBjZW50ZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWF4UmFkaXVzU3EgPSAwO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdG1heFJhZGl1c1NxID0gTWF0aC5tYXgoIG1heFJhZGl1c1NxLCBjZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50c1sgaSBdICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggbWF4UmFkaXVzU3EgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5jb3B5KCBzcGhlcmUuY2VudGVyICk7XG5cdFx0dGhpcy5yYWRpdXMgPSBzcGhlcmUucmFkaXVzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuICggdGhpcy5yYWRpdXMgPD0gMCApO1xuXG5cdH0sXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiAoIHBvaW50LmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLmNlbnRlciApIDw9ICggdGhpcy5yYWRpdXMgKiB0aGlzLnJhZGl1cyApICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gKCBwb2ludC5kaXN0YW5jZVRvKCB0aGlzLmNlbnRlciApIC0gdGhpcy5yYWRpdXMgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0dmFyIHJhZGl1c1N1bSA9IHRoaXMucmFkaXVzICsgc3BoZXJlLnJhZGl1cztcblxuXHRcdHJldHVybiBzcGhlcmUuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLmNlbnRlciApIDw9ICggcmFkaXVzU3VtICogcmFkaXVzU3VtICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHJldHVybiBib3guaW50ZXJzZWN0c1NwaGVyZSggdGhpcyApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHRoaXMuY2VudGVyICkgKSA8PSB0aGlzLnJhZGl1cztcblxuXHR9LFxuXG5cdGNsYW1wUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHZhciBkZWx0YUxlbmd0aFNxID0gdGhpcy5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5TcGhlcmU6IC5jbGFtcFBvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuY29weSggcG9pbnQgKTtcblxuXHRcdGlmICggZGVsdGFMZW5ndGhTcSA+ICggdGhpcy5yYWRpdXMgKiB0aGlzLnJhZGl1cyApICkge1xuXG5cdFx0XHR0YXJnZXQuc3ViKCB0aGlzLmNlbnRlciApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0dGFyZ2V0Lm11bHRpcGx5U2NhbGFyKCB0aGlzLnJhZGl1cyApLmFkZCggdGhpcy5jZW50ZXIgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fSxcblxuXHRnZXRCb3VuZGluZ0JveDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5TcGhlcmU6IC5nZXRCb3VuZGluZ0JveCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgQm94MygpO1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LnNldCggdGhpcy5jZW50ZXIsIHRoaXMuY2VudGVyICk7XG5cdFx0dGFyZ2V0LmV4cGFuZEJ5U2NhbGFyKCB0aGlzLnJhZGl1cyApO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR0aGlzLmNlbnRlci5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXHRcdHRoaXMucmFkaXVzID0gdGhpcy5yYWRpdXMgKiBtYXRyaXguZ2V0TWF4U2NhbGVPbkF4aXMoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIG9mZnNldCApIHtcblxuXHRcdHRoaXMuY2VudGVyLmFkZCggb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gc3BoZXJlLmNlbnRlci5lcXVhbHMoIHRoaXMuY2VudGVyICkgJiYgKCBzcGhlcmUucmFkaXVzID09PSB0aGlzLnJhZGl1cyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG5mdW5jdGlvbiBQbGFuZSggbm9ybWFsLCBjb25zdGFudCApIHtcblxuXHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0dGhpcy5ub3JtYWwgPSAoIG5vcm1hbCAhPT0gdW5kZWZpbmVkICkgPyBub3JtYWwgOiBuZXcgVmVjdG9yMyggMSwgMCwgMCApO1xuXHR0aGlzLmNvbnN0YW50ID0gKCBjb25zdGFudCAhPT0gdW5kZWZpbmVkICkgPyBjb25zdGFudCA6IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggUGxhbmUucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIG5vcm1hbCwgY29uc3RhbnQgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBub3JtYWwgKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gY29uc3RhbnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENvbXBvbmVudHM6IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHtcblxuXHRcdHRoaXMubm9ybWFsLnNldCggeCwgeSwgeiApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludDogZnVuY3Rpb24gKCBub3JtYWwsIHBvaW50ICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuY29weSggbm9ybWFsICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IC0gcG9pbnQuZG90KCB0aGlzLm5vcm1hbCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQ29wbGFuYXJQb2ludHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHYyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBzZXRGcm9tQ29wbGFuYXJQb2ludHMoIGEsIGIsIGMgKSB7XG5cblx0XHRcdHZhciBub3JtYWwgPSB2MS5zdWJWZWN0b3JzKCBjLCBiICkuY3Jvc3MoIHYyLnN1YlZlY3RvcnMoIGEsIGIgKSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHQvLyBROiBzaG91bGQgYW4gZXJyb3IgYmUgdGhyb3duIGlmIG5vcm1hbCBpcyB6ZXJvIChlLmcuIGRlZ2VuZXJhdGUgcGxhbmUpP1xuXG5cdFx0XHR0aGlzLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KCBub3JtYWwsIGEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBwbGFuZSApIHtcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIHBsYW5lLm5vcm1hbCApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSBwbGFuZS5jb25zdGFudDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBOb3RlOiB3aWxsIGxlYWQgdG8gYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgcGxhbmUgaXMgaW52YWxpZC5cblxuXHRcdHZhciBpbnZlcnNlTm9ybWFsTGVuZ3RoID0gMS4wIC8gdGhpcy5ub3JtYWwubGVuZ3RoKCk7XG5cdFx0dGhpcy5ub3JtYWwubXVsdGlwbHlTY2FsYXIoIGludmVyc2VOb3JtYWxMZW5ndGggKTtcblx0XHR0aGlzLmNvbnN0YW50ICo9IGludmVyc2VOb3JtYWxMZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jb25zdGFudCAqPSAtIDE7XG5cdFx0dGhpcy5ub3JtYWwubmVnYXRlKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9Qb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbC5kb3QoIHBvaW50ICkgKyB0aGlzLmNvbnN0YW50O1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1NwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSAtIHNwaGVyZS5yYWRpdXM7XG5cblx0fSxcblxuXHRwcm9qZWN0UG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlBsYW5lOiAucHJvamVjdFBvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMubm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIC0gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkgKS5hZGQoIHBvaW50ICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RMaW5lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdExpbmUoIGxpbmUsIHRhcmdldCApIHtcblxuXHRcdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QbGFuZTogLmludGVyc2VjdExpbmUoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBkaXJlY3Rpb24gPSBsaW5lLmRlbHRhKCB2MSApO1xuXG5cdFx0XHR2YXIgZGVub21pbmF0b3IgPSB0aGlzLm5vcm1hbC5kb3QoIGRpcmVjdGlvbiApO1xuXG5cdFx0XHRpZiAoIGRlbm9taW5hdG9yID09PSAwICkge1xuXG5cdFx0XHRcdC8vIGxpbmUgaXMgY29wbGFuYXIsIHJldHVybiBvcmlnaW5cblx0XHRcdFx0aWYgKCB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5zdGFydCApID09PSAwICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBsaW5lLnN0YXJ0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFVuc3VyZSBpZiB0aGlzIGlzIHRoZSBjb3JyZWN0IG1ldGhvZCB0byBoYW5kbGUgdGhpcyBjYXNlLlxuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB0ID0gLSAoIGxpbmUuc3RhcnQuZG90KCB0aGlzLm5vcm1hbCApICsgdGhpcy5jb25zdGFudCApIC8gZGVub21pbmF0b3I7XG5cblx0XHRcdGlmICggdCA8IDAgfHwgdCA+IDEgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGRpcmVjdGlvbiApLm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCBsaW5lLnN0YXJ0ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRpbnRlcnNlY3RzTGluZTogZnVuY3Rpb24gKCBsaW5lICkge1xuXG5cdFx0Ly8gTm90ZTogdGhpcyB0ZXN0cyBpZiBhIGxpbmUgaW50ZXJzZWN0cyB0aGUgcGxhbmUsIG5vdCB3aGV0aGVyIGl0IChvciBpdHMgZW5kLXBvaW50cykgYXJlIGNvcGxhbmFyIHdpdGggaXQuXG5cblx0XHR2YXIgc3RhcnRTaWduID0gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuc3RhcnQgKTtcblx0XHR2YXIgZW5kU2lnbiA9IHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLmVuZCApO1xuXG5cdFx0cmV0dXJuICggc3RhcnRTaWduIDwgMCAmJiBlbmRTaWduID4gMCApIHx8ICggZW5kU2lnbiA8IDAgJiYgc3RhcnRTaWduID4gMCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNQbGFuZSggdGhpcyApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1NwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gc3BoZXJlLmludGVyc2VjdHNQbGFuZSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29wbGFuYXJQb2ludDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QbGFuZTogLmNvcGxhbmFyUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5ub3JtYWwgKS5tdWx0aXBseVNjYWxhciggLSB0aGlzLmNvbnN0YW50ICk7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBhcHBseU1hdHJpeDQoIG1hdHJpeCwgb3B0aW9uYWxOb3JtYWxNYXRyaXggKSB7XG5cblx0XHRcdHZhciBub3JtYWxNYXRyaXggPSBvcHRpb25hbE5vcm1hbE1hdHJpeCB8fCBtMS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0XHR2YXIgcmVmZXJlbmNlUG9pbnQgPSB0aGlzLmNvcGxhbmFyUG9pbnQoIHYxICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdFx0dmFyIG5vcm1hbCA9IHRoaXMubm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdHRoaXMuY29uc3RhbnQgPSAtIHJlZmVyZW5jZVBvaW50LmRvdCggbm9ybWFsICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIG9mZnNldCApIHtcblxuXHRcdHRoaXMuY29uc3RhbnQgLT0gb2Zmc2V0LmRvdCggdGhpcy5ub3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0cmV0dXJuIHBsYW5lLm5vcm1hbC5lcXVhbHMoIHRoaXMubm9ybWFsICkgJiYgKCBwbGFuZS5jb25zdGFudCA9PT0gdGhpcy5jb25zdGFudCApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbmZ1bmN0aW9uIEZydXN0dW0oIHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUgKSB7XG5cblx0dGhpcy5wbGFuZXMgPSBbXG5cblx0XHQoIHAwICE9PSB1bmRlZmluZWQgKSA/IHAwIDogbmV3IFBsYW5lKCksXG5cdFx0KCBwMSAhPT0gdW5kZWZpbmVkICkgPyBwMSA6IG5ldyBQbGFuZSgpLFxuXHRcdCggcDIgIT09IHVuZGVmaW5lZCApID8gcDIgOiBuZXcgUGxhbmUoKSxcblx0XHQoIHAzICE9PSB1bmRlZmluZWQgKSA/IHAzIDogbmV3IFBsYW5lKCksXG5cdFx0KCBwNCAhPT0gdW5kZWZpbmVkICkgPyBwNCA6IG5ldyBQbGFuZSgpLFxuXHRcdCggcDUgIT09IHVuZGVmaW5lZCApID8gcDUgOiBuZXcgUGxhbmUoKVxuXG5cdF07XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggRnJ1c3R1bS5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggcDAsIHAxLCBwMiwgcDMsIHA0LCBwNSApIHtcblxuXHRcdHZhciBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdHBsYW5lc1sgMCBdLmNvcHkoIHAwICk7XG5cdFx0cGxhbmVzWyAxIF0uY29weSggcDEgKTtcblx0XHRwbGFuZXNbIDIgXS5jb3B5KCBwMiApO1xuXHRcdHBsYW5lc1sgMyBdLmNvcHkoIHAzICk7XG5cdFx0cGxhbmVzWyA0IF0uY29weSggcDQgKTtcblx0XHRwbGFuZXNbIDUgXS5jb3B5KCBwNSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBmcnVzdHVtICkge1xuXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0cGxhbmVzWyBpIF0uY29weSggZnJ1c3R1bS5wbGFuZXNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTWF0cml4OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cdFx0dmFyIG1lID0gbS5lbGVtZW50cztcblx0XHR2YXIgbWUwID0gbWVbIDAgXSwgbWUxID0gbWVbIDEgXSwgbWUyID0gbWVbIDIgXSwgbWUzID0gbWVbIDMgXTtcblx0XHR2YXIgbWU0ID0gbWVbIDQgXSwgbWU1ID0gbWVbIDUgXSwgbWU2ID0gbWVbIDYgXSwgbWU3ID0gbWVbIDcgXTtcblx0XHR2YXIgbWU4ID0gbWVbIDggXSwgbWU5ID0gbWVbIDkgXSwgbWUxMCA9IG1lWyAxMCBdLCBtZTExID0gbWVbIDExIF07XG5cdFx0dmFyIG1lMTIgPSBtZVsgMTIgXSwgbWUxMyA9IG1lWyAxMyBdLCBtZTE0ID0gbWVbIDE0IF0sIG1lMTUgPSBtZVsgMTUgXTtcblxuXHRcdHBsYW5lc1sgMCBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMCwgbWU3IC0gbWU0LCBtZTExIC0gbWU4LCBtZTE1IC0gbWUxMiApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMSBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMCwgbWU3ICsgbWU0LCBtZTExICsgbWU4LCBtZTE1ICsgbWUxMiApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMiBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMSwgbWU3ICsgbWU1LCBtZTExICsgbWU5LCBtZTE1ICsgbWUxMyApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMyBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMSwgbWU3IC0gbWU1LCBtZTExIC0gbWU5LCBtZTE1IC0gbWUxMyApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgNCBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMiwgbWU3IC0gbWU2LCBtZTExIC0gbWUxMCwgbWUxNSAtIG1lMTQgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDUgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTIsIG1lNyArIG1lNiwgbWUxMSArIG1lMTAsIG1lMTUgKyBtZTE0ICkubm9ybWFsaXplKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGludGVyc2VjdHNPYmplY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBzcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkge1xuXG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKVxuXHRcdFx0XHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdFx0c3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlIClcblx0XHRcdFx0LmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0aW50ZXJzZWN0c1Nwcml0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBpbnRlcnNlY3RzU3ByaXRlKCBzcHJpdGUgKSB7XG5cblx0XHRcdHNwaGVyZS5jZW50ZXIuc2V0KCAwLCAwLCAwICk7XG5cdFx0XHRzcGhlcmUucmFkaXVzID0gMC43MDcxMDY3ODExODY1NDc2O1xuXHRcdFx0c3BoZXJlLmFwcGx5TWF0cml4NCggc3ByaXRlLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0aW50ZXJzZWN0c1NwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cdFx0dmFyIGNlbnRlciA9IHNwaGVyZS5jZW50ZXI7XG5cdFx0dmFyIG5lZ1JhZGl1cyA9IC0gc3BoZXJlLnJhZGl1cztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdHZhciBkaXN0YW5jZSA9IHBsYW5lc1sgaSBdLmRpc3RhbmNlVG9Qb2ludCggY2VudGVyICk7XG5cblx0XHRcdGlmICggZGlzdGFuY2UgPCBuZWdSYWRpdXMgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBwMSA9IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRwMiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gaW50ZXJzZWN0c0JveCggYm94ICkge1xuXG5cdFx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHBsYW5lID0gcGxhbmVzWyBpIF07XG5cblx0XHRcdFx0cDEueCA9IHBsYW5lLm5vcm1hbC54ID4gMCA/IGJveC5taW4ueCA6IGJveC5tYXgueDtcblx0XHRcdFx0cDIueCA9IHBsYW5lLm5vcm1hbC54ID4gMCA/IGJveC5tYXgueCA6IGJveC5taW4ueDtcblx0XHRcdFx0cDEueSA9IHBsYW5lLm5vcm1hbC55ID4gMCA/IGJveC5taW4ueSA6IGJveC5tYXgueTtcblx0XHRcdFx0cDIueSA9IHBsYW5lLm5vcm1hbC55ID4gMCA/IGJveC5tYXgueSA6IGJveC5taW4ueTtcblx0XHRcdFx0cDEueiA9IHBsYW5lLm5vcm1hbC56ID4gMCA/IGJveC5taW4ueiA6IGJveC5tYXguejtcblx0XHRcdFx0cDIueiA9IHBsYW5lLm5vcm1hbC56ID4gMCA/IGJveC5tYXgueiA6IGJveC5taW4uejtcblxuXHRcdFx0XHR2YXIgZDEgPSBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHAxICk7XG5cdFx0XHRcdHZhciBkMiA9IHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggcDIgKTtcblxuXHRcdFx0XHQvLyBpZiBib3RoIG91dHNpZGUgcGxhbmUsIG5vIGludGVyc2VjdGlvblxuXG5cdFx0XHRcdGlmICggZDEgPCAwICYmIGQyIDwgMCApIHtcblxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjb250YWluc1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkgPCAwICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG59ICk7XG5cbnZhciBhbHBoYW1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdGRpZmZ1c2VDb2xvci5hICo9IHRleHR1cmUyRCggYWxwaGFNYXAsIHZVdiApLmc7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBhbHBoYW1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBhbHBoYXRlc3RfZnJhZ21lbnQgPSBcIiNpZmRlZiBBTFBIQVRFU1RcXG5cXHRpZiAoIGRpZmZ1c2VDb2xvci5hIDwgQUxQSEFURVNUICkgZGlzY2FyZDtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGFvbWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FPTUFQXFxuXFx0ZmxvYXQgYW1iaWVudE9jY2x1c2lvbiA9ICggdGV4dHVyZTJEKCBhb01hcCwgdlV2MiApLnIgLSAxLjAgKSAqIGFvTWFwSW50ZW5zaXR5ICsgMS4wO1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBhbWJpZW50T2NjbHVzaW9uO1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUEhZU0lDQUwgKVxcblxcdFxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICo9IGNvbXB1dGVTcGVjdWxhck9jY2x1c2lvbiggZG90TlYsIGFtYmllbnRPY2NsdXNpb24sIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCI7XG5cbnZhciBhb21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0FPTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYW9NYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBhb01hcEludGVuc2l0eTtcXG4jZW5kaWZcIjtcblxudmFyIGJlZ2luX3ZlcnRleCA9IFwiXFxudmVjMyB0cmFuc2Zvcm1lZCA9IHZlYzMoIHBvc2l0aW9uICk7XFxuXCI7XG5cbnZhciBiZWdpbm5vcm1hbF92ZXJ0ZXggPSBcIlxcbnZlYzMgb2JqZWN0Tm9ybWFsID0gdmVjMyggbm9ybWFsICk7XFxuXCI7XG5cbnZhciBic2RmcyA9IFwiZmxvYXQgcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggY29uc3QgaW4gZmxvYXQgbGlnaHREaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgY3V0b2ZmRGlzdGFuY2UsIGNvbnN0IGluIGZsb2F0IGRlY2F5RXhwb25lbnQgKSB7XFxuXFx0aWYoIGRlY2F5RXhwb25lbnQgPiAwLjAgKSB7XFxuI2lmIGRlZmluZWQgKCBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTIClcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZUZhbGxvZmYgPSAxLjAgLyBtYXgoIHBvdyggbGlnaHREaXN0YW5jZSwgZGVjYXlFeHBvbmVudCApLCAwLjAxICk7XFxuXFx0XFx0ZmxvYXQgbWF4RGlzdGFuY2VDdXRvZmZGYWN0b3IgPSBwb3cyKCBzYXR1cmF0ZSggMS4wIC0gcG93NCggbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICkgKSApO1xcblxcdFxcdHJldHVybiBkaXN0YW5jZUZhbGxvZmYgKiBtYXhEaXN0YW5jZUN1dG9mZkZhY3RvcjtcXG4jZWxzZVxcblxcdFxcdHJldHVybiBwb3coIHNhdHVyYXRlKCAtbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICsgMS4wICksIGRlY2F5RXhwb25lbnQgKTtcXG4jZW5kaWZcXG5cXHR9XFxuXFx0cmV0dXJuIDEuMDtcXG59XFxudmVjMyBCUkRGX0RpZmZ1c2VfTGFtYmVydCggY29uc3QgaW4gdmVjMyBkaWZmdXNlQ29sb3IgKSB7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBkaWZmdXNlQ29sb3I7XFxufVxcbnZlYzMgRl9TY2hsaWNrKCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IGRvdExIICkge1xcblxcdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC01LjU1NDczICogZG90TEggLSA2Ljk4MzE2ICkgKiBkb3RMSCApO1xcblxcdHJldHVybiAoIDEuMCAtIHNwZWN1bGFyQ29sb3IgKSAqIGZyZXNuZWwgKyBzcGVjdWxhckNvbG9yO1xcbn1cXG5mbG9hdCBHX0dHWF9TbWl0aCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ2wgPSBkb3ROTCArIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TkwgKSApO1xcblxcdGZsb2F0IGd2ID0gZG90TlYgKyBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcXG5cXHRyZXR1cm4gMS4wIC8gKCBnbCAqIGd2ICk7XFxufVxcbmZsb2F0IEdfR0dYX1NtaXRoQ29ycmVsYXRlZCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ3YgPSBkb3ROTCAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TlYgKSApO1xcblxcdGZsb2F0IGdsID0gZG90TlYgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcXG5cXHRyZXR1cm4gMC41IC8gbWF4KCBndiArIGdsLCBFUFNJTE9OICk7XFxufVxcbmZsb2F0IERfR0dYKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGRlbm9tID0gcG93MiggZG90TkggKSAqICggYTIgLSAxLjAgKSArIDEuMDtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyIC8gcG93MiggZGVub20gKTtcXG59XFxudmVjMyBCUkRGX1NwZWN1bGFyX0dHWCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKyBnZW9tZXRyeS52aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdExIID0gc2F0dXJhdGUoIGRvdCggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24sIGhhbGZEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcXG5cXHRmbG9hdCBHID0gR19HR1hfU21pdGhDb3JyZWxhdGVkKCBhbHBoYSwgZG90TkwsIGRvdE5WICk7XFxuXFx0ZmxvYXQgRCA9IERfR0dYKCBhbHBoYSwgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59XFxudmVjMiBMVENfVXYoIGNvbnN0IGluIHZlYzMgTiwgY29uc3QgaW4gdmVjMyBWLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX1NJWkUgID0gNjQuMDtcXG5cXHRjb25zdCBmbG9hdCBMVVRfU0NBTEUgPSAoIExVVF9TSVpFIC0gMS4wICkgLyBMVVRfU0laRTtcXG5cXHRjb25zdCBmbG9hdCBMVVRfQklBUyAgPSAwLjUgLyBMVVRfU0laRTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIE4sIFYgKSApO1xcblxcdHZlYzIgdXYgPSB2ZWMyKCByb3VnaG5lc3MsIHNxcnQoIDEuMCAtIGRvdE5WICkgKTtcXG5cXHR1diA9IHV2ICogTFVUX1NDQUxFICsgTFVUX0JJQVM7XFxuXFx0cmV0dXJuIHV2O1xcbn1cXG5mbG9hdCBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgZiApIHtcXG5cXHRmbG9hdCBsID0gbGVuZ3RoKCBmICk7XFxuXFx0cmV0dXJuIG1heCggKCBsICogbCArIGYueiApIC8gKCBsICsgMS4wICksIDAuMCApO1xcbn1cXG52ZWMzIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyB2MSwgY29uc3QgaW4gdmVjMyB2MiApIHtcXG5cXHRmbG9hdCB4ID0gZG90KCB2MSwgdjIgKTtcXG5cXHRmbG9hdCB5ID0gYWJzKCB4ICk7XFxuXFx0ZmxvYXQgYSA9IDAuODU0Mzk4NSArICggMC40OTY1MTU1ICsgMC4wMTQ1MjA2ICogeSApICogeTtcXG5cXHRmbG9hdCBiID0gMy40MTc1OTQwICsgKCA0LjE2MTY3MjQgKyB5ICkgKiB5O1xcblxcdGZsb2F0IHYgPSBhIC8gYjtcXG5cXHRmbG9hdCB0aGV0YV9zaW50aGV0YSA9ICggeCA+IDAuMCApID8gdiA6IDAuNSAqIGludmVyc2VzcXJ0KCBtYXgoIDEuMCAtIHggKiB4LCAxZS03ICkgKSAtIHY7XFxuXFx0cmV0dXJuIGNyb3NzKCB2MSwgdjIgKSAqIHRoZXRhX3NpbnRoZXRhO1xcbn1cXG52ZWMzIExUQ19FdmFsdWF0ZSggY29uc3QgaW4gdmVjMyBOLCBjb25zdCBpbiB2ZWMzIFYsIGNvbnN0IGluIHZlYzMgUCwgY29uc3QgaW4gbWF0MyBtSW52LCBjb25zdCBpbiB2ZWMzIHJlY3RDb29yZHNbIDQgXSApIHtcXG5cXHR2ZWMzIHYxID0gcmVjdENvb3Jkc1sgMSBdIC0gcmVjdENvb3Jkc1sgMCBdO1xcblxcdHZlYzMgdjIgPSByZWN0Q29vcmRzWyAzIF0gLSByZWN0Q29vcmRzWyAwIF07XFxuXFx0dmVjMyBsaWdodE5vcm1hbCA9IGNyb3NzKCB2MSwgdjIgKTtcXG5cXHRpZiggZG90KCBsaWdodE5vcm1hbCwgUCAtIHJlY3RDb29yZHNbIDAgXSApIDwgMC4wICkgcmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdHZlYzMgVDEsIFQyO1xcblxcdFQxID0gbm9ybWFsaXplKCBWIC0gTiAqIGRvdCggViwgTiApICk7XFxuXFx0VDIgPSAtIGNyb3NzKCBOLCBUMSApO1xcblxcdG1hdDMgbWF0ID0gbUludiAqIHRyYW5zcG9zZU1hdDMoIG1hdDMoIFQxLCBUMiwgTiApICk7XFxuXFx0dmVjMyBjb29yZHNbIDQgXTtcXG5cXHRjb29yZHNbIDAgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMCBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMSBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAxIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAyIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDIgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDMgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMyBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMCBdID0gbm9ybWFsaXplKCBjb29yZHNbIDAgXSApO1xcblxcdGNvb3Jkc1sgMSBdID0gbm9ybWFsaXplKCBjb29yZHNbIDEgXSApO1xcblxcdGNvb3Jkc1sgMiBdID0gbm9ybWFsaXplKCBjb29yZHNbIDIgXSApO1xcblxcdGNvb3Jkc1sgMyBdID0gbm9ybWFsaXplKCBjb29yZHNbIDMgXSApO1xcblxcdHZlYzMgdmVjdG9yRm9ybUZhY3RvciA9IHZlYzMoIDAuMCApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDAgXSwgY29vcmRzWyAxIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAxIF0sIGNvb3Jkc1sgMiBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMiBdLCBjb29yZHNbIDMgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDMgXSwgY29vcmRzWyAwIF0gKTtcXG5cXHRmbG9hdCByZXN1bHQgPSBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIHZlY3RvckZvcm1GYWN0b3IgKTtcXG5cXHRyZXR1cm4gdmVjMyggcmVzdWx0ICk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcXG5cXHRjb25zdCB2ZWM0IGMwID0gdmVjNCggLSAxLCAtIDAuMDI3NSwgLSAwLjU3MiwgMC4wMjIgKTtcXG5cXHRjb25zdCB2ZWM0IGMxID0gdmVjNCggMSwgMC4wNDI1LCAxLjA0LCAtIDAuMDQgKTtcXG5cXHR2ZWM0IHIgPSByb3VnaG5lc3MgKiBjMCArIGMxO1xcblxcdGZsb2F0IGEwMDQgPSBtaW4oIHIueCAqIHIueCwgZXhwMiggLSA5LjI4ICogZG90TlYgKSApICogci54ICsgci55O1xcblxcdHZlYzIgQUIgPSB2ZWMyKCAtMS4wNCwgMS4wNCApICogYTAwNCArIHIuenc7XFxuXFx0cmV0dXJuIHNwZWN1bGFyQ29sb3IgKiBBQi54ICsgQUIueTtcXG59XFxuZmxvYXQgR19CbGlublBob25nX0ltcGxpY2l0KCApIHtcXG5cXHRyZXR1cm4gMC4yNTtcXG59XFxuZmxvYXQgRF9CbGlublBob25nKCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogKCBzaGluaW5lc3MgKiAwLjUgKyAxLjAgKSAqIHBvdyggZG90TkgsIHNoaW5pbmVzcyApO1xcbn1cXG52ZWMzIEJSREZfU3BlY3VsYXJfQmxpbm5QaG9uZyggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNoaW5pbmVzcyApIHtcXG5cXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICsgZ2VvbWV0cnkudmlld0RpciApO1xcblxcdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBoYWxmRGlyICkgKTtcXG5cXHRmbG9hdCBkb3RMSCA9IHNhdHVyYXRlKCBkb3QoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uLCBoYWxmRGlyICkgKTtcXG5cXHR2ZWMzIEYgPSBGX1NjaGxpY2soIHNwZWN1bGFyQ29sb3IsIGRvdExIICk7XFxuXFx0ZmxvYXQgRyA9IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKTtcXG5cXHRmbG9hdCBEID0gRF9CbGlublBob25nKCBzaGluaW5lc3MsIGRvdE5IICk7XFxuXFx0cmV0dXJuIEYgKiAoIEcgKiBEICk7XFxufVxcbmZsb2F0IEdHWFJvdWdobmVzc1RvQmxpbm5FeHBvbmVudCggY29uc3QgaW4gZmxvYXQgZ2d4Um91Z2huZXNzICkge1xcblxcdHJldHVybiAoIDIuMCAvIHBvdzIoIGdneFJvdWdobmVzcyArIDAuMDAwMSApIC0gMi4wICk7XFxufVxcbmZsb2F0IEJsaW5uRXhwb25lbnRUb0dHWFJvdWdobmVzcyggY29uc3QgaW4gZmxvYXQgYmxpbm5FeHBvbmVudCApIHtcXG5cXHRyZXR1cm4gc3FydCggMi4wIC8gKCBibGlubkV4cG9uZW50ICsgMi4wICkgKTtcXG59XFxuXCI7XG5cbnZhciBidW1wbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQlVNUE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGJ1bXBNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBidW1wU2NhbGU7XFxuXFx0dmVjMiBkSGR4eV9md2QoKSB7XFxuXFx0XFx0dmVjMiBkU1RkeCA9IGRGZHgoIHZVdiApO1xcblxcdFxcdHZlYzIgZFNUZHkgPSBkRmR5KCB2VXYgKTtcXG5cXHRcXHRmbG9hdCBIbGwgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZVdiApLng7XFxuXFx0XFx0ZmxvYXQgZEJ4ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeCApLnggLSBIbGw7XFxuXFx0XFx0ZmxvYXQgZEJ5ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeSApLnggLSBIbGw7XFxuXFx0XFx0cmV0dXJuIHZlYzIoIGRCeCwgZEJ5ICk7XFxuXFx0fVxcblxcdHZlYzMgcGVydHVyYk5vcm1hbEFyYiggdmVjMyBzdXJmX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgZEhkeHkgKSB7XFxuXFx0XFx0dmVjMyB2U2lnbWFYID0gdmVjMyggZEZkeCggc3VyZl9wb3MueCApLCBkRmR4KCBzdXJmX3Bvcy55ICksIGRGZHgoIHN1cmZfcG9zLnogKSApO1xcblxcdFxcdHZlYzMgdlNpZ21hWSA9IHZlYzMoIGRGZHkoIHN1cmZfcG9zLnggKSwgZEZkeSggc3VyZl9wb3MueSApLCBkRmR5KCBzdXJmX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHZOID0gc3VyZl9ub3JtO1xcblxcdFxcdHZlYzMgUjEgPSBjcm9zcyggdlNpZ21hWSwgdk4gKTtcXG5cXHRcXHR2ZWMzIFIyID0gY3Jvc3MoIHZOLCB2U2lnbWFYICk7XFxuXFx0XFx0ZmxvYXQgZkRldCA9IGRvdCggdlNpZ21hWCwgUjEgKTtcXG5cXHRcXHRmRGV0ICo9ICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHRcXHR2ZWMzIHZHcmFkID0gc2lnbiggZkRldCApICogKCBkSGR4eS54ICogUjEgKyBkSGR4eS55ICogUjIgKTtcXG5cXHRcXHRyZXR1cm4gbm9ybWFsaXplKCBhYnMoIGZEZXQgKSAqIHN1cmZfbm9ybSAtIHZHcmFkICk7XFxuXFx0fVxcbiNlbmRpZlxcblwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50ID0gXCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcXG5cXHR2ZWM0IHBsYW5lO1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBVTklPTl9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XFxuXFx0XFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xcblxcdFxcdGlmICggZG90KCB2Vmlld1Bvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSBkaXNjYXJkO1xcblxcdH1cXG5cXHQjaWYgVU5JT05fQ0xJUFBJTkdfUExBTkVTIDwgTlVNX0NMSVBQSU5HX1BMQU5FU1xcblxcdFxcdGJvb2wgY2xpcHBlZCA9IHRydWU7XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdFxcdGZvciAoIGludCBpID0gVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpIDwgTlVNX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0XFx0Y2xpcHBlZCA9ICggZG90KCB2Vmlld1Bvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSAmJiBjbGlwcGVkO1xcblxcdFxcdH1cXG5cXHRcXHRpZiAoIGNsaXBwZWQgKSBkaXNjYXJkO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdCNpZiAhIGRlZmluZWQoIFBIWVNJQ0FMICkgJiYgISBkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuXFx0I2VuZGlmXFxuXFx0dW5pZm9ybSB2ZWM0IGNsaXBwaW5nUGxhbmVzWyBOVU1fQ0xJUFBJTkdfUExBTkVTIF07XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXggPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMCAmJiAhIGRlZmluZWQoIFBIWVNJQ0FMICkgJiYgISBkZWZpbmVkKCBQSE9ORyApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfdmVydGV4ID0gXCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDAgJiYgISBkZWZpbmVkKCBQSFlTSUNBTCApICYmICEgZGVmaW5lZCggUEhPTkcgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcblwiO1xuXG52YXIgY29sb3JfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHRkaWZmdXNlQ29sb3IucmdiICo9IHZDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIGNvbG9yX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgY29sb3JfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0NPTE9SXFxuXFx0dkNvbG9yLnh5eiA9IGNvbG9yLnh5ejtcXG4jZW5kaWZcIjtcblxudmFyIGNvbW1vbiA9IFwiI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU5XFxuI2RlZmluZSBQSTIgNi4yODMxODUzMDcxOFxcbiNkZWZpbmUgUElfSEFMRiAxLjU3MDc5NjMyNjc5NDlcXG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxOFxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSTIgMC4xNTkxNTQ5NFxcbiNkZWZpbmUgTE9HMiAxLjQ0MjY5NVxcbiNkZWZpbmUgRVBTSUxPTiAxZS02XFxuI2RlZmluZSBzYXR1cmF0ZShhKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNkZWZpbmUgd2hpdGVDb21wbGltZW50KGEpICggMS4wIC0gc2F0dXJhdGUoIGEgKSApXFxuZmxvYXQgcG93MiggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeDsgfVxcbmZsb2F0IHBvdzMoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4KngqeDsgfVxcbmZsb2F0IHBvdzQoIGNvbnN0IGluIGZsb2F0IHggKSB7IGZsb2F0IHgyID0geCp4OyByZXR1cm4geDIqeDI7IH1cXG5mbG9hdCBhdmVyYWdlKCBjb25zdCBpbiB2ZWMzIGNvbG9yICkgeyByZXR1cm4gZG90KCBjb2xvciwgdmVjMyggMC4zMzMzICkgKTsgfVxcbmhpZ2hwIGZsb2F0IHJhbmQoIGNvbnN0IGluIHZlYzIgdXYgKSB7XFxuXFx0Y29uc3QgaGlnaHAgZmxvYXQgYSA9IDEyLjk4OTgsIGIgPSA3OC4yMzMsIGMgPSA0Mzc1OC41NDUzO1xcblxcdGhpZ2hwIGZsb2F0IGR0ID0gZG90KCB1di54eSwgdmVjMiggYSxiICkgKSwgc24gPSBtb2QoIGR0LCBQSSApO1xcblxcdHJldHVybiBmcmFjdChzaW4oc24pICogYyk7XFxufVxcbnN0cnVjdCBJbmNpZGVudExpZ2h0IHtcXG5cXHR2ZWMzIGNvbG9yO1xcblxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdGJvb2wgdmlzaWJsZTtcXG59O1xcbnN0cnVjdCBSZWZsZWN0ZWRMaWdodCB7XFxuXFx0dmVjMyBkaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgZGlyZWN0U3BlY3VsYXI7XFxuXFx0dmVjMyBpbmRpcmVjdERpZmZ1c2U7XFxuXFx0dmVjMyBpbmRpcmVjdFNwZWN1bGFyO1xcbn07XFxuc3RydWN0IEdlb21ldHJpY0NvbnRleHQge1xcblxcdHZlYzMgcG9zaXRpb247XFxuXFx0dmVjMyBub3JtYWw7XFxuXFx0dmVjMyB2aWV3RGlyO1xcbn07XFxudmVjMyB0cmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTtcXG59XFxudmVjMyBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0KCBkaXIsIDAuMCApICogbWF0cml4ICkueHl6ICk7XFxufVxcbnZlYzMgcHJvamVjdE9uUGxhbmUoaW4gdmVjMyBwb2ludCwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0ZmxvYXQgZGlzdGFuY2UgPSBkb3QoIHBsYW5lTm9ybWFsLCBwb2ludCAtIHBvaW50T25QbGFuZSApO1xcblxcdHJldHVybiAtIGRpc3RhbmNlICogcGxhbmVOb3JtYWwgKyBwb2ludDtcXG59XFxuZmxvYXQgc2lkZU9mUGxhbmUoIGluIHZlYzMgcG9pbnQsIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xcblxcdHJldHVybiBzaWduKCBkb3QoIHBvaW50IC0gcG9pbnRPblBsYW5lLCBwbGFuZU5vcm1hbCApICk7XFxufVxcbnZlYzMgbGluZVBsYW5lSW50ZXJzZWN0KCBpbiB2ZWMzIHBvaW50T25MaW5lLCBpbiB2ZWMzIGxpbmVEaXJlY3Rpb24sIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xcblxcdHJldHVybiBsaW5lRGlyZWN0aW9uICogKCBkb3QoIHBsYW5lTm9ybWFsLCBwb2ludE9uUGxhbmUgLSBwb2ludE9uTGluZSApIC8gZG90KCBwbGFuZU5vcm1hbCwgbGluZURpcmVjdGlvbiApICkgKyBwb2ludE9uTGluZTtcXG59XFxubWF0MyB0cmFuc3Bvc2VNYXQzKCBjb25zdCBpbiBtYXQzIG0gKSB7XFxuXFx0bWF0MyB0bXA7XFxuXFx0dG1wWyAwIF0gPSB2ZWMzKCBtWyAwIF0ueCwgbVsgMSBdLngsIG1bIDIgXS54ICk7XFxuXFx0dG1wWyAxIF0gPSB2ZWMzKCBtWyAwIF0ueSwgbVsgMSBdLnksIG1bIDIgXS55ICk7XFxuXFx0dG1wWyAyIF0gPSB2ZWMzKCBtWyAwIF0ueiwgbVsgMSBdLnosIG1bIDIgXS56ICk7XFxuXFx0cmV0dXJuIHRtcDtcXG59XFxuZmxvYXQgbGluZWFyVG9SZWxhdGl2ZUx1bWluYW5jZSggY29uc3QgaW4gdmVjMyBjb2xvciApIHtcXG5cXHR2ZWMzIHdlaWdodHMgPSB2ZWMzKCAwLjIxMjYsIDAuNzE1MiwgMC4wNzIyICk7XFxuXFx0cmV0dXJuIGRvdCggd2VpZ2h0cywgY29sb3IucmdiICk7XFxufVxcblwiO1xuXG52YXIgY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50ID0gXCIjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxcbiNkZWZpbmUgY3ViZVVWX3RleHR1cmVTaXplICgxMDI0LjApXFxuaW50IGdldEZhY2VGcm9tRGlyZWN0aW9uKHZlYzMgZGlyZWN0aW9uKSB7XFxuXFx0dmVjMyBhYnNEaXJlY3Rpb24gPSBhYnMoZGlyZWN0aW9uKTtcXG5cXHRpbnQgZmFjZSA9IC0xO1xcblxcdGlmKCBhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi56ICkge1xcblxcdFxcdGlmKGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnkgKVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueCA+IDAuMCA/IDAgOiAzO1xcblxcdFxcdGVsc2VcXG5cXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnkgPiAwLjAgPyAxIDogNDtcXG5cXHR9XFxuXFx0ZWxzZSB7XFxuXFx0XFx0aWYoYWJzRGlyZWN0aW9uLnogPiBhYnNEaXJlY3Rpb24ueSApXFxuXFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi56ID4gMC4wID8gMiA6IDU7XFxuXFx0XFx0ZWxzZVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEgOiA0O1xcblxcdH1cXG5cXHRyZXR1cm4gZmFjZTtcXG59XFxuI2RlZmluZSBjdWJlVVZfbWF4TG9kczEgIChsb2cyKGN1YmVVVl90ZXh0dXJlU2l6ZSowLjI1KSAtIDEuMClcXG4jZGVmaW5lIGN1YmVVVl9yYW5nZUNsYW1wIChleHAyKCg2LjAgLSAxLjApICogMi4wKSlcXG52ZWMyIE1pcExldmVsSW5mbyggdmVjMyB2ZWMsIGZsb2F0IHJvdWdobmVzc0xldmVsLCBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgc2NhbGUgPSBleHAyKGN1YmVVVl9tYXhMb2RzMSAtIHJvdWdobmVzc0xldmVsKTtcXG5cXHRmbG9hdCBkeFJvdWdobmVzcyA9IGRGZHgocm91Z2huZXNzKTtcXG5cXHRmbG9hdCBkeVJvdWdobmVzcyA9IGRGZHkocm91Z2huZXNzKTtcXG5cXHR2ZWMzIGR4ID0gZEZkeCggdmVjICogc2NhbGUgKiBkeFJvdWdobmVzcyApO1xcblxcdHZlYzMgZHkgPSBkRmR5KCB2ZWMgKiBzY2FsZSAqIGR5Um91Z2huZXNzICk7XFxuXFx0ZmxvYXQgZCA9IG1heCggZG90KCBkeCwgZHggKSwgZG90KCBkeSwgZHkgKSApO1xcblxcdGQgPSBjbGFtcChkLCAxLjAsIGN1YmVVVl9yYW5nZUNsYW1wKTtcXG5cXHRmbG9hdCBtaXBMZXZlbCA9IDAuNSAqIGxvZzIoZCk7XFxuXFx0cmV0dXJuIHZlYzIoZmxvb3IobWlwTGV2ZWwpLCBmcmFjdChtaXBMZXZlbCkpO1xcbn1cXG4jZGVmaW5lIGN1YmVVVl9tYXhMb2RzMiAobG9nMihjdWJlVVZfdGV4dHVyZVNpemUqMC4yNSkgLSAyLjApXFxuI2RlZmluZSBjdWJlVVZfcmNwVGV4dHVyZVNpemUgKDEuMCAvIGN1YmVVVl90ZXh0dXJlU2l6ZSlcXG52ZWMyIGdldEN1YmVVVih2ZWMzIGRpcmVjdGlvbiwgZmxvYXQgcm91Z2huZXNzTGV2ZWwsIGZsb2F0IG1pcExldmVsKSB7XFxuXFx0bWlwTGV2ZWwgPSByb3VnaG5lc3NMZXZlbCA+IGN1YmVVVl9tYXhMb2RzMiAtIDMuMCA/IDAuMCA6IG1pcExldmVsO1xcblxcdGZsb2F0IGEgPSAxNi4wICogY3ViZVVWX3JjcFRleHR1cmVTaXplO1xcblxcdHZlYzIgZXhwMl9wYWNrZWQgPSBleHAyKCB2ZWMyKCByb3VnaG5lc3NMZXZlbCwgbWlwTGV2ZWwgKSApO1xcblxcdHZlYzIgcmNwX2V4cDJfcGFja2VkID0gdmVjMiggMS4wICkgLyBleHAyX3BhY2tlZDtcXG5cXHRmbG9hdCBwb3dTY2FsZSA9IGV4cDJfcGFja2VkLnggKiBleHAyX3BhY2tlZC55O1xcblxcdGZsb2F0IHNjYWxlID0gcmNwX2V4cDJfcGFja2VkLnggKiByY3BfZXhwMl9wYWNrZWQueSAqIDAuMjU7XFxuXFx0ZmxvYXQgbWlwT2Zmc2V0ID0gMC43NSooMS4wIC0gcmNwX2V4cDJfcGFja2VkLnkpICogcmNwX2V4cDJfcGFja2VkLng7XFxuXFx0Ym9vbCBiUmVzID0gbWlwTGV2ZWwgPT0gMC4wO1xcblxcdHNjYWxlID0gIGJSZXMgJiYgKHNjYWxlIDwgYSkgPyBhIDogc2NhbGU7XFxuXFx0dmVjMyByO1xcblxcdHZlYzIgb2Zmc2V0O1xcblxcdGludCBmYWNlID0gZ2V0RmFjZUZyb21EaXJlY3Rpb24oZGlyZWN0aW9uKTtcXG5cXHRmbG9hdCByY3BQb3dTY2FsZSA9IDEuMCAvIHBvd1NjYWxlO1xcblxcdGlmKCBmYWNlID09IDApIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueCwgLWRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigwLjArbWlwT2Zmc2V0LDAuNzUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IGEgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSAxKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnksIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueik7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMihzY2FsZSttaXBPZmZzZXQsIDAuNzUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IGEgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSAyKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnosIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigyLjAqc2NhbGUrbWlwT2Zmc2V0LCAwLjc1ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyBhIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2UgaWYoIGZhY2UgPT0gMykge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkpO1xcblxcdFxcdG9mZnNldCA9IHZlYzIoMC4wK21pcE9mZnNldCwwLjUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IDAuMCA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRlbHNlIGlmKCBmYWNlID09IDQpIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueSwgZGlyZWN0aW9uLngsIC1kaXJlY3Rpb24ueik7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMihzY2FsZSttaXBPZmZzZXQsIDAuNSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gMC4wIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2Uge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi56LCAtZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKDIuMCpzY2FsZSttaXBPZmZzZXQsIDAuNSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gMC4wIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdHIgPSBub3JtYWxpemUocik7XFxuXFx0ZmxvYXQgdGV4ZWxPZmZzZXQgPSAwLjUgKiBjdWJlVVZfcmNwVGV4dHVyZVNpemU7XFxuXFx0dmVjMiBzID0gKCByLnl6IC8gYWJzKCByLnggKSArIHZlYzIoIDEuMCApICkgKiAwLjU7XFxuXFx0dmVjMiBiYXNlID0gb2Zmc2V0ICsgdmVjMiggdGV4ZWxPZmZzZXQgKTtcXG5cXHRyZXR1cm4gYmFzZSArIHMgKiAoIHNjYWxlIC0gMi4wICogdGV4ZWxPZmZzZXQgKTtcXG59XFxuI2RlZmluZSBjdWJlVVZfbWF4TG9kczMgKGxvZzIoY3ViZVVWX3RleHR1cmVTaXplKjAuMjUpIC0gMy4wKVxcbnZlYzQgdGV4dHVyZUN1YmVVVih2ZWMzIHJlZmxlY3RlZERpcmVjdGlvbiwgZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IHJvdWdobmVzc1ZhbCA9IHJvdWdobmVzcyogY3ViZVVWX21heExvZHMzO1xcblxcdGZsb2F0IHIxID0gZmxvb3Iocm91Z2huZXNzVmFsKTtcXG5cXHRmbG9hdCByMiA9IHIxICsgMS4wO1xcblxcdGZsb2F0IHQgPSBmcmFjdChyb3VnaG5lc3NWYWwpO1xcblxcdHZlYzIgbWlwSW5mbyA9IE1pcExldmVsSW5mbyhyZWZsZWN0ZWREaXJlY3Rpb24sIHIxLCByb3VnaG5lc3MpO1xcblxcdGZsb2F0IHMgPSBtaXBJbmZvLnk7XFxuXFx0ZmxvYXQgbGV2ZWwwID0gbWlwSW5mby54O1xcblxcdGZsb2F0IGxldmVsMSA9IGxldmVsMCArIDEuMDtcXG5cXHRsZXZlbDEgPSBsZXZlbDEgPiA1LjAgPyA1LjAgOiBsZXZlbDE7XFxuXFx0bGV2ZWwwICs9IG1pbiggZmxvb3IoIHMgKyAwLjUgKSwgNS4wICk7XFxuXFx0dmVjMiB1dl8xMCA9IGdldEN1YmVVVihyZWZsZWN0ZWREaXJlY3Rpb24sIHIxLCBsZXZlbDApO1xcblxcdHZlYzQgY29sb3IxMCA9IGVudk1hcFRleGVsVG9MaW5lYXIodGV4dHVyZTJEKGVudk1hcCwgdXZfMTApKTtcXG5cXHR2ZWMyIHV2XzIwID0gZ2V0Q3ViZVVWKHJlZmxlY3RlZERpcmVjdGlvbiwgcjIsIGxldmVsMCk7XFxuXFx0dmVjNCBjb2xvcjIwID0gZW52TWFwVGV4ZWxUb0xpbmVhcih0ZXh0dXJlMkQoZW52TWFwLCB1dl8yMCkpO1xcblxcdHZlYzQgcmVzdWx0ID0gbWl4KGNvbG9yMTAsIGNvbG9yMjAsIHQpO1xcblxcdHJldHVybiB2ZWM0KHJlc3VsdC5yZ2IsIDEuMCk7XFxufVxcbiNlbmRpZlxcblwiO1xuXG52YXIgZGVmYXVsdG5vcm1hbF92ZXJ0ZXggPSBcInZlYzMgdHJhbnNmb3JtZWROb3JtYWwgPSBub3JtYWxNYXRyaXggKiBvYmplY3ROb3JtYWw7XFxuI2lmZGVmIEZMSVBfU0lERURcXG5cXHR0cmFuc2Zvcm1lZE5vcm1hbCA9IC0gdHJhbnNmb3JtZWROb3JtYWw7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlzcGxhY2VtZW50TWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50U2NhbGU7XFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRCaWFzO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgZGlzcGxhY2VtZW50bWFwX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHR0cmFuc2Zvcm1lZCArPSBub3JtYWxpemUoIG9iamVjdE5vcm1hbCApICogKCB0ZXh0dXJlMkQoIGRpc3BsYWNlbWVudE1hcCwgdXYgKS54ICogZGlzcGxhY2VtZW50U2NhbGUgKyBkaXNwbGFjZW1lbnRCaWFzICk7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBlbWlzc2l2ZW1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxcblxcdHZlYzQgZW1pc3NpdmVDb2xvciA9IHRleHR1cmUyRCggZW1pc3NpdmVNYXAsIHZVdiApO1xcblxcdGVtaXNzaXZlQ29sb3IucmdiID0gZW1pc3NpdmVNYXBUZXhlbFRvTGluZWFyKCBlbWlzc2l2ZUNvbG9yICkucmdiO1xcblxcdHRvdGFsRW1pc3NpdmVSYWRpYW5jZSAqPSBlbWlzc2l2ZUNvbG9yLnJnYjtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBlbWlzc2l2ZU1hcDtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGVuY29kaW5nc19mcmFnbWVudCA9IFwiICBnbF9GcmFnQ29sb3IgPSBsaW5lYXJUb091dHB1dFRleGVsKCBnbF9GcmFnQ29sb3IgKTtcXG5cIjtcblxudmFyIGVuY29kaW5nc19wYXJzX2ZyYWdtZW50ID0gXCJcXG52ZWM0IExpbmVhclRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2YWx1ZTtcXG59XFxudmVjNCBHYW1tYVRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBnYW1tYUZhY3RvciApIHtcXG5cXHRyZXR1cm4gdmVjNCggcG93KCB2YWx1ZS54eXosIHZlYzMoIGdhbW1hRmFjdG9yICkgKSwgdmFsdWUudyApO1xcbn1cXG52ZWM0IExpbmVhclRvR2FtbWEoIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IGdhbW1hRmFjdG9yICkge1xcblxcdHJldHVybiB2ZWM0KCBwb3coIHZhbHVlLnh5eiwgdmVjMyggMS4wIC8gZ2FtbWFGYWN0b3IgKSApLCB2YWx1ZS53ICk7XFxufVxcbnZlYzQgc1JHQlRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiICogMC45NDc4NjcyOTg2ICsgdmVjMyggMC4wNTIxMzI3MDE0ICksIHZlYzMoIDIuNCApICksIHZhbHVlLnJnYiAqIDAuMDc3Mzk5MzgwOCwgdmVjMyggbGVzc1RoYW5FcXVhbCggdmFsdWUucmdiLCB2ZWMzKCAwLjA0MDQ1ICkgKSApICksIHZhbHVlLncgKTtcXG59XFxudmVjNCBMaW5lYXJUb3NSR0IoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIG1peCggcG93KCB2YWx1ZS5yZ2IsIHZlYzMoIDAuNDE2NjYgKSApICogMS4wNTUgLSB2ZWMzKCAwLjA1NSApLCB2YWx1ZS5yZ2IgKiAxMi45MiwgdmVjMyggbGVzc1RoYW5FcXVhbCggdmFsdWUucmdiLCB2ZWMzKCAwLjAwMzEzMDggKSApICkgKSwgdmFsdWUudyApO1xcbn1cXG52ZWM0IFJHQkVUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogZXhwMiggdmFsdWUuYSAqIDI1NS4wIC0gMTI4LjAgKSwgMS4wICk7XFxufVxcbnZlYzQgTGluZWFyVG9SR0JFKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdGZsb2F0IG1heENvbXBvbmVudCA9IG1heCggbWF4KCB2YWx1ZS5yLCB2YWx1ZS5nICksIHZhbHVlLmIgKTtcXG5cXHRmbG9hdCBmRXhwID0gY2xhbXAoIGNlaWwoIGxvZzIoIG1heENvbXBvbmVudCApICksIC0xMjguMCwgMTI3LjAgKTtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiIC8gZXhwMiggZkV4cCApLCAoIGZFeHAgKyAxMjguMCApIC8gMjU1LjAgKTtcXG59XFxudmVjNCBSR0JNVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IG1heFJhbmdlICkge1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS54eXogKiB2YWx1ZS53ICogbWF4UmFuZ2UsIDEuMCApO1xcbn1cXG52ZWM0IExpbmVhclRvUkdCTSggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgbWF4UmFuZ2UgKSB7XFxuXFx0ZmxvYXQgbWF4UkdCID0gbWF4KCB2YWx1ZS54LCBtYXgoIHZhbHVlLmcsIHZhbHVlLmIgKSApO1xcblxcdGZsb2F0IE0gICAgICA9IGNsYW1wKCBtYXhSR0IgLyBtYXhSYW5nZSwgMC4wLCAxLjAgKTtcXG5cXHRNICAgICAgICAgICAgPSBjZWlsKCBNICogMjU1LjAgKSAvIDI1NS4wO1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgLyAoIE0gKiBtYXhSYW5nZSApLCBNICk7XFxufVxcbnZlYzQgUkdCRFRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogKCAoIG1heFJhbmdlIC8gMjU1LjAgKSAvIHZhbHVlLmEgKSwgMS4wICk7XFxufVxcbnZlYzQgTGluZWFyVG9SR0JEKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRmbG9hdCBtYXhSR0IgPSBtYXgoIHZhbHVlLngsIG1heCggdmFsdWUuZywgdmFsdWUuYiApICk7XFxuXFx0ZmxvYXQgRCAgICAgID0gbWF4KCBtYXhSYW5nZSAvIG1heFJHQiwgMS4wICk7XFxuXFx0RCAgICAgICAgICAgID0gbWluKCBmbG9vciggRCApIC8gMjU1LjAsIDEuMCApO1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgKiAoIEQgKiAoIDI1NS4wIC8gbWF4UmFuZ2UgKSApLCBEICk7XFxufVxcbmNvbnN0IG1hdDMgY0xvZ0x1dk0gPSBtYXQzKCAwLjIyMDksIDAuMzM5MCwgMC40MTg0LCAwLjExMzgsIDAuNjc4MCwgMC43MzE5LCAwLjAxMDIsIDAuMTEzMCwgMC4yOTY5ICk7XFxudmVjNCBMaW5lYXJUb0xvZ0x1diggaW4gdmVjNCB2YWx1ZSApICB7XFxuXFx0dmVjMyBYcF9ZX1hZWnAgPSB2YWx1ZS5yZ2IgKiBjTG9nTHV2TTtcXG5cXHRYcF9ZX1hZWnAgPSBtYXgoWHBfWV9YWVpwLCB2ZWMzKDFlLTYsIDFlLTYsIDFlLTYpKTtcXG5cXHR2ZWM0IHZSZXN1bHQ7XFxuXFx0dlJlc3VsdC54eSA9IFhwX1lfWFlacC54eSAvIFhwX1lfWFlacC56O1xcblxcdGZsb2F0IExlID0gMi4wICogbG9nMihYcF9ZX1hZWnAueSkgKyAxMjcuMDtcXG5cXHR2UmVzdWx0LncgPSBmcmFjdChMZSk7XFxuXFx0dlJlc3VsdC56ID0gKExlIC0gKGZsb29yKHZSZXN1bHQudyoyNTUuMCkpLzI1NS4wKS8yNTUuMDtcXG5cXHRyZXR1cm4gdlJlc3VsdDtcXG59XFxuY29uc3QgbWF0MyBjTG9nTHV2SW52ZXJzZU0gPSBtYXQzKCA2LjAwMTQsIC0yLjcwMDgsIC0xLjc5OTYsIC0xLjMzMjAsIDMuMTAyOSwgLTUuNzcyMSwgMC4zMDA4LCAtMS4wODgyLCA1LjYyNjggKTtcXG52ZWM0IExvZ0x1dlRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdGZsb2F0IExlID0gdmFsdWUueiAqIDI1NS4wICsgdmFsdWUudztcXG5cXHR2ZWMzIFhwX1lfWFlacDtcXG5cXHRYcF9ZX1hZWnAueSA9IGV4cDIoKExlIC0gMTI3LjApIC8gMi4wKTtcXG5cXHRYcF9ZX1hZWnAueiA9IFhwX1lfWFlacC55IC8gdmFsdWUueTtcXG5cXHRYcF9ZX1hZWnAueCA9IHZhbHVlLnggKiBYcF9ZX1hZWnAuejtcXG5cXHR2ZWMzIHZSR0IgPSBYcF9ZX1hZWnAucmdiICogY0xvZ0x1dkludmVyc2VNO1xcblxcdHJldHVybiB2ZWM0KCBtYXgodlJHQiwgMC4wKSwgMS4wICk7XFxufVxcblwiO1xuXG52YXIgZW52bWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0dmVjMyBjYW1lcmFUb1ZlcnRleCA9IG5vcm1hbGl6ZSggdldvcmxkUG9zaXRpb24gLSBjYW1lcmFQb3NpdGlvbiApO1xcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZmxlY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHZSZWZsZWN0O1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKSApO1xcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0VRVUlSRUMgKVxcblxcdFxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0XFx0cmVmbGVjdFZlYyA9IG5vcm1hbGl6ZSggcmVmbGVjdFZlYyApO1xcblxcdFxcdHNhbXBsZVVWLnkgPSBhc2luKCBjbGFtcCggcmVmbGVjdFZlYy55LCAtIDEuMCwgMS4wICkgKSAqIFJFQ0lQUk9DQUxfUEkgKyAwLjU7XFxuXFx0XFx0c2FtcGxlVVYueCA9IGF0YW4oIHJlZmxlY3RWZWMueiwgcmVmbGVjdFZlYy54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHNhbXBsZVVWICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfU1BIRVJFIClcXG5cXHRcXHRyZWZsZWN0VmVjID0gbm9ybWFsaXplKCByZWZsZWN0VmVjICk7XFxuXFx0XFx0dmVjMyByZWZsZWN0VmlldyA9IG5vcm1hbGl6ZSggKCB2aWV3TWF0cml4ICogdmVjNCggcmVmbGVjdFZlYywgMC4wICkgKS54eXogKyB2ZWMzKCAwLjAsIDAuMCwgMS4wICkgKTtcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHJlZmxlY3RWaWV3Lnh5ICogMC41ICsgMC41ICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdmVjNCggMC4wICk7XFxuXFx0I2VuZGlmXFxuXFx0ZW52Q29sb3IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZDb2xvciApO1xcblxcdCNpZmRlZiBFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFlcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBvdXRnb2luZ0xpZ2h0ICogZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX01JWCApXFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX0FERCApXFxuXFx0XFx0b3V0Z29pbmdMaWdodCArPSBlbnZDb2xvci54eXogKiBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5O1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiO1xuXG52YXIgZW52bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgfHwgZGVmaW5lZCggUEhZU0lDQUwgKVxcblxcdHVuaWZvcm0gZmxvYXQgcmVmbGVjdGl2aXR5O1xcblxcdHVuaWZvcm0gZmxvYXQgZW52TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmICEgZGVmaW5lZCggUEhZU0lDQUwgKSAmJiAoIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HICkgKVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcXG5cXHR1bmlmb3JtIGludCBtYXhNaXBMZXZlbDtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKSB8fCBkZWZpbmVkKCBQSFlTSUNBTCApXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCByZWZyYWN0aW9uUmF0aW87XFxuXFx0I2Vsc2VcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCI7XG5cbnZhciBlbnZtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HIClcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuXFx0I2Vsc2VcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XFxuXFx0XFx0dW5pZm9ybSBmbG9hdCByZWZyYWN0aW9uUmF0aW87XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCI7XG5cbnZhciBlbnZtYXBfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgY2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHdvcmxkUG9zaXRpb24ueHl6IC0gY2FtZXJhUG9zaXRpb24gKTtcXG5cXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggdHJhbnNmb3JtZWROb3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdHZSZWZsZWN0ID0gcmVmbGVjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2UmVmbGVjdCA9IHJlZnJhY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCI7XG5cbnZhciBmb2dfdmVydGV4ID0gXCJcXG4jaWZkZWYgVVNFX0ZPR1xcbmZvZ0RlcHRoID0gLW12UG9zaXRpb24uejtcXG4jZW5kaWZcIjtcblxudmFyIGZvZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9GT0dcXG4gIHZhcnlpbmcgZmxvYXQgZm9nRGVwdGg7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBmb2dfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0I2lmZGVmIEZPR19FWFAyXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gd2hpdGVDb21wbGltZW50KCBleHAyKCAtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogZm9nRGVwdGggKiBmb2dEZXB0aCAqIExPRzIgKSApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCBmb2dEZXB0aCApO1xcblxcdCNlbmRpZlxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSBtaXgoIGdsX0ZyYWdDb2xvci5yZ2IsIGZvZ0NvbG9yLCBmb2dGYWN0b3IgKTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGZvZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0ZPR1xcblxcdHVuaWZvcm0gdmVjMyBmb2dDb2xvcjtcXG5cXHR2YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBUT09OXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZ3JhZGllbnRNYXA7XFxuXFx0dmVjMyBnZXRHcmFkaWVudElycmFkaWFuY2UoIHZlYzMgbm9ybWFsLCB2ZWMzIGxpZ2h0RGlyZWN0aW9uICkge1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90KCBub3JtYWwsIGxpZ2h0RGlyZWN0aW9uICk7XFxuXFx0XFx0dmVjMiBjb29yZCA9IHZlYzIoIGRvdE5MICogMC41ICsgMC41LCAwLjAgKTtcXG5cXHRcXHQjaWZkZWYgVVNFX0dSQURJRU5UTUFQXFxuXFx0XFx0XFx0cmV0dXJuIHRleHR1cmUyRCggZ3JhZGllbnRNYXAsIGNvb3JkICkucmdiO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuICggY29vcmQueCA8IDAuNyApID8gdmVjMyggMC43ICkgOiB2ZWMzKCAxLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBsaWdodG1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBQSSAqIHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2xhbWJlcnRfdmVydGV4ID0gXCJ2ZWMzIGRpZmZ1c2UgPSB2ZWMzKCAxLjAgKTtcXG5HZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcbmdlb21ldHJ5LnBvc2l0aW9uID0gbXZQb3NpdGlvbi54eXo7XFxuZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbmdlb21ldHJ5LnZpZXdEaXIgPSBub3JtYWxpemUoIC1tdlBvc2l0aW9uLnh5eiApO1xcbkdlb21ldHJpY0NvbnRleHQgYmFja0dlb21ldHJ5O1xcbmJhY2tHZW9tZXRyeS5wb3NpdGlvbiA9IGdlb21ldHJ5LnBvc2l0aW9uO1xcbmJhY2tHZW9tZXRyeS5ub3JtYWwgPSAtZ2VvbWV0cnkubm9ybWFsO1xcbmJhY2tHZW9tZXRyeS52aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcXG52TGlnaHRGcm9udCA9IHZlYzMoIDAuMCApO1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2TGlnaHRCYWNrID0gdmVjMyggMC4wICk7XFxuI2VuZGlmXFxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG5mbG9hdCBkb3ROTDtcXG52ZWMzIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRQb2ludERpcmVjdExpZ2h0SXJyYWRpYW5jZSggcG9pbnRMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRTcG90RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBzcG90TGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IFBJICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC1kb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBkaXJlY3Rpb25hbExpZ2h0c1sgaSBdLCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHRkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2UgPSBQSSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdFxcdHZMaWdodEZyb250ICs9IHNhdHVyYXRlKCBkb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRcXHR2TGlnaHRCYWNrICs9IHNhdHVyYXRlKCAtZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZMaWdodEZyb250ICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGJhY2tHZW9tZXRyeSApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG5cIjtcblxudmFyIGxpZ2h0c19wYXJzX2JlZ2luID0gXCJ1bmlmb3JtIHZlYzMgYW1iaWVudExpZ2h0Q29sb3I7XFxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGFtYmllbnRMaWdodENvbG9yO1xcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0cmV0dXJuIGlycmFkaWFuY2U7XFxufVxcbiNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodCB7XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRpbnQgc2hhZG93O1xcblxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHR9O1xcblxcdHVuaWZvcm0gRGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0c1sgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICkge1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gZGlyZWN0aW9uYWxMaWdodC5jb2xvcjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBkaXJlY3Rpb25hbExpZ2h0LmRpcmVjdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFBvaW50TGlnaHQge1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZTtcXG5cXHRcXHRmbG9hdCBkZWNheTtcXG5cXHRcXHRpbnQgc2hhZG93O1xcblxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFOZWFyO1xcblxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcXG5cXHR9O1xcblxcdHVuaWZvcm0gUG9pbnRMaWdodCBwb2ludExpZ2h0c1sgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFBvaW50TGlnaHQgcG9pbnRMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gcG9pbnRMaWdodC5wb3NpdGlvbiAtIGdlb21ldHJ5LnBvc2l0aW9uO1xcblxcdFxcdGRpcmVjdExpZ2h0LmRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xcblxcdFxcdGZsb2F0IGxpZ2h0RGlzdGFuY2UgPSBsZW5ndGgoIGxWZWN0b3IgKTtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHBvaW50TGlnaHQuY29sb3I7XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgcG9pbnRMaWdodC5kaXN0YW5jZSwgcG9pbnRMaWdodC5kZWNheSApO1xcblxcdFxcdGRpcmVjdExpZ2h0LnZpc2libGUgPSAoIGRpcmVjdExpZ2h0LmNvbG9yICE9IHZlYzMoIDAuMCApICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFNwb3RMaWdodCB7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdGZsb2F0IGRpc3RhbmNlO1xcblxcdFxcdGZsb2F0IGRlY2F5O1xcblxcdFxcdGZsb2F0IGNvbmVDb3M7XFxuXFx0XFx0ZmxvYXQgcGVudW1icmFDb3M7XFxuXFx0XFx0aW50IHNoYWRvdztcXG5cXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIFNwb3RMaWdodCBzcG90TGlnaHRzWyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFNwb3RMaWdodCBzcG90TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICApIHtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBzcG90TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgYW5nbGVDb3MgPSBkb3QoIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgc3BvdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGlmICggYW5nbGVDb3MgPiBzcG90TGlnaHQuY29uZUNvcyApIHtcXG5cXHRcXHRcXHRmbG9hdCBzcG90RWZmZWN0ID0gc21vb3Roc3RlcCggc3BvdExpZ2h0LmNvbmVDb3MsIHNwb3RMaWdodC5wZW51bWJyYUNvcywgYW5nbGVDb3MgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHNwb3RMaWdodC5jb2xvcjtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBzcG90RWZmZWN0ICogcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgc3BvdExpZ2h0LmRpc3RhbmNlLCBzcG90TGlnaHQuZGVjYXkgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gdmVjMyggMC4wICk7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9IGZhbHNlO1xcblxcdFxcdH1cXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxcblxcdHN0cnVjdCBSZWN0QXJlYUxpZ2h0IHtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGg7XFxuXFx0XFx0dmVjMyBoYWxmSGVpZ2h0O1xcblxcdH07XFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzE7XFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzI7XFxuXFx0dW5pZm9ybSBSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHRzWyBOVU1fUkVDVF9BUkVBX0xJR0hUUyBdO1xcbiNlbmRpZlxcbiNpZiBOVU1fSEVNSV9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IEhlbWlzcGhlcmVMaWdodCB7XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBza3lDb2xvcjtcXG5cXHRcXHR2ZWMzIGdyb3VuZENvbG9yO1xcblxcdH07XFxuXFx0dW5pZm9ybSBIZW1pc3BoZXJlTGlnaHQgaGVtaXNwaGVyZUxpZ2h0c1sgTlVNX0hFTUlfTElHSFRTIF07XFxuXFx0dmVjMyBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBIZW1pc3BoZXJlTGlnaHQgaGVtaUxpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5ICkge1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhlbWlMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodCA9IDAuNSAqIGRvdE5MICsgMC41O1xcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IG1peCggaGVtaUxpZ2h0Lmdyb3VuZENvbG9yLCBoZW1pTGlnaHQuc2t5Q29sb3IsIGhlbWlEaWZmdXNlV2VpZ2h0ICk7XFxuXFx0XFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG5cXHR9XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBsaWdodHNfcGFyc19tYXBzID0gXCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFBIWVNJQ0FMIClcXG5cXHR2ZWMzIGdldExpZ2h0UHJvYmVJbmRpcmVjdElycmFkaWFuY2UoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcXG5cXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggZ2VvbWV0cnkubm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHRcXHR2ZWMzIHF1ZXJ5VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHdvcmxkTm9ybWFsLngsIHdvcmxkTm9ybWFsLnl6ICk7XFxuXFx0XFx0XFx0I2lmZGVmIFRFWFRVUkVfTE9EX0VYVFxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZUxvZEVYVCggZW52TWFwLCBxdWVyeVZlYywgZmxvYXQoIG1heE1JUExldmVsICkgKTtcXG5cXHRcXHRcXHQjZWxzZVxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBxdWVyeVZlYywgZmxvYXQoIG1heE1JUExldmVsICkgKTtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHRcXHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHRcXHR2ZWMzIHF1ZXJ5VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHdvcmxkTm9ybWFsLngsIHdvcmxkTm9ybWFsLnl6ICk7XFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIHF1ZXJ5VmVjLCAxLjAgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB2ZWM0KCAwLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZXR1cm4gUEkgKiBlbnZNYXBDb2xvci5yZ2IgKiBlbnZNYXBJbnRlbnNpdHk7XFxuXFx0fVxcblxcdGZsb2F0IGdldFNwZWN1bGFyTUlQTGV2ZWwoIGNvbnN0IGluIGZsb2F0IGJsaW5uU2hpbmluZXNzRXhwb25lbnQsIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcXG5cXHRcXHRmbG9hdCBtYXhNSVBMZXZlbFNjYWxhciA9IGZsb2F0KCBtYXhNSVBMZXZlbCApO1xcblxcdFxcdGZsb2F0IGRlc2lyZWRNSVBMZXZlbCA9IG1heE1JUExldmVsU2NhbGFyICsgMC43OTI0OCAtIDAuNSAqIGxvZzIoIHBvdzIoIGJsaW5uU2hpbmluZXNzRXhwb25lbnQgKSArIDEuMCApO1xcblxcdFxcdHJldHVybiBjbGFtcCggZGVzaXJlZE1JUExldmVsLCAwLjAsIG1heE1JUExldmVsU2NhbGFyICk7XFxuXFx0fVxcblxcdHZlYzMgZ2V0TGlnaHRQcm9iZUluZGlyZWN0UmFkaWFuY2UoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIGZsb2F0IGJsaW5uU2hpbmluZXNzRXhwb25lbnQsIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZmxlY3QoIC1nZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZnJhY3QoIC1nZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJlZmxlY3RWZWMgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCByZWZsZWN0VmVjLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJNSVBMZXZlbCA9IGdldFNwZWN1bGFyTUlQTGV2ZWwoIGJsaW5uU2hpbmluZXNzRXhwb25lbnQsIG1heE1JUExldmVsICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHRcXHR2ZWMzIHF1ZXJ5UmVmbGVjdFZlYyA9IHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlTG9kRVhUKCBlbnZNYXAsIHF1ZXJ5UmVmbGVjdFZlYywgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHF1ZXJ5UmVmbGVjdFZlYywgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdFxcdHZlYzMgcXVlcnlSZWZsZWN0VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApO1xcblxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZVVWKHF1ZXJ5UmVmbGVjdFZlYywgQmxpbm5FeHBvbmVudFRvR0dYUm91Z2huZXNzKGJsaW5uU2hpbmluZXNzRXhwb25lbnQpKTtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9FUVVJUkVDIClcXG5cXHRcXHRcXHR2ZWMyIHNhbXBsZVVWO1xcblxcdFxcdFxcdHNhbXBsZVVWLnkgPSBhc2luKCBjbGFtcCggcmVmbGVjdFZlYy55LCAtIDEuMCwgMS4wICkgKSAqIFJFQ0lQUk9DQUxfUEkgKyAwLjU7XFxuXFx0XFx0XFx0c2FtcGxlVVYueCA9IGF0YW4oIHJlZmxlY3RWZWMueiwgcmVmbGVjdFZlYy54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRExvZEVYVCggZW52TWFwLCBzYW1wbGVVViwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCBzYW1wbGVVViwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX1NQSEVSRSApXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmlldyA9IG5vcm1hbGl6ZSggKCB2aWV3TWF0cml4ICogdmVjNCggcmVmbGVjdFZlYywgMC4wICkgKS54eXogKyB2ZWMzKCAwLjAsMC4wLDEuMCApICk7XFxuXFx0XFx0XFx0I2lmZGVmIFRFWFRVUkVfTE9EX0VYVFxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlMkRMb2RFWFQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZWxzZVxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHRcXHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZXR1cm4gZW52TWFwQ29sb3IucmdiICogZW52TWFwSW50ZW5zaXR5O1xcblxcdH1cXG4jZW5kaWZcXG5cIjtcblxudmFyIGxpZ2h0c19waG9uZ19mcmFnbWVudCA9IFwiQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxubWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IHNwZWN1bGFyO1xcbm1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzID0gc2hpbmluZXNzO1xcbm1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGggPSBzcGVjdWxhclN0cmVuZ3RoO1xcblwiO1xuXG52YXIgbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQgPSBcInZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG5zdHJ1Y3QgQmxpbm5QaG9uZ01hdGVyaWFsIHtcXG5cXHR2ZWMzXFx0ZGlmZnVzZUNvbG9yO1xcblxcdHZlYzNcXHRzcGVjdWxhckNvbG9yO1xcblxcdGZsb2F0XFx0c3BlY3VsYXJTaGluaW5lc3M7XFxuXFx0ZmxvYXRcXHRzcGVjdWxhclN0cmVuZ3RoO1xcbn07XFxudm9pZCBSRV9EaXJlY3RfQmxpbm5QaG9uZyggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHQjaWZkZWYgVE9PTlxcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IGdldEdyYWRpZW50SXJyYWRpYW5jZSggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApICk7XFxuXFx0XFx0dmVjMyBpcnJhZGlhbmNlID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRpcnJhZGlhbmNlICo9IFBJO1xcblxcdCNlbmRpZlxcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlICogQlJERl9TcGVjdWxhcl9CbGlublBob25nKCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzICkgKiBtYXRlcmlhbC5zcGVjdWxhclN0cmVuZ3RoO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9CbGlublBob25nKCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0RpZmZ1c2VfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbiNkZWZpbmUgUkVfRGlyZWN0XFx0XFx0XFx0XFx0UkVfRGlyZWN0X0JsaW5uUGhvbmdcXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVxcdFxcdFJFX0luZGlyZWN0RGlmZnVzZV9CbGlublBob25nXFxuI2RlZmluZSBNYXRlcmlhbF9MaWdodFByb2JlTE9EKCBtYXRlcmlhbCApXFx0KDApXFxuXCI7XG5cbnZhciBsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQgPSBcIlBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWw7XFxubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYiAqICggMS4wIC0gbWV0YWxuZXNzRmFjdG9yICk7XFxubWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgPSBjbGFtcCggcm91Z2huZXNzRmFjdG9yLCAwLjA0LCAxLjAgKTtcXG4jaWZkZWYgU1RBTkRBUkRcXG5cXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xcbiNlbHNlXFxuXFx0bWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG1peCggdmVjMyggTUFYSU1VTV9TUEVDVUxBUl9DT0VGRklDSUVOVCAqIHBvdzIoIHJlZmxlY3Rpdml0eSApICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xcblxcdG1hdGVyaWFsLmNsZWFyQ29hdCA9IHNhdHVyYXRlKCBjbGVhckNvYXQgKTtcXHRtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MgPSBjbGFtcCggY2xlYXJDb2F0Um91Z2huZXNzLCAwLjA0LCAxLjAgKTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50ID0gXCJzdHJ1Y3QgUGh5c2ljYWxNYXRlcmlhbCB7XFxuXFx0dmVjM1xcdGRpZmZ1c2VDb2xvcjtcXG5cXHRmbG9hdFxcdHNwZWN1bGFyUm91Z2huZXNzO1xcblxcdHZlYzNcXHRzcGVjdWxhckNvbG9yO1xcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXQ7XFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0Um91Z2huZXNzO1xcblxcdCNlbmRpZlxcbn07XFxuI2RlZmluZSBNQVhJTVVNX1NQRUNVTEFSX0NPRUZGSUNJRU5UIDAuMTZcXG4jZGVmaW5lIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgMC4wNFxcbmZsb2F0IGNsZWFyQ29hdERIUkFwcHJveCggY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBmbG9hdCBkb3ROTCApIHtcXG5cXHRyZXR1cm4gREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCArICggMS4wIC0gREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCApICogKCBwb3coIDEuMCAtIGRvdE5MLCA1LjAgKSAqIHBvdyggMS4wIC0gcm91Z2huZXNzLCAyLjAgKSApO1xcbn1cXG4jaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXFxuXFx0dm9pZCBSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWwoIGNvbnN0IGluIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBub3JtYWwgPSBnZW9tZXRyeS5ub3JtYWw7XFxuXFx0XFx0dmVjMyB2aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uID0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0dmVjMyBsaWdodFBvcyA9IHJlY3RBcmVhTGlnaHQucG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGggPSByZWN0QXJlYUxpZ2h0LmhhbGZXaWR0aDtcXG5cXHRcXHR2ZWMzIGhhbGZIZWlnaHQgPSByZWN0QXJlYUxpZ2h0LmhhbGZIZWlnaHQ7XFxuXFx0XFx0dmVjMyBsaWdodENvbG9yID0gcmVjdEFyZWFMaWdodC5jb2xvcjtcXG5cXHRcXHRmbG9hdCByb3VnaG5lc3MgPSBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcztcXG5cXHRcXHR2ZWMzIHJlY3RDb29yZHNbIDQgXTtcXG5cXHRcXHRyZWN0Q29vcmRzWyAwIF0gPSBsaWdodFBvcyAtIGhhbGZXaWR0aCAtIGhhbGZIZWlnaHQ7XFx0XFx0cmVjdENvb3Jkc1sgMSBdID0gbGlnaHRQb3MgKyBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0O1xcblxcdFxcdHJlY3RDb29yZHNbIDIgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoICsgaGFsZkhlaWdodDtcXG5cXHRcXHRyZWN0Q29vcmRzWyAzIF0gPSBsaWdodFBvcyAtIGhhbGZXaWR0aCArIGhhbGZIZWlnaHQ7XFxuXFx0XFx0dmVjMiB1diA9IExUQ19Vdiggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcXG5cXHRcXHR2ZWM0IHQxID0gdGV4dHVyZTJEKCBsdGNfMSwgdXYgKTtcXG5cXHRcXHR2ZWM0IHQyID0gdGV4dHVyZTJEKCBsdGNfMiwgdXYgKTtcXG5cXHRcXHRtYXQzIG1JbnYgPSBtYXQzKFxcblxcdFxcdFxcdHZlYzMoIHQxLngsIDAsIHQxLnkgKSxcXG5cXHRcXHRcXHR2ZWMzKCAgICAwLCAxLCAgICAwICksXFxuXFx0XFx0XFx0dmVjMyggdDEueiwgMCwgdDEudyApXFxuXFx0XFx0KTtcXG5cXHRcXHR2ZWMzIGZyZXNuZWwgPSAoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKiB0Mi54ICsgKCB2ZWMzKCAxLjAgKSAtIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKSAqIHQyLnkgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBsaWdodENvbG9yICogZnJlc25lbCAqIExUQ19FdmFsdWF0ZSggbm9ybWFsLCB2aWV3RGlyLCBwb3NpdGlvbiwgbUludiwgcmVjdENvb3JkcyApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gbGlnaHRDb2xvciAqIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciAqIExUQ19FdmFsdWF0ZSggbm9ybWFsLCB2aWV3RGlyLCBwb3NpdGlvbiwgbWF0MyggMS4wICksIHJlY3RDb29yZHMgKTtcXG5cXHR9XFxuI2VuZGlmXFxudm9pZCBSRV9EaXJlY3RfUGh5c2ljYWwoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHQjZW5kaWZcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0REhSID0gbWF0ZXJpYWwuY2xlYXJDb2F0ICogY2xlYXJDb2F0REhSQXBwcm94KCBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MsIGRvdE5MICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRESFIgPSAwLjA7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gKCAxLjAgLSBjbGVhckNvYXRESFIgKSAqIGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0dHWCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gKCAxLjAgLSBjbGVhckNvYXRESFIgKSAqIGlycmFkaWFuY2UgKiBCUkRGX0RpZmZ1c2VfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBtYXRlcmlhbC5jbGVhckNvYXQgKiBCUkRGX1NwZWN1bGFyX0dHWCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbn1cXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxudm9pZCBSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIHJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGNsZWFyQ29hdFJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90TlY7XFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0REhSID0gbWF0ZXJpYWwuY2xlYXJDb2F0ICogY2xlYXJDb2F0REhSQXBwcm94KCBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MsIGRvdE5MICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRESFIgPSAwLjA7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSAoIDEuMCAtIGNsZWFyQ29hdERIUiApICogcmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0dHWF9FbnZpcm9ubWVudCggZ2VvbWV0cnksIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzICk7XFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKz0gY2xlYXJDb2F0UmFkaWFuY2UgKiBtYXRlcmlhbC5jbGVhckNvYXQgKiBCUkRGX1NwZWN1bGFyX0dHWF9FbnZpcm9ubWVudCggZ2VvbWV0cnksIHZlYzMoIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgKSwgbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxufVxcbiNkZWZpbmUgUkVfRGlyZWN0XFx0XFx0XFx0XFx0UkVfRGlyZWN0X1BoeXNpY2FsXFxuI2RlZmluZSBSRV9EaXJlY3RfUmVjdEFyZWFcXHRcXHRSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVxcdFxcdFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfSW5kaXJlY3RTcGVjdWxhclxcdFxcdFJFX0luZGlyZWN0U3BlY3VsYXJfUGh5c2ljYWxcXG4jZGVmaW5lIE1hdGVyaWFsX0JsaW5uU2hpbmluZXNzRXhwb25lbnQoIG1hdGVyaWFsICkgICBHR1hSb3VnaG5lc3NUb0JsaW5uRXhwb25lbnQoIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzIClcXG4jZGVmaW5lIE1hdGVyaWFsX0NsZWFyQ29hdF9CbGlublNoaW5pbmVzc0V4cG9uZW50KCBtYXRlcmlhbCApICAgR0dYUm91Z2huZXNzVG9CbGlubkV4cG9uZW50KCBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MgKVxcbmZsb2F0IGNvbXB1dGVTcGVjdWxhck9jY2x1c2lvbiggY29uc3QgaW4gZmxvYXQgZG90TlYsIGNvbnN0IGluIGZsb2F0IGFtYmllbnRPY2NsdXNpb24sIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIHBvdyggZG90TlYgKyBhbWJpZW50T2NjbHVzaW9uLCBleHAyKCAtIDE2LjAgKiByb3VnaG5lc3MgLSAxLjAgKSApIC0gMS4wICsgYW1iaWVudE9jY2x1c2lvbiApO1xcbn1cXG5cIjtcblxudmFyIGxpZ2h0c19mcmFnbWVudF9iZWdpbiA9IFwiXFxuR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeTtcXG5nZW9tZXRyeS5wb3NpdGlvbiA9IC0gdlZpZXdQb3NpdGlvbjtcXG5nZW9tZXRyeS5ub3JtYWwgPSBub3JtYWw7XFxuZ2VvbWV0cnkudmlld0RpciA9IG5vcm1hbGl6ZSggdlZpZXdQb3NpdGlvbiApO1xcbkluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQ7XFxuI2lmICggTlVNX1BPSU5UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdFBvaW50TGlnaHQgcG9pbnRMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXRQb2ludERpcmVjdExpZ2h0SXJyYWRpYW5jZSggcG9pbnRMaWdodCwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0I2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMyKCBwb2ludExpZ2h0LnNoYWRvdywgZGlyZWN0TGlnaHQudmlzaWJsZSApICkgPyBnZXRQb2ludFNoYWRvdyggcG9pbnRTaGFkb3dNYXBbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dNYXBTaXplLCBwb2ludExpZ2h0LnNoYWRvd0JpYXMsIHBvaW50TGlnaHQuc2hhZG93UmFkaXVzLCB2UG9pbnRTaGFkb3dDb29yZFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYU5lYXIsIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhRmFyICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgKCBOVU1fU1BPVF9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXHRTcG90TGlnaHQgc3BvdExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0c3BvdExpZ2h0ID0gc3BvdExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIHNwb3RMaWdodCwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0I2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMyKCBzcG90TGlnaHQuc2hhZG93LCBkaXJlY3RMaWdodC52aXNpYmxlICkgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHQuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0LnNoYWRvd0JpYXMsIHNwb3RMaWdodC5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmICggTlVNX0RJUl9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXHREaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGRpcmVjdGlvbmFsTGlnaHQgPSBkaXJlY3Rpb25hbExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBkaXJlY3Rpb25hbExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IGFsbCggYnZlYzIoIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LCBkaXJlY3RMaWdodC52aXNpYmxlICkgKSA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd0JpYXMsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93UmFkaXVzLCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgKCBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3RfUmVjdEFyZWEgKVxcblxcdFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1JFQ1RfQVJFQV9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cmVjdEFyZWFMaWdodCA9IHJlY3RBcmVhTGlnaHRzWyBpIF07XFxuXFx0XFx0UkVfRGlyZWN0X1JlY3RBcmVhKCByZWN0QXJlYUxpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGdldEFtYmllbnRMaWdodElycmFkaWFuY2UoIGFtYmllbnRMaWdodENvbG9yICk7XFxuXFx0I2lmICggTlVNX0hFTUlfTElHSFRTID4gMCApXFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdFxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9IRU1JX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRcXHRpcnJhZGlhbmNlICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdHZlYzMgcmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIGNsZWFyQ29hdFJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBsaWdodHNfZnJhZ21lbnRfbWFwcyA9IFwiI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0I2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdFxcdHZlYzMgbGlnaHRNYXBJcnJhZGlhbmNlID0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdlV2MiApLnh5eiAqIGxpZ2h0TWFwSW50ZW5zaXR5O1xcblxcdFxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdFxcdGxpZ2h0TWFwSXJyYWRpYW5jZSAqPSBQSTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRpcnJhZGlhbmNlICs9IGxpZ2h0TWFwSXJyYWRpYW5jZTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFBIWVNJQ0FMICkgJiYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXFxuXFx0XFx0aXJyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSW5kaXJlY3RJcnJhZGlhbmNlKCBnZW9tZXRyeSwgbWF4TWlwTGV2ZWwgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdHJhZGlhbmNlICs9IGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBnZW9tZXRyeSwgTWF0ZXJpYWxfQmxpbm5TaGluaW5lc3NFeHBvbmVudCggbWF0ZXJpYWwgKSwgbWF4TWlwTGV2ZWwgKTtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0Y2xlYXJDb2F0UmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUluZGlyZWN0UmFkaWFuY2UoIGdlb21ldHJ5LCBNYXRlcmlhbF9DbGVhckNvYXRfQmxpbm5TaGluaW5lc3NFeHBvbmVudCggbWF0ZXJpYWwgKSwgbWF4TWlwTGV2ZWwgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIGxpZ2h0c19mcmFnbWVudF9lbmQgPSBcIiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdFJFX0luZGlyZWN0RGlmZnVzZSggaXJyYWRpYW5jZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHRSRV9JbmRpcmVjdFNwZWN1bGFyKCByYWRpYW5jZSwgY2xlYXJDb2F0UmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIGxvZ2RlcHRoYnVmX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGICkgJiYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGX0VYVCApXFxuXFx0Z2xfRnJhZ0RlcHRoRVhUID0gbG9nMiggdkZyYWdEZXB0aCApICogbG9nRGVwdGhCdWZGQyAqIDAuNTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXHR1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCI7XG5cbnZhciBsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFx0XFx0dmFyeWluZyBmbG9hdCB2RnJhZ0RlcHRoO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFx0XFx0dkZyYWdEZXB0aCA9IDEuMCArIGdsX1Bvc2l0aW9uLnc7XFxuXFx0I2Vsc2VcXG5cXHRcXHRnbF9Qb3NpdGlvbi56ID0gbG9nMiggbWF4KCBFUFNJTE9OLCBnbF9Qb3NpdGlvbi53ICsgMS4wICkgKSAqIGxvZ0RlcHRoQnVmRkMgLSAxLjA7XFxuXFx0XFx0Z2xfUG9zaXRpb24ueiAqPSBnbF9Qb3NpdGlvbi53O1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiO1xuXG52YXIgbWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHZlYzQgdGV4ZWxDb2xvciA9IHRleHR1cmUyRCggbWFwLCB2VXYgKTtcXG5cXHR0ZXhlbENvbG9yID0gbWFwVGV4ZWxUb0xpbmVhciggdGV4ZWxDb2xvciApO1xcblxcdGRpZmZ1c2VDb2xvciAqPSB0ZXhlbENvbG9yO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgbWFwX3BhcnRpY2xlX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHZlYzIgdXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggZ2xfUG9pbnRDb29yZC54LCAxLjAgLSBnbF9Qb2ludENvb3JkLnksIDEgKSApLnh5O1xcblxcdHZlYzQgbWFwVGV4ZWwgPSB0ZXh0dXJlMkQoIG1hcCwgdXYgKTtcXG5cXHRkaWZmdXNlQ29sb3IgKj0gbWFwVGV4ZWxUb0xpbmVhciggbWFwVGV4ZWwgKTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBtZXRhbG5lc3NtYXBfZnJhZ21lbnQgPSBcImZsb2F0IG1ldGFsbmVzc0ZhY3RvciA9IG1ldGFsbmVzcztcXG4jaWZkZWYgVVNFX01FVEFMTkVTU01BUFxcblxcdHZlYzQgdGV4ZWxNZXRhbG5lc3MgPSB0ZXh0dXJlMkQoIG1ldGFsbmVzc01hcCwgdlV2ICk7XFxuXFx0bWV0YWxuZXNzRmFjdG9yICo9IHRleGVsTWV0YWxuZXNzLmI7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtZXRhbG5lc3NNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaG5vcm1hbF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwwIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDAgXTtcXG5cXHRvYmplY3ROb3JtYWwgKz0gKCBtb3JwaE5vcm1hbDEgLSBub3JtYWwgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMiAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwzIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDMgXTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xcblxcdCNpZm5kZWYgVVNFX01PUlBITk9STUFMU1xcblxcdHVuaWZvcm0gZmxvYXQgbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA4IF07XFxuXFx0I2Vsc2VcXG5cXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNCBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbW9ycGh0YXJnZXRfdmVydGV4ID0gXCIjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQwIC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMCBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQxIC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQyIC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMiBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQzIC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMyBdO1xcblxcdCNpZm5kZWYgVVNFX01PUlBITk9STUFMU1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQ0IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNCBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQ1IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNSBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQ2IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNiBdO1xcblxcdHRyYW5zZm9ybWVkICs9ICggbW9ycGhUYXJnZXQ3IC0gcG9zaXRpb24gKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNyBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiO1xuXG52YXIgbm9ybWFsX2ZyYWdtZW50X2JlZ2luID0gXCIjaWZkZWYgRkxBVF9TSEFERURcXG5cXHR2ZWMzIGZkeCA9IHZlYzMoIGRGZHgoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeCggdlZpZXdQb3NpdGlvbi56ICkgKTtcXG5cXHR2ZWMzIGZkeSA9IHZlYzMoIGRGZHkoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeSggdlZpZXdQb3NpdGlvbi56ICkgKTtcXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggY3Jvc3MoIGZkeCwgZmR5ICkgKTtcXG4jZWxzZVxcblxcdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCB2Tm9ybWFsICk7XFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbCAqICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIG5vcm1hbF9mcmFnbWVudF9tYXBzID0gXCIjaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcdCNpZmRlZiBPQkpFQ1RTUEFDRV9OT1JNQUxNQVBcXG5cXHRcXHRub3JtYWwgPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdFxcdCNpZmRlZiBGTElQX1NJREVEXFxuXFx0XFx0XFx0bm9ybWFsID0gLSBub3JtYWw7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdG5vcm1hbCA9IG5vcm1hbCAqICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRub3JtYWwgPSBub3JtYWxpemUoIG5vcm1hbE1hdHJpeCAqIG5vcm1hbCApO1xcblxcdCNlbHNlXFxuXFx0XFx0bm9ybWFsID0gcGVydHVyYk5vcm1hbDJBcmIoIC12Vmlld1Bvc2l0aW9uLCBub3JtYWwgKTtcXG5cXHQjZW5kaWZcXG4jZWxpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApXFxuXFx0bm9ybWFsID0gcGVydHVyYk5vcm1hbEFyYiggLXZWaWV3UG9zaXRpb24sIG5vcm1hbCwgZEhkeHlfZndkKCkgKTtcXG4jZW5kaWZcXG5cIjtcblxudmFyIG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG5vcm1hbE1hcDtcXG5cXHR1bmlmb3JtIHZlYzIgbm9ybWFsU2NhbGU7XFxuXFx0I2lmZGVmIE9CSkVDVFNQQUNFX05PUk1BTE1BUFxcblxcdFxcdHVuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMzIHBlcnR1cmJOb3JtYWwyQXJiKCB2ZWMzIGV5ZV9wb3MsIHZlYzMgc3VyZl9ub3JtICkge1xcblxcdFxcdFxcdHZlYzMgcTAgPSB2ZWMzKCBkRmR4KCBleWVfcG9zLnggKSwgZEZkeCggZXllX3Bvcy55ICksIGRGZHgoIGV5ZV9wb3MueiApICk7XFxuXFx0XFx0XFx0dmVjMyBxMSA9IHZlYzMoIGRGZHkoIGV5ZV9wb3MueCApLCBkRmR5KCBleWVfcG9zLnkgKSwgZEZkeSggZXllX3Bvcy56ICkgKTtcXG5cXHRcXHRcXHR2ZWMyIHN0MCA9IGRGZHgoIHZVdi5zdCApO1xcblxcdFxcdFxcdHZlYzIgc3QxID0gZEZkeSggdlV2LnN0ICk7XFxuXFx0XFx0XFx0ZmxvYXQgc2NhbGUgPSBzaWduKCBzdDEudCAqIHN0MC5zIC0gc3QwLnQgKiBzdDEucyApO1xcblxcdFxcdFxcdHZlYzMgUyA9IG5vcm1hbGl6ZSggKCBxMCAqIHN0MS50IC0gcTEgKiBzdDAudCApICogc2NhbGUgKTtcXG5cXHRcXHRcXHR2ZWMzIFQgPSBub3JtYWxpemUoICggLSBxMCAqIHN0MS5zICsgcTEgKiBzdDAucyApICogc2NhbGUgKTtcXG5cXHRcXHRcXHR2ZWMzIE4gPSBub3JtYWxpemUoIHN1cmZfbm9ybSApO1xcblxcdFxcdFxcdG1hdDMgdHNuID0gbWF0MyggUywgVCwgTiApO1xcblxcdFxcdFxcdHZlYzMgbWFwTiA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XFxuXFx0XFx0XFx0bWFwTi54eSAqPSBub3JtYWxTY2FsZTtcXG5cXHRcXHRcXHRtYXBOLnh5ICo9ICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHRcXHRcXHRyZXR1cm4gbm9ybWFsaXplKCB0c24gKiBtYXBOICk7XFxuXFx0XFx0fVxcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiO1xuXG52YXIgcGFja2luZyA9IFwidmVjMyBwYWNrTm9ybWFsVG9SR0IoIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xcblxcdHJldHVybiBub3JtYWxpemUoIG5vcm1hbCApICogMC41ICsgMC41O1xcbn1cXG52ZWMzIHVucGFja1JHQlRvTm9ybWFsKCBjb25zdCBpbiB2ZWMzIHJnYiApIHtcXG5cXHRyZXR1cm4gMi4wICogcmdiLnh5eiAtIDEuMDtcXG59XFxuY29uc3QgZmxvYXQgUGFja1Vwc2NhbGUgPSAyNTYuIC8gMjU1Ljtjb25zdCBmbG9hdCBVbnBhY2tEb3duc2NhbGUgPSAyNTUuIC8gMjU2LjtcXG5jb25zdCB2ZWMzIFBhY2tGYWN0b3JzID0gdmVjMyggMjU2LiAqIDI1Ni4gKiAyNTYuLCAyNTYuICogMjU2LiwgIDI1Ni4gKTtcXG5jb25zdCB2ZWM0IFVucGFja0ZhY3RvcnMgPSBVbnBhY2tEb3duc2NhbGUgLyB2ZWM0KCBQYWNrRmFjdG9ycywgMS4gKTtcXG5jb25zdCBmbG9hdCBTaGlmdFJpZ2h0OCA9IDEuIC8gMjU2LjtcXG52ZWM0IHBhY2tEZXB0aFRvUkdCQSggY29uc3QgaW4gZmxvYXQgdiApIHtcXG5cXHR2ZWM0IHIgPSB2ZWM0KCBmcmFjdCggdiAqIFBhY2tGYWN0b3JzICksIHYgKTtcXG5cXHRyLnl6dyAtPSByLnh5eiAqIFNoaWZ0UmlnaHQ4O1xcdHJldHVybiByICogUGFja1Vwc2NhbGU7XFxufVxcbmZsb2F0IHVucGFja1JHQkFUb0RlcHRoKCBjb25zdCBpbiB2ZWM0IHYgKSB7XFxuXFx0cmV0dXJuIGRvdCggdiwgVW5wYWNrRmFjdG9ycyApO1xcbn1cXG5mbG9hdCB2aWV3WlRvT3J0aG9ncmFwaGljRGVwdGgoIGNvbnN0IGluIGZsb2F0IHZpZXdaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuICggdmlld1ogKyBuZWFyICkgLyAoIG5lYXIgLSBmYXIgKTtcXG59XFxuZmxvYXQgb3J0aG9ncmFwaGljRGVwdGhUb1ZpZXdaKCBjb25zdCBpbiBmbG9hdCBsaW5lYXJDbGlwWiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiBsaW5lYXJDbGlwWiAqICggbmVhciAtIGZhciApIC0gbmVhcjtcXG59XFxuZmxvYXQgdmlld1pUb1BlcnNwZWN0aXZlRGVwdGgoIGNvbnN0IGluIGZsb2F0IHZpZXdaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuICgoIG5lYXIgKyB2aWV3WiApICogZmFyICkgLyAoKCBmYXIgLSBuZWFyICkgKiB2aWV3WiApO1xcbn1cXG5mbG9hdCBwZXJzcGVjdGl2ZURlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgaW52Q2xpcFosIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCBuZWFyICogZmFyICkgLyAoICggZmFyIC0gbmVhciApICogaW52Q2xpcFogLSBmYXIgKTtcXG59XFxuXCI7XG5cbnZhciBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50ID0gXCIjaWZkZWYgUFJFTVVMVElQTElFRF9BTFBIQVxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgKj0gZ2xfRnJhZ0NvbG9yLmE7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciBwcm9qZWN0X3ZlcnRleCA9IFwidmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcbmdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XFxuXCI7XG5cbnZhciBkaXRoZXJpbmdfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBESVRIRVJJTkcgKVxcbiAgZ2xfRnJhZ0NvbG9yLnJnYiA9IGRpdGhlcmluZyggZ2xfRnJhZ0NvbG9yLnJnYiApO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBESVRIRVJJTkcgKVxcblxcdHZlYzMgZGl0aGVyaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdFxcdGZsb2F0IGdyaWRfcG9zaXRpb24gPSByYW5kKCBnbF9GcmFnQ29vcmQueHkgKTtcXG5cXHRcXHR2ZWMzIGRpdGhlcl9zaGlmdF9SR0IgPSB2ZWMzKCAwLjI1IC8gMjU1LjAsIC0wLjI1IC8gMjU1LjAsIDAuMjUgLyAyNTUuMCApO1xcblxcdFxcdGRpdGhlcl9zaGlmdF9SR0IgPSBtaXgoIDIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIC0yLjAgKiBkaXRoZXJfc2hpZnRfUkdCLCBncmlkX3Bvc2l0aW9uICk7XFxuXFx0XFx0cmV0dXJuIGNvbG9yICsgZGl0aGVyX3NoaWZ0X1JHQjtcXG5cXHR9XFxuI2VuZGlmXFxuXCI7XG5cbnZhciByb3VnaG5lc3NtYXBfZnJhZ21lbnQgPSBcImZsb2F0IHJvdWdobmVzc0ZhY3RvciA9IHJvdWdobmVzcztcXG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHZlYzQgdGV4ZWxSb3VnaG5lc3MgPSB0ZXh0dXJlMkQoIHJvdWdobmVzc01hcCwgdlV2ICk7XFxuXFx0cm91Z2huZXNzRmFjdG9yICo9IHRleGVsUm91Z2huZXNzLmc7XFxuI2VuZGlmXFxuXCI7XG5cbnZhciByb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9ST1VHSE5FU1NNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCByb3VnaG5lc3NNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlyZWN0aW9uYWxTaGFkb3dNYXBbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BvdFNoYWRvd01hcFsgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZTcG90U2hhZG93Q29vcmRbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHBvaW50U2hhZG93TWFwWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZQb2ludFNoYWRvd0Nvb3JkWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0I2VuZGlmXFxuXFx0ZmxvYXQgdGV4dHVyZTJEQ29tcGFyZSggc2FtcGxlcjJEIGRlcHRocywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApIHtcXG5cXHRcXHRyZXR1cm4gc3RlcCggY29tcGFyZSwgdW5wYWNrUkdCQVRvRGVwdGgoIHRleHR1cmUyRCggZGVwdGhzLCB1diApICkgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgdGV4dHVyZTJEU2hhZG93TGVycCggc2FtcGxlcjJEIGRlcHRocywgdmVjMiBzaXplLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICkge1xcblxcdFxcdGNvbnN0IHZlYzIgb2Zmc2V0ID0gdmVjMiggMC4wLCAxLjAgKTtcXG5cXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2l6ZTtcXG5cXHRcXHR2ZWMyIGNlbnRyb2lkVVYgPSBmbG9vciggdXYgKiBzaXplICsgMC41ICkgLyBzaXplO1xcblxcdFxcdGZsb2F0IGxiID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnh4LCBjb21wYXJlICk7XFxuXFx0XFx0ZmxvYXQgbHQgPSB0ZXh0dXJlMkRDb21wYXJlKCBkZXB0aHMsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUgKiBvZmZzZXQueHksIGNvbXBhcmUgKTtcXG5cXHRcXHRmbG9hdCByYiA9IHRleHR1cmUyRENvbXBhcmUoIGRlcHRocywgY2VudHJvaWRVViArIHRleGVsU2l6ZSAqIG9mZnNldC55eCwgY29tcGFyZSApO1xcblxcdFxcdGZsb2F0IHJ0ID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnl5LCBjb21wYXJlICk7XFxuXFx0XFx0dmVjMiBmID0gZnJhY3QoIHV2ICogc2l6ZSArIDAuNSApO1xcblxcdFxcdGZsb2F0IGEgPSBtaXgoIGxiLCBsdCwgZi55ICk7XFxuXFx0XFx0ZmxvYXQgYiA9IG1peCggcmIsIHJ0LCBmLnkgKTtcXG5cXHRcXHRmbG9hdCBjID0gbWl4KCBhLCBiLCBmLnggKTtcXG5cXHRcXHRyZXR1cm4gYztcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0JpYXMsIGZsb2F0IHNoYWRvd1JhZGl1cywgdmVjNCBzaGFkb3dDb29yZCApIHtcXG5cXHRcXHRmbG9hdCBzaGFkb3cgPSAxLjA7XFxuXFx0XFx0c2hhZG93Q29vcmQueHl6IC89IHNoYWRvd0Nvb3JkLnc7XFxuXFx0XFx0c2hhZG93Q29vcmQueiArPSBzaGFkb3dCaWFzO1xcblxcdFxcdGJ2ZWM0IGluRnJ1c3R1bVZlYyA9IGJ2ZWM0ICggc2hhZG93Q29vcmQueCA+PSAwLjAsIHNoYWRvd0Nvb3JkLnggPD0gMS4wLCBzaGFkb3dDb29yZC55ID49IDAuMCwgc2hhZG93Q29vcmQueSA8PSAxLjAgKTtcXG5cXHRcXHRib29sIGluRnJ1c3R1bSA9IGFsbCggaW5GcnVzdHVtVmVjICk7XFxuXFx0XFx0YnZlYzIgZnJ1c3R1bVRlc3RWZWMgPSBidmVjMiggaW5GcnVzdHVtLCBzaGFkb3dDb29yZC56IDw9IDEuMCApO1xcblxcdFxcdGJvb2wgZnJ1c3R1bVRlc3QgPSBhbGwoIGZydXN0dW1UZXN0VmVjICk7XFxuXFx0XFx0aWYgKCBmcnVzdHVtVGVzdCApIHtcXG5cXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MCA9IC0gdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgxID0gKyB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MSApLCBzaGFkb3dDb29yZC56IClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyA5LjAgKTtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCApXFxuXFx0XFx0XFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0XFx0ZmxvYXQgZHgwID0gLSB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTAgPSAtIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR4MSA9ICsgdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkxID0gKyB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRzaGFkb3cgPSAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzaGFkb3dNYXAsIHNoYWRvd01hcFNpemUsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRzaGFkb3cgPSB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiBzaGFkb3c7XFxuXFx0fVxcblxcdHZlYzIgY3ViZVRvVVYoIHZlYzMgdiwgZmxvYXQgdGV4ZWxTaXplWSApIHtcXG5cXHRcXHR2ZWMzIGFic1YgPSBhYnMoIHYgKTtcXG5cXHRcXHRmbG9hdCBzY2FsZVRvQ3ViZSA9IDEuMCAvIG1heCggYWJzVi54LCBtYXgoIGFic1YueSwgYWJzVi56ICkgKTtcXG5cXHRcXHRhYnNWICo9IHNjYWxlVG9DdWJlO1xcblxcdFxcdHYgKj0gc2NhbGVUb0N1YmUgKiAoIDEuMCAtIDIuMCAqIHRleGVsU2l6ZVkgKTtcXG5cXHRcXHR2ZWMyIHBsYW5hciA9IHYueHk7XFxuXFx0XFx0ZmxvYXQgYWxtb3N0QVRleGVsID0gMS41ICogdGV4ZWxTaXplWTtcXG5cXHRcXHRmbG9hdCBhbG1vc3RPbmUgPSAxLjAgLSBhbG1vc3RBVGV4ZWw7XFxuXFx0XFx0aWYgKCBhYnNWLnogPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGlmICggdi56ID4gMC4wIClcXG5cXHRcXHRcXHRcXHRwbGFuYXIueCA9IDQuMCAtIHYueDtcXG5cXHRcXHR9IGVsc2UgaWYgKCBhYnNWLnggPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGZsb2F0IHNpZ25YID0gc2lnbiggdi54ICk7XFxuXFx0XFx0XFx0cGxhbmFyLnggPSB2LnogKiBzaWduWCArIDIuMCAqIHNpZ25YO1xcblxcdFxcdH0gZWxzZSBpZiAoIGFic1YueSA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgc2lnblkgPSBzaWduKCB2LnkgKTtcXG5cXHRcXHRcXHRwbGFuYXIueCA9IHYueCArIDIuMCAqIHNpZ25ZICsgMi4wO1xcblxcdFxcdFxcdHBsYW5hci55ID0gdi56ICogc2lnblkgLSAyLjA7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiB2ZWMyKCAwLjEyNSwgMC4yNSApICogcGxhbmFyICsgdmVjMiggMC4zNzUsIDAuNzUgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0UG9pbnRTaGFkb3coIHNhbXBsZXIyRCBzaGFkb3dNYXAsIHZlYzIgc2hhZG93TWFwU2l6ZSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgc2hhZG93UmFkaXVzLCB2ZWM0IHNoYWRvd0Nvb3JkLCBmbG9hdCBzaGFkb3dDYW1lcmFOZWFyLCBmbG9hdCBzaGFkb3dDYW1lcmFGYXIgKSB7XFxuXFx0XFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvICggc2hhZG93TWFwU2l6ZSAqIHZlYzIoIDQuMCwgMi4wICkgKTtcXG5cXHRcXHR2ZWMzIGxpZ2h0VG9Qb3NpdGlvbiA9IHNoYWRvd0Nvb3JkLnh5ejtcXG5cXHRcXHRmbG9hdCBkcCA9ICggbGVuZ3RoKCBsaWdodFRvUG9zaXRpb24gKSAtIHNoYWRvd0NhbWVyYU5lYXIgKSAvICggc2hhZG93Q2FtZXJhRmFyIC0gc2hhZG93Q2FtZXJhTmVhciApO1xcdFxcdGRwICs9IHNoYWRvd0JpYXM7XFxuXFx0XFx0dmVjMyBiZDNEID0gbm9ybWFsaXplKCBsaWdodFRvUG9zaXRpb24gKTtcXG5cXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGICkgfHwgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKVxcblxcdFxcdFxcdHZlYzIgb2Zmc2V0ID0gdmVjMiggLSAxLCAxICkgKiBzaGFkb3dSYWRpdXMgKiB0ZXhlbFNpemUueTtcXG5cXHRcXHRcXHRyZXR1cm4gKFxcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHl5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl5eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXl4LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNELCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eHksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh4LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eCwgdGV4ZWxTaXplLnkgKSwgZHAgKVxcblxcdFxcdFxcdCkgKiAoIDEuMCAvIDkuMCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICksIGRwICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcblwiO1xuXG52YXIgc2hhZG93bWFwX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBtYXQ0IHNwb3RTaGFkb3dNYXRyaXhbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2U3BvdFNoYWRvd0Nvb3JkWyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgcG9pbnRTaGFkb3dNYXRyaXhbIE5VTV9QT0lOVF9MSUdIVFMgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVFMgXTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIjtcblxudmFyIHNoYWRvd21hcF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHR2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdID0gZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGkgXSAqIHdvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHR2U3BvdFNoYWRvd0Nvb3JkWyBpIF0gPSBzcG90U2hhZG93TWF0cml4WyBpIF0gKiB3b3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHR2UG9pbnRTaGFkb3dDb29yZFsgaSBdID0gcG9pbnRTaGFkb3dNYXRyaXhbIGkgXSAqIHdvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiO1xuXG52YXIgc2hhZG93bWFza19wYXJzX2ZyYWdtZW50ID0gXCJmbG9hdCBnZXRTaGFkb3dNYXNrKCkge1xcblxcdGZsb2F0IHNoYWRvdyA9IDEuMDtcXG5cXHQjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHREaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGRpcmVjdGlvbmFsTGlnaHQgPSBkaXJlY3Rpb25hbExpZ2h0c1sgaSBdO1xcblxcdFxcdHNoYWRvdyAqPSBib29sKCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdyApID8gZ2V0U2hhZG93KCBkaXJlY3Rpb25hbFNoYWRvd01hcFsgaSBdLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd01hcFNpemUsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93QmlhcywgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dSYWRpdXMsIHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHRTcG90TGlnaHQgc3BvdExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0c3BvdExpZ2h0ID0gc3BvdExpZ2h0c1sgaSBdO1xcblxcdFxcdHNoYWRvdyAqPSBib29sKCBzcG90TGlnaHQuc2hhZG93ICkgPyBnZXRTaGFkb3coIHNwb3RTaGFkb3dNYXBbIGkgXSwgc3BvdExpZ2h0LnNoYWRvd01hcFNpemUsIHNwb3RMaWdodC5zaGFkb3dCaWFzLCBzcG90TGlnaHQuc2hhZG93UmFkaXVzLCB2U3BvdFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0UG9pbnRMaWdodCBwb2ludExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHBvaW50TGlnaHQgPSBwb2ludExpZ2h0c1sgaSBdO1xcblxcdFxcdHNoYWRvdyAqPSBib29sKCBwb2ludExpZ2h0LnNoYWRvdyApID8gZ2V0UG9pbnRTaGFkb3coIHBvaW50U2hhZG93TWFwWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93TWFwU2l6ZSwgcG9pbnRMaWdodC5zaGFkb3dCaWFzLCBwb2ludExpZ2h0LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG5cXHRyZXR1cm4gc2hhZG93O1xcbn1cXG5cIjtcblxudmFyIHNraW5iYXNlX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdG1hdDQgYm9uZU1hdFggPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueCApO1xcblxcdG1hdDQgYm9uZU1hdFkgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueSApO1xcblxcdG1hdDQgYm9uZU1hdFogPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueiApO1xcblxcdG1hdDQgYm9uZU1hdFcgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgudyApO1xcbiNlbmRpZlwiO1xuXG52YXIgc2tpbm5pbmdfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHR1bmlmb3JtIG1hdDQgYmluZE1hdHJpeDtcXG5cXHR1bmlmb3JtIG1hdDQgYmluZE1hdHJpeEludmVyc2U7XFxuXFx0I2lmZGVmIEJPTkVfVEVYVFVSRVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIGJvbmVUZXh0dXJlO1xcblxcdFxcdHVuaWZvcm0gaW50IGJvbmVUZXh0dXJlU2l6ZTtcXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgaiA9IGkgKiA0LjA7XFxuXFx0XFx0XFx0ZmxvYXQgeCA9IG1vZCggaiwgZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApICk7XFxuXFx0XFx0XFx0ZmxvYXQgeSA9IGZsb29yKCBqIC8gZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApICk7XFxuXFx0XFx0XFx0ZmxvYXQgZHggPSAxLjAgLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICk7XFxuXFx0XFx0XFx0ZmxvYXQgZHkgPSAxLjAgLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICk7XFxuXFx0XFx0XFx0eSA9IGR5ICogKCB5ICsgMC41ICk7XFxuXFx0XFx0XFx0dmVjNCB2MSA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMC41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjIgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDEuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHYzID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAyLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2NCA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMy41ICksIHkgKSApO1xcblxcdFxcdFxcdG1hdDQgYm9uZSA9IG1hdDQoIHYxLCB2MiwgdjMsIHY0ICk7XFxuXFx0XFx0XFx0cmV0dXJuIGJvbmU7XFxuXFx0XFx0fVxcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBtYXQ0IGJvbmVNYXRyaWNlc1sgTUFYX0JPTkVTIF07XFxuXFx0XFx0bWF0NCBnZXRCb25lTWF0cml4KCBjb25zdCBpbiBmbG9hdCBpICkge1xcblxcdFxcdFxcdG1hdDQgYm9uZSA9IGJvbmVNYXRyaWNlc1sgaW50KGkpIF07XFxuXFx0XFx0XFx0cmV0dXJuIGJvbmU7XFxuXFx0XFx0fVxcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiO1xuXG52YXIgc2tpbm5pbmdfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0dmVjNCBza2luVmVydGV4ID0gYmluZE1hdHJpeCAqIHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG5cXHR2ZWM0IHNraW5uZWQgPSB2ZWM0KCAwLjAgKTtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRYICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueDtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRZICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueTtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRaICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQuejtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRXICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQudztcXG5cXHR0cmFuc2Zvcm1lZCA9ICggYmluZE1hdHJpeEludmVyc2UgKiBza2lubmVkICkueHl6O1xcbiNlbmRpZlxcblwiO1xuXG52YXIgc2tpbm5vcm1hbF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHRtYXQ0IHNraW5NYXRyaXggPSBtYXQ0KCAwLjAgKTtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueCAqIGJvbmVNYXRYO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC55ICogYm9uZU1hdFk7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnogKiBib25lTWF0WjtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQudyAqIGJvbmVNYXRXO1xcblxcdHNraW5NYXRyaXggID0gYmluZE1hdHJpeEludmVyc2UgKiBza2luTWF0cml4ICogYmluZE1hdHJpeDtcXG5cXHRvYmplY3ROb3JtYWwgPSB2ZWM0KCBza2luTWF0cml4ICogdmVjNCggb2JqZWN0Tm9ybWFsLCAwLjAgKSApLnh5ejtcXG4jZW5kaWZcXG5cIjtcblxudmFyIHNwZWN1bGFybWFwX2ZyYWdtZW50ID0gXCJmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xcbiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcXG5cXHR2ZWM0IHRleGVsU3BlY3VsYXIgPSB0ZXh0dXJlMkQoIHNwZWN1bGFyTWFwLCB2VXYgKTtcXG5cXHRzcGVjdWxhclN0cmVuZ3RoID0gdGV4ZWxTcGVjdWxhci5yO1xcbiNlbHNlXFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IDEuMDtcXG4jZW5kaWZcIjtcblxudmFyIHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBzcGVjdWxhck1hcDtcXG4jZW5kaWZcIjtcblxudmFyIHRvbmVtYXBwaW5nX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVE9ORV9NQVBQSU5HIClcXG4gIGdsX0ZyYWdDb2xvci5yZ2IgPSB0b25lTWFwcGluZyggZ2xfRnJhZ0NvbG9yLnJnYiApO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCA9IFwiI2lmbmRlZiBzYXR1cmF0ZVxcblxcdCNkZWZpbmUgc2F0dXJhdGUoYSkgY2xhbXAoIGEsIDAuMCwgMS4wIClcXG4jZW5kaWZcXG51bmlmb3JtIGZsb2F0IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxudW5pZm9ybSBmbG9hdCB0b25lTWFwcGluZ1doaXRlUG9pbnQ7XFxudmVjMyBMaW5lYXJUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRyZXR1cm4gdG9uZU1hcHBpbmdFeHBvc3VyZSAqIGNvbG9yO1xcbn1cXG52ZWMzIFJlaW5oYXJkVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIGNvbG9yIC8gKCB2ZWMzKCAxLjAgKSArIGNvbG9yICkgKTtcXG59XFxuI2RlZmluZSBVbmNoYXJ0ZWQySGVscGVyKCB4ICkgbWF4KCAoICggeCAqICggMC4xNSAqIHggKyAwLjEwICogMC41MCApICsgMC4yMCAqIDAuMDIgKSAvICggeCAqICggMC4xNSAqIHggKyAwLjUwICkgKyAwLjIwICogMC4zMCApICkgLSAwLjAyIC8gMC4zMCwgdmVjMyggMC4wICkgKVxcbnZlYzMgVW5jaGFydGVkMlRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBVbmNoYXJ0ZWQySGVscGVyKCBjb2xvciApIC8gVW5jaGFydGVkMkhlbHBlciggdmVjMyggdG9uZU1hcHBpbmdXaGl0ZVBvaW50ICkgKSApO1xcbn1cXG52ZWMzIE9wdGltaXplZENpbmVvblRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxuXFx0Y29sb3IgPSBtYXgoIHZlYzMoIDAuMCApLCBjb2xvciAtIDAuMDA0ICk7XFxuXFx0cmV0dXJuIHBvdyggKCBjb2xvciAqICggNi4yICogY29sb3IgKyAwLjUgKSApIC8gKCBjb2xvciAqICggNi4yICogY29sb3IgKyAxLjcgKSArIDAuMDYgKSwgdmVjMyggMi4yICkgKTtcXG59XFxuXCI7XG5cbnZhciB1dl9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApIHx8IGRlZmluZWQoIFVTRV9FTUlTU0lWRU1BUCApIHx8IGRlZmluZWQoIFVTRV9ST1VHSE5FU1NNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTUVUQUxORVNTTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcbiNlbmRpZlwiO1xuXG52YXIgdXZfcGFyc192ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX1NQRUNVTEFSTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQICkgfHwgZGVmaW5lZCggVVNFX0VNSVNTSVZFTUFQICkgfHwgZGVmaW5lZCggVVNFX1JPVUdITkVTU01BUCApIHx8IGRlZmluZWQoIFVTRV9NRVRBTE5FU1NNQVAgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuXFx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgdXZfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX01BUCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9TUEVDVUxBUk1BUCApIHx8IGRlZmluZWQoIFVTRV9BTFBIQU1BUCApIHx8IGRlZmluZWQoIFVTRV9FTUlTU0lWRU1BUCApIHx8IGRlZmluZWQoIFVTRV9ST1VHSE5FU1NNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTUVUQUxORVNTTUFQIClcXG5cXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xcbiNlbmRpZlwiO1xuXG52YXIgdXYyX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXYyO1xcbiNlbmRpZlwiO1xuXG52YXIgdXYyX3BhcnNfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHRhdHRyaWJ1dGUgdmVjMiB1djI7XFxuXFx0dmFyeWluZyB2ZWMyIHZVdjI7XFxuI2VuZGlmXCI7XG5cbnZhciB1djJfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHR2VXYyID0gdXYyO1xcbiNlbmRpZlwiO1xuXG52YXIgd29ybGRwb3NfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQoIERJU1RBTkNFICkgfHwgZGVmaW5lZCAoIFVTRV9TSEFET1dNQVAgKVxcblxcdHZlYzQgd29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcbiNlbmRpZlxcblwiO1xuXG52YXIgY3ViZV9mcmFnID0gXCJ1bmlmb3JtIHNhbXBsZXJDdWJlIHRDdWJlO1xcbnVuaWZvcm0gZmxvYXQgdEZsaXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG52b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZUN1YmUoIHRDdWJlLCB2ZWMzKCB0RmxpcCAqIHZXb3JsZFBvc2l0aW9uLngsIHZXb3JsZFBvc2l0aW9uLnl6ICkgKTtcXG5cXHRnbF9GcmFnQ29sb3IuYSAqPSBvcGFjaXR5O1xcbn1cXG5cIjtcblxudmFyIGN1YmVfdmVydCA9IFwidmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZFBvc2l0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHRnbF9Qb3NpdGlvbi56ID0gZ2xfUG9zaXRpb24udztcXG59XFxuXCI7XG5cbnZhciBkZXB0aF9mcmFnID0gXCIjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0dW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHRcXHRkaWZmdXNlQ29sb3IuYSA9IG9wYWNpdHk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxcblxcdFxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHZlYzMoIDEuMCAtIGdsX0ZyYWdDb29yZC56ICksIG9wYWNpdHkgKTtcXG5cXHQjZWxpZiBERVBUSF9QQUNLSU5HID09IDMyMDFcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGdsX0ZyYWdDb29yZC56ICk7XFxuXFx0I2VuZGlmXFxufVxcblwiO1xuXG52YXIgZGVwdGhfdmVydCA9IFwiI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHRcXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4Plxcbn1cXG5cIjtcblxudmFyIGRpc3RhbmNlUkdCQV9mcmFnID0gXCIjZGVmaW5lIERJU1RBTkNFXFxudW5pZm9ybSB2ZWMzIHJlZmVyZW5jZVBvc2l0aW9uO1xcbnVuaWZvcm0gZmxvYXQgbmVhckRpc3RhbmNlO1xcbnVuaWZvcm0gZmxvYXQgZmFyRGlzdGFuY2U7XFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4gKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCAxLjAgKTtcXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdGZsb2F0IGRpc3QgPSBsZW5ndGgoIHZXb3JsZFBvc2l0aW9uIC0gcmVmZXJlbmNlUG9zaXRpb24gKTtcXG5cXHRkaXN0ID0gKCBkaXN0IC0gbmVhckRpc3RhbmNlICkgLyAoIGZhckRpc3RhbmNlIC0gbmVhckRpc3RhbmNlICk7XFxuXFx0ZGlzdCA9IHNhdHVyYXRlKCBkaXN0ICk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBkaXN0ICk7XFxufVxcblwiO1xuXG52YXIgZGlzdGFuY2VSR0JBX3ZlcnQgPSBcIiNkZWZpbmUgRElTVEFOQ0VcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcXG59XFxuXCI7XG5cbnZhciBlcXVpcmVjdF9mcmFnID0gXCJ1bmlmb3JtIHNhbXBsZXIyRCB0RXF1aXJlY3Q7XFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGRQb3NpdGlvbiApO1xcblxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCBkaXJlY3Rpb24ueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xcblxcdHNhbXBsZVVWLnggPSBhdGFuKCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdEVxdWlyZWN0LCBzYW1wbGVVViApO1xcbn1cXG5cIjtcblxudmFyIGVxdWlyZWN0X3ZlcnQgPSBcInZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2V29ybGRQb3NpdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxufVxcblwiO1xuXG52YXIgbGluZWRhc2hlZF9mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBmbG9hdCBkYXNoU2l6ZTtcXG51bmlmb3JtIGZsb2F0IHRvdGFsU2l6ZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdGlmICggbW9kKCB2TGluZURpc3RhbmNlLCB0b3RhbFNpemUgKSA+IGRhc2hTaXplICkge1xcblxcdFxcdGRpc2NhcmQ7XFxuXFx0fVxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cXG5cIjtcblxudmFyIGxpbmVkYXNoZWRfdmVydCA9IFwidW5pZm9ybSBmbG9hdCBzY2FsZTtcXG5hdHRyaWJ1dGUgZmxvYXQgbGluZURpc3RhbmNlO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdHZMaW5lRGlzdGFuY2UgPSBzY2FsZSAqIGxpbmVEaXN0YW5jZTtcXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cXG5cIjtcblxudmFyIG1lc2hiYXNpY19mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0I2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICkueHl6ICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gdmVjMyggMS4wICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XFxuXCI7XG5cbnZhciBtZXNoYmFzaWNfdmVydCA9IFwiI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XFxuXCI7XG5cbnZhciBtZXNobGFtYmVydF9mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdCNpbmNsdWRlIDxsaWdodG1hcF9mcmFnbWVudD5cXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gQlJERl9EaWZmdXNlX0xhbWJlcnQoIGRpZmZ1c2VDb2xvci5yZ2IgKTtcXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSA9ICggZ2xfRnJvbnRGYWNpbmcgKSA/IHZMaWdodEZyb250IDogdkxpZ2h0QmFjaztcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgPSB2TGlnaHRGcm9udDtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICo9IEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBkaWZmdXNlQ29sb3IucmdiICkgKiBnZXRTaGFkb3dNYXNrKCk7XFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XFxuXFx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XFxuXCI7XG5cbnZhciBtZXNobGFtYmVydF92ZXJ0ID0gXCIjZGVmaW5lIExBTUJFUlRcXG52YXJ5aW5nIHZlYzMgdkxpZ2h0RnJvbnQ7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZhcnlpbmcgdmVjMyB2TGlnaHRCYWNrO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2xhbWJlcnRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cXG5cIjtcblxudmFyIG1lc2hwaG9uZ19mcmFnID0gXCIjZGVmaW5lIFBIT05HXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gdmVjMyBzcGVjdWxhcjtcXG51bmlmb3JtIGZsb2F0IHNoaW5pbmVzcztcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfcGhvbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XFxuXFx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XFxuXCI7XG5cbnZhciBtZXNocGhvbmdfdmVydCA9IFwiI2RlZmluZSBQSE9OR1xcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbiNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGVudm1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwiO1xuXG52YXIgbWVzaHBoeXNpY2FsX2ZyYWcgPSBcIiNkZWZpbmUgUEhZU0lDQUxcXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSBmbG9hdCByb3VnaG5lc3M7XFxudW5pZm9ybSBmbG9hdCBtZXRhbG5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpZm5kZWYgU1RBTkRBUkRcXG5cXHR1bmlmb3JtIGZsb2F0IGNsZWFyQ29hdDtcXG5cXHR1bmlmb3JtIGZsb2F0IGNsZWFyQ29hdFJvdWdobmVzcztcXG4jZW5kaWZcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfbWFwcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHJvdWdobmVzc21hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cXG5cIjtcblxudmFyIG1lc2hwaHlzaWNhbF92ZXJ0ID0gXCIjZGVmaW5lIFBIWVNJQ0FMXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbiNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwiO1xuXG52YXIgbm9ybWFsX2ZyYWcgPSBcIiNkZWZpbmUgTk9STUFMXFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgKCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgJiYgISBkZWZpbmVkKCBPQkpFQ1RTUEFDRV9OT1JNQUxNQVAgKSApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggcGFja05vcm1hbFRvUkdCKCBub3JtYWwgKSwgb3BhY2l0eSApO1xcbn1cXG5cIjtcblxudmFyIG5vcm1hbF92ZXJ0ID0gXCIjZGVmaW5lIE5PUk1BTFxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgKCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgJiYgISBkZWZpbmVkKCBPQkpFQ1RTUEFDRV9OT1JNQUxNQVAgKSApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuI2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCAoIGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSAmJiAhIGRlZmluZWQoIE9CSkVDVFNQQUNFX05PUk1BTE1BUCApIClcXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG4jZW5kaWZcXG59XFxuXCI7XG5cbnZhciBwb2ludHNfZnJhZyA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfcGFydGljbGVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cXG5cIjtcblxudmFyIHBvaW50c192ZXJ0ID0gXCJ1bmlmb3JtIGZsb2F0IHNpemU7XFxudW5pZm9ybSBmbG9hdCBzY2FsZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Z2xfUG9pbnRTaXplID0gc2l6ZSAqICggc2NhbGUgLyAtIG12UG9zaXRpb24ueiApO1xcblxcdCNlbHNlXFxuXFx0XFx0Z2xfUG9pbnRTaXplID0gc2l6ZTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwiO1xuXG52YXIgc2hhZG93X2ZyYWcgPSBcInVuaWZvcm0gdmVjMyBjb2xvcjtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggY29sb3IsIG9wYWNpdHkgKiAoIDEuMCAtIGdldFNoYWRvd01hc2soKSApICk7XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XFxuXCI7XG5cbnZhciBzaGFkb3dfdmVydCA9IFwiI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cXG5cIjtcblxudmFyIFNoYWRlckNodW5rID0ge1xuXHRhbHBoYW1hcF9mcmFnbWVudDogYWxwaGFtYXBfZnJhZ21lbnQsXG5cdGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ6IGFscGhhbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGFscGhhdGVzdF9mcmFnbWVudDogYWxwaGF0ZXN0X2ZyYWdtZW50LFxuXHRhb21hcF9mcmFnbWVudDogYW9tYXBfZnJhZ21lbnQsXG5cdGFvbWFwX3BhcnNfZnJhZ21lbnQ6IGFvbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGJlZ2luX3ZlcnRleDogYmVnaW5fdmVydGV4LFxuXHRiZWdpbm5vcm1hbF92ZXJ0ZXg6IGJlZ2lubm9ybWFsX3ZlcnRleCxcblx0YnNkZnM6IGJzZGZzLFxuXHRidW1wbWFwX3BhcnNfZnJhZ21lbnQ6IGJ1bXBtYXBfcGFyc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQsXG5cdGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4OiBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgsXG5cdGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXgsXG5cdGNvbG9yX2ZyYWdtZW50OiBjb2xvcl9mcmFnbWVudCxcblx0Y29sb3JfcGFyc19mcmFnbWVudDogY29sb3JfcGFyc19mcmFnbWVudCxcblx0Y29sb3JfcGFyc192ZXJ0ZXg6IGNvbG9yX3BhcnNfdmVydGV4LFxuXHRjb2xvcl92ZXJ0ZXg6IGNvbG9yX3ZlcnRleCxcblx0Y29tbW9uOiBjb21tb24sXG5cdGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudDogY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50LFxuXHRkZWZhdWx0bm9ybWFsX3ZlcnRleDogZGVmYXVsdG5vcm1hbF92ZXJ0ZXgsXG5cdGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleDogZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4LFxuXHRkaXNwbGFjZW1lbnRtYXBfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfdmVydGV4LFxuXHRlbWlzc2l2ZW1hcF9mcmFnbWVudDogZW1pc3NpdmVtYXBfZnJhZ21lbnQsXG5cdGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ6IGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGVuY29kaW5nc19mcmFnbWVudDogZW5jb2RpbmdzX2ZyYWdtZW50LFxuXHRlbmNvZGluZ3NfcGFyc19mcmFnbWVudDogZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF9mcmFnbWVudDogZW52bWFwX2ZyYWdtZW50LFxuXHRlbnZtYXBfcGFyc19mcmFnbWVudDogZW52bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF9wYXJzX3ZlcnRleDogZW52bWFwX3BhcnNfdmVydGV4LFxuXHRlbnZtYXBfdmVydGV4OiBlbnZtYXBfdmVydGV4LFxuXHRmb2dfdmVydGV4OiBmb2dfdmVydGV4LFxuXHRmb2dfcGFyc192ZXJ0ZXg6IGZvZ19wYXJzX3ZlcnRleCxcblx0Zm9nX2ZyYWdtZW50OiBmb2dfZnJhZ21lbnQsXG5cdGZvZ19wYXJzX2ZyYWdtZW50OiBmb2dfcGFyc19mcmFnbWVudCxcblx0Z3JhZGllbnRtYXBfcGFyc19mcmFnbWVudDogZ3JhZGllbnRtYXBfcGFyc19mcmFnbWVudCxcblx0bGlnaHRtYXBfZnJhZ21lbnQ6IGxpZ2h0bWFwX2ZyYWdtZW50LFxuXHRsaWdodG1hcF9wYXJzX2ZyYWdtZW50OiBsaWdodG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRsaWdodHNfbGFtYmVydF92ZXJ0ZXg6IGxpZ2h0c19sYW1iZXJ0X3ZlcnRleCxcblx0bGlnaHRzX3BhcnNfYmVnaW46IGxpZ2h0c19wYXJzX2JlZ2luLFxuXHRsaWdodHNfcGFyc19tYXBzOiBsaWdodHNfcGFyc19tYXBzLFxuXHRsaWdodHNfcGhvbmdfZnJhZ21lbnQ6IGxpZ2h0c19waG9uZ19mcmFnbWVudCxcblx0bGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50LFxuXHRsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQ6IGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudCxcblx0bGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50LFxuXHRsaWdodHNfZnJhZ21lbnRfYmVnaW46IGxpZ2h0c19mcmFnbWVudF9iZWdpbixcblx0bGlnaHRzX2ZyYWdtZW50X21hcHM6IGxpZ2h0c19mcmFnbWVudF9tYXBzLFxuXHRsaWdodHNfZnJhZ21lbnRfZW5kOiBsaWdodHNfZnJhZ21lbnRfZW5kLFxuXHRsb2dkZXB0aGJ1Zl9mcmFnbWVudDogbG9nZGVwdGhidWZfZnJhZ21lbnQsXG5cdGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ6IGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQsXG5cdGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4OiBsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcblx0bG9nZGVwdGhidWZfdmVydGV4OiBsb2dkZXB0aGJ1Zl92ZXJ0ZXgsXG5cdG1hcF9mcmFnbWVudDogbWFwX2ZyYWdtZW50LFxuXHRtYXBfcGFyc19mcmFnbWVudDogbWFwX3BhcnNfZnJhZ21lbnQsXG5cdG1hcF9wYXJ0aWNsZV9mcmFnbWVudDogbWFwX3BhcnRpY2xlX2ZyYWdtZW50LFxuXHRtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudDogbWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQsXG5cdG1ldGFsbmVzc21hcF9mcmFnbWVudDogbWV0YWxuZXNzbWFwX2ZyYWdtZW50LFxuXHRtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudDogbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQsXG5cdG1vcnBobm9ybWFsX3ZlcnRleDogbW9ycGhub3JtYWxfdmVydGV4LFxuXHRtb3JwaHRhcmdldF9wYXJzX3ZlcnRleDogbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsXG5cdG1vcnBodGFyZ2V0X3ZlcnRleDogbW9ycGh0YXJnZXRfdmVydGV4LFxuXHRub3JtYWxfZnJhZ21lbnRfYmVnaW46IG5vcm1hbF9mcmFnbWVudF9iZWdpbixcblx0bm9ybWFsX2ZyYWdtZW50X21hcHM6IG5vcm1hbF9mcmFnbWVudF9tYXBzLFxuXHRub3JtYWxtYXBfcGFyc19mcmFnbWVudDogbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQsXG5cdHBhY2tpbmc6IHBhY2tpbmcsXG5cdHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ6IHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQsXG5cdHByb2plY3RfdmVydGV4OiBwcm9qZWN0X3ZlcnRleCxcblx0ZGl0aGVyaW5nX2ZyYWdtZW50OiBkaXRoZXJpbmdfZnJhZ21lbnQsXG5cdGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50OiBkaXRoZXJpbmdfcGFyc19mcmFnbWVudCxcblx0cm91Z2huZXNzbWFwX2ZyYWdtZW50OiByb3VnaG5lc3NtYXBfZnJhZ21lbnQsXG5cdHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50OiByb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCxcblx0c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ6IHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50LFxuXHRzaGFkb3dtYXBfcGFyc192ZXJ0ZXg6IHNoYWRvd21hcF9wYXJzX3ZlcnRleCxcblx0c2hhZG93bWFwX3ZlcnRleDogc2hhZG93bWFwX3ZlcnRleCxcblx0c2hhZG93bWFza19wYXJzX2ZyYWdtZW50OiBzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQsXG5cdHNraW5iYXNlX3ZlcnRleDogc2tpbmJhc2VfdmVydGV4LFxuXHRza2lubmluZ19wYXJzX3ZlcnRleDogc2tpbm5pbmdfcGFyc192ZXJ0ZXgsXG5cdHNraW5uaW5nX3ZlcnRleDogc2tpbm5pbmdfdmVydGV4LFxuXHRza2lubm9ybWFsX3ZlcnRleDogc2tpbm5vcm1hbF92ZXJ0ZXgsXG5cdHNwZWN1bGFybWFwX2ZyYWdtZW50OiBzcGVjdWxhcm1hcF9mcmFnbWVudCxcblx0c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudDogc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCxcblx0dG9uZW1hcHBpbmdfZnJhZ21lbnQ6IHRvbmVtYXBwaW5nX2ZyYWdtZW50LFxuXHR0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50OiB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50LFxuXHR1dl9wYXJzX2ZyYWdtZW50OiB1dl9wYXJzX2ZyYWdtZW50LFxuXHR1dl9wYXJzX3ZlcnRleDogdXZfcGFyc192ZXJ0ZXgsXG5cdHV2X3ZlcnRleDogdXZfdmVydGV4LFxuXHR1djJfcGFyc19mcmFnbWVudDogdXYyX3BhcnNfZnJhZ21lbnQsXG5cdHV2Ml9wYXJzX3ZlcnRleDogdXYyX3BhcnNfdmVydGV4LFxuXHR1djJfdmVydGV4OiB1djJfdmVydGV4LFxuXHR3b3JsZHBvc192ZXJ0ZXg6IHdvcmxkcG9zX3ZlcnRleCxcblxuXHRjdWJlX2ZyYWc6IGN1YmVfZnJhZyxcblx0Y3ViZV92ZXJ0OiBjdWJlX3ZlcnQsXG5cdGRlcHRoX2ZyYWc6IGRlcHRoX2ZyYWcsXG5cdGRlcHRoX3ZlcnQ6IGRlcHRoX3ZlcnQsXG5cdGRpc3RhbmNlUkdCQV9mcmFnOiBkaXN0YW5jZVJHQkFfZnJhZyxcblx0ZGlzdGFuY2VSR0JBX3ZlcnQ6IGRpc3RhbmNlUkdCQV92ZXJ0LFxuXHRlcXVpcmVjdF9mcmFnOiBlcXVpcmVjdF9mcmFnLFxuXHRlcXVpcmVjdF92ZXJ0OiBlcXVpcmVjdF92ZXJ0LFxuXHRsaW5lZGFzaGVkX2ZyYWc6IGxpbmVkYXNoZWRfZnJhZyxcblx0bGluZWRhc2hlZF92ZXJ0OiBsaW5lZGFzaGVkX3ZlcnQsXG5cdG1lc2hiYXNpY19mcmFnOiBtZXNoYmFzaWNfZnJhZyxcblx0bWVzaGJhc2ljX3ZlcnQ6IG1lc2hiYXNpY192ZXJ0LFxuXHRtZXNobGFtYmVydF9mcmFnOiBtZXNobGFtYmVydF9mcmFnLFxuXHRtZXNobGFtYmVydF92ZXJ0OiBtZXNobGFtYmVydF92ZXJ0LFxuXHRtZXNocGhvbmdfZnJhZzogbWVzaHBob25nX2ZyYWcsXG5cdG1lc2hwaG9uZ192ZXJ0OiBtZXNocGhvbmdfdmVydCxcblx0bWVzaHBoeXNpY2FsX2ZyYWc6IG1lc2hwaHlzaWNhbF9mcmFnLFxuXHRtZXNocGh5c2ljYWxfdmVydDogbWVzaHBoeXNpY2FsX3ZlcnQsXG5cdG5vcm1hbF9mcmFnOiBub3JtYWxfZnJhZyxcblx0bm9ybWFsX3ZlcnQ6IG5vcm1hbF92ZXJ0LFxuXHRwb2ludHNfZnJhZzogcG9pbnRzX2ZyYWcsXG5cdHBvaW50c192ZXJ0OiBwb2ludHNfdmVydCxcblx0c2hhZG93X2ZyYWc6IHNoYWRvd19mcmFnLFxuXHRzaGFkb3dfdmVydDogc2hhZG93X3ZlcnRcbn07XG5cbi8qKlxuICogVW5pZm9ybSBVdGlsaXRpZXNcbiAqL1xuXG52YXIgVW5pZm9ybXNVdGlscyA9IHtcblxuXHRtZXJnZTogZnVuY3Rpb24gKCB1bmlmb3JtcyApIHtcblxuXHRcdHZhciBtZXJnZWQgPSB7fTtcblxuXHRcdGZvciAoIHZhciB1ID0gMDsgdSA8IHVuaWZvcm1zLmxlbmd0aDsgdSArKyApIHtcblxuXHRcdFx0dmFyIHRtcCA9IHRoaXMuY2xvbmUoIHVuaWZvcm1zWyB1IF0gKTtcblxuXHRcdFx0Zm9yICggdmFyIHAgaW4gdG1wICkge1xuXG5cdFx0XHRcdG1lcmdlZFsgcCBdID0gdG1wWyBwIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBtZXJnZWQ7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCB1bmlmb3Jtc19zcmMgKSB7XG5cblx0XHR2YXIgdW5pZm9ybXNfZHN0ID0ge307XG5cblx0XHRmb3IgKCB2YXIgdSBpbiB1bmlmb3Jtc19zcmMgKSB7XG5cblx0XHRcdHVuaWZvcm1zX2RzdFsgdSBdID0ge307XG5cblx0XHRcdGZvciAoIHZhciBwIGluIHVuaWZvcm1zX3NyY1sgdSBdICkge1xuXG5cdFx0XHRcdHZhciBwYXJhbWV0ZXJfc3JjID0gdW5pZm9ybXNfc3JjWyB1IF1bIHAgXTtcblxuXHRcdFx0XHRpZiAoIHBhcmFtZXRlcl9zcmMgJiYgKCBwYXJhbWV0ZXJfc3JjLmlzQ29sb3IgfHxcblx0XHRcdFx0XHRwYXJhbWV0ZXJfc3JjLmlzTWF0cml4MyB8fCBwYXJhbWV0ZXJfc3JjLmlzTWF0cml4NCB8fFxuXHRcdFx0XHRcdHBhcmFtZXRlcl9zcmMuaXNWZWN0b3IyIHx8IHBhcmFtZXRlcl9zcmMuaXNWZWN0b3IzIHx8IHBhcmFtZXRlcl9zcmMuaXNWZWN0b3I0IHx8XG5cdFx0XHRcdFx0cGFyYW1ldGVyX3NyYy5pc1RleHR1cmUgKSApIHtcblxuXHRcdFx0XHRcdHVuaWZvcm1zX2RzdFsgdSBdWyBwIF0gPSBwYXJhbWV0ZXJfc3JjLmNsb25lKCk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggcGFyYW1ldGVyX3NyYyApICkge1xuXG5cdFx0XHRcdFx0dW5pZm9ybXNfZHN0WyB1IF1bIHAgXSA9IHBhcmFtZXRlcl9zcmMuc2xpY2UoKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dW5pZm9ybXNfZHN0WyB1IF1bIHAgXSA9IHBhcmFtZXRlcl9zcmM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5pZm9ybXNfZHN0O1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBDb2xvcktleXdvcmRzID0geyAnYWxpY2VibHVlJzogMHhGMEY4RkYsICdhbnRpcXVld2hpdGUnOiAweEZBRUJENywgJ2FxdWEnOiAweDAwRkZGRiwgJ2FxdWFtYXJpbmUnOiAweDdGRkZENCwgJ2F6dXJlJzogMHhGMEZGRkYsXG5cdCdiZWlnZSc6IDB4RjVGNURDLCAnYmlzcXVlJzogMHhGRkU0QzQsICdibGFjayc6IDB4MDAwMDAwLCAnYmxhbmNoZWRhbG1vbmQnOiAweEZGRUJDRCwgJ2JsdWUnOiAweDAwMDBGRiwgJ2JsdWV2aW9sZXQnOiAweDhBMkJFMixcblx0J2Jyb3duJzogMHhBNTJBMkEsICdidXJseXdvb2QnOiAweERFQjg4NywgJ2NhZGV0Ymx1ZSc6IDB4NUY5RUEwLCAnY2hhcnRyZXVzZSc6IDB4N0ZGRjAwLCAnY2hvY29sYXRlJzogMHhEMjY5MUUsICdjb3JhbCc6IDB4RkY3RjUwLFxuXHQnY29ybmZsb3dlcmJsdWUnOiAweDY0OTVFRCwgJ2Nvcm5zaWxrJzogMHhGRkY4REMsICdjcmltc29uJzogMHhEQzE0M0MsICdjeWFuJzogMHgwMEZGRkYsICdkYXJrYmx1ZSc6IDB4MDAwMDhCLCAnZGFya2N5YW4nOiAweDAwOEI4Qixcblx0J2Rhcmtnb2xkZW5yb2QnOiAweEI4ODYwQiwgJ2RhcmtncmF5JzogMHhBOUE5QTksICdkYXJrZ3JlZW4nOiAweDAwNjQwMCwgJ2RhcmtncmV5JzogMHhBOUE5QTksICdkYXJra2hha2knOiAweEJEQjc2QiwgJ2RhcmttYWdlbnRhJzogMHg4QjAwOEIsXG5cdCdkYXJrb2xpdmVncmVlbic6IDB4NTU2QjJGLCAnZGFya29yYW5nZSc6IDB4RkY4QzAwLCAnZGFya29yY2hpZCc6IDB4OTkzMkNDLCAnZGFya3JlZCc6IDB4OEIwMDAwLCAnZGFya3NhbG1vbic6IDB4RTk5NjdBLCAnZGFya3NlYWdyZWVuJzogMHg4RkJDOEYsXG5cdCdkYXJrc2xhdGVibHVlJzogMHg0ODNEOEIsICdkYXJrc2xhdGVncmF5JzogMHgyRjRGNEYsICdkYXJrc2xhdGVncmV5JzogMHgyRjRGNEYsICdkYXJrdHVycXVvaXNlJzogMHgwMENFRDEsICdkYXJrdmlvbGV0JzogMHg5NDAwRDMsXG5cdCdkZWVwcGluayc6IDB4RkYxNDkzLCAnZGVlcHNreWJsdWUnOiAweDAwQkZGRiwgJ2RpbWdyYXknOiAweDY5Njk2OSwgJ2RpbWdyZXknOiAweDY5Njk2OSwgJ2RvZGdlcmJsdWUnOiAweDFFOTBGRiwgJ2ZpcmVicmljayc6IDB4QjIyMjIyLFxuXHQnZmxvcmFsd2hpdGUnOiAweEZGRkFGMCwgJ2ZvcmVzdGdyZWVuJzogMHgyMjhCMjIsICdmdWNoc2lhJzogMHhGRjAwRkYsICdnYWluc2Jvcm8nOiAweERDRENEQywgJ2dob3N0d2hpdGUnOiAweEY4RjhGRiwgJ2dvbGQnOiAweEZGRDcwMCxcblx0J2dvbGRlbnJvZCc6IDB4REFBNTIwLCAnZ3JheSc6IDB4ODA4MDgwLCAnZ3JlZW4nOiAweDAwODAwMCwgJ2dyZWVueWVsbG93JzogMHhBREZGMkYsICdncmV5JzogMHg4MDgwODAsICdob25leWRldyc6IDB4RjBGRkYwLCAnaG90cGluayc6IDB4RkY2OUI0LFxuXHQnaW5kaWFucmVkJzogMHhDRDVDNUMsICdpbmRpZ28nOiAweDRCMDA4MiwgJ2l2b3J5JzogMHhGRkZGRjAsICdraGFraSc6IDB4RjBFNjhDLCAnbGF2ZW5kZXInOiAweEU2RTZGQSwgJ2xhdmVuZGVyYmx1c2gnOiAweEZGRjBGNSwgJ2xhd25ncmVlbic6IDB4N0NGQzAwLFxuXHQnbGVtb25jaGlmZm9uJzogMHhGRkZBQ0QsICdsaWdodGJsdWUnOiAweEFERDhFNiwgJ2xpZ2h0Y29yYWwnOiAweEYwODA4MCwgJ2xpZ2h0Y3lhbic6IDB4RTBGRkZGLCAnbGlnaHRnb2xkZW5yb2R5ZWxsb3cnOiAweEZBRkFEMiwgJ2xpZ2h0Z3JheSc6IDB4RDNEM0QzLFxuXHQnbGlnaHRncmVlbic6IDB4OTBFRTkwLCAnbGlnaHRncmV5JzogMHhEM0QzRDMsICdsaWdodHBpbmsnOiAweEZGQjZDMSwgJ2xpZ2h0c2FsbW9uJzogMHhGRkEwN0EsICdsaWdodHNlYWdyZWVuJzogMHgyMEIyQUEsICdsaWdodHNreWJsdWUnOiAweDg3Q0VGQSxcblx0J2xpZ2h0c2xhdGVncmF5JzogMHg3Nzg4OTksICdsaWdodHNsYXRlZ3JleSc6IDB4Nzc4ODk5LCAnbGlnaHRzdGVlbGJsdWUnOiAweEIwQzRERSwgJ2xpZ2h0eWVsbG93JzogMHhGRkZGRTAsICdsaW1lJzogMHgwMEZGMDAsICdsaW1lZ3JlZW4nOiAweDMyQ0QzMixcblx0J2xpbmVuJzogMHhGQUYwRTYsICdtYWdlbnRhJzogMHhGRjAwRkYsICdtYXJvb24nOiAweDgwMDAwMCwgJ21lZGl1bWFxdWFtYXJpbmUnOiAweDY2Q0RBQSwgJ21lZGl1bWJsdWUnOiAweDAwMDBDRCwgJ21lZGl1bW9yY2hpZCc6IDB4QkE1NUQzLFxuXHQnbWVkaXVtcHVycGxlJzogMHg5MzcwREIsICdtZWRpdW1zZWFncmVlbic6IDB4M0NCMzcxLCAnbWVkaXVtc2xhdGVibHVlJzogMHg3QjY4RUUsICdtZWRpdW1zcHJpbmdncmVlbic6IDB4MDBGQTlBLCAnbWVkaXVtdHVycXVvaXNlJzogMHg0OEQxQ0MsXG5cdCdtZWRpdW12aW9sZXRyZWQnOiAweEM3MTU4NSwgJ21pZG5pZ2h0Ymx1ZSc6IDB4MTkxOTcwLCAnbWludGNyZWFtJzogMHhGNUZGRkEsICdtaXN0eXJvc2UnOiAweEZGRTRFMSwgJ21vY2Nhc2luJzogMHhGRkU0QjUsICduYXZham93aGl0ZSc6IDB4RkZERUFELFxuXHQnbmF2eSc6IDB4MDAwMDgwLCAnb2xkbGFjZSc6IDB4RkRGNUU2LCAnb2xpdmUnOiAweDgwODAwMCwgJ29saXZlZHJhYic6IDB4NkI4RTIzLCAnb3JhbmdlJzogMHhGRkE1MDAsICdvcmFuZ2VyZWQnOiAweEZGNDUwMCwgJ29yY2hpZCc6IDB4REE3MEQ2LFxuXHQncGFsZWdvbGRlbnJvZCc6IDB4RUVFOEFBLCAncGFsZWdyZWVuJzogMHg5OEZCOTgsICdwYWxldHVycXVvaXNlJzogMHhBRkVFRUUsICdwYWxldmlvbGV0cmVkJzogMHhEQjcwOTMsICdwYXBheWF3aGlwJzogMHhGRkVGRDUsICdwZWFjaHB1ZmYnOiAweEZGREFCOSxcblx0J3BlcnUnOiAweENEODUzRiwgJ3BpbmsnOiAweEZGQzBDQiwgJ3BsdW0nOiAweEREQTBERCwgJ3Bvd2RlcmJsdWUnOiAweEIwRTBFNiwgJ3B1cnBsZSc6IDB4ODAwMDgwLCAncmViZWNjYXB1cnBsZSc6IDB4NjYzMzk5LCAncmVkJzogMHhGRjAwMDAsICdyb3N5YnJvd24nOiAweEJDOEY4Rixcblx0J3JveWFsYmx1ZSc6IDB4NDE2OUUxLCAnc2FkZGxlYnJvd24nOiAweDhCNDUxMywgJ3NhbG1vbic6IDB4RkE4MDcyLCAnc2FuZHlicm93bic6IDB4RjRBNDYwLCAnc2VhZ3JlZW4nOiAweDJFOEI1NywgJ3NlYXNoZWxsJzogMHhGRkY1RUUsXG5cdCdzaWVubmEnOiAweEEwNTIyRCwgJ3NpbHZlcic6IDB4QzBDMEMwLCAnc2t5Ymx1ZSc6IDB4ODdDRUVCLCAnc2xhdGVibHVlJzogMHg2QTVBQ0QsICdzbGF0ZWdyYXknOiAweDcwODA5MCwgJ3NsYXRlZ3JleSc6IDB4NzA4MDkwLCAnc25vdyc6IDB4RkZGQUZBLFxuXHQnc3ByaW5nZ3JlZW4nOiAweDAwRkY3RiwgJ3N0ZWVsYmx1ZSc6IDB4NDY4MkI0LCAndGFuJzogMHhEMkI0OEMsICd0ZWFsJzogMHgwMDgwODAsICd0aGlzdGxlJzogMHhEOEJGRDgsICd0b21hdG8nOiAweEZGNjM0NywgJ3R1cnF1b2lzZSc6IDB4NDBFMEQwLFxuXHQndmlvbGV0JzogMHhFRTgyRUUsICd3aGVhdCc6IDB4RjVERUIzLCAnd2hpdGUnOiAweEZGRkZGRiwgJ3doaXRlc21va2UnOiAweEY1RjVGNSwgJ3llbGxvdyc6IDB4RkZGRjAwLCAneWVsbG93Z3JlZW4nOiAweDlBQ0QzMiB9O1xuXG5mdW5jdGlvbiBDb2xvciggciwgZywgYiApIHtcblxuXHRpZiAoIGcgPT09IHVuZGVmaW5lZCAmJiBiID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHQvLyByIGlzIFRIUkVFLkNvbG9yLCBoZXggb3Igc3RyaW5nXG5cdFx0cmV0dXJuIHRoaXMuc2V0KCByICk7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzLnNldFJHQiggciwgZywgYiApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENvbG9yLnByb3RvdHlwZSwge1xuXG5cdGlzQ29sb3I6IHRydWUsXG5cblx0cjogMSwgZzogMSwgYjogMSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlICYmIHZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdHRoaXMuY29weSggdmFsdWUgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRcdHRoaXMuc2V0SGV4KCB2YWx1ZSApO1xuXG5cdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0dGhpcy5zZXRTdHlsZSggdmFsdWUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMuciA9IHNjYWxhcjtcblx0XHR0aGlzLmcgPSBzY2FsYXI7XG5cdFx0dGhpcy5iID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRIZXg6IGZ1bmN0aW9uICggaGV4ICkge1xuXG5cdFx0aGV4ID0gTWF0aC5mbG9vciggaGV4ICk7XG5cblx0XHR0aGlzLnIgPSAoIGhleCA+PiAxNiAmIDI1NSApIC8gMjU1O1xuXHRcdHRoaXMuZyA9ICggaGV4ID4+IDggJiAyNTUgKSAvIDI1NTtcblx0XHR0aGlzLmIgPSAoIGhleCAmIDI1NSApIC8gMjU1O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSR0I6IGZ1bmN0aW9uICggciwgZywgYiApIHtcblxuXHRcdHRoaXMuciA9IHI7XG5cdFx0dGhpcy5nID0gZztcblx0XHR0aGlzLmIgPSBiO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRIU0w6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZ1bmN0aW9uIGh1ZTJyZ2IoIHAsIHEsIHQgKSB7XG5cblx0XHRcdGlmICggdCA8IDAgKSB0ICs9IDE7XG5cdFx0XHRpZiAoIHQgPiAxICkgdCAtPSAxO1xuXHRcdFx0aWYgKCB0IDwgMSAvIDYgKSByZXR1cm4gcCArICggcSAtIHAgKSAqIDYgKiB0O1xuXHRcdFx0aWYgKCB0IDwgMSAvIDIgKSByZXR1cm4gcTtcblx0XHRcdGlmICggdCA8IDIgLyAzICkgcmV0dXJuIHAgKyAoIHEgLSBwICkgKiA2ICogKCAyIC8gMyAtIHQgKTtcblx0XHRcdHJldHVybiBwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNldEhTTCggaCwgcywgbCApIHtcblxuXHRcdFx0Ly8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjBcblx0XHRcdGggPSBfTWF0aC5ldWNsaWRlYW5Nb2R1bG8oIGgsIDEgKTtcblx0XHRcdHMgPSBfTWF0aC5jbGFtcCggcywgMCwgMSApO1xuXHRcdFx0bCA9IF9NYXRoLmNsYW1wKCBsLCAwLCAxICk7XG5cblx0XHRcdGlmICggcyA9PT0gMCApIHtcblxuXHRcdFx0XHR0aGlzLnIgPSB0aGlzLmcgPSB0aGlzLmIgPSBsO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhciBwID0gbCA8PSAwLjUgPyBsICogKCAxICsgcyApIDogbCArIHMgLSAoIGwgKiBzICk7XG5cdFx0XHRcdHZhciBxID0gKCAyICogbCApIC0gcDtcblxuXHRcdFx0XHR0aGlzLnIgPSBodWUycmdiKCBxLCBwLCBoICsgMSAvIDMgKTtcblx0XHRcdFx0dGhpcy5nID0gaHVlMnJnYiggcSwgcCwgaCApO1xuXHRcdFx0XHR0aGlzLmIgPSBodWUycmdiKCBxLCBwLCBoIC0gMSAvIDMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNldFN0eWxlOiBmdW5jdGlvbiAoIHN0eWxlICkge1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlQWxwaGEoIHN0cmluZyApIHtcblxuXHRcdFx0aWYgKCBzdHJpbmcgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0aWYgKCBwYXJzZUZsb2F0KCBzdHJpbmcgKSA8IDEgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IEFscGhhIGNvbXBvbmVudCBvZiAnICsgc3R5bGUgKyAnIHdpbGwgYmUgaWdub3JlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0dmFyIG07XG5cblx0XHRpZiAoIG0gPSAvXigoPzpyZ2J8aHNsKWE/KVxcKFxccyooW15cXCldKilcXCkvLmV4ZWMoIHN0eWxlICkgKSB7XG5cblx0XHRcdC8vIHJnYiAvIGhzbFxuXG5cdFx0XHR2YXIgY29sb3I7XG5cdFx0XHR2YXIgbmFtZSA9IG1bIDEgXTtcblx0XHRcdHZhciBjb21wb25lbnRzID0gbVsgMiBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ3JnYic6XG5cdFx0XHRcdGNhc2UgJ3JnYmEnOlxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoIGNvbXBvbmVudHMgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmdiKDI1NSwwLDApIHJnYmEoMjU1LDAsMCwwLjUpXG5cdFx0XHRcdFx0XHR0aGlzLnIgPSBNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMjU1O1xuXHRcdFx0XHRcdFx0dGhpcy5nID0gTWF0aC5taW4oIDI1NSwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDI1NTtcblx0XHRcdFx0XHRcdHRoaXMuYiA9IE1hdGgubWluKCAyNTUsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAyNTU7XG5cblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNSBdICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoIGNvbXBvbmVudHMgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmdiKDEwMCUsMCUsMCUpIHJnYmEoMTAwJSwwJSwwJSwwLjUpXG5cdFx0XHRcdFx0XHR0aGlzLnIgPSBNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMTAwO1xuXHRcdFx0XHRcdFx0dGhpcy5nID0gTWF0aC5taW4oIDEwMCwgcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgKSAvIDEwMDtcblx0XHRcdFx0XHRcdHRoaXMuYiA9IE1hdGgubWluKCAxMDAsIHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApICkgLyAxMDA7XG5cblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNSBdICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnaHNsJzpcblx0XHRcdFx0Y2FzZSAnaHNsYSc6XG5cblx0XHRcdFx0XHRpZiAoIGNvbG9yID0gL14oWzAtOV0qXFwuP1swLTldKylcXHMqLFxccyooXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBoc2woMTIwLDUwJSw1MCUpIGhzbGEoMTIwLDUwJSw1MCUsMC41KVxuXHRcdFx0XHRcdFx0dmFyIGggPSBwYXJzZUZsb2F0KCBjb2xvclsgMSBdICkgLyAzNjA7XG5cdFx0XHRcdFx0XHR2YXIgcyA9IHBhcnNlSW50KCBjb2xvclsgMiBdLCAxMCApIC8gMTAwO1xuXHRcdFx0XHRcdFx0dmFyIGwgPSBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSAvIDEwMDtcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA1IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0SFNMKCBoLCBzLCBsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbSA9IC9eXFwjKFtBLUZhLWYwLTldKykkLy5leGVjKCBzdHlsZSApICkge1xuXG5cdFx0XHQvLyBoZXggY29sb3JcblxuXHRcdFx0dmFyIGhleCA9IG1bIDEgXTtcblx0XHRcdHZhciBzaXplID0gaGV4Lmxlbmd0aDtcblxuXHRcdFx0aWYgKCBzaXplID09PSAzICkge1xuXG5cdFx0XHRcdC8vICNmZjBcblx0XHRcdFx0dGhpcy5yID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDAgKSArIGhleC5jaGFyQXQoIDAgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5nID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDEgKSArIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5iID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDIgKSArIGhleC5jaGFyQXQoIDIgKSwgMTYgKSAvIDI1NTtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0fSBlbHNlIGlmICggc2l6ZSA9PT0gNiApIHtcblxuXHRcdFx0XHQvLyAjZmYwMDAwXG5cdFx0XHRcdHRoaXMuciA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAwICkgKyBoZXguY2hhckF0KCAxICksIDE2ICkgLyAyNTU7XG5cdFx0XHRcdHRoaXMuZyA9IHBhcnNlSW50KCBoZXguY2hhckF0KCAyICkgKyBoZXguY2hhckF0KCAzICksIDE2ICkgLyAyNTU7XG5cdFx0XHRcdHRoaXMuYiA9IHBhcnNlSW50KCBoZXguY2hhckF0KCA0ICkgKyBoZXguY2hhckF0KCA1ICksIDE2ICkgLyAyNTU7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggc3R5bGUgJiYgc3R5bGUubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Ly8gY29sb3Iga2V5d29yZHNcblx0XHRcdHZhciBoZXggPSBDb2xvcktleXdvcmRzWyBzdHlsZSBdO1xuXG5cdFx0XHRpZiAoIGhleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIHJlZFxuXHRcdFx0XHR0aGlzLnNldEhleCggaGV4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gdW5rbm93biBjb2xvclxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciAnICsgc3R5bGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLnIsIHRoaXMuZywgdGhpcy5iICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3Iucjtcblx0XHR0aGlzLmcgPSBjb2xvci5nO1xuXHRcdHRoaXMuYiA9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlHYW1tYVRvTGluZWFyOiBmdW5jdGlvbiAoIGNvbG9yLCBnYW1tYUZhY3RvciApIHtcblxuXHRcdGlmICggZ2FtbWFGYWN0b3IgPT09IHVuZGVmaW5lZCApIGdhbW1hRmFjdG9yID0gMi4wO1xuXG5cdFx0dGhpcy5yID0gTWF0aC5wb3coIGNvbG9yLnIsIGdhbW1hRmFjdG9yICk7XG5cdFx0dGhpcy5nID0gTWF0aC5wb3coIGNvbG9yLmcsIGdhbW1hRmFjdG9yICk7XG5cdFx0dGhpcy5iID0gTWF0aC5wb3coIGNvbG9yLmIsIGdhbW1hRmFjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlMaW5lYXJUb0dhbW1hOiBmdW5jdGlvbiAoIGNvbG9yLCBnYW1tYUZhY3RvciApIHtcblxuXHRcdGlmICggZ2FtbWFGYWN0b3IgPT09IHVuZGVmaW5lZCApIGdhbW1hRmFjdG9yID0gMi4wO1xuXG5cdFx0dmFyIHNhZmVJbnZlcnNlID0gKCBnYW1tYUZhY3RvciA+IDAgKSA/ICggMS4wIC8gZ2FtbWFGYWN0b3IgKSA6IDEuMDtcblxuXHRcdHRoaXMuciA9IE1hdGgucG93KCBjb2xvci5yLCBzYWZlSW52ZXJzZSApO1xuXHRcdHRoaXMuZyA9IE1hdGgucG93KCBjb2xvci5nLCBzYWZlSW52ZXJzZSApO1xuXHRcdHRoaXMuYiA9IE1hdGgucG93KCBjb2xvci5iLCBzYWZlSW52ZXJzZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb252ZXJ0R2FtbWFUb0xpbmVhcjogZnVuY3Rpb24gKCBnYW1tYUZhY3RvciApIHtcblxuXHRcdHRoaXMuY29weUdhbW1hVG9MaW5lYXIoIHRoaXMsIGdhbW1hRmFjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbnZlcnRMaW5lYXJUb0dhbW1hOiBmdW5jdGlvbiAoIGdhbW1hRmFjdG9yICkge1xuXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9HYW1tYSggdGhpcywgZ2FtbWFGYWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVNSR0JUb0xpbmVhcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0ZnVuY3Rpb24gU1JHQlRvTGluZWFyKCBjICkge1xuXG5cdFx0XHRyZXR1cm4gKCBjIDwgMC4wNDA0NSApID8gYyAqIDAuMDc3Mzk5MzgwOCA6IE1hdGgucG93KCBjICogMC45NDc4NjcyOTg2ICsgMC4wNTIxMzI3MDE0LCAyLjQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb3B5U1JHQlRvTGluZWFyKCBjb2xvciApIHtcblxuXHRcdFx0dGhpcy5yID0gU1JHQlRvTGluZWFyKCBjb2xvci5yICk7XG5cdFx0XHR0aGlzLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTtcblx0XHRcdHRoaXMuYiA9IFNSR0JUb0xpbmVhciggY29sb3IuYiApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNvcHlMaW5lYXJUb1NSR0I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZ1bmN0aW9uIExpbmVhclRvU1JHQiggYyApIHtcblxuXHRcdFx0cmV0dXJuICggYyA8IDAuMDAzMTMwOCApID8gYyAqIDEyLjkyIDogMS4wNTUgKiAoIE1hdGgucG93KCBjLCAwLjQxNjY2ICkgKSAtIDAuMDU1O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNvcHlMaW5lYXJUb1NSR0IoIGNvbG9yICkge1xuXG5cdFx0XHR0aGlzLnIgPSBMaW5lYXJUb1NSR0IoIGNvbG9yLnIgKTtcblx0XHRcdHRoaXMuZyA9IExpbmVhclRvU1JHQiggY29sb3IuZyApO1xuXHRcdFx0dGhpcy5iID0gTGluZWFyVG9TUkdCKCBjb2xvci5iICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udmVydFNSR0JUb0xpbmVhcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jb3B5U1JHQlRvTGluZWFyKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbnZlcnRMaW5lYXJUb1NSR0I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY29weUxpbmVhclRvU1JHQiggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRIZXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiAoIHRoaXMuciAqIDI1NSApIDw8IDE2IF4gKCB0aGlzLmcgKiAyNTUgKSA8PCA4IF4gKCB0aGlzLmIgKiAyNTUgKSA8PCAwO1xuXG5cdH0sXG5cblx0Z2V0SGV4U3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gKCAnMDAwMDAwJyArIHRoaXMuZ2V0SGV4KCkudG9TdHJpbmcoIDE2ICkgKS5zbGljZSggLSA2ICk7XG5cblx0fSxcblxuXHRnZXRIU0w6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0Ly8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjBcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbG9yOiAuZ2V0SFNMKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IHsgaDogMCwgczogMCwgbDogMCB9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmI7XG5cblx0XHR2YXIgbWF4ID0gTWF0aC5tYXgoIHIsIGcsIGIgKTtcblx0XHR2YXIgbWluID0gTWF0aC5taW4oIHIsIGcsIGIgKTtcblxuXHRcdHZhciBodWUsIHNhdHVyYXRpb247XG5cdFx0dmFyIGxpZ2h0bmVzcyA9ICggbWluICsgbWF4ICkgLyAyLjA7XG5cblx0XHRpZiAoIG1pbiA9PT0gbWF4ICkge1xuXG5cdFx0XHRodWUgPSAwO1xuXHRcdFx0c2F0dXJhdGlvbiA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgZGVsdGEgPSBtYXggLSBtaW47XG5cblx0XHRcdHNhdHVyYXRpb24gPSBsaWdodG5lc3MgPD0gMC41ID8gZGVsdGEgLyAoIG1heCArIG1pbiApIDogZGVsdGEgLyAoIDIgLSBtYXggLSBtaW4gKTtcblxuXHRcdFx0c3dpdGNoICggbWF4ICkge1xuXG5cdFx0XHRcdGNhc2UgcjogaHVlID0gKCBnIC0gYiApIC8gZGVsdGEgKyAoIGcgPCBiID8gNiA6IDAgKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgZzogaHVlID0gKCBiIC0gciApIC8gZGVsdGEgKyAyOyBicmVhaztcblx0XHRcdFx0Y2FzZSBiOiBodWUgPSAoIHIgLSBnICkgLyBkZWx0YSArIDQ7IGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHRcdGh1ZSAvPSA2O1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LmggPSBodWU7XG5cdFx0dGFyZ2V0LnMgPSBzYXR1cmF0aW9uO1xuXHRcdHRhcmdldC5sID0gbGlnaHRuZXNzO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9LFxuXG5cdGdldFN0eWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gJ3JnYignICsgKCAoIHRoaXMuciAqIDI1NSApIHwgMCApICsgJywnICsgKCAoIHRoaXMuZyAqIDI1NSApIHwgMCApICsgJywnICsgKCAoIHRoaXMuYiAqIDI1NSApIHwgMCApICsgJyknO1xuXG5cdH0sXG5cblx0b2Zmc2V0SFNMOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaHNsID0ge307XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gKCBoLCBzLCBsICkge1xuXG5cdFx0XHR0aGlzLmdldEhTTCggaHNsICk7XG5cblx0XHRcdGhzbC5oICs9IGg7IGhzbC5zICs9IHM7IGhzbC5sICs9IGw7XG5cblx0XHRcdHRoaXMuc2V0SFNMKCBoc2wuaCwgaHNsLnMsIGhzbC5sICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0YWRkOiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yICs9IGNvbG9yLnI7XG5cdFx0dGhpcy5nICs9IGNvbG9yLmc7XG5cdFx0dGhpcy5iICs9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZENvbG9yczogZnVuY3Rpb24gKCBjb2xvcjEsIGNvbG9yMiApIHtcblxuXHRcdHRoaXMuciA9IGNvbG9yMS5yICsgY29sb3IyLnI7XG5cdFx0dGhpcy5nID0gY29sb3IxLmcgKyBjb2xvcjIuZztcblx0XHR0aGlzLmIgPSBjb2xvcjEuYiArIGNvbG9yMi5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMuciArPSBzO1xuXHRcdHRoaXMuZyArPSBzO1xuXHRcdHRoaXMuYiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWI6IGZ1bmN0aW9uICggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgPSBNYXRoLm1heCggMCwgdGhpcy5yIC0gY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IE1hdGgubWF4KCAwLCB0aGlzLmcgLSBjb2xvci5nICk7XG5cdFx0dGhpcy5iID0gTWF0aC5tYXgoIDAsIHRoaXMuYiAtIGNvbG9yLmIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHk6IGZ1bmN0aW9uICggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgKj0gY29sb3Iucjtcblx0XHR0aGlzLmcgKj0gY29sb3IuZztcblx0XHR0aGlzLmIgKj0gY29sb3IuYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMuciAqPSBzO1xuXHRcdHRoaXMuZyAqPSBzO1xuXHRcdHRoaXMuYiAqPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsZXJwOiBmdW5jdGlvbiAoIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdHRoaXMuciArPSAoIGNvbG9yLnIgLSB0aGlzLnIgKSAqIGFscGhhO1xuXHRcdHRoaXMuZyArPSAoIGNvbG9yLmcgLSB0aGlzLmcgKSAqIGFscGhhO1xuXHRcdHRoaXMuYiArPSAoIGNvbG9yLmIgLSB0aGlzLmIgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggYyApIHtcblxuXHRcdHJldHVybiAoIGMuciA9PT0gdGhpcy5yICkgJiYgKCBjLmcgPT09IHRoaXMuZyApICYmICggYy5iID09PSB0aGlzLmIgKTtcblxuXHR9LFxuXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR0aGlzLnIgPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy5nID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLmIgPSBhcnJheVsgb2Zmc2V0ICsgMiBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSBhcnJheSA9IFtdO1xuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy5yO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLmc7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuYjtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0SGV4KCk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogVW5pZm9ybXMgbGlicmFyeSBmb3Igc2hhcmVkIHdlYmdsIHNoYWRlcnNcbiAqL1xuXG52YXIgVW5pZm9ybXNMaWIgPSB7XG5cblx0Y29tbW9uOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZWVlZWVlICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH0sXG5cblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXG5cdH0sXG5cblx0c3BlY3VsYXJtYXA6IHtcblxuXHRcdHNwZWN1bGFyTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cblx0fSxcblxuXHRlbnZtYXA6IHtcblxuXHRcdGVudk1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGZsaXBFbnZNYXA6IHsgdmFsdWU6IC0gMSB9LFxuXHRcdHJlZmxlY3Rpdml0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0cmVmcmFjdGlvblJhdGlvOiB7IHZhbHVlOiAwLjk4IH0sXG5cdFx0bWF4TWlwTGV2ZWw6IHsgdmFsdWU6IDAgfVxuXG5cdH0sXG5cblx0YW9tYXA6IHtcblxuXHRcdGFvTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YW9NYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bGlnaHRtYXA6IHtcblxuXHRcdGxpZ2h0TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bGlnaHRNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0ZW1pc3NpdmVtYXA6IHtcblxuXHRcdGVtaXNzaXZlTWFwOiB7IHZhbHVlOiBudWxsIH1cblxuXHR9LFxuXG5cdGJ1bXBtYXA6IHtcblxuXHRcdGJ1bXBNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRidW1wU2NhbGU6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bm9ybWFsbWFwOiB7XG5cblx0XHRub3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRub3JtYWxTY2FsZTogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDEsIDEgKSB9XG5cblx0fSxcblxuXHRkaXNwbGFjZW1lbnRtYXA6IHtcblxuXHRcdGRpc3BsYWNlbWVudE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGRpc3BsYWNlbWVudFNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0ZGlzcGxhY2VtZW50QmlhczogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRyb3VnaG5lc3NtYXA6IHtcblxuXHRcdHJvdWdobmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRtZXRhbG5lc3NtYXA6IHtcblxuXHRcdG1ldGFsbmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRncmFkaWVudG1hcDoge1xuXG5cdFx0Z3JhZGllbnRNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0Zm9nOiB7XG5cblx0XHRmb2dEZW5zaXR5OiB7IHZhbHVlOiAwLjAwMDI1IH0sXG5cdFx0Zm9nTmVhcjogeyB2YWx1ZTogMSB9LFxuXHRcdGZvZ0ZhcjogeyB2YWx1ZTogMjAwMCB9LFxuXHRcdGZvZ0NvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfVxuXG5cdH0sXG5cblx0bGlnaHRzOiB7XG5cblx0XHRhbWJpZW50TGlnaHRDb2xvcjogeyB2YWx1ZTogW10gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGNvbG9yOiB7fSxcblxuXHRcdFx0c2hhZG93OiB7fSxcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9XG5cdFx0fSB9LFxuXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRzcG90TGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0Y29sb3I6IHt9LFxuXHRcdFx0cG9zaXRpb246IHt9LFxuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGRpc3RhbmNlOiB7fSxcblx0XHRcdGNvbmVDb3M6IHt9LFxuXHRcdFx0cGVudW1icmFDb3M6IHt9LFxuXHRcdFx0ZGVjYXk6IHt9LFxuXG5cdFx0XHRzaGFkb3c6IHt9LFxuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge31cblx0XHR9IH0sXG5cblx0XHRzcG90U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdHNwb3RTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRwb2ludExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdGRlY2F5OiB7fSxcblx0XHRcdGRpc3RhbmNlOiB7fSxcblxuXHRcdFx0c2hhZG93OiB7fSxcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9LFxuXHRcdFx0c2hhZG93Q2FtZXJhTmVhcjoge30sXG5cdFx0XHRzaGFkb3dDYW1lcmFGYXI6IHt9XG5cdFx0fSB9LFxuXG5cdFx0cG9pbnRTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0cG9pbnRTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRoZW1pc3BoZXJlTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdHNreUNvbG9yOiB7fSxcblx0XHRcdGdyb3VuZENvbG9yOiB7fVxuXHRcdH0gfSxcblxuXHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBSZWN0QXJlYUxpZ2h0IEJSREYgZGF0YSBuZWVkcyB0byBiZSBtb3ZlZCBmcm9tIGV4YW1wbGUgdG8gbWFpbiBzcmNcblx0XHRyZWN0QXJlYUxpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdHdpZHRoOiB7fSxcblx0XHRcdGhlaWdodDoge31cblx0XHR9IH1cblxuXHR9LFxuXG5cdHBvaW50czoge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweGVlZWVlZSApIH0sXG5cdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0c2l6ZTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0c2NhbGU6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdHV2VHJhbnNmb3JtOiB7IHZhbHVlOiBuZXcgTWF0cml4MygpIH1cblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICovXG5cbnZhciBTaGFkZXJMaWIgPSB7XG5cblx0YmFzaWM6IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hiYXNpY192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNoYmFzaWNfZnJhZ1xuXG5cdH0sXG5cblx0bGFtYmVydDoge1xuXG5cdFx0dW5pZm9ybXM6IFVuaWZvcm1zVXRpbHMubWVyZ2UoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hsYW1iZXJ0X3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hsYW1iZXJ0X2ZyYWdcblxuXHR9LFxuXG5cdHBob25nOiB7XG5cblx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5tZXJnZSggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZ3JhZGllbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdFx0c3BlY3VsYXI6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgxMTExMTEgKSB9LFxuXHRcdFx0XHRzaGluaW5lc3M6IHsgdmFsdWU6IDMwIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaG9uZ192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfZnJhZ1xuXG5cdH0sXG5cblx0c3RhbmRhcmQ6IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIucm91Z2huZXNzbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubWV0YWxuZXNzbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRcdHJvdWdobmVzczogeyB2YWx1ZTogMC41IH0sXG5cdFx0XHRcdG1ldGFsbmVzczogeyB2YWx1ZTogMC41IH0sXG5cdFx0XHRcdGVudk1hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9IC8vIHRlbXBvcmFyeVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF9mcmFnXG5cblx0fSxcblxuXHRwb2ludHM6IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5wb2ludHMsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5wb2ludHNfZnJhZ1xuXG5cdH0sXG5cblx0ZGFzaGVkOiB7XG5cblx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5tZXJnZSggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0e1xuXHRcdFx0XHRzY2FsZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHRkYXNoU2l6ZTogeyB2YWx1ZTogMSB9LFxuXHRcdFx0XHR0b3RhbFNpemU6IHsgdmFsdWU6IDIgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubGluZWRhc2hlZF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX2ZyYWdcblxuXHR9LFxuXG5cdGRlcHRoOiB7XG5cblx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5tZXJnZSggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF9mcmFnXG5cblx0fSxcblxuXHRub3JtYWw6IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0e1xuXHRcdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubm9ybWFsX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm5vcm1hbF9mcmFnXG5cblx0fSxcblxuXHQvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdC8vXHRDdWJlIG1hcCBzaGFkZXJcblx0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHRjdWJlOiB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0dEN1YmU6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHRGbGlwOiB7IHZhbHVlOiAtIDEgfSxcblx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuY3ViZV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5jdWJlX2ZyYWdcblxuXHR9LFxuXG5cdGVxdWlyZWN0OiB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0dEVxdWlyZWN0OiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZXF1aXJlY3RfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZXF1aXJlY3RfZnJhZ1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VSR0JBOiB7XG5cblx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5tZXJnZSggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0e1xuXHRcdFx0XHRyZWZlcmVuY2VQb3NpdGlvbjogeyB2YWx1ZTogbmV3IFZlY3RvcjMoKSB9LFxuXHRcdFx0XHRuZWFyRGlzdGFuY2U6IHsgdmFsdWU6IDEgfSxcblx0XHRcdFx0ZmFyRGlzdGFuY2U6IHsgdmFsdWU6IDEwMDAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZGlzdGFuY2VSR0JBX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmRpc3RhbmNlUkdCQV9mcmFnXG5cblx0fSxcblxuXHRzaGFkb3c6IHtcblxuXHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdGNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAgKSB9LFxuXHRcdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxuXHRcdFx0fSxcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnNoYWRvd192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5zaGFkb3dfZnJhZ1xuXG5cdH1cblxufTtcblxuU2hhZGVyTGliLnBoeXNpY2FsID0ge1xuXG5cdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLm1lcmdlKCBbXG5cdFx0U2hhZGVyTGliLnN0YW5kYXJkLnVuaWZvcm1zLFxuXHRcdHtcblx0XHRcdGNsZWFyQ29hdDogeyB2YWx1ZTogMCB9LFxuXHRcdFx0Y2xlYXJDb2F0Um91Z2huZXNzOiB7IHZhbHVlOiAwIH1cblx0XHR9XG5cdF0gKSxcblxuXHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF92ZXJ0LFxuXHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX2ZyYWdcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQW5pbWF0aW9uKCkge1xuXG5cdHZhciBjb250ZXh0ID0gbnVsbDtcblx0dmFyIGlzQW5pbWF0aW5nID0gZmFsc2U7XG5cdHZhciBhbmltYXRpb25Mb29wID0gbnVsbDtcblxuXHRmdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKCB0aW1lLCBmcmFtZSApIHtcblxuXHRcdGlmICggaXNBbmltYXRpbmcgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0YW5pbWF0aW9uTG9vcCggdGltZSwgZnJhbWUgKTtcblxuXHRcdGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRzdGFydDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoIGlzQW5pbWF0aW5nID09PSB0cnVlICkgcmV0dXJuO1xuXHRcdFx0aWYgKCBhbmltYXRpb25Mb29wID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0XHRjb250ZXh0LnJlcXVlc3RBbmltYXRpb25GcmFtZSggb25BbmltYXRpb25GcmFtZSApO1xuXG5cdFx0XHRpc0FuaW1hdGluZyA9IHRydWU7XG5cblx0XHR9LFxuXG5cdFx0c3RvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpc0FuaW1hdGluZyA9IGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdHNldEFuaW1hdGlvbkxvb3A6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRcdGFuaW1hdGlvbkxvb3AgPSBjYWxsYmFjaztcblxuXHRcdH0sXG5cblx0XHRzZXRDb250ZXh0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb250ZXh0ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xBdHRyaWJ1dGVzKCBnbCApIHtcblxuXHR2YXIgYnVmZmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gY3JlYXRlQnVmZmVyKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0dmFyIHVzYWdlID0gYXR0cmlidXRlLmR5bmFtaWMgPyBnbC5EWU5BTUlDX0RSQVcgOiBnbC5TVEFUSUNfRFJBVztcblxuXHRcdHZhciBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGJ1ZmZlclR5cGUsIGJ1ZmZlciApO1xuXHRcdGdsLmJ1ZmZlckRhdGEoIGJ1ZmZlclR5cGUsIGFycmF5LCB1c2FnZSApO1xuXG5cdFx0YXR0cmlidXRlLm9uVXBsb2FkQ2FsbGJhY2soKTtcblxuXHRcdHZhciB0eXBlID0gZ2wuRkxPQVQ7XG5cblx0XHRpZiAoIGFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuRkxPQVQ7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xBdHRyaWJ1dGVzOiBVbnN1cHBvcnRlZCBkYXRhIGJ1ZmZlciBmb3JtYXQ6IEZsb2F0NjRBcnJheS4nICk7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuVU5TSUdORURfU0hPUlQ7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDE2QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5TSE9SVDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5VTlNJR05FRF9JTlQ7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDMyQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5JTlQ7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLkJZVEU7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5VTlNJR05FRF9CWVRFO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGJ1ZmZlcjogYnVmZmVyLFxuXHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdGJ5dGVzUGVyRWxlbWVudDogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHR2ZXJzaW9uOiBhdHRyaWJ1dGUudmVyc2lvblxuXHRcdH07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZUJ1ZmZlciggYnVmZmVyLCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0dmFyIHVwZGF0ZVJhbmdlID0gYXR0cmlidXRlLnVwZGF0ZVJhbmdlO1xuXG5cdFx0Z2wuYmluZEJ1ZmZlciggYnVmZmVyVHlwZSwgYnVmZmVyICk7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5keW5hbWljID09PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wuYnVmZmVyRGF0YSggYnVmZmVyVHlwZSwgYXJyYXksIGdsLlNUQVRJQ19EUkFXICk7XG5cblx0XHR9IGVsc2UgaWYgKCB1cGRhdGVSYW5nZS5jb3VudCA9PT0gLSAxICkge1xuXG5cdFx0XHQvLyBOb3QgdXNpbmcgdXBkYXRlIHJhbmdlc1xuXG5cdFx0XHRnbC5idWZmZXJTdWJEYXRhKCBidWZmZXJUeXBlLCAwLCBhcnJheSApO1xuXG5cdFx0fSBlbHNlIGlmICggdXBkYXRlUmFuZ2UuY291bnQgPT09IDAgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTE9iamVjdHMudXBkYXRlQnVmZmVyOiBkeW5hbWljIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSBtYXJrZWQgYXMgbmVlZHNVcGRhdGUgYnV0IHVwZGF0ZVJhbmdlLmNvdW50IGlzIDAsIGVuc3VyZSB5b3UgYXJlIHVzaW5nIHNldCBtZXRob2RzIG9yIHVwZGF0aW5nIG1hbnVhbGx5LicgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGJ1ZmZlclR5cGUsIHVwZGF0ZVJhbmdlLm9mZnNldCAqIGFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULFxuXHRcdFx0XHRhcnJheS5zdWJhcnJheSggdXBkYXRlUmFuZ2Uub2Zmc2V0LCB1cGRhdGVSYW5nZS5vZmZzZXQgKyB1cGRhdGVSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdHVwZGF0ZVJhbmdlLmNvdW50ID0gLSAxOyAvLyByZXNldCByYW5nZVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGdldCggYXR0cmlidXRlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0cmV0dXJuIGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHR2YXIgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHRcdGlmICggZGF0YSApIHtcblxuXHRcdFx0Z2wuZGVsZXRlQnVmZmVyKCBkYXRhLmJ1ZmZlciApO1xuXG5cdFx0XHRidWZmZXJzLmRlbGV0ZSggYXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggYXR0cmlidXRlLCBidWZmZXJUeXBlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0dmFyIGRhdGEgPSBidWZmZXJzLmdldCggYXR0cmlidXRlICk7XG5cblx0XHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YnVmZmVycy5zZXQoIGF0dHJpYnV0ZSwgY3JlYXRlQnVmZmVyKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSApO1xuXG5cdFx0fSBlbHNlIGlmICggZGF0YS52ZXJzaW9uIDwgYXR0cmlidXRlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwZGF0ZUJ1ZmZlciggZGF0YS5idWZmZXIsIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApO1xuXG5cdFx0XHRkYXRhLnZlcnNpb24gPSBhdHRyaWJ1dGUudmVyc2lvbjtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZ2V0LFxuXHRcdHJlbW92ZTogcmVtb3ZlLFxuXHRcdHVwZGF0ZTogdXBkYXRlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG5mdW5jdGlvbiBFdWxlciggeCwgeSwgeiwgb3JkZXIgKSB7XG5cblx0dGhpcy5feCA9IHggfHwgMDtcblx0dGhpcy5feSA9IHkgfHwgMDtcblx0dGhpcy5feiA9IHogfHwgMDtcblx0dGhpcy5fb3JkZXIgPSBvcmRlciB8fCBFdWxlci5EZWZhdWx0T3JkZXI7XG5cbn1cblxuRXVsZXIuUm90YXRpb25PcmRlcnMgPSBbICdYWVonLCAnWVpYJywgJ1pYWScsICdYWlknLCAnWVhaJywgJ1pZWCcgXTtcblxuRXVsZXIuRGVmYXVsdE9yZGVyID0gJ1hZWic7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBFdWxlci5wcm90b3R5cGUsIHtcblxuXHR4OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuX3g7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLl94ID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHk6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5feTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX3kgPSB2YWx1ZTtcblx0XHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0ejoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl96O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRvcmRlcjoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl9vcmRlcjtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMuX29yZGVyID0gdmFsdWU7XG5cdFx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggRXVsZXIucHJvdG90eXBlLCB7XG5cblx0aXNFdWxlcjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgb3JkZXIgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyIHx8IHRoaXMuX29yZGVyO1xuXG5cdFx0dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3osIHRoaXMuX29yZGVyICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0dGhpcy5feCA9IGV1bGVyLl94O1xuXHRcdHRoaXMuX3kgPSBldWxlci5feTtcblx0XHR0aGlzLl96ID0gZXVsZXIuX3o7XG5cdFx0dGhpcy5fb3JkZXIgPSBldWxlci5fb3JkZXI7XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVJvdGF0aW9uTWF0cml4OiBmdW5jdGlvbiAoIG0sIG9yZGVyLCB1cGRhdGUgKSB7XG5cblx0XHR2YXIgY2xhbXAgPSBfTWF0aC5jbGFtcDtcblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHR2YXIgdGUgPSBtLmVsZW1lbnRzO1xuXHRcdHZhciBtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdO1xuXHRcdHZhciBtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdO1xuXHRcdHZhciBtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXTtcblxuXHRcdG9yZGVyID0gb3JkZXIgfHwgdGhpcy5fb3JkZXI7XG5cblx0XHRpZiAoIG9yZGVyID09PSAnWFlaJyApIHtcblxuXHRcdFx0dGhpcy5feSA9IE1hdGguYXNpbiggY2xhbXAoIG0xMywgLSAxLCAxICkgKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggbTEzICkgPCAwLjk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTMzICk7XG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTExICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTIyICk7XG5cdFx0XHRcdHRoaXMuX3ogPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1lYWicgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0yMywgLSAxLCAxICkgKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggbTIzICkgPCAwLjk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCBtMTMsIG0zMyApO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMjIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0xMSApO1xuXHRcdFx0XHR0aGlzLl96ID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWFknICkge1xuXG5cdFx0XHR0aGlzLl94ID0gTWF0aC5hc2luKCBjbGFtcCggbTMyLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMzIgKSA8IDAuOTk5OTkgKSB7XG5cblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIC0gbTMxLCBtMzMgKTtcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMjIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl95ID0gMDtcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWllYJyApIHtcblxuXHRcdFx0dGhpcy5feSA9IE1hdGguYXNpbiggLSBjbGFtcCggbTMxLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMzEgKSA8IDAuOTk5OTkgKSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTMzICk7XG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCBtMjEsIG0xMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0yMiApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1laWCcgKSB7XG5cblx0XHRcdHRoaXMuX3ogPSBNYXRoLmFzaW4oIGNsYW1wKCBtMjEsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0yMSApIDwgMC45OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0yMiApO1xuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0xMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMzMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdYWlknICkge1xuXG5cdFx0XHR0aGlzLl96ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMTIsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0xMiApIDwgMC45OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggbTMyLCBtMjIgKTtcblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTExICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIC0gbTIzLCBtMzMgKTtcblx0XHRcdFx0dGhpcy5feSA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkV1bGVyOiAuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgZ2l2ZW4gdW5zdXBwb3J0ZWQgb3JkZXI6ICcgKyBvcmRlciApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb3JkZXIgPSBvcmRlcjtcblxuXHRcdGlmICggdXBkYXRlICE9PSBmYWxzZSApIHRoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbVF1YXRlcm5pb24oIHEsIG9yZGVyLCB1cGRhdGUgKSB7XG5cblx0XHRcdG1hdHJpeC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tUm90YXRpb25NYXRyaXgoIG1hdHJpeCwgb3JkZXIsIHVwZGF0ZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0c2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICggdiwgb3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIHYueCwgdi55LCB2LnosIG9yZGVyIHx8IHRoaXMuX29yZGVyICk7XG5cblx0fSxcblxuXHRyZW9yZGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBXQVJOSU5HOiB0aGlzIGRpc2NhcmRzIHJldm9sdXRpb24gaW5mb3JtYXRpb24gLWJob3VzdG9uXG5cblx0XHR2YXIgcSA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcmVvcmRlciggbmV3T3JkZXIgKSB7XG5cblx0XHRcdHEuc2V0RnJvbUV1bGVyKCB0aGlzICk7XG5cblx0XHRcdHJldHVybiB0aGlzLnNldEZyb21RdWF0ZXJuaW9uKCBxLCBuZXdPcmRlciApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0cmV0dXJuICggZXVsZXIuX3ggPT09IHRoaXMuX3ggKSAmJiAoIGV1bGVyLl95ID09PSB0aGlzLl95ICkgJiYgKCBldWxlci5feiA9PT0gdGhpcy5feiApICYmICggZXVsZXIuX29yZGVyID09PSB0aGlzLl9vcmRlciApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5feCA9IGFycmF5WyAwIF07XG5cdFx0dGhpcy5feSA9IGFycmF5WyAxIF07XG5cdFx0dGhpcy5feiA9IGFycmF5WyAyIF07XG5cdFx0aWYgKCBhcnJheVsgMyBdICE9PSB1bmRlZmluZWQgKSB0aGlzLl9vcmRlciA9IGFycmF5WyAzIF07XG5cblx0XHR0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX29yZGVyO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0dG9WZWN0b3IzOiBmdW5jdGlvbiAoIG9wdGlvbmFsUmVzdWx0ICkge1xuXG5cdFx0aWYgKCBvcHRpb25hbFJlc3VsdCApIHtcblxuXHRcdFx0cmV0dXJuIG9wdGlvbmFsUmVzdWx0LnNldCggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IzKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRvbkNoYW5nZTogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMub25DaGFuZ2VDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRvbkNoYW5nZUNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMYXllcnMoKSB7XG5cblx0dGhpcy5tYXNrID0gMSB8IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTGF5ZXJzLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrID0gMSA8PCBjaGFubmVsIHwgMDtcblxuXHR9LFxuXG5cdGVuYWJsZTogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrIHw9IDEgPDwgY2hhbm5lbCB8IDA7XG5cblx0fSxcblxuXHR0b2dnbGU6IGZ1bmN0aW9uICggY2hhbm5lbCApIHtcblxuXHRcdHRoaXMubWFzayBePSAxIDw8IGNoYW5uZWwgfCAwO1xuXG5cdH0sXG5cblx0ZGlzYWJsZTogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrICY9IH4gKCAxIDw8IGNoYW5uZWwgfCAwICk7XG5cblx0fSxcblxuXHR0ZXN0OiBmdW5jdGlvbiAoIGxheWVycyApIHtcblxuXHRcdHJldHVybiAoIHRoaXMubWFzayAmIGxheWVycy5tYXNrICkgIT09IDA7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIGVsZXBoYW50YXR3b3JrIC8gd3d3LmVsZXBoYW50YXR3b3JrLmNoXG4gKi9cblxudmFyIG9iamVjdDNESWQgPSAwO1xuXG5mdW5jdGlvbiBPYmplY3QzRCgpIHtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IG9iamVjdDNESWQgKysgfSApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXHR0aGlzLnR5cGUgPSAnT2JqZWN0M0QnO1xuXG5cdHRoaXMucGFyZW50ID0gbnVsbDtcblx0dGhpcy5jaGlsZHJlbiA9IFtdO1xuXG5cdHRoaXMudXAgPSBPYmplY3QzRC5EZWZhdWx0VXAuY2xvbmUoKTtcblxuXHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgcm90YXRpb24gPSBuZXcgRXVsZXIoKTtcblx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMyggMSwgMSwgMSApO1xuXG5cdGZ1bmN0aW9uIG9uUm90YXRpb25DaGFuZ2UoKSB7XG5cblx0XHRxdWF0ZXJuaW9uLnNldEZyb21FdWxlciggcm90YXRpb24sIGZhbHNlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uUXVhdGVybmlvbkNoYW5nZSgpIHtcblxuXHRcdHJvdGF0aW9uLnNldEZyb21RdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uLCB1bmRlZmluZWQsIGZhbHNlICk7XG5cblx0fVxuXG5cdHJvdGF0aW9uLm9uQ2hhbmdlKCBvblJvdGF0aW9uQ2hhbmdlICk7XG5cdHF1YXRlcm5pb24ub25DaGFuZ2UoIG9uUXVhdGVybmlvbkNoYW5nZSApO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cdFx0cG9zaXRpb246IHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogcG9zaXRpb25cblx0XHR9LFxuXHRcdHJvdGF0aW9uOiB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IHJvdGF0aW9uXG5cdFx0fSxcblx0XHRxdWF0ZXJuaW9uOiB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IHF1YXRlcm5pb25cblx0XHR9LFxuXHRcdHNjYWxlOiB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IHNjYWxlXG5cdFx0fSxcblx0XHRtb2RlbFZpZXdNYXRyaXg6IHtcblx0XHRcdHZhbHVlOiBuZXcgTWF0cml4NCgpXG5cdFx0fSxcblx0XHRub3JtYWxNYXRyaXg6IHtcblx0XHRcdHZhbHVlOiBuZXcgTWF0cml4MygpXG5cdFx0fVxuXHR9ICk7XG5cblx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHR0aGlzLm1hdHJpeFdvcmxkID0gbmV3IE1hdHJpeDQoKTtcblxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBPYmplY3QzRC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZTtcblx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cdHRoaXMudmlzaWJsZSA9IHRydWU7XG5cblx0dGhpcy5jYXN0U2hhZG93ID0gZmFsc2U7XG5cdHRoaXMucmVjZWl2ZVNoYWRvdyA9IGZhbHNlO1xuXG5cdHRoaXMuZnJ1c3R1bUN1bGxlZCA9IHRydWU7XG5cdHRoaXMucmVuZGVyT3JkZXIgPSAwO1xuXG5cdHRoaXMudXNlckRhdGEgPSB7fTtcblxufVxuXG5PYmplY3QzRC5EZWZhdWx0VXAgPSBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xuT2JqZWN0M0QuRGVmYXVsdE1hdHJpeEF1dG9VcGRhdGUgPSB0cnVlO1xuXG5PYmplY3QzRC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogT2JqZWN0M0QsXG5cblx0aXNPYmplY3QzRDogdHJ1ZSxcblxuXHRvbkJlZm9yZVJlbmRlcjogZnVuY3Rpb24gKCkge30sXG5cdG9uQWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdGFwcGx5TWF0cml4OiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMubWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeCwgdGhpcy5tYXRyaXggKTtcblxuXHRcdHRoaXMubWF0cml4LmRlY29tcG9zZSggdGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnNjYWxlICk7XG5cblx0fSxcblxuXHRhcHBseVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggcSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21BeGlzQW5nbGU6IGZ1bmN0aW9uICggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyBhc3N1bWVzIGF4aXMgaXMgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21FdWxlcjogZnVuY3Rpb24gKCBldWxlciApIHtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoIGV1bGVyLCB0cnVlICk7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICk7XG5cblx0fSxcblxuXHRzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHQvLyBhc3N1bWVzIHEgaXMgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHEgKTtcblxuXHR9LFxuXG5cdHJvdGF0ZU9uQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIG9iamVjdCBvbiBheGlzIGluIG9iamVjdCBzcGFjZVxuXHRcdC8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHR2YXIgcTEgPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZU9uQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRcdHExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5tdWx0aXBseSggcTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVPbldvcmxkQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIG9iamVjdCBvbiBheGlzIGluIHdvcmxkIHNwYWNlXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblx0XHQvLyBtZXRob2QgYXNzdW1lcyBubyByb3RhdGVkIHBhcmVudFxuXG5cdFx0dmFyIHExID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVPbldvcmxkQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHRcdHExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseSggcTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMyggMSwgMCwgMCApO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJvdGF0ZVgoIGFuZ2xlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoIHYxLCBhbmdsZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cm90YXRlWTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVZKCBhbmdsZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCB2MSwgYW5nbGUgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJvdGF0ZVo6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCAwLCAwLCAxICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWiggYW5nbGUgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyggdjEsIGFuZ2xlICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2xhdGVPbkF4aXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRyYW5zbGF0ZSBvYmplY3QgYnkgZGlzdGFuY2UgYWxvbmcgYXhpcyBpbiBvYmplY3Qgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB0cmFuc2xhdGVPbkF4aXMoIGF4aXMsIGRpc3RhbmNlICkge1xuXG5cdFx0XHR2MS5jb3B5KCBheGlzICkuYXBwbHlRdWF0ZXJuaW9uKCB0aGlzLnF1YXRlcm5pb24gKTtcblxuXHRcdFx0dGhpcy5wb3NpdGlvbi5hZGQoIHYxLm11bHRpcGx5U2NhbGFyKCBkaXN0YW5jZSApICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dHJhbnNsYXRlWDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoIDEsIDAsIDAgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB0cmFuc2xhdGVYKCBkaXN0YW5jZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCB2MSwgZGlzdGFuY2UgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRyYW5zbGF0ZVk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCAwLCAxLCAwICk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdHJhbnNsYXRlWSggZGlzdGFuY2UgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggdjEsIGRpc3RhbmNlICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2xhdGVaOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMyggMCwgMCwgMSApO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHRyYW5zbGF0ZVooIGRpc3RhbmNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoIHYxLCBkaXN0YW5jZSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bG9jYWxUb1dvcmxkOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0fSxcblxuXHR3b3JsZFRvTG9jYWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gd29ybGRUb0xvY2FsKCB2ZWN0b3IgKSB7XG5cblx0XHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtMS5nZXRJbnZlcnNlKCB0aGlzLm1hdHJpeFdvcmxkICkgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGxvb2tBdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gVGhpcyBtZXRob2QgZG9lcyBub3Qgc3VwcG9ydCBvYmplY3RzIHdpdGggcm90YXRlZCBhbmQvb3IgdHJhbnNsYXRlZCBwYXJlbnQocylcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbG9va0F0KCB4LCB5LCB6ICkge1xuXG5cdFx0XHRpZiAoIHguaXNWZWN0b3IzICkge1xuXG5cdFx0XHRcdHZlY3Rvci5jb3B5KCB4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmVjdG9yLnNldCggeCwgeSwgeiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5pc0NhbWVyYSApIHtcblxuXHRcdFx0XHRtMS5sb29rQXQoIHRoaXMucG9zaXRpb24sIHZlY3RvciwgdGhpcy51cCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG0xLmxvb2tBdCggdmVjdG9yLCB0aGlzLnBvc2l0aW9uLCB0aGlzLnVwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggbTEgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGFkZDogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuYWRkKCBhcmd1bWVudHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QgPT09IHRoaXMgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoIFwiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3QgY2FuJ3QgYmUgYWRkZWQgYXMgYSBjaGlsZCBvZiBpdHNlbGYuXCIsIG9iamVjdCApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRpZiAoICggb2JqZWN0ICYmIG9iamVjdC5pc09iamVjdDNEICkgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0LnBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRvYmplY3QucGFyZW50LnJlbW92ZSggb2JqZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0b2JqZWN0LnBhcmVudCA9IHRoaXM7XG5cdFx0XHRvYmplY3QuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnYWRkZWQnIH0gKTtcblxuXHRcdFx0dGhpcy5jaGlsZHJlbi5wdXNoKCBvYmplY3QgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoIFwiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3Qgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk9iamVjdDNELlwiLCBvYmplY3QgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5yZW1vdmUoIGFyZ3VtZW50c1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR2YXIgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoIG9iamVjdCApO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gLSAxICkge1xuXG5cdFx0XHRvYmplY3QucGFyZW50ID0gbnVsbDtcblxuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3JlbW92ZWQnIH0gKTtcblxuXHRcdFx0dGhpcy5jaGlsZHJlbi5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldE9iamVjdEJ5SWQ6IGZ1bmN0aW9uICggaWQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCAnaWQnLCBpZCApO1xuXG5cdH0sXG5cblx0Z2V0T2JqZWN0QnlOYW1lOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCAnbmFtZScsIG5hbWUgKTtcblxuXHR9LFxuXG5cdGdldE9iamVjdEJ5UHJvcGVydHk6IGZ1bmN0aW9uICggbmFtZSwgdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXNbIG5hbWUgXSA9PT0gdmFsdWUgKSByZXR1cm4gdGhpcztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlblsgaSBdO1xuXHRcdFx0dmFyIG9iamVjdCA9IGNoaWxkLmdldE9iamVjdEJ5UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cblx0XHRcdGlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG9iamVjdDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9LFxuXG5cdGdldFdvcmxkUG9zaXRpb246IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFBvc2l0aW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdH0sXG5cblx0Z2V0V29ybGRRdWF0ZXJuaW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBzY2FsZSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0V29ybGRRdWF0ZXJuaW9uKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFF1YXRlcm5pb24oKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIHBvc2l0aW9uLCB0YXJnZXQsIHNjYWxlICk7XG5cblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRnZXRXb3JsZFNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBnZXRXb3JsZFNjYWxlKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFNjYWxlKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgdGFyZ2V0ICk7XG5cblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRnZXRXb3JsZERpcmVjdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldFdvcmxkRGlyZWN0aW9uKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZERpcmVjdGlvbigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5nZXRXb3JsZFF1YXRlcm5pb24oIHF1YXRlcm5pb24gKTtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5zZXQoIDAsIDAsIDEgKS5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24gKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHJheWNhc3Q6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdHRyYXZlcnNlOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnRyYXZlcnNlKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dHJhdmVyc2VWaXNpYmxlOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnRyYXZlcnNlVmlzaWJsZSggY2FsbGJhY2sgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHRyYXZlcnNlQW5jZXN0b3JzOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG5cdFx0aWYgKCBwYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdGNhbGxiYWNrKCBwYXJlbnQgKTtcblxuXHRcdFx0cGFyZW50LnRyYXZlcnNlQW5jZXN0b3JzKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dXBkYXRlTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm1hdHJpeC5jb21wb3NlKCB0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHRoaXMuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlIHx8IGZvcmNlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weSggdGhpcy5tYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRmb3JjZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyB1cGRhdGUgY2hpbGRyZW5cblxuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHQvLyBtZXRhIGlzIGEgc3RyaW5nIHdoZW4gY2FsbGVkIGZyb20gSlNPTi5zdHJpbmdpZnlcblx0XHR2YXIgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHR2YXIgb3V0cHV0ID0ge307XG5cblx0XHQvLyBtZXRhIGlzIGEgaGFzaCB1c2VkIHRvIGNvbGxlY3QgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLlxuXHRcdC8vIG5vdCBwcm92aWRpbmcgaXQgaW1wbGllcyB0aGF0IHRoaXMgaXMgdGhlIHJvb3Qgb2JqZWN0XG5cdFx0Ly8gYmVpbmcgc2VyaWFsaXplZC5cblx0XHRpZiAoIGlzUm9vdE9iamVjdCApIHtcblxuXHRcdFx0Ly8gaW5pdGlhbGl6ZSBtZXRhIG9ialxuXHRcdFx0bWV0YSA9IHtcblx0XHRcdFx0Z2VvbWV0cmllczoge30sXG5cdFx0XHRcdG1hdGVyaWFsczoge30sXG5cdFx0XHRcdHRleHR1cmVzOiB7fSxcblx0XHRcdFx0aW1hZ2VzOiB7fSxcblx0XHRcdFx0c2hhcGVzOiB7fVxuXHRcdFx0fTtcblxuXHRcdFx0b3V0cHV0Lm1ldGFkYXRhID0ge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdPYmplY3QnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdPYmplY3QzRC50b0pTT04nXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc3RhbmRhcmQgT2JqZWN0M0Qgc2VyaWFsaXphdGlvblxuXG5cdFx0dmFyIG9iamVjdCA9IHt9O1xuXG5cdFx0b2JqZWN0LnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0b2JqZWN0LnR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRpZiAoIHRoaXMubmFtZSAhPT0gJycgKSBvYmplY3QubmFtZSA9IHRoaXMubmFtZTtcblx0XHRpZiAoIHRoaXMuY2FzdFNoYWRvdyA9PT0gdHJ1ZSApIG9iamVjdC5jYXN0U2hhZG93ID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMucmVjZWl2ZVNoYWRvdyA9PT0gdHJ1ZSApIG9iamVjdC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMudmlzaWJsZSA9PT0gZmFsc2UgKSBvYmplY3QudmlzaWJsZSA9IGZhbHNlO1xuXHRcdGlmICggdGhpcy5mcnVzdHVtQ3VsbGVkID09PSBmYWxzZSApIG9iamVjdC5mcnVzdHVtQ3VsbGVkID0gZmFsc2U7XG5cdFx0aWYgKCB0aGlzLnJlbmRlck9yZGVyICE9PSAwICkgb2JqZWN0LnJlbmRlck9yZGVyID0gdGhpcy5yZW5kZXJPcmRlcjtcblx0XHRpZiAoIEpTT04uc3RyaW5naWZ5KCB0aGlzLnVzZXJEYXRhICkgIT09ICd7fScgKSBvYmplY3QudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xuXG5cdFx0b2JqZWN0LmxheWVycyA9IHRoaXMubGF5ZXJzLm1hc2s7XG5cdFx0b2JqZWN0Lm1hdHJpeCA9IHRoaXMubWF0cml4LnRvQXJyYXkoKTtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlID09PSBmYWxzZSApIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHQvL1xuXG5cdFx0ZnVuY3Rpb24gc2VyaWFsaXplKCBsaWJyYXJ5LCBlbGVtZW50ICkge1xuXG5cdFx0XHRpZiAoIGxpYnJhcnlbIGVsZW1lbnQudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bGlicmFyeVsgZWxlbWVudC51dWlkIF0gPSBlbGVtZW50LnRvSlNPTiggbWV0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtZW50LnV1aWQ7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b2JqZWN0Lmdlb21ldHJ5ID0gc2VyaWFsaXplKCBtZXRhLmdlb21ldHJpZXMsIHRoaXMuZ2VvbWV0cnkgKTtcblxuXHRcdFx0dmFyIHBhcmFtZXRlcnMgPSB0aGlzLmdlb21ldHJ5LnBhcmFtZXRlcnM7XG5cblx0XHRcdGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICYmIHBhcmFtZXRlcnMuc2hhcGVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIHNoYXBlcyA9IHBhcmFtZXRlcnMuc2hhcGVzO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hdGVyaWFsICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdGhpcy5tYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdHZhciB1dWlkcyA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMubWF0ZXJpYWwubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHV1aWRzLnB1c2goIHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWxbIGkgXSApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHV1aWRzO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRvYmplY3QuY2hpbGRyZW4gPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0b2JqZWN0LmNoaWxkcmVuLnB1c2goIHRoaXMuY2hpbGRyZW5bIGkgXS50b0pTT04oIG1ldGEgKS5vYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdHZhciBnZW9tZXRyaWVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5nZW9tZXRyaWVzICk7XG5cdFx0XHR2YXIgbWF0ZXJpYWxzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5tYXRlcmlhbHMgKTtcblx0XHRcdHZhciB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEudGV4dHVyZXMgKTtcblx0XHRcdHZhciBpbWFnZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmltYWdlcyApO1xuXHRcdFx0dmFyIHNoYXBlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuc2hhcGVzICk7XG5cblx0XHRcdGlmICggZ2VvbWV0cmllcy5sZW5ndGggPiAwICkgb3V0cHV0Lmdlb21ldHJpZXMgPSBnZW9tZXRyaWVzO1xuXHRcdFx0aWYgKCBtYXRlcmlhbHMubGVuZ3RoID4gMCApIG91dHB1dC5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7XG5cdFx0XHRpZiAoIHRleHR1cmVzLmxlbmd0aCA+IDAgKSBvdXRwdXQudGV4dHVyZXMgPSB0ZXh0dXJlcztcblx0XHRcdGlmICggaW1hZ2VzLmxlbmd0aCA+IDAgKSBvdXRwdXQuaW1hZ2VzID0gaW1hZ2VzO1xuXHRcdFx0aWYgKCBzaGFwZXMubGVuZ3RoID4gMCApIG91dHB1dC5zaGFwZXMgPSBzaGFwZXM7XG5cblx0XHR9XG5cblx0XHRvdXRwdXQub2JqZWN0ID0gb2JqZWN0O1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblxuXHRcdC8vIGV4dHJhY3QgZGF0YSBmcm9tIHRoZSBjYWNoZSBoYXNoXG5cdFx0Ly8gcmVtb3ZlIG1ldGFkYXRhIG9uIGVhY2ggaXRlbVxuXHRcdC8vIGFuZCByZXR1cm4gYXMgYXJyYXlcblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcblxuXHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IGNhY2hlWyBrZXkgXTtcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCBkYXRhICk7XG5cblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZXM7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCByZWN1cnNpdmUgKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzLCByZWN1cnNpdmUgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRpZiAoIHJlY3Vyc2l2ZSA9PT0gdW5kZWZpbmVkICkgcmVjdXJzaXZlID0gdHJ1ZTtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0dGhpcy51cC5jb3B5KCBzb3VyY2UudXAgKTtcblxuXHRcdHRoaXMucG9zaXRpb24uY29weSggc291cmNlLnBvc2l0aW9uICk7XG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHNvdXJjZS5xdWF0ZXJuaW9uICk7XG5cdFx0dGhpcy5zY2FsZS5jb3B5KCBzb3VyY2Uuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4LmNvcHkoIHNvdXJjZS5tYXRyaXggKTtcblx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gc291cmNlLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU7XG5cblx0XHR0aGlzLmxheWVycy5tYXNrID0gc291cmNlLmxheWVycy5tYXNrO1xuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXG5cdFx0dGhpcy5jYXN0U2hhZG93ID0gc291cmNlLmNhc3RTaGFkb3c7XG5cdFx0dGhpcy5yZWNlaXZlU2hhZG93ID0gc291cmNlLnJlY2VpdmVTaGFkb3c7XG5cblx0XHR0aGlzLmZydXN0dW1DdWxsZWQgPSBzb3VyY2UuZnJ1c3R1bUN1bGxlZDtcblx0XHR0aGlzLnJlbmRlck9yZGVyID0gc291cmNlLnJlbmRlck9yZGVyO1xuXG5cdFx0dGhpcy51c2VyRGF0YSA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBzb3VyY2UudXNlckRhdGEgKSApO1xuXG5cdFx0aWYgKCByZWN1cnNpdmUgPT09IHRydWUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHNvdXJjZS5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGNoaWxkID0gc291cmNlLmNoaWxkcmVuWyBpIF07XG5cdFx0XHRcdHRoaXMuYWRkKCBjaGlsZC5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4qL1xuXG5mdW5jdGlvbiBDYW1lcmEoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDYW1lcmEnO1xuXG5cdHRoaXMubWF0cml4V29ybGRJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblx0dGhpcy5wcm9qZWN0aW9uTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxufVxuXG5DYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQ2FtZXJhLFxuXG5cdGlzQ2FtZXJhOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UuY29weSggc291cmNlLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBzb3VyY2UucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRXb3JsZERpcmVjdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldFdvcmxkRGlyZWN0aW9uKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ2FtZXJhOiAuZ2V0V29ybGREaXJlY3Rpb24oKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZ2V0V29ybGRRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uICk7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuc2V0KCAwLCAwLCAtIDEgKS5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24gKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkOiBmdW5jdGlvbiAoIGZvcmNlICkge1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIGFyb3NlIC8gaHR0cDovL2dpdGh1Yi5jb20vYXJvc2VcbiAqL1xuXG5mdW5jdGlvbiBPcnRob2dyYXBoaWNDYW1lcmEoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyICkge1xuXG5cdENhbWVyYS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ09ydGhvZ3JhcGhpY0NhbWVyYSc7XG5cblx0dGhpcy56b29tID0gMTtcblx0dGhpcy52aWV3ID0gbnVsbDtcblxuXHR0aGlzLmxlZnQgPSBsZWZ0O1xuXHR0aGlzLnJpZ2h0ID0gcmlnaHQ7XG5cdHRoaXMudG9wID0gdG9wO1xuXHR0aGlzLmJvdHRvbSA9IGJvdHRvbTtcblxuXHR0aGlzLm5lYXIgPSAoIG5lYXIgIT09IHVuZGVmaW5lZCApID8gbmVhciA6IDAuMTtcblx0dGhpcy5mYXIgPSAoIGZhciAhPT0gdW5kZWZpbmVkICkgPyBmYXIgOiAyMDAwO1xuXG5cdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG59XG5cbk9ydGhvZ3JhcGhpY0NhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBDYW1lcmEucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogT3J0aG9ncmFwaGljQ2FtZXJhLFxuXG5cdGlzT3J0aG9ncmFwaGljQ2FtZXJhOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRDYW1lcmEucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMubGVmdCA9IHNvdXJjZS5sZWZ0O1xuXHRcdHRoaXMucmlnaHQgPSBzb3VyY2UucmlnaHQ7XG5cdFx0dGhpcy50b3AgPSBzb3VyY2UudG9wO1xuXHRcdHRoaXMuYm90dG9tID0gc291cmNlLmJvdHRvbTtcblx0XHR0aGlzLm5lYXIgPSBzb3VyY2UubmVhcjtcblx0XHR0aGlzLmZhciA9IHNvdXJjZS5mYXI7XG5cblx0XHR0aGlzLnpvb20gPSBzb3VyY2Uuem9vbTtcblx0XHR0aGlzLnZpZXcgPSBzb3VyY2UudmlldyA9PT0gbnVsbCA/IG51bGwgOiBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnZpZXcgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0Vmlld09mZnNldDogZnVuY3Rpb24gKCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRpZiAoIHRoaXMudmlldyA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52aWV3ID0ge1xuXHRcdFx0XHRlbmFibGVkOiB0cnVlLFxuXHRcdFx0XHRmdWxsV2lkdGg6IDEsXG5cdFx0XHRcdGZ1bGxIZWlnaHQ6IDEsXG5cdFx0XHRcdG9mZnNldFg6IDAsXG5cdFx0XHRcdG9mZnNldFk6IDAsXG5cdFx0XHRcdHdpZHRoOiAxLFxuXHRcdFx0XHRoZWlnaHQ6IDFcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7XG5cdFx0dGhpcy52aWV3LmZ1bGxXaWR0aCA9IGZ1bGxXaWR0aDtcblx0XHR0aGlzLnZpZXcuZnVsbEhlaWdodCA9IGZ1bGxIZWlnaHQ7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFggPSB4O1xuXHRcdHRoaXMudmlldy5vZmZzZXRZID0geTtcblx0XHR0aGlzLnZpZXcud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHRjbGVhclZpZXdPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHR1cGRhdGVQcm9qZWN0aW9uTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZHggPSAoIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQgKSAvICggMiAqIHRoaXMuem9vbSApO1xuXHRcdHZhciBkeSA9ICggdGhpcy50b3AgLSB0aGlzLmJvdHRvbSApIC8gKCAyICogdGhpcy56b29tICk7XG5cdFx0dmFyIGN4ID0gKCB0aGlzLnJpZ2h0ICsgdGhpcy5sZWZ0ICkgLyAyO1xuXHRcdHZhciBjeSA9ICggdGhpcy50b3AgKyB0aGlzLmJvdHRvbSApIC8gMjtcblxuXHRcdHZhciBsZWZ0ID0gY3ggLSBkeDtcblx0XHR2YXIgcmlnaHQgPSBjeCArIGR4O1xuXHRcdHZhciB0b3AgPSBjeSArIGR5O1xuXHRcdHZhciBib3R0b20gPSBjeSAtIGR5O1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgJiYgdGhpcy52aWV3LmVuYWJsZWQgKSB7XG5cblx0XHRcdHZhciB6b29tVyA9IHRoaXMuem9vbSAvICggdGhpcy52aWV3LndpZHRoIC8gdGhpcy52aWV3LmZ1bGxXaWR0aCApO1xuXHRcdFx0dmFyIHpvb21IID0gdGhpcy56b29tIC8gKCB0aGlzLnZpZXcuaGVpZ2h0IC8gdGhpcy52aWV3LmZ1bGxIZWlnaHQgKTtcblx0XHRcdHZhciBzY2FsZVcgPSAoIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQgKSAvIHRoaXMudmlldy53aWR0aDtcblx0XHRcdHZhciBzY2FsZUggPSAoIHRoaXMudG9wIC0gdGhpcy5ib3R0b20gKSAvIHRoaXMudmlldy5oZWlnaHQ7XG5cblx0XHRcdGxlZnQgKz0gc2NhbGVXICogKCB0aGlzLnZpZXcub2Zmc2V0WCAvIHpvb21XICk7XG5cdFx0XHRyaWdodCA9IGxlZnQgKyBzY2FsZVcgKiAoIHRoaXMudmlldy53aWR0aCAvIHpvb21XICk7XG5cdFx0XHR0b3AgLT0gc2NhbGVIICogKCB0aGlzLnZpZXcub2Zmc2V0WSAvIHpvb21IICk7XG5cdFx0XHRib3R0b20gPSB0b3AgLSBzY2FsZUggKiAoIHRoaXMudmlldy5oZWlnaHQgLyB6b29tSCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VPcnRob2dyYXBoaWMoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgdGhpcy5uZWFyLCB0aGlzLmZhciApO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgZGF0YSA9IE9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTtcblx0XHRkYXRhLm9iamVjdC5sZWZ0ID0gdGhpcy5sZWZ0O1xuXHRcdGRhdGEub2JqZWN0LnJpZ2h0ID0gdGhpcy5yaWdodDtcblx0XHRkYXRhLm9iamVjdC50b3AgPSB0aGlzLnRvcDtcblx0XHRkYXRhLm9iamVjdC5ib3R0b20gPSB0aGlzLmJvdHRvbTtcblx0XHRkYXRhLm9iamVjdC5uZWFyID0gdGhpcy5uZWFyO1xuXHRcdGRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyO1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSBkYXRhLm9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMudmlldyApO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gRmFjZTMoIGEsIGIsIGMsIG5vcm1hbCwgY29sb3IsIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0dGhpcy5hID0gYTtcblx0dGhpcy5iID0gYjtcblx0dGhpcy5jID0gYztcblxuXHR0aGlzLm5vcm1hbCA9ICggbm9ybWFsICYmIG5vcm1hbC5pc1ZlY3RvcjMgKSA/IG5vcm1hbCA6IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudmVydGV4Tm9ybWFscyA9IEFycmF5LmlzQXJyYXkoIG5vcm1hbCApID8gbm9ybWFsIDogW107XG5cblx0dGhpcy5jb2xvciA9ICggY29sb3IgJiYgY29sb3IuaXNDb2xvciApID8gY29sb3IgOiBuZXcgQ29sb3IoKTtcblx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBBcnJheS5pc0FycmF5KCBjb2xvciApID8gY29sb3IgOiBbXTtcblxuXHR0aGlzLm1hdGVyaWFsSW5kZXggPSBtYXRlcmlhbEluZGV4ICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbEluZGV4IDogMDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBGYWNlMy5wcm90b3R5cGUsIHtcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmEgPSBzb3VyY2UuYTtcblx0XHR0aGlzLmIgPSBzb3VyY2UuYjtcblx0XHR0aGlzLmMgPSBzb3VyY2UuYztcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIHNvdXJjZS5ub3JtYWwgKTtcblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0dGhpcy5tYXRlcmlhbEluZGV4ID0gc291cmNlLm1hdGVyaWFsSW5kZXg7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gc291cmNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudmVydGV4Tm9ybWFsc1sgaSBdID0gc291cmNlLnZlcnRleE5vcm1hbHNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudmVydGV4Q29sb3JzWyBpIF0gPSBzb3VyY2UudmVydGV4Q29sb3JzWyBpIF0uY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGtpbGUgLyBodHRwOi8va2lsZS5zdHJhdmFnYW56YS5vcmcvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG52YXIgZ2VvbWV0cnlJZCA9IDA7IC8vIEdlb21ldHJ5IHVzZXMgZXZlbiBudW1iZXJzIGFzIElkXG5cbmZ1bmN0aW9uIEdlb21ldHJ5KCkge1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogZ2VvbWV0cnlJZCArPSAyIH0gKTtcblxuXHR0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTtcblxuXHR0aGlzLm5hbWUgPSAnJztcblx0dGhpcy50eXBlID0gJ0dlb21ldHJ5JztcblxuXHR0aGlzLnZlcnRpY2VzID0gW107XG5cdHRoaXMuY29sb3JzID0gW107XG5cdHRoaXMuZmFjZXMgPSBbXTtcblx0dGhpcy5mYWNlVmVydGV4VXZzID0gW1tdXTtcblxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IFtdO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IFtdO1xuXG5cdHRoaXMuc2tpbldlaWdodHMgPSBbXTtcblx0dGhpcy5za2luSW5kaWNlcyA9IFtdO1xuXG5cdHRoaXMubGluZURpc3RhbmNlcyA9IFtdO1xuXG5cdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xuXHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHQvLyB1cGRhdGUgZmxhZ3NcblxuXHR0aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLnV2c05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBmYWxzZTtcblxufVxuXG5HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogR2VvbWV0cnksXG5cblx0aXNHZW9tZXRyeTogdHJ1ZSxcblxuXHRhcHBseU1hdHJpeDogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSB0aGlzLnZlcnRpY2VzWyBpIF07XG5cdFx0XHR2ZXJ0ZXguYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IHRoaXMuZmFjZXNbIGkgXTtcblx0XHRcdGZhY2Uubm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0ZmFjZS52ZXJ0ZXhOb3JtYWxzWyBqIF0uYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHgtYXhpc1xuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVYKCBhbmdsZSApIHtcblxuXHRcdFx0bTEubWFrZVJvdGF0aW9uWCggYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVZOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVZKCBhbmdsZSApIHtcblxuXHRcdFx0bTEubWFrZVJvdGF0aW9uWSggYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRyb3RhdGVaOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHotYXhpc1xuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByb3RhdGVaKCBhbmdsZSApIHtcblxuXHRcdFx0bTEubWFrZVJvdGF0aW9uWiggYW5nbGUgKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRyYW5zbGF0ZSBnZW9tZXRyeVxuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB0cmFuc2xhdGUoIHgsIHksIHogKSB7XG5cblx0XHRcdG0xLm1ha2VUcmFuc2xhdGlvbiggeCwgeSwgeiApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBzY2FsZSBnZW9tZXRyeVxuXG5cdFx0dmFyIG0xID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBzY2FsZSggeCwgeSwgeiApIHtcblxuXHRcdFx0bTEubWFrZVNjYWxlKCB4LCB5LCB6ICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0bG9va0F0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gbG9va0F0KCB2ZWN0b3IgKSB7XG5cblx0XHRcdG9iai5sb29rQXQoIHZlY3RvciApO1xuXG5cdFx0XHRvYmoudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG9iai5tYXRyaXggKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGZyb21CdWZmZXJHZW9tZXRyeTogZnVuY3Rpb24gKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgaW5kaWNlcyA9IGdlb21ldHJ5LmluZGV4ICE9PSBudWxsID8gZ2VvbWV0cnkuaW5kZXguYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cdFx0dmFyIG5vcm1hbHMgPSBhdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIGNvbG9ycyA9IGF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCA/IGF0dHJpYnV0ZXMuY29sb3IuYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIHV2cyA9IGF0dHJpYnV0ZXMudXYgIT09IHVuZGVmaW5lZCA/IGF0dHJpYnV0ZXMudXYuYXJyYXkgOiB1bmRlZmluZWQ7XG5cdFx0dmFyIHV2czIgPSBhdHRyaWJ1dGVzLnV2MiAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy51djIuYXJyYXkgOiB1bmRlZmluZWQ7XG5cblx0XHRpZiAoIHV2czIgIT09IHVuZGVmaW5lZCApIHRoaXMuZmFjZVZlcnRleFV2c1sgMSBdID0gW107XG5cblx0XHR2YXIgdGVtcE5vcm1hbHMgPSBbXTtcblx0XHR2YXIgdGVtcFVWcyA9IFtdO1xuXHRcdHZhciB0ZW1wVVZzMiA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBqID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMywgaiArPSAyICkge1xuXG5cdFx0XHRzY29wZS52ZXJ0aWNlcy5wdXNoKCBuZXcgVmVjdG9yMyggcG9zaXRpb25zWyBpIF0sIHBvc2l0aW9uc1sgaSArIDEgXSwgcG9zaXRpb25zWyBpICsgMiBdICkgKTtcblxuXHRcdFx0aWYgKCBub3JtYWxzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGVtcE5vcm1hbHMucHVzaCggbmV3IFZlY3RvcjMoIG5vcm1hbHNbIGkgXSwgbm9ybWFsc1sgaSArIDEgXSwgbm9ybWFsc1sgaSArIDIgXSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjb2xvcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5jb2xvcnMucHVzaCggbmV3IENvbG9yKCBjb2xvcnNbIGkgXSwgY29sb3JzWyBpICsgMSBdLCBjb2xvcnNbIGkgKyAyIF0gKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdXZzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGVtcFVWcy5wdXNoKCBuZXcgVmVjdG9yMiggdXZzWyBqIF0sIHV2c1sgaiArIDEgXSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1dnMyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGVtcFVWczIucHVzaCggbmV3IFZlY3RvcjIoIHV2czJbIGogXSwgdXZzMlsgaiArIDEgXSApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGFkZEZhY2UoIGEsIGIsIGMsIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gbm9ybWFscyAhPT0gdW5kZWZpbmVkID8gWyB0ZW1wTm9ybWFsc1sgYSBdLmNsb25lKCksIHRlbXBOb3JtYWxzWyBiIF0uY2xvbmUoKSwgdGVtcE5vcm1hbHNbIGMgXS5jbG9uZSgpIF0gOiBbXTtcblx0XHRcdHZhciB2ZXJ0ZXhDb2xvcnMgPSBjb2xvcnMgIT09IHVuZGVmaW5lZCA/IFsgc2NvcGUuY29sb3JzWyBhIF0uY2xvbmUoKSwgc2NvcGUuY29sb3JzWyBiIF0uY2xvbmUoKSwgc2NvcGUuY29sb3JzWyBjIF0uY2xvbmUoKSBdIDogW107XG5cblx0XHRcdHZhciBmYWNlID0gbmV3IEZhY2UzKCBhLCBiLCBjLCB2ZXJ0ZXhOb3JtYWxzLCB2ZXJ0ZXhDb2xvcnMsIG1hdGVyaWFsSW5kZXggKTtcblxuXHRcdFx0c2NvcGUuZmFjZXMucHVzaCggZmFjZSApO1xuXG5cdFx0XHRpZiAoIHV2cyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLmZhY2VWZXJ0ZXhVdnNbIDAgXS5wdXNoKCBbIHRlbXBVVnNbIGEgXS5jbG9uZSgpLCB0ZW1wVVZzWyBiIF0uY2xvbmUoKSwgdGVtcFVWc1sgYyBdLmNsb25lKCkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdXZzMiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLmZhY2VWZXJ0ZXhVdnNbIDEgXS5wdXNoKCBbIHRlbXBVVnMyWyBhIF0uY2xvbmUoKSwgdGVtcFVWczJbIGIgXS5jbG9uZSgpLCB0ZW1wVVZzMlsgYyBdLmNsb25lKCkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0aWYgKCBncm91cHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgZ3JvdXAgPSBncm91cHNbIGkgXTtcblxuXHRcdFx0XHR2YXIgc3RhcnQgPSBncm91cC5zdGFydDtcblx0XHRcdFx0dmFyIGNvdW50ID0gZ3JvdXAuY291bnQ7XG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSBzdGFydCwgamwgPSBzdGFydCArIGNvdW50OyBqIDwgamw7IGogKz0gMyApIHtcblxuXHRcdFx0XHRcdGlmICggaW5kaWNlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRhZGRGYWNlKCBpbmRpY2VzWyBqIF0sIGluZGljZXNbIGogKyAxIF0sIGluZGljZXNbIGogKyAyIF0sIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGFkZEZhY2UoIGosIGogKyAxLCBqICsgMiwgZ3JvdXAubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBpbmRpY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdGFkZEZhY2UoIGluZGljZXNbIGkgXSwgaW5kaWNlc1sgaSArIDEgXSwgaW5kaWNlc1sgaSArIDIgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBwb3NpdGlvbnMubGVuZ3RoIC8gMzsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0YWRkRmFjZSggaSwgaSArIDEsIGkgKyAyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2VudGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2Zmc2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjZW50ZXIoKSB7XG5cblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3guZ2V0Q2VudGVyKCBvZmZzZXQgKS5uZWdhdGUoKTtcblxuXHRcdFx0dGhpcy50cmFuc2xhdGUoIG9mZnNldC54LCBvZmZzZXQueSwgb2Zmc2V0LnogKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHR2YXIgY2VudGVyID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7XG5cdFx0dmFyIHJhZGl1cyA9IHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzO1xuXG5cdFx0dmFyIHMgPSByYWRpdXMgPT09IDAgPyAxIDogMS4wIC8gcmFkaXVzO1xuXG5cdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0bWF0cml4LnNldChcblx0XHRcdHMsIDAsIDAsIC0gcyAqIGNlbnRlci54LFxuXHRcdFx0MCwgcywgMCwgLSBzICogY2VudGVyLnksXG5cdFx0XHQwLCAwLCBzLCAtIHMgKiBjZW50ZXIueixcblx0XHRcdDAsIDAsIDAsIDFcblx0XHQpO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeCggbWF0cml4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbXB1dGVGYWNlTm9ybWFsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Zm9yICggdmFyIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHR2YXIgdkEgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmEgXTtcblx0XHRcdHZhciB2QiA9IHRoaXMudmVydGljZXNbIGZhY2UuYiBdO1xuXHRcdFx0dmFyIHZDID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5jIF07XG5cblx0XHRcdGNiLnN1YlZlY3RvcnMoIHZDLCB2QiApO1xuXHRcdFx0YWIuc3ViVmVjdG9ycyggdkEsIHZCICk7XG5cdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0Y2Iubm9ybWFsaXplKCk7XG5cblx0XHRcdGZhY2Uubm9ybWFsLmNvcHkoIGNiICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjb21wdXRlVmVydGV4Tm9ybWFsczogZnVuY3Rpb24gKCBhcmVhV2VpZ2h0ZWQgKSB7XG5cblx0XHRpZiAoIGFyZWFXZWlnaHRlZCA9PT0gdW5kZWZpbmVkICkgYXJlYVdlaWdodGVkID0gdHJ1ZTtcblxuXHRcdHZhciB2LCB2bCwgZiwgZmwsIGZhY2UsIHZlcnRpY2VzO1xuXG5cdFx0dmVydGljZXMgPSBuZXcgQXJyYXkoIHRoaXMudmVydGljZXMubGVuZ3RoICk7XG5cblx0XHRmb3IgKCB2ID0gMCwgdmwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgdiA8IHZsOyB2ICsrICkge1xuXG5cdFx0XHR2ZXJ0aWNlc1sgdiBdID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdGlmICggYXJlYVdlaWdodGVkICkge1xuXG5cdFx0XHQvLyB2ZXJ0ZXggbm9ybWFscyB3ZWlnaHRlZCBieSB0cmlhbmdsZSBhcmVhc1xuXHRcdFx0Ly8gaHR0cDovL3d3dy5pcXVpbGV6bGVzLm9yZy93d3cvYXJ0aWNsZXMvbm9ybWFscy9ub3JtYWxzLmh0bVxuXG5cdFx0XHR2YXIgdkEsIHZCLCB2Qztcblx0XHRcdHZhciBjYiA9IG5ldyBWZWN0b3IzKCksIGFiID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHRcdHZBID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5hIF07XG5cdFx0XHRcdHZCID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5iIF07XG5cdFx0XHRcdHZDID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5jIF07XG5cblx0XHRcdFx0Y2Iuc3ViVmVjdG9ycyggdkMsIHZCICk7XG5cdFx0XHRcdGFiLnN1YlZlY3RvcnMoIHZBLCB2QiApO1xuXHRcdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5hIF0uYWRkKCBjYiApO1xuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5iIF0uYWRkKCBjYiApO1xuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5jIF0uYWRkKCBjYiApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuXG5cdFx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdFx0dmVydGljZXNbIGZhY2UuYSBdLmFkZCggZmFjZS5ub3JtYWwgKTtcblx0XHRcdFx0dmVydGljZXNbIGZhY2UuYiBdLmFkZCggZmFjZS5ub3JtYWwgKTtcblx0XHRcdFx0dmVydGljZXNbIGZhY2UuYyBdLmFkZCggZmFjZS5ub3JtYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggdiA9IDAsIHZsID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IHYgPCB2bDsgdiArKyApIHtcblxuXHRcdFx0dmVydGljZXNbIHYgXS5ub3JtYWxpemUoKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRpZiAoIHZlcnRleE5vcm1hbHMubGVuZ3RoID09PSAzICkge1xuXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDAgXS5jb3B5KCB2ZXJ0aWNlc1sgZmFjZS5hIF0gKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMSBdLmNvcHkoIHZlcnRpY2VzWyBmYWNlLmIgXSApO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAyIF0uY29weSggdmVydGljZXNbIGZhY2UuYyBdICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMCBdID0gdmVydGljZXNbIGZhY2UuYSBdLmNsb25lKCk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDEgXSA9IHZlcnRpY2VzWyBmYWNlLmIgXS5jbG9uZSgpO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAyIF0gPSB2ZXJ0aWNlc1sgZmFjZS5jIF0uY2xvbmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmZhY2VzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y29tcHV0ZUZsYXRWZXJ0ZXhOb3JtYWxzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZiwgZmwsIGZhY2U7XG5cblx0XHR0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuXG5cdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0dmFyIHZlcnRleE5vcm1hbHMgPSBmYWNlLnZlcnRleE5vcm1hbHM7XG5cblx0XHRcdGlmICggdmVydGV4Tm9ybWFscy5sZW5ndGggPT09IDMgKSB7XG5cblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMCBdLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDEgXS5jb3B5KCBmYWNlLm5vcm1hbCApO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAyIF0uY29weSggZmFjZS5ub3JtYWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAwIF0gPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAxIF0gPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAyIF0gPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZmFjZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjb21wdXRlTW9ycGhOb3JtYWxzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaSwgaWwsIGYsIGZsLCBmYWNlO1xuXG5cdFx0Ly8gc2F2ZSBvcmlnaW5hbCBub3JtYWxzXG5cdFx0Ly8gLSBjcmVhdGUgdGVtcCB2YXJpYWJsZXMgb24gZmlyc3QgYWNjZXNzXG5cdFx0Ly8gICBvdGhlcndpc2UganVzdCBjb3B5IChmb3IgZmFzdGVyIHJlcGVhdGVkIGNhbGxzKVxuXG5cdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0aWYgKCAhIGZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWwgKSB7XG5cblx0XHRcdFx0ZmFjZS5fX29yaWdpbmFsRmFjZU5vcm1hbCA9IGZhY2Uubm9ybWFsLmNsb25lKCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZmFjZS5fX29yaWdpbmFsRmFjZU5vcm1hbC5jb3B5KCBmYWNlLm5vcm1hbCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggISBmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzICkgZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFscyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCAhIGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbIGkgXSApIHtcblxuXHRcdFx0XHRcdGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbIGkgXSA9IGZhY2UudmVydGV4Tm9ybWFsc1sgaSBdLmNsb25lKCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbIGkgXS5jb3B5KCBmYWNlLnZlcnRleE5vcm1hbHNbIGkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gdXNlIHRlbXAgZ2VvbWV0cnkgdG8gY29tcHV0ZSBmYWNlIGFuZCB2ZXJ0ZXggbm9ybWFscyBmb3IgZWFjaCBtb3JwaFxuXG5cdFx0dmFyIHRtcEdlbyA9IG5ldyBHZW9tZXRyeSgpO1xuXHRcdHRtcEdlby5mYWNlcyA9IHRoaXMuZmFjZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLm1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Ly8gY3JlYXRlIG9uIGZpcnN0IGFjY2Vzc1xuXG5cdFx0XHRpZiAoICEgdGhpcy5tb3JwaE5vcm1hbHNbIGkgXSApIHtcblxuXHRcdFx0XHR0aGlzLm1vcnBoTm9ybWFsc1sgaSBdID0ge307XG5cdFx0XHRcdHRoaXMubW9ycGhOb3JtYWxzWyBpIF0uZmFjZU5vcm1hbHMgPSBbXTtcblx0XHRcdFx0dGhpcy5tb3JwaE5vcm1hbHNbIGkgXS52ZXJ0ZXhOb3JtYWxzID0gW107XG5cblx0XHRcdFx0dmFyIGRzdE5vcm1hbHNGYWNlID0gdGhpcy5tb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscztcblx0XHRcdFx0dmFyIGRzdE5vcm1hbHNWZXJ0ZXggPSB0aGlzLm1vcnBoTm9ybWFsc1sgaSBdLnZlcnRleE5vcm1hbHM7XG5cblx0XHRcdFx0dmFyIGZhY2VOb3JtYWwsIHZlcnRleE5vcm1hbHM7XG5cblx0XHRcdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0XHRcdGZhY2VOb3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0XHRcdHZlcnRleE5vcm1hbHMgPSB7IGE6IG5ldyBWZWN0b3IzKCksIGI6IG5ldyBWZWN0b3IzKCksIGM6IG5ldyBWZWN0b3IzKCkgfTtcblxuXHRcdFx0XHRcdGRzdE5vcm1hbHNGYWNlLnB1c2goIGZhY2VOb3JtYWwgKTtcblx0XHRcdFx0XHRkc3ROb3JtYWxzVmVydGV4LnB1c2goIHZlcnRleE5vcm1hbHMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG1vcnBoTm9ybWFscyA9IHRoaXMubW9ycGhOb3JtYWxzWyBpIF07XG5cblx0XHRcdC8vIHNldCB2ZXJ0aWNlcyB0byBtb3JwaCB0YXJnZXRcblxuXHRcdFx0dG1wR2VvLnZlcnRpY2VzID0gdGhpcy5tb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlcztcblxuXHRcdFx0Ly8gY29tcHV0ZSBtb3JwaCBub3JtYWxzXG5cblx0XHRcdHRtcEdlby5jb21wdXRlRmFjZU5vcm1hbHMoKTtcblx0XHRcdHRtcEdlby5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuXG5cdFx0XHQvLyBzdG9yZSBtb3JwaCBub3JtYWxzXG5cblx0XHRcdHZhciBmYWNlTm9ybWFsLCB2ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdFx0ZmFjZU5vcm1hbCA9IG1vcnBoTm9ybWFscy5mYWNlTm9ybWFsc1sgZiBdO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzID0gbW9ycGhOb3JtYWxzLnZlcnRleE5vcm1hbHNbIGYgXTtcblxuXHRcdFx0XHRmYWNlTm9ybWFsLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cblx0XHRcdFx0dmVydGV4Tm9ybWFscy5hLmNvcHkoIGZhY2UudmVydGV4Tm9ybWFsc1sgMCBdICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHMuYi5jb3B5KCBmYWNlLnZlcnRleE5vcm1hbHNbIDEgXSApO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzLmMuY29weSggZmFjZS52ZXJ0ZXhOb3JtYWxzWyAyIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gcmVzdG9yZSBvcmlnaW5hbCBub3JtYWxzXG5cblx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHRmYWNlLm5vcm1hbCA9IGZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWw7XG5cdFx0XHRmYWNlLnZlcnRleE5vcm1hbHMgPSBmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y29tcHV0ZUJvdW5kaW5nQm94OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ib3VuZGluZ0JveC5zZXRGcm9tUG9pbnRzKCB0aGlzLnZlcnRpY2VzICk7XG5cblx0fSxcblxuXHRjb21wdXRlQm91bmRpbmdTcGhlcmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUuc2V0RnJvbVBvaW50cyggdGhpcy52ZXJ0aWNlcyApO1xuXG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uICggZ2VvbWV0cnksIG1hdHJpeCwgbWF0ZXJpYWxJbmRleE9mZnNldCApIHtcblxuXHRcdGlmICggISAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5HZW9tZXRyeS4nLCBnZW9tZXRyeSApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG5vcm1hbE1hdHJpeCxcblx0XHRcdHZlcnRleE9mZnNldCA9IHRoaXMudmVydGljZXMubGVuZ3RoLFxuXHRcdFx0dmVydGljZXMxID0gdGhpcy52ZXJ0aWNlcyxcblx0XHRcdHZlcnRpY2VzMiA9IGdlb21ldHJ5LnZlcnRpY2VzLFxuXHRcdFx0ZmFjZXMxID0gdGhpcy5mYWNlcyxcblx0XHRcdGZhY2VzMiA9IGdlb21ldHJ5LmZhY2VzLFxuXHRcdFx0dXZzMSA9IHRoaXMuZmFjZVZlcnRleFV2c1sgMCBdLFxuXHRcdFx0dXZzMiA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIDAgXSxcblx0XHRcdGNvbG9yczEgPSB0aGlzLmNvbG9ycyxcblx0XHRcdGNvbG9yczIgPSBnZW9tZXRyeS5jb2xvcnM7XG5cblx0XHRpZiAoIG1hdGVyaWFsSW5kZXhPZmZzZXQgPT09IHVuZGVmaW5lZCApIG1hdGVyaWFsSW5kZXhPZmZzZXQgPSAwO1xuXG5cdFx0aWYgKCBtYXRyaXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdmVydGljZXNcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB2ZXJ0aWNlczIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSB2ZXJ0aWNlczJbIGkgXTtcblxuXHRcdFx0dmFyIHZlcnRleENvcHkgPSB2ZXJ0ZXguY2xvbmUoKTtcblxuXHRcdFx0aWYgKCBtYXRyaXggIT09IHVuZGVmaW5lZCApIHZlcnRleENvcHkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdFx0dmVydGljZXMxLnB1c2goIHZlcnRleENvcHkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbG9yc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNvbG9yczIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbG9yczEucHVzaCggY29sb3JzMlsgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGZhY2VzXG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBmYWNlczIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXMyWyBpIF0sIGZhY2VDb3B5LCBub3JtYWwsIGNvbG9yLFxuXHRcdFx0XHRmYWNlVmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFscyxcblx0XHRcdFx0ZmFjZVZlcnRleENvbG9ycyA9IGZhY2UudmVydGV4Q29sb3JzO1xuXG5cdFx0XHRmYWNlQ29weSA9IG5ldyBGYWNlMyggZmFjZS5hICsgdmVydGV4T2Zmc2V0LCBmYWNlLmIgKyB2ZXJ0ZXhPZmZzZXQsIGZhY2UuYyArIHZlcnRleE9mZnNldCApO1xuXHRcdFx0ZmFjZUNvcHkubm9ybWFsLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cblx0XHRcdGlmICggbm9ybWFsTWF0cml4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZmFjZUNvcHkubm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IGZhY2VWZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdG5vcm1hbCA9IGZhY2VWZXJ0ZXhOb3JtYWxzWyBqIF0uY2xvbmUoKTtcblxuXHRcdFx0XHRpZiAoIG5vcm1hbE1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0bm9ybWFsLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZhY2VDb3B5LnZlcnRleE5vcm1hbHMucHVzaCggbm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZmFjZUNvcHkuY29sb3IuY29weSggZmFjZS5jb2xvciApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZmFjZVZlcnRleENvbG9ycy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRjb2xvciA9IGZhY2VWZXJ0ZXhDb2xvcnNbIGogXTtcblx0XHRcdFx0ZmFjZUNvcHkudmVydGV4Q29sb3JzLnB1c2goIGNvbG9yLmNsb25lKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmYWNlQ29weS5tYXRlcmlhbEluZGV4ID0gZmFjZS5tYXRlcmlhbEluZGV4ICsgbWF0ZXJpYWxJbmRleE9mZnNldDtcblxuXHRcdFx0ZmFjZXMxLnB1c2goIGZhY2VDb3B5ICk7XG5cblx0XHR9XG5cblx0XHQvLyB1dnNcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHV2czIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB1diA9IHV2czJbIGkgXSwgdXZDb3B5ID0gW107XG5cblx0XHRcdGlmICggdXYgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gdXYubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0dXZDb3B5LnB1c2goIHV2WyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHV2czEucHVzaCggdXZDb3B5ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRtZXJnZU1lc2g6IGZ1bmN0aW9uICggbWVzaCApIHtcblxuXHRcdGlmICggISAoIG1lc2ggJiYgbWVzaC5pc01lc2ggKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5Lm1lcmdlTWVzaCgpOiBtZXNoIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5NZXNoLicsIG1lc2ggKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggbWVzaC5tYXRyaXhBdXRvVXBkYXRlICkgbWVzaC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdHRoaXMubWVyZ2UoIG1lc2guZ2VvbWV0cnksIG1lc2gubWF0cml4ICk7XG5cblx0fSxcblxuXHQvKlxuXHQgKiBDaGVja3MgZm9yIGR1cGxpY2F0ZSB2ZXJ0aWNlcyB3aXRoIGhhc2htYXAuXG5cdCAqIER1cGxpY2F0ZWQgdmVydGljZXMgYXJlIHJlbW92ZWRcblx0ICogYW5kIGZhY2VzJyB2ZXJ0aWNlcyBhcmUgdXBkYXRlZC5cblx0ICovXG5cblx0bWVyZ2VWZXJ0aWNlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZlcnRpY2VzTWFwID0ge307IC8vIEhhc2htYXAgZm9yIGxvb2tpbmcgdXAgdmVydGljZXMgYnkgcG9zaXRpb24gY29vcmRpbmF0ZXMgKGFuZCBtYWtpbmcgc3VyZSB0aGV5IGFyZSB1bmlxdWUpXG5cdFx0dmFyIHVuaXF1ZSA9IFtdLCBjaGFuZ2VzID0gW107XG5cblx0XHR2YXIgdiwga2V5O1xuXHRcdHZhciBwcmVjaXNpb25Qb2ludHMgPSA0OyAvLyBudW1iZXIgb2YgZGVjaW1hbCBwb2ludHMsIGUuZy4gNCBmb3IgZXBzaWxvbiBvZiAwLjAwMDFcblx0XHR2YXIgcHJlY2lzaW9uID0gTWF0aC5wb3coIDEwLCBwcmVjaXNpb25Qb2ludHMgKTtcblx0XHR2YXIgaSwgaWwsIGZhY2U7XG5cdFx0dmFyIGluZGljZXMsIGosIGpsO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0diA9IHRoaXMudmVydGljZXNbIGkgXTtcblx0XHRcdGtleSA9IE1hdGgucm91bmQoIHYueCAqIHByZWNpc2lvbiApICsgJ18nICsgTWF0aC5yb3VuZCggdi55ICogcHJlY2lzaW9uICkgKyAnXycgKyBNYXRoLnJvdW5kKCB2LnogKiBwcmVjaXNpb24gKTtcblxuXHRcdFx0aWYgKCB2ZXJ0aWNlc01hcFsga2V5IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR2ZXJ0aWNlc01hcFsga2V5IF0gPSBpO1xuXHRcdFx0XHR1bmlxdWUucHVzaCggdGhpcy52ZXJ0aWNlc1sgaSBdICk7XG5cdFx0XHRcdGNoYW5nZXNbIGkgXSA9IHVuaXF1ZS5sZW5ndGggLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ0R1cGxpY2F0ZSB2ZXJ0ZXggZm91bmQuICcsIGksICcgY291bGQgYmUgdXNpbmcgJywgdmVydGljZXNNYXBba2V5XSk7XG5cdFx0XHRcdGNoYW5nZXNbIGkgXSA9IGNoYW5nZXNbIHZlcnRpY2VzTWFwWyBrZXkgXSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblxuXHRcdC8vIGlmIGZhY2VzIGFyZSBjb21wbGV0ZWx5IGRlZ2VuZXJhdGUgYWZ0ZXIgbWVyZ2luZyB2ZXJ0aWNlcywgd2Vcblx0XHQvLyBoYXZlIHRvIHJlbW92ZSB0aGVtIGZyb20gdGhlIGdlb21ldHJ5LlxuXHRcdHZhciBmYWNlSW5kaWNlc1RvUmVtb3ZlID0gW107XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgaSBdO1xuXG5cdFx0XHRmYWNlLmEgPSBjaGFuZ2VzWyBmYWNlLmEgXTtcblx0XHRcdGZhY2UuYiA9IGNoYW5nZXNbIGZhY2UuYiBdO1xuXHRcdFx0ZmFjZS5jID0gY2hhbmdlc1sgZmFjZS5jIF07XG5cblx0XHRcdGluZGljZXMgPSBbIGZhY2UuYSwgZmFjZS5iLCBmYWNlLmMgXTtcblxuXHRcdFx0Ly8gaWYgYW55IGR1cGxpY2F0ZSB2ZXJ0aWNlcyBhcmUgZm91bmQgaW4gYSBGYWNlM1xuXHRcdFx0Ly8gd2UgaGF2ZSB0byByZW1vdmUgdGhlIGZhY2UgYXMgbm90aGluZyBjYW4gYmUgc2F2ZWRcblx0XHRcdGZvciAoIHZhciBuID0gMDsgbiA8IDM7IG4gKysgKSB7XG5cblx0XHRcdFx0aWYgKCBpbmRpY2VzWyBuIF0gPT09IGluZGljZXNbICggbiArIDEgKSAlIDMgXSApIHtcblxuXHRcdFx0XHRcdGZhY2VJbmRpY2VzVG9SZW1vdmUucHVzaCggaSApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggaSA9IGZhY2VJbmRpY2VzVG9SZW1vdmUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC0tICkge1xuXG5cdFx0XHR2YXIgaWR4ID0gZmFjZUluZGljZXNUb1JlbW92ZVsgaSBdO1xuXG5cdFx0XHR0aGlzLmZhY2VzLnNwbGljZSggaWR4LCAxICk7XG5cblx0XHRcdGZvciAoIGogPSAwLCBqbCA9IHRoaXMuZmFjZVZlcnRleFV2cy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR0aGlzLmZhY2VWZXJ0ZXhVdnNbIGogXS5zcGxpY2UoIGlkeCwgMSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBVc2UgdW5pcXVlIHNldCBvZiB2ZXJ0aWNlc1xuXG5cdFx0dmFyIGRpZmYgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aCAtIHVuaXF1ZS5sZW5ndGg7XG5cdFx0dGhpcy52ZXJ0aWNlcyA9IHVuaXF1ZTtcblx0XHRyZXR1cm4gZGlmZjtcblxuXHR9LFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy52ZXJ0aWNlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBwb2ludCA9IHBvaW50c1sgaSBdO1xuXHRcdFx0dGhpcy52ZXJ0aWNlcy5wdXNoKCBuZXcgVmVjdG9yMyggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c29ydEZhY2VzQnlNYXRlcmlhbEluZGV4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZmFjZXMgPSB0aGlzLmZhY2VzO1xuXHRcdHZhciBsZW5ndGggPSBmYWNlcy5sZW5ndGg7XG5cblx0XHQvLyB0YWcgZmFjZXNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0ZmFjZXNbIGkgXS5faWQgPSBpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc29ydCBmYWNlc1xuXG5cdFx0ZnVuY3Rpb24gbWF0ZXJpYWxJbmRleFNvcnQoIGEsIGIgKSB7XG5cblx0XHRcdHJldHVybiBhLm1hdGVyaWFsSW5kZXggLSBiLm1hdGVyaWFsSW5kZXg7XG5cblx0XHR9XG5cblx0XHRmYWNlcy5zb3J0KCBtYXRlcmlhbEluZGV4U29ydCApO1xuXG5cdFx0Ly8gc29ydCB1dnNcblxuXHRcdHZhciB1dnMxID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF07XG5cdFx0dmFyIHV2czIgPSB0aGlzLmZhY2VWZXJ0ZXhVdnNbIDEgXTtcblxuXHRcdHZhciBuZXdVdnMxLCBuZXdVdnMyO1xuXG5cdFx0aWYgKCB1dnMxICYmIHV2czEubGVuZ3RoID09PSBsZW5ndGggKSBuZXdVdnMxID0gW107XG5cdFx0aWYgKCB1dnMyICYmIHV2czIubGVuZ3RoID09PSBsZW5ndGggKSBuZXdVdnMyID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBpZCA9IGZhY2VzWyBpIF0uX2lkO1xuXG5cdFx0XHRpZiAoIG5ld1V2czEgKSBuZXdVdnMxLnB1c2goIHV2czFbIGlkIF0gKTtcblx0XHRcdGlmICggbmV3VXZzMiApIG5ld1V2czIucHVzaCggdXZzMlsgaWQgXSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBuZXdVdnMxICkgdGhpcy5mYWNlVmVydGV4VXZzWyAwIF0gPSBuZXdVdnMxO1xuXHRcdGlmICggbmV3VXZzMiApIHRoaXMuZmFjZVZlcnRleFV2c1sgMSBdID0gbmV3VXZzMjtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRtZXRhZGF0YToge1xuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXG5cdFx0XHRcdHR5cGU6ICdHZW9tZXRyeScsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ0dlb21ldHJ5LnRvSlNPTidcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gc3RhbmRhcmQgR2VvbWV0cnkgc2VyaWFsaXphdGlvblxuXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcblx0XHRpZiAoIHRoaXMubmFtZSAhPT0gJycgKSBkYXRhLm5hbWUgPSB0aGlzLm5hbWU7XG5cblx0XHRpZiAoIHRoaXMucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcblxuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICkge1xuXG5cdFx0XHRcdGlmICggcGFyYW1ldGVyc1sga2V5IF0gIT09IHVuZGVmaW5lZCApIGRhdGFbIGtleSBdID0gcGFyYW1ldGVyc1sga2V5IF07XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cblx0XHR9XG5cblx0XHR2YXIgdmVydGljZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMudmVydGljZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdmVydGV4ID0gdGhpcy52ZXJ0aWNlc1sgaSBdO1xuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGZhY2VzID0gW107XG5cdFx0dmFyIG5vcm1hbHMgPSBbXTtcblx0XHR2YXIgbm9ybWFsc0hhc2ggPSB7fTtcblx0XHR2YXIgY29sb3JzID0gW107XG5cdFx0dmFyIGNvbG9yc0hhc2ggPSB7fTtcblx0XHR2YXIgdXZzID0gW107XG5cdFx0dmFyIHV2c0hhc2ggPSB7fTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuZmFjZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IHRoaXMuZmFjZXNbIGkgXTtcblxuXHRcdFx0dmFyIGhhc01hdGVyaWFsID0gdHJ1ZTtcblx0XHRcdHZhciBoYXNGYWNlVXYgPSBmYWxzZTsgLy8gZGVwcmVjYXRlZFxuXHRcdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhVdiA9IHRoaXMuZmFjZVZlcnRleFV2c1sgMCBdWyBpIF0gIT09IHVuZGVmaW5lZDtcblx0XHRcdHZhciBoYXNGYWNlTm9ybWFsID0gZmFjZS5ub3JtYWwubGVuZ3RoKCkgPiAwO1xuXHRcdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhOb3JtYWwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoID4gMDtcblx0XHRcdHZhciBoYXNGYWNlQ29sb3IgPSBmYWNlLmNvbG9yLnIgIT09IDEgfHwgZmFjZS5jb2xvci5nICE9PSAxIHx8IGZhY2UuY29sb3IuYiAhPT0gMTtcblx0XHRcdHZhciBoYXNGYWNlVmVydGV4Q29sb3IgPSBmYWNlLnZlcnRleENvbG9ycy5sZW5ndGggPiAwO1xuXG5cdFx0XHR2YXIgZmFjZVR5cGUgPSAwO1xuXG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDAsIDAgKTsgLy8gaXNRdWFkXG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDEsIGhhc01hdGVyaWFsICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDIsIGhhc0ZhY2VVdiApO1xuXHRcdFx0ZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCAzLCBoYXNGYWNlVmVydGV4VXYgKTtcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgNCwgaGFzRmFjZU5vcm1hbCApO1xuXHRcdFx0ZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCA1LCBoYXNGYWNlVmVydGV4Tm9ybWFsICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDYsIGhhc0ZhY2VDb2xvciApO1xuXHRcdFx0ZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCA3LCBoYXNGYWNlVmVydGV4Q29sb3IgKTtcblxuXHRcdFx0ZmFjZXMucHVzaCggZmFjZVR5cGUgKTtcblx0XHRcdGZhY2VzLnB1c2goIGZhY2UuYSwgZmFjZS5iLCBmYWNlLmMgKTtcblx0XHRcdGZhY2VzLnB1c2goIGZhY2UubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhVdiApIHtcblxuXHRcdFx0XHR2YXIgZmFjZVZlcnRleFV2cyA9IHRoaXMuZmFjZVZlcnRleFV2c1sgMCBdWyBpIF07XG5cblx0XHRcdFx0ZmFjZXMucHVzaChcblx0XHRcdFx0XHRnZXRVdkluZGV4KCBmYWNlVmVydGV4VXZzWyAwIF0gKSxcblx0XHRcdFx0XHRnZXRVdkluZGV4KCBmYWNlVmVydGV4VXZzWyAxIF0gKSxcblx0XHRcdFx0XHRnZXRVdkluZGV4KCBmYWNlVmVydGV4VXZzWyAyIF0gKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzRmFjZU5vcm1hbCApIHtcblxuXHRcdFx0XHRmYWNlcy5wdXNoKCBnZXROb3JtYWxJbmRleCggZmFjZS5ub3JtYWwgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzRmFjZVZlcnRleE5vcm1hbCApIHtcblxuXHRcdFx0XHR2YXIgdmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFscztcblxuXHRcdFx0XHRmYWNlcy5wdXNoKFxuXHRcdFx0XHRcdGdldE5vcm1hbEluZGV4KCB2ZXJ0ZXhOb3JtYWxzWyAwIF0gKSxcblx0XHRcdFx0XHRnZXROb3JtYWxJbmRleCggdmVydGV4Tm9ybWFsc1sgMSBdICksXG5cdFx0XHRcdFx0Z2V0Tm9ybWFsSW5kZXgoIHZlcnRleE5vcm1hbHNbIDIgXSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlQ29sb3IgKSB7XG5cblx0XHRcdFx0ZmFjZXMucHVzaCggZ2V0Q29sb3JJbmRleCggZmFjZS5jb2xvciApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4Q29sb3IgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRleENvbG9ycyA9IGZhY2UudmVydGV4Q29sb3JzO1xuXG5cdFx0XHRcdGZhY2VzLnB1c2goXG5cdFx0XHRcdFx0Z2V0Q29sb3JJbmRleCggdmVydGV4Q29sb3JzWyAwIF0gKSxcblx0XHRcdFx0XHRnZXRDb2xvckluZGV4KCB2ZXJ0ZXhDb2xvcnNbIDEgXSApLFxuXHRcdFx0XHRcdGdldENvbG9ySW5kZXgoIHZlcnRleENvbG9yc1sgMiBdIClcblx0XHRcdFx0KTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2V0Qml0KCB2YWx1ZSwgcG9zaXRpb24sIGVuYWJsZWQgKSB7XG5cblx0XHRcdHJldHVybiBlbmFibGVkID8gdmFsdWUgfCAoIDEgPDwgcG9zaXRpb24gKSA6IHZhbHVlICYgKCB+ICggMSA8PCBwb3NpdGlvbiApICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXROb3JtYWxJbmRleCggbm9ybWFsICkge1xuXG5cdFx0XHR2YXIgaGFzaCA9IG5vcm1hbC54LnRvU3RyaW5nKCkgKyBub3JtYWwueS50b1N0cmluZygpICsgbm9ybWFsLnoudG9TdHJpbmcoKTtcblxuXHRcdFx0aWYgKCBub3JtYWxzSGFzaFsgaGFzaCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG5vcm1hbHNIYXNoWyBoYXNoIF07XG5cblx0XHRcdH1cblxuXHRcdFx0bm9ybWFsc0hhc2hbIGhhc2ggXSA9IG5vcm1hbHMubGVuZ3RoIC8gMztcblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRyZXR1cm4gbm9ybWFsc0hhc2hbIGhhc2ggXTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldENvbG9ySW5kZXgoIGNvbG9yICkge1xuXG5cdFx0XHR2YXIgaGFzaCA9IGNvbG9yLnIudG9TdHJpbmcoKSArIGNvbG9yLmcudG9TdHJpbmcoKSArIGNvbG9yLmIudG9TdHJpbmcoKTtcblxuXHRcdFx0aWYgKCBjb2xvcnNIYXNoWyBoYXNoIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gY29sb3JzSGFzaFsgaGFzaCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbG9yc0hhc2hbIGhhc2ggXSA9IGNvbG9ycy5sZW5ndGg7XG5cdFx0XHRjb2xvcnMucHVzaCggY29sb3IuZ2V0SGV4KCkgKTtcblxuXHRcdFx0cmV0dXJuIGNvbG9yc0hhc2hbIGhhc2ggXTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldFV2SW5kZXgoIHV2ICkge1xuXG5cdFx0XHR2YXIgaGFzaCA9IHV2LngudG9TdHJpbmcoKSArIHV2LnkudG9TdHJpbmcoKTtcblxuXHRcdFx0aWYgKCB1dnNIYXNoWyBoYXNoIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gdXZzSGFzaFsgaGFzaCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHV2c0hhc2hbIGhhc2ggXSA9IHV2cy5sZW5ndGggLyAyO1xuXHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdFx0cmV0dXJuIHV2c0hhc2hbIGhhc2ggXTtcblxuXHRcdH1cblxuXHRcdGRhdGEuZGF0YSA9IHt9O1xuXG5cdFx0ZGF0YS5kYXRhLnZlcnRpY2VzID0gdmVydGljZXM7XG5cdFx0ZGF0YS5kYXRhLm5vcm1hbHMgPSBub3JtYWxzO1xuXHRcdGlmICggY29sb3JzLmxlbmd0aCA+IDAgKSBkYXRhLmRhdGEuY29sb3JzID0gY29sb3JzO1xuXHRcdGlmICggdXZzLmxlbmd0aCA+IDAgKSBkYXRhLmRhdGEudXZzID0gWyB1dnMgXTsgLy8gdGVtcG9yYWwgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuXHRcdGRhdGEuZGF0YS5mYWNlcyA9IGZhY2VzO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Lypcblx0XHQgLy8gSGFuZGxlIHByaW1pdGl2ZXNcblxuXHRcdCB2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcblxuXHRcdCBpZiAoIHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdCB2YXIgdmFsdWVzID0gW107XG5cblx0XHQgZm9yICggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICkge1xuXG5cdFx0IHZhbHVlcy5wdXNoKCBwYXJhbWV0ZXJzWyBrZXkgXSApO1xuXG5cdFx0IH1cblxuXHRcdCB2YXIgZ2VvbWV0cnkgPSBPYmplY3QuY3JlYXRlKCB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSApO1xuXHRcdCB0aGlzLmNvbnN0cnVjdG9yLmFwcGx5KCBnZW9tZXRyeSwgdmFsdWVzICk7XG5cdFx0IHJldHVybiBnZW9tZXRyeTtcblxuXHRcdCB9XG5cblx0XHQgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXHRcdCAqL1xuXG5cdFx0cmV0dXJuIG5ldyBHZW9tZXRyeSgpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dmFyIGksIGlsLCBqLCBqbCwgaywga2w7XG5cblx0XHQvLyByZXNldFxuXG5cdFx0dGhpcy52ZXJ0aWNlcyA9IFtdO1xuXHRcdHRoaXMuY29sb3JzID0gW107XG5cdFx0dGhpcy5mYWNlcyA9IFtdO1xuXHRcdHRoaXMuZmFjZVZlcnRleFV2cyA9IFtbXV07XG5cdFx0dGhpcy5tb3JwaFRhcmdldHMgPSBbXTtcblx0XHR0aGlzLm1vcnBoTm9ybWFscyA9IFtdO1xuXHRcdHRoaXMuc2tpbldlaWdodHMgPSBbXTtcblx0XHR0aGlzLnNraW5JbmRpY2VzID0gW107XG5cdFx0dGhpcy5saW5lRGlzdGFuY2VzID0gW107XG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0XHQvLyBuYW1lXG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdC8vIHZlcnRpY2VzXG5cblx0XHR2YXIgdmVydGljZXMgPSBzb3VyY2UudmVydGljZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy52ZXJ0aWNlcy5wdXNoKCB2ZXJ0aWNlc1sgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbG9yc1xuXG5cdFx0dmFyIGNvbG9ycyA9IHNvdXJjZS5jb2xvcnM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBjb2xvcnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29sb3JzLnB1c2goIGNvbG9yc1sgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGZhY2VzXG5cblx0XHR2YXIgZmFjZXMgPSBzb3VyY2UuZmFjZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBmYWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5mYWNlcy5wdXNoKCBmYWNlc1sgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGZhY2UgdmVydGV4IHV2c1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gc291cmNlLmZhY2VWZXJ0ZXhVdnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlVmVydGV4VXZzID0gc291cmNlLmZhY2VWZXJ0ZXhVdnNbIGkgXTtcblxuXHRcdFx0aWYgKCB0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMuZmFjZVZlcnRleFV2c1sgaSBdID0gW107XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaiA9IDAsIGpsID0gZmFjZVZlcnRleFV2cy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgdXZzID0gZmFjZVZlcnRleFV2c1sgaiBdLCB1dnNDb3B5ID0gW107XG5cblx0XHRcdFx0Zm9yICggayA9IDAsIGtsID0gdXZzLmxlbmd0aDsgayA8IGtsOyBrICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIHV2ID0gdXZzWyBrIF07XG5cblx0XHRcdFx0XHR1dnNDb3B5LnB1c2goIHV2LmNsb25lKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5mYWNlVmVydGV4VXZzWyBpIF0ucHVzaCggdXZzQ29weSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCB0YXJnZXRzXG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIG1vcnBoVGFyZ2V0ID0ge307XG5cdFx0XHRtb3JwaFRhcmdldC5uYW1lID0gbW9ycGhUYXJnZXRzWyBpIF0ubmFtZTtcblxuXHRcdFx0Ly8gdmVydGljZXNcblxuXHRcdFx0aWYgKCBtb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0LnZlcnRpY2VzID0gW107XG5cblx0XHRcdFx0Zm9yICggaiA9IDAsIGpsID0gbW9ycGhUYXJnZXRzWyBpIF0udmVydGljZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRtb3JwaFRhcmdldC52ZXJ0aWNlcy5wdXNoKCBtb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlc1sgaiBdLmNsb25lKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbm9ybWFsc1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0c1sgaSBdLm5vcm1hbHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtb3JwaFRhcmdldC5ub3JtYWxzID0gW107XG5cblx0XHRcdFx0Zm9yICggaiA9IDAsIGpsID0gbW9ycGhUYXJnZXRzWyBpIF0ubm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdG1vcnBoVGFyZ2V0Lm5vcm1hbHMucHVzaCggbW9ycGhUYXJnZXRzWyBpIF0ubm9ybWFsc1sgaiBdLmNsb25lKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldHMucHVzaCggbW9ycGhUYXJnZXQgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIG5vcm1hbHNcblxuXHRcdHZhciBtb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gbW9ycGhOb3JtYWxzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbW9ycGhOb3JtYWwgPSB7fTtcblxuXHRcdFx0Ly8gdmVydGV4IG5vcm1hbHNcblxuXHRcdFx0aWYgKCBtb3JwaE5vcm1hbHNbIGkgXS52ZXJ0ZXhOb3JtYWxzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bW9ycGhOb3JtYWwudmVydGV4Tm9ybWFscyA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGogPSAwLCBqbCA9IG1vcnBoTm9ybWFsc1sgaSBdLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgc3JjVmVydGV4Tm9ybWFsID0gbW9ycGhOb3JtYWxzWyBpIF0udmVydGV4Tm9ybWFsc1sgaiBdO1xuXHRcdFx0XHRcdHZhciBkZXN0VmVydGV4Tm9ybWFsID0ge307XG5cblx0XHRcdFx0XHRkZXN0VmVydGV4Tm9ybWFsLmEgPSBzcmNWZXJ0ZXhOb3JtYWwuYS5jbG9uZSgpO1xuXHRcdFx0XHRcdGRlc3RWZXJ0ZXhOb3JtYWwuYiA9IHNyY1ZlcnRleE5vcm1hbC5iLmNsb25lKCk7XG5cdFx0XHRcdFx0ZGVzdFZlcnRleE5vcm1hbC5jID0gc3JjVmVydGV4Tm9ybWFsLmMuY2xvbmUoKTtcblxuXHRcdFx0XHRcdG1vcnBoTm9ybWFsLnZlcnRleE5vcm1hbHMucHVzaCggZGVzdFZlcnRleE5vcm1hbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBmYWNlIG5vcm1hbHNcblxuXHRcdFx0aWYgKCBtb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1vcnBoTm9ybWFsLmZhY2VOb3JtYWxzID0gW107XG5cblx0XHRcdFx0Zm9yICggaiA9IDAsIGpsID0gbW9ycGhOb3JtYWxzWyBpIF0uZmFjZU5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRtb3JwaE5vcm1hbC5mYWNlTm9ybWFscy5wdXNoKCBtb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFsc1sgaiBdLmNsb25lKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaE5vcm1hbHMucHVzaCggbW9ycGhOb3JtYWwgKTtcblxuXHRcdH1cblxuXHRcdC8vIHNraW4gd2VpZ2h0c1xuXG5cdFx0dmFyIHNraW5XZWlnaHRzID0gc291cmNlLnNraW5XZWlnaHRzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gc2tpbldlaWdodHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuc2tpbldlaWdodHMucHVzaCggc2tpbldlaWdodHNbIGkgXS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHQvLyBza2luIGluZGljZXNcblxuXHRcdHZhciBza2luSW5kaWNlcyA9IHNvdXJjZS5za2luSW5kaWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHNraW5JbmRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnNraW5JbmRpY2VzLnB1c2goIHNraW5JbmRpY2VzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gbGluZSBkaXN0YW5jZXNcblxuXHRcdHZhciBsaW5lRGlzdGFuY2VzID0gc291cmNlLmxpbmVEaXN0YW5jZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBsaW5lRGlzdGFuY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmxpbmVEaXN0YW5jZXMucHVzaCggbGluZURpc3RhbmNlc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBib3hcblxuXHRcdHZhciBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDtcblxuXHRcdGlmICggYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm91bmRpbmcgc3BoZXJlXG5cblx0XHR2YXIgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBmbGFnc1xuXG5cdFx0dGhpcy5lbGVtZW50c05lZWRVcGRhdGUgPSBzb3VyY2UuZWxlbWVudHNOZWVkVXBkYXRlO1xuXHRcdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gc291cmNlLnZlcnRpY2VzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLnV2c05lZWRVcGRhdGUgPSBzb3VyY2UudXZzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gc291cmNlLm5vcm1hbHNOZWVkVXBkYXRlO1xuXHRcdHRoaXMuY29sb3JzTmVlZFVwZGF0ZSA9IHNvdXJjZS5jb2xvcnNOZWVkVXBkYXRlO1xuXHRcdHRoaXMubGluZURpc3RhbmNlc05lZWRVcGRhdGUgPSBzb3VyY2UubGluZURpc3RhbmNlc05lZWRVcGRhdGU7XG5cdFx0dGhpcy5ncm91cHNOZWVkVXBkYXRlID0gc291cmNlLmdyb3Vwc05lZWRVcGRhdGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhcnJheSApICkge1xuXG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogYXJyYXkgc2hvdWxkIGJlIGEgVHlwZWQgQXJyYXkuJyApO1xuXG5cdH1cblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmFycmF5ID0gYXJyYXk7XG5cdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0dGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyBpdGVtU2l6ZSA6IDA7XG5cdHRoaXMubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQgPT09IHRydWU7XG5cblx0dGhpcy5keW5hbWljID0gZmFsc2U7XG5cdHRoaXMudXBkYXRlUmFuZ2UgPSB7IG9mZnNldDogMCwgY291bnQ6IC0gMSB9O1xuXG5cdHRoaXMudmVyc2lvbiA9IDA7XG5cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCAnbmVlZHNVcGRhdGUnLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwge1xuXG5cdGlzQnVmZmVyQXR0cmlidXRlOiB0cnVlLFxuXG5cdG9uVXBsb2FkQ2FsbGJhY2s6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdHNldEFycmF5OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBhcnJheSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiBhcnJheSBzaG91bGQgYmUgYSBUeXBlZCBBcnJheS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIHRoaXMuaXRlbVNpemUgOiAwO1xuXHRcdHRoaXMuYXJyYXkgPSBhcnJheTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RHluYW1pYzogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZHluYW1pYyA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXHRcdHRoaXMuYXJyYXkgPSBuZXcgc291cmNlLmFycmF5LmNvbnN0cnVjdG9yKCBzb3VyY2UuYXJyYXkgKTtcblx0XHR0aGlzLml0ZW1TaXplID0gc291cmNlLml0ZW1TaXplO1xuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XG5cdFx0dGhpcy5ub3JtYWxpemVkID0gc291cmNlLm5vcm1hbGl6ZWQ7XG5cblx0XHR0aGlzLmR5bmFtaWMgPSBzb3VyY2UuZHluYW1pYztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weUF0OiBmdW5jdGlvbiAoIGluZGV4MSwgYXR0cmlidXRlLCBpbmRleDIgKSB7XG5cblx0XHRpbmRleDEgKj0gdGhpcy5pdGVtU2l6ZTtcblx0XHRpbmRleDIgKj0gYXR0cmlidXRlLml0ZW1TaXplO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5pdGVtU2l6ZTsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuYXJyYXlbIGluZGV4MSArIGkgXSA9IGF0dHJpYnV0ZS5hcnJheVsgaW5kZXgyICsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5QXJyYXk6IGZ1bmN0aW9uICggYXJyYXkgKSB7XG5cblx0XHR0aGlzLmFycmF5LnNldCggYXJyYXkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weUNvbG9yc0FycmF5OiBmdW5jdGlvbiAoIGNvbG9ycyApIHtcblxuXHRcdHZhciBhcnJheSA9IHRoaXMuYXJyYXksIG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjb2xvcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGNvbG9yID0gY29sb3JzWyBpIF07XG5cblx0XHRcdGlmICggY29sb3IgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weUNvbG9yc0FycmF5KCk6IGNvbG9yIGlzIHVuZGVmaW5lZCcsIGkgKTtcblx0XHRcdFx0Y29sb3IgPSBuZXcgQ29sb3IoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSBjb2xvci5yO1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gY29sb3IuZztcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IGNvbG9yLmI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlWZWN0b3Iyc0FycmF5OiBmdW5jdGlvbiAoIHZlY3RvcnMgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdmVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdmVjdG9yID0gdmVjdG9yc1sgaSBdO1xuXG5cdFx0XHRpZiAoIHZlY3RvciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5VmVjdG9yMnNBcnJheSgpOiB2ZWN0b3IgaXMgdW5kZWZpbmVkJywgaSApO1xuXHRcdFx0XHR2ZWN0b3IgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci54O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLnk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlWZWN0b3Izc0FycmF5OiBmdW5jdGlvbiAoIHZlY3RvcnMgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdmVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdmVjdG9yID0gdmVjdG9yc1sgaSBdO1xuXG5cdFx0XHRpZiAoIHZlY3RvciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSgpOiB2ZWN0b3IgaXMgdW5kZWZpbmVkJywgaSApO1xuXHRcdFx0XHR2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci54O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLnk7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IuejtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weVZlY3RvcjRzQXJyYXk6IGZ1bmN0aW9uICggdmVjdG9ycyApIHtcblxuXHRcdHZhciBhcnJheSA9IHRoaXMuYXJyYXksIG9mZnNldCA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB2ZWN0b3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZWN0b3IgPSB2ZWN0b3JzWyBpIF07XG5cblx0XHRcdGlmICggdmVjdG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3I0c0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdHZlY3RvciA9IG5ldyBWZWN0b3I0KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLng7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueTtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci56O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLnc7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldDogZnVuY3Rpb24gKCB2YWx1ZSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR0aGlzLmFycmF5LnNldCggdmFsdWUsIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRYOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdO1xuXG5cdH0sXG5cblx0c2V0WDogZnVuY3Rpb24gKCBpbmRleCwgeCApIHtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0WTogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxIF07XG5cblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbiAoIGluZGV4LCB5ICkge1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMSBdID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0WjogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF07XG5cblx0fSxcblxuXHRzZXRaOiBmdW5jdGlvbiAoIGluZGV4LCB6ICkge1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMiBdID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0VzogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF07XG5cblx0fSxcblxuXHRzZXRXOiBmdW5jdGlvbiAoIGluZGV4LCB3ICkge1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WFk6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHkgKSB7XG5cblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WFlaOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5LCB6ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYWVpXOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0b25VcGxvYWQ6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLm9uVXBsb2FkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5hcnJheSwgdGhpcy5pdGVtU2l6ZSApLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuZnVuY3Rpb24gSW50OEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgSW50OEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cbkludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuSW50OEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnQ4QnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIFVpbnQ4QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBVaW50OEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cblVpbnQ4QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcblVpbnQ4QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFVpbnQ4QnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgVWludDhDbGFtcGVkQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcblVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gSW50MTZCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IEludDE2QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuSW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuSW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW50MTZCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gVWludDE2QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBVaW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5VaW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuVWludDE2QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBJbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgSW50MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5JbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5JbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnQzMkJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBVaW50MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IFVpbnQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cblVpbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5VaW50MzJCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDMyQnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IEZsb2F0MzJBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5GbG9hdDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcbkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBGbG9hdDY0QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBGbG9hdDY0QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5GbG9hdDY0QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGU7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBEaXJlY3RHZW9tZXRyeSgpIHtcblxuXHR0aGlzLnZlcnRpY2VzID0gW107XG5cdHRoaXMubm9ybWFscyA9IFtdO1xuXHR0aGlzLmNvbG9ycyA9IFtdO1xuXHR0aGlzLnV2cyA9IFtdO1xuXHR0aGlzLnV2czIgPSBbXTtcblxuXHR0aGlzLmdyb3VwcyA9IFtdO1xuXG5cdHRoaXMubW9ycGhUYXJnZXRzID0ge307XG5cblx0dGhpcy5za2luV2VpZ2h0cyA9IFtdO1xuXHR0aGlzLnNraW5JbmRpY2VzID0gW107XG5cblx0Ly8gdGhpcy5saW5lRGlzdGFuY2VzID0gW107XG5cblx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXG5cdC8vIHVwZGF0ZSBmbGFnc1xuXG5cdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBmYWxzZTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBEaXJlY3RHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRjb21wdXRlR3JvdXBzOiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIGdyb3VwO1xuXHRcdHZhciBncm91cHMgPSBbXTtcblx0XHR2YXIgbWF0ZXJpYWxJbmRleCA9IHVuZGVmaW5lZDtcblxuXHRcdHZhciBmYWNlcyA9IGdlb21ldHJ5LmZhY2VzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZmFjZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IGZhY2VzWyBpIF07XG5cblx0XHRcdC8vIG1hdGVyaWFsc1xuXG5cdFx0XHRpZiAoIGZhY2UubWF0ZXJpYWxJbmRleCAhPT0gbWF0ZXJpYWxJbmRleCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbEluZGV4ID0gZmFjZS5tYXRlcmlhbEluZGV4O1xuXG5cdFx0XHRcdGlmICggZ3JvdXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGdyb3VwLmNvdW50ID0gKCBpICogMyApIC0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRcdFx0Z3JvdXBzLnB1c2goIGdyb3VwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdyb3VwID0ge1xuXHRcdFx0XHRcdHN0YXJ0OiBpICogMyxcblx0XHRcdFx0XHRtYXRlcmlhbEluZGV4OiBtYXRlcmlhbEluZGV4XG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZ3JvdXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Z3JvdXAuY291bnQgPSAoIGkgKiAzICkgLSBncm91cC5zdGFydDtcblx0XHRcdGdyb3Vwcy5wdXNoKCBncm91cCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ncm91cHMgPSBncm91cHM7XG5cblx0fSxcblxuXHRmcm9tR2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgZmFjZXMgPSBnZW9tZXRyeS5mYWNlcztcblx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblx0XHR2YXIgZmFjZVZlcnRleFV2cyA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnM7XG5cblx0XHR2YXIgaGFzRmFjZVZlcnRleFV2ID0gZmFjZVZlcnRleFV2c1sgMCBdICYmIGZhY2VWZXJ0ZXhVdnNbIDAgXS5sZW5ndGggPiAwO1xuXHRcdHZhciBoYXNGYWNlVmVydGV4VXYyID0gZmFjZVZlcnRleFV2c1sgMSBdICYmIGZhY2VWZXJ0ZXhVdnNbIDEgXS5sZW5ndGggPiAwO1xuXG5cdFx0Ly8gbW9ycGhzXG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzO1xuXHRcdHZhciBtb3JwaFRhcmdldHNMZW5ndGggPSBtb3JwaFRhcmdldHMubGVuZ3RoO1xuXG5cdFx0dmFyIG1vcnBoVGFyZ2V0c1Bvc2l0aW9uO1xuXG5cdFx0aWYgKCBtb3JwaFRhcmdldHNMZW5ndGggPiAwICkge1xuXG5cdFx0XHRtb3JwaFRhcmdldHNQb3NpdGlvbiA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBtb3JwaFRhcmdldHNMZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0bW9ycGhUYXJnZXRzUG9zaXRpb25bIGkgXSA9IFtdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXRzLnBvc2l0aW9uID0gbW9ycGhUYXJnZXRzUG9zaXRpb247XG5cblx0XHR9XG5cblx0XHR2YXIgbW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhOb3JtYWxzO1xuXHRcdHZhciBtb3JwaE5vcm1hbHNMZW5ndGggPSBtb3JwaE5vcm1hbHMubGVuZ3RoO1xuXG5cdFx0dmFyIG1vcnBoVGFyZ2V0c05vcm1hbDtcblxuXHRcdGlmICggbW9ycGhOb3JtYWxzTGVuZ3RoID4gMCApIHtcblxuXHRcdFx0bW9ycGhUYXJnZXRzTm9ybWFsID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG1vcnBoTm9ybWFsc0xlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRtb3JwaFRhcmdldHNOb3JtYWxbIGkgXSA9IFtdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXRzLm5vcm1hbCA9IG1vcnBoVGFyZ2V0c05vcm1hbDtcblxuXHRcdH1cblxuXHRcdC8vIHNraW5zXG5cblx0XHR2YXIgc2tpbkluZGljZXMgPSBnZW9tZXRyeS5za2luSW5kaWNlcztcblx0XHR2YXIgc2tpbldlaWdodHMgPSBnZW9tZXRyeS5za2luV2VpZ2h0cztcblxuXHRcdHZhciBoYXNTa2luSW5kaWNlcyA9IHNraW5JbmRpY2VzLmxlbmd0aCA9PT0gdmVydGljZXMubGVuZ3RoO1xuXHRcdHZhciBoYXNTa2luV2VpZ2h0cyA9IHNraW5XZWlnaHRzLmxlbmd0aCA9PT0gdmVydGljZXMubGVuZ3RoO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggdmVydGljZXMubGVuZ3RoID4gMCAmJiBmYWNlcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5EaXJlY3RHZW9tZXRyeTogRmFjZWxlc3MgZ2VvbWV0cmllcyBhcmUgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBmYWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0dGhpcy52ZXJ0aWNlcy5wdXNoKCB2ZXJ0aWNlc1sgZmFjZS5hIF0sIHZlcnRpY2VzWyBmYWNlLmIgXSwgdmVydGljZXNbIGZhY2UuYyBdICk7XG5cblx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRpZiAoIHZlcnRleE5vcm1hbHMubGVuZ3RoID09PSAzICkge1xuXG5cdFx0XHRcdHRoaXMubm9ybWFscy5wdXNoKCB2ZXJ0ZXhOb3JtYWxzWyAwIF0sIHZlcnRleE5vcm1hbHNbIDEgXSwgdmVydGV4Tm9ybWFsc1sgMiBdICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIG5vcm1hbCA9IGZhY2Uubm9ybWFsO1xuXG5cdFx0XHRcdHRoaXMubm9ybWFscy5wdXNoKCBub3JtYWwsIG5vcm1hbCwgbm9ybWFsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHZlcnRleENvbG9ycyA9IGZhY2UudmVydGV4Q29sb3JzO1xuXG5cdFx0XHRpZiAoIHZlcnRleENvbG9ycy5sZW5ndGggPT09IDMgKSB7XG5cblx0XHRcdFx0dGhpcy5jb2xvcnMucHVzaCggdmVydGV4Q29sb3JzWyAwIF0sIHZlcnRleENvbG9yc1sgMSBdLCB2ZXJ0ZXhDb2xvcnNbIDIgXSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHZhciBjb2xvciA9IGZhY2UuY29sb3I7XG5cblx0XHRcdFx0dGhpcy5jb2xvcnMucHVzaCggY29sb3IsIGNvbG9yLCBjb2xvciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzRmFjZVZlcnRleFV2ID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHZhciB2ZXJ0ZXhVdnMgPSBmYWNlVmVydGV4VXZzWyAwIF1bIGkgXTtcblxuXHRcdFx0XHRpZiAoIHZlcnRleFV2cyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGhpcy51dnMucHVzaCggdmVydGV4VXZzWyAwIF0sIHZlcnRleFV2c1sgMSBdLCB2ZXJ0ZXhVdnNbIDIgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5EaXJlY3RHZW9tZXRyeS5mcm9tR2VvbWV0cnkoKTogVW5kZWZpbmVkIHZlcnRleFV2ICcsIGkgKTtcblxuXHRcdFx0XHRcdHRoaXMudXZzLnB1c2goIG5ldyBWZWN0b3IyKCksIG5ldyBWZWN0b3IyKCksIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4VXYyID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHZhciB2ZXJ0ZXhVdnMgPSBmYWNlVmVydGV4VXZzWyAxIF1bIGkgXTtcblxuXHRcdFx0XHRpZiAoIHZlcnRleFV2cyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGhpcy51dnMyLnB1c2goIHZlcnRleFV2c1sgMCBdLCB2ZXJ0ZXhVdnNbIDEgXSwgdmVydGV4VXZzWyAyIF0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRGlyZWN0R2VvbWV0cnkuZnJvbUdlb21ldHJ5KCk6IFVuZGVmaW5lZCB2ZXJ0ZXhVdjIgJywgaSApO1xuXG5cdFx0XHRcdFx0dGhpcy51dnMyLnB1c2goIG5ldyBWZWN0b3IyKCksIG5ldyBWZWN0b3IyKCksIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbW9ycGhzXG5cblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IG1vcnBoVGFyZ2V0c0xlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGogXS52ZXJ0aWNlcztcblxuXHRcdFx0XHRtb3JwaFRhcmdldHNQb3NpdGlvblsgaiBdLnB1c2goIG1vcnBoVGFyZ2V0WyBmYWNlLmEgXSwgbW9ycGhUYXJnZXRbIGZhY2UuYiBdLCBtb3JwaFRhcmdldFsgZmFjZS5jIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBtb3JwaE5vcm1hbHNMZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0dmFyIG1vcnBoTm9ybWFsID0gbW9ycGhOb3JtYWxzWyBqIF0udmVydGV4Tm9ybWFsc1sgaSBdO1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0c05vcm1hbFsgaiBdLnB1c2goIG1vcnBoTm9ybWFsLmEsIG1vcnBoTm9ybWFsLmIsIG1vcnBoTm9ybWFsLmMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBza2luc1xuXG5cdFx0XHRpZiAoIGhhc1NraW5JbmRpY2VzICkge1xuXG5cdFx0XHRcdHRoaXMuc2tpbkluZGljZXMucHVzaCggc2tpbkluZGljZXNbIGZhY2UuYSBdLCBza2luSW5kaWNlc1sgZmFjZS5iIF0sIHNraW5JbmRpY2VzWyBmYWNlLmMgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2tpbldlaWdodHMgKSB7XG5cblx0XHRcdFx0dGhpcy5za2luV2VpZ2h0cy5wdXNoKCBza2luV2VpZ2h0c1sgZmFjZS5hIF0sIHNraW5XZWlnaHRzWyBmYWNlLmIgXSwgc2tpbldlaWdodHNbIGZhY2UuYyBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuY29tcHV0ZUdyb3VwcyggZ2VvbWV0cnkgKTtcblxuXHRcdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlO1xuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlO1xuXHRcdHRoaXMudXZzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LnV2c05lZWRVcGRhdGU7XG5cdFx0dGhpcy5ncm91cHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gYXJyYXlNYXgoIGFycmF5ICkge1xuXG5cdGlmICggYXJyYXkubGVuZ3RoID09PSAwICkgcmV0dXJuIC0gSW5maW5pdHk7XG5cblx0dmFyIG1heCA9IGFycmF5WyAwIF07XG5cblx0Zm9yICggdmFyIGkgPSAxLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgKysgaSApIHtcblxuXHRcdGlmICggYXJyYXlbIGkgXSA+IG1heCApIG1heCA9IGFycmF5WyBpIF07XG5cblx0fVxuXG5cdHJldHVybiBtYXg7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgYnVmZmVyR2VvbWV0cnlJZCA9IDE7IC8vIEJ1ZmZlckdlb21ldHJ5IHVzZXMgb2RkIG51bWJlcnMgYXMgSWRcblxuZnVuY3Rpb24gQnVmZmVyR2VvbWV0cnkoKSB7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBidWZmZXJHZW9tZXRyeUlkICs9IDIgfSApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXHR0aGlzLnR5cGUgPSAnQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMuaW5kZXggPSBudWxsO1xuXHR0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcblxuXHR0aGlzLm1vcnBoQXR0cmlidXRlcyA9IHt9O1xuXG5cdHRoaXMuZ3JvdXBzID0gW107XG5cblx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXG5cdHRoaXMuZHJhd1JhbmdlID0geyBzdGFydDogMCwgY291bnQ6IEluZmluaXR5IH07XG5cblx0dGhpcy51c2VyRGF0YSA9IHt9O1xuXG59XG5cbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBCdWZmZXJHZW9tZXRyeSxcblxuXHRpc0J1ZmZlckdlb21ldHJ5OiB0cnVlLFxuXG5cdGdldEluZGV4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbmRleDtcblxuXHR9LFxuXG5cdHNldEluZGV4OiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbmRleCApICkge1xuXG5cdFx0XHR0aGlzLmluZGV4ID0gbmV3ICggYXJyYXlNYXgoIGluZGV4ICkgPiA2NTUzNSA/IFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSA6IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSApKCBpbmRleCwgMSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5pbmRleCA9IGluZGV4O1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0YWRkQXR0cmlidXRlOiBmdW5jdGlvbiAoIG5hbWUsIGF0dHJpYnV0ZSApIHtcblxuXHRcdGlmICggISAoIGF0dHJpYnV0ZSAmJiBhdHRyaWJ1dGUuaXNCdWZmZXJBdHRyaWJ1dGUgKSAmJiAhICggYXR0cmlidXRlICYmIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkQXR0cmlidXRlKCkgbm93IGV4cGVjdHMgKCBuYW1lLCBhdHRyaWJ1dGUgKS4nICk7XG5cblx0XHRcdHJldHVybiB0aGlzLmFkZEF0dHJpYnV0ZSggbmFtZSwgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggYXJndW1lbnRzWyAxIF0sIGFyZ3VtZW50c1sgMiBdICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbmFtZSA9PT0gJ2luZGV4JyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuYWRkQXR0cmlidXRlOiBVc2UgLnNldEluZGV4KCkgZm9yIGluZGV4IGF0dHJpYnV0ZS4nICk7XG5cdFx0XHR0aGlzLnNldEluZGV4KCBhdHRyaWJ1dGUgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXSA9IGF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0QXR0cmlidXRlOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0fSxcblxuXHRyZW1vdmVBdHRyaWJ1dGU6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkR3JvdXA6IGZ1bmN0aW9uICggc3RhcnQsIGNvdW50LCBtYXRlcmlhbEluZGV4ICkge1xuXG5cdFx0dGhpcy5ncm91cHMucHVzaCgge1xuXG5cdFx0XHRzdGFydDogc3RhcnQsXG5cdFx0XHRjb3VudDogY291bnQsXG5cdFx0XHRtYXRlcmlhbEluZGV4OiBtYXRlcmlhbEluZGV4ICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbEluZGV4IDogMFxuXG5cdFx0fSApO1xuXG5cdH0sXG5cblx0Y2xlYXJHcm91cHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZ3JvdXBzID0gW107XG5cblx0fSxcblxuXHRzZXREcmF3UmFuZ2U6IGZ1bmN0aW9uICggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0dGhpcy5kcmF3UmFuZ2Uuc3RhcnQgPSBzdGFydDtcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50O1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24gKTtcblx0XHRcdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHZhciBub3JtYWwgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0aWYgKCBub3JtYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdFx0bm9ybWFsTWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbCApO1xuXHRcdFx0bm9ybWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm90YXRlWDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB4LWF4aXNcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWCggYW5nbGUgKSB7XG5cblx0XHRcdG0xLm1ha2VSb3RhdGlvblgoIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cm90YXRlWTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB5LWF4aXNcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWSggYW5nbGUgKSB7XG5cblx0XHRcdG0xLm1ha2VSb3RhdGlvblkoIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0cm90YXRlWjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB6LWF4aXNcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcm90YXRlWiggYW5nbGUgKSB7XG5cblx0XHRcdG0xLm1ha2VSb3RhdGlvblooIGFuZ2xlICk7XG5cblx0XHRcdHRoaXMuYXBwbHlNYXRyaXgoIG0xICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyB0cmFuc2xhdGUgZ2VvbWV0cnlcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdHJhbnNsYXRlKCB4LCB5LCB6ICkge1xuXG5cdFx0XHRtMS5tYWtlVHJhbnNsYXRpb24oIHgsIHksIHogKTtcblxuXHRcdFx0dGhpcy5hcHBseU1hdHJpeCggbTEgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRzY2FsZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gc2NhbGUgZ2VvbWV0cnlcblxuXHRcdHZhciBtMSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2NhbGUoIHgsIHksIHogKSB7XG5cblx0XHRcdG0xLm1ha2VTY2FsZSggeCwgeSwgeiApO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBtMSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGxvb2tBdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9iaiA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGxvb2tBdCggdmVjdG9yICkge1xuXG5cdFx0XHRvYmoubG9va0F0KCB2ZWN0b3IgKTtcblxuXHRcdFx0b2JqLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR0aGlzLmFwcGx5TWF0cml4KCBvYmoubWF0cml4ICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjZW50ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNlbnRlcigpIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoIG9mZnNldCApLm5lZ2F0ZSgpO1xuXG5cdFx0XHR0aGlzLnRyYW5zbGF0ZSggb2Zmc2V0LngsIG9mZnNldC55LCBvZmZzZXQueiApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHNldEZyb21PYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5zZXRGcm9tT2JqZWN0KCkuIENvbnZlcnRpbmcnLCBvYmplY3QsIHRoaXMgKTtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdGlmICggb2JqZWN0LmlzUG9pbnRzIHx8IG9iamVjdC5pc0xpbmUgKSB7XG5cblx0XHRcdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICogMywgMyApO1xuXHRcdFx0dmFyIGNvbG9ycyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5jb2xvcnMubGVuZ3RoICogMywgMyApO1xuXG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgcG9zaXRpb25zLmNvcHlWZWN0b3Izc0FycmF5KCBnZW9tZXRyeS52ZXJ0aWNlcyApICk7XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgY29sb3JzLmNvcHlDb2xvcnNBcnJheSggZ2VvbWV0cnkuY29sb3JzICkgKTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICYmIGdlb21ldHJ5LmxpbmVEaXN0YW5jZXMubGVuZ3RoID09PSBnZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkubGluZURpc3RhbmNlcy5sZW5ndGgsIDEgKTtcblxuXHRcdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIGxpbmVEaXN0YW5jZXMuY29weUFycmF5KCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR0aGlzLmZyb21HZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdHZhciBwb3NpdGlvbiA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBwb2ludCA9IHBvaW50c1sgaSBdO1xuXHRcdFx0cG9zaXRpb24ucHVzaCggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCAzICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dXBkYXRlRnJvbU9iamVjdDogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdHZhciBkaXJlY3QgPSBnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmVsZW1lbnRzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRkaXJlY3QgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdGdlb21ldHJ5LmVsZW1lbnRzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZGlyZWN0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMuZnJvbUdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRpcmVjdC52ZXJ0aWNlc05lZWRVcGRhdGUgPSBnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGU7XG5cdFx0XHRkaXJlY3Qubm9ybWFsc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC5jb2xvcnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC51dnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkudXZzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC5ncm91cHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdFx0Z2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdFx0XHRnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRnZW9tZXRyeSA9IGRpcmVjdDtcblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGU7XG5cblx0XHRpZiAoIGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKTtcblx0XHRcdFx0YXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRcdGlmICggYXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0YXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KCBnZW9tZXRyeS5ub3JtYWxzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLmNvbG9yO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5Q29sb3JzQXJyYXkoIGdlb21ldHJ5LmNvbG9ycyApO1xuXHRcdFx0XHRhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkudXZzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLnV2O1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5VmVjdG9yMnNBcnJheSggZ2VvbWV0cnkudXZzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLmxpbmVEaXN0YW5jZTtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGUuY29weUFycmF5KCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkubGluZURpc3RhbmNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUdyb3Vwcyggb2JqZWN0Lmdlb21ldHJ5ICk7XG5cdFx0XHR0aGlzLmdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0Z2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRmcm9tR2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHRnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5ID0gbmV3IERpcmVjdEdlb21ldHJ5KCkuZnJvbUdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbURpcmVjdEdlb21ldHJ5KCBnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5ICk7XG5cblx0fSxcblxuXHRmcm9tRGlyZWN0R2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICogMyApO1xuXHRcdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKSApO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ub3JtYWxzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHZhciBub3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkubm9ybWFscy5sZW5ndGggKiAzICk7XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkubm9ybWFscyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmNvbG9ycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkuY29sb3JzLmxlbmd0aCAqIDMgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKS5jb3B5Q29sb3JzQXJyYXkoIGdlb21ldHJ5LmNvbG9ycyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LnV2cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgdXZzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkudXZzLmxlbmd0aCAqIDIgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKS5jb3B5VmVjdG9yMnNBcnJheSggZ2VvbWV0cnkudXZzICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkudXZzMi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgdXZzMiA9IG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5LnV2czIubGVuZ3RoICogMiApO1xuXHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1djInLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1dnMyLCAyICkuY29weVZlY3RvcjJzQXJyYXkoIGdlb21ldHJ5LnV2czIgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHR0aGlzLmdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdC8vIG1vcnBoc1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gZ2VvbWV0cnkubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBbXTtcblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNbIG5hbWUgXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07XG5cblx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBtb3JwaFRhcmdldC5sZW5ndGggKiAzLCAzICk7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggYXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KCBtb3JwaFRhcmdldCApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbm5pbmdcblxuXHRcdGlmICggZ2VvbWV0cnkuc2tpbkluZGljZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIHNraW5JbmRpY2VzID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aCAqIDQsIDQgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAnc2tpbkluZGV4Jywgc2tpbkluZGljZXMuY29weVZlY3RvcjRzQXJyYXkoIGdlb21ldHJ5LnNraW5JbmRpY2VzICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuc2tpbldlaWdodHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIHNraW5XZWlnaHRzID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCAqIDQsIDQgKTtcblx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCAnc2tpbldlaWdodCcsIHNraW5XZWlnaHRzLmNvcHlWZWN0b3I0c0FycmF5KCBnZW9tZXRyeS5za2luV2VpZ2h0cyApICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gZ2VvbWV0cnkuYm91bmRpbmdCb3guY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29tcHV0ZUJvdW5kaW5nQm94OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94Lm1ha2VFbXB0eSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueCApIHx8IGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi55ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnogKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveDogQ29tcHV0ZWQgbWluL21heCBoYXZlIE5hTiB2YWx1ZXMuIFRoZSBcInBvc2l0aW9uXCIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJywgdGhpcyApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYm94ID0gbmV3IEJveDMoKTtcblx0XHR2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb21wdXRlQm91bmRpbmdTcGhlcmUoKSB7XG5cblx0XHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0aWYgKCBwb3NpdGlvbiApIHtcblxuXHRcdFx0XHR2YXIgY2VudGVyID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7XG5cblx0XHRcdFx0Ym94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cdFx0XHRcdGJveC5nZXRDZW50ZXIoIGNlbnRlciApO1xuXG5cdFx0XHRcdC8vIGhvcGluZyB0byBmaW5kIGEgYm91bmRpbmdTcGhlcmUgd2l0aCBhIHJhZGl1cyBzbWFsbGVyIHRoYW4gdGhlXG5cdFx0XHRcdC8vIGJvdW5kaW5nU3BoZXJlIG9mIHRoZSBib3VuZGluZ0JveDogc3FydCgzKSBzbWFsbGVyIGluIHRoZSBiZXN0IGNhc2VcblxuXHRcdFx0XHR2YXIgbWF4UmFkaXVzU3EgPSAwO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb3NpdGlvbi5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmVjdG9yLnggPSBwb3NpdGlvbi5nZXRYKCBpICk7XG5cdFx0XHRcdFx0dmVjdG9yLnkgPSBwb3NpdGlvbi5nZXRZKCBpICk7XG5cdFx0XHRcdFx0dmVjdG9yLnogPSBwb3NpdGlvbi5nZXRaKCBpICk7XG5cdFx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggdmVjdG9yICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRcdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgKSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTogQ29tcHV0ZWQgcmFkaXVzIGlzIE5hTi4gVGhlIFwicG9zaXRpb25cIiBhdHRyaWJ1dGUgaXMgbGlrZWx5IHRvIGhhdmUgTmFOIHZhbHVlcy4nLCB0aGlzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjb21wdXRlRmFjZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cblx0fSxcblxuXHRjb21wdXRlVmVydGV4Tm9ybWFsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGluZGV4ID0gdGhpcy5pbmRleDtcblx0XHR2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblx0XHR2YXIgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZXMucG9zaXRpb24gKSB7XG5cblx0XHRcdHZhciBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvbnMubGVuZ3RoICksIDMgKSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIHJlc2V0IGV4aXN0aW5nIG5vcm1hbHMgdG8gemVyb1xuXG5cdFx0XHRcdHZhciBhcnJheSA9IGF0dHJpYnV0ZXMubm9ybWFsLmFycmF5O1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBhcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGFycmF5WyBpIF0gPSAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbm9ybWFscyA9IGF0dHJpYnV0ZXMubm9ybWFsLmFycmF5O1xuXG5cdFx0XHR2YXIgdkEsIHZCLCB2Qztcblx0XHRcdHZhciBwQSA9IG5ldyBWZWN0b3IzKCksIHBCID0gbmV3IFZlY3RvcjMoKSwgcEMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHQvLyBpbmRleGVkIGVsZW1lbnRzXG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cblx0XHRcdFx0dmFyIGluZGljZXMgPSBpbmRleC5hcnJheTtcblxuXHRcdFx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdFx0XHR0aGlzLmFkZEdyb3VwKCAwLCBpbmRpY2VzLmxlbmd0aCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZ3JvdXBzLmxlbmd0aDsgaiA8IGpsOyArKyBqICkge1xuXG5cdFx0XHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzWyBqIF07XG5cblx0XHRcdFx0XHR2YXIgc3RhcnQgPSBncm91cC5zdGFydDtcblx0XHRcdFx0XHR2YXIgY291bnQgPSBncm91cC5jb3VudDtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gc3RhcnQsIGlsID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdHZBID0gaW5kaWNlc1sgaSArIDAgXSAqIDM7XG5cdFx0XHRcdFx0XHR2QiA9IGluZGljZXNbIGkgKyAxIF0gKiAzO1xuXHRcdFx0XHRcdFx0dkMgPSBpbmRpY2VzWyBpICsgMiBdICogMztcblxuXHRcdFx0XHRcdFx0cEEuZnJvbUFycmF5KCBwb3NpdGlvbnMsIHZBICk7XG5cdFx0XHRcdFx0XHRwQi5mcm9tQXJyYXkoIHBvc2l0aW9ucywgdkIgKTtcblx0XHRcdFx0XHRcdHBDLmZyb21BcnJheSggcG9zaXRpb25zLCB2QyApO1xuXG5cdFx0XHRcdFx0XHRjYi5zdWJWZWN0b3JzKCBwQywgcEIgKTtcblx0XHRcdFx0XHRcdGFiLnN1YlZlY3RvcnMoIHBBLCBwQiApO1xuXHRcdFx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XG5cblx0XHRcdFx0XHRcdG5vcm1hbHNbIHZBIF0gKz0gY2IueDtcblx0XHRcdFx0XHRcdG5vcm1hbHNbIHZBICsgMSBdICs9IGNiLnk7XG5cdFx0XHRcdFx0XHRub3JtYWxzWyB2QSArIDIgXSArPSBjYi56O1xuXG5cdFx0XHRcdFx0XHRub3JtYWxzWyB2QiBdICs9IGNiLng7XG5cdFx0XHRcdFx0XHRub3JtYWxzWyB2QiArIDEgXSArPSBjYi55O1xuXHRcdFx0XHRcdFx0bm9ybWFsc1sgdkIgKyAyIF0gKz0gY2IuejtcblxuXHRcdFx0XHRcdFx0bm9ybWFsc1sgdkMgXSArPSBjYi54O1xuXHRcdFx0XHRcdFx0bm9ybWFsc1sgdkMgKyAxIF0gKz0gY2IueTtcblx0XHRcdFx0XHRcdG5vcm1hbHNbIHZDICsgMiBdICs9IGNiLno7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIGVsZW1lbnRzICh1bmNvbm5lY3RlZCB0cmlhbmdsZSBzb3VwKVxuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgaWw7IGkgKz0gOSApIHtcblxuXHRcdFx0XHRcdHBBLmZyb21BcnJheSggcG9zaXRpb25zLCBpICk7XG5cdFx0XHRcdFx0cEIuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKyAzICk7XG5cdFx0XHRcdFx0cEMuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGkgKyA2ICk7XG5cblx0XHRcdFx0XHRjYi5zdWJWZWN0b3JzKCBwQywgcEIgKTtcblx0XHRcdFx0XHRhYi5zdWJWZWN0b3JzKCBwQSwgcEIgKTtcblx0XHRcdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIGkgXSA9IGNiLng7XG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDEgXSA9IGNiLnk7XG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDIgXSA9IGNiLno7XG5cblx0XHRcdFx0XHRub3JtYWxzWyBpICsgMyBdID0gY2IueDtcblx0XHRcdFx0XHRub3JtYWxzWyBpICsgNCBdID0gY2IueTtcblx0XHRcdFx0XHRub3JtYWxzWyBpICsgNSBdID0gY2IuejtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA2IF0gPSBjYi54O1xuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA3IF0gPSBjYi55O1xuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyA4IF0gPSBjYi56O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTtcblxuXHRcdFx0YXR0cmlidXRlcy5ub3JtYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uICggZ2VvbWV0cnksIG9mZnNldCApIHtcblxuXHRcdGlmICggISAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeS4nLCBnZW9tZXRyeSApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b2Zmc2V0ID0gMDtcblxuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHQnVEhSRUUuQnVmZmVyR2VvbWV0cnkubWVyZ2UoKTogT3ZlcndyaXRpbmcgb3JpZ2luYWwgZ2VvbWV0cnksIHN0YXJ0aW5nIGF0IG9mZnNldD0wLiAnXG5cdFx0XHRcdCsgJ1VzZSBCdWZmZXJHZW9tZXRyeVV0aWxzLm1lcmdlQnVmZmVyR2VvbWV0cmllcygpIGZvciBsb3NzbGVzcyBtZXJnZS4nXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXR0cmlidXRlMSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0dmFyIGF0dHJpYnV0ZUFycmF5MSA9IGF0dHJpYnV0ZTEuYXJyYXk7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUyID0gZ2VvbWV0cnkuYXR0cmlidXRlc1sga2V5IF07XG5cdFx0XHR2YXIgYXR0cmlidXRlQXJyYXkyID0gYXR0cmlidXRlMi5hcnJheTtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZVNpemUgPSBhdHRyaWJ1dGUyLml0ZW1TaXplO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGogPSBhdHRyaWJ1dGVTaXplICogb2Zmc2V0OyBpIDwgYXR0cmlidXRlQXJyYXkyLmxlbmd0aDsgaSArKywgaiArKyApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVBcnJheTFbIGogXSA9IGF0dHJpYnV0ZUFycmF5MlsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIG5vcm1hbGl6ZU5vcm1hbHMoKSB7XG5cblx0XHRcdHZhciBub3JtYWxzID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG5vcm1hbHMuY291bnQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR2ZWN0b3IueCA9IG5vcm1hbHMuZ2V0WCggaSApO1xuXHRcdFx0XHR2ZWN0b3IueSA9IG5vcm1hbHMuZ2V0WSggaSApO1xuXHRcdFx0XHR2ZWN0b3IueiA9IG5vcm1hbHMuZ2V0WiggaSApO1xuXG5cdFx0XHRcdHZlY3Rvci5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRub3JtYWxzLnNldFhZWiggaSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHR0b05vbkluZGV4ZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5pbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkudG9Ob25JbmRleGVkKCk6IEdlb21ldHJ5IGlzIGFscmVhZHkgbm9uLWluZGV4ZWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR2YXIgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHR2YXIgaW5kaWNlcyA9IHRoaXMuaW5kZXguYXJyYXk7XG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHR2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XG5cdFx0XHR2YXIgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cblx0XHRcdHZhciBhcnJheTIgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IoIGluZGljZXMubGVuZ3RoICogaXRlbVNpemUgKTtcblxuXHRcdFx0dmFyIGluZGV4ID0gMCwgaW5kZXgyID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc1sgaSBdICogaXRlbVNpemU7XG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgaXRlbVNpemU7IGogKysgKSB7XG5cblx0XHRcdFx0XHRhcnJheTJbIGluZGV4MiArKyBdID0gYXJyYXlbIGluZGV4ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5Mi5hZGRBdHRyaWJ1dGUoIG5hbWUsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5MiwgaXRlbVNpemUgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0Z2VvbWV0cnkyLmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBnZW9tZXRyeTI7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnQnVmZmVyR2VvbWV0cnknLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdCdWZmZXJHZW9tZXRyeS50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIEJ1ZmZlckdlb21ldHJ5IHNlcmlhbGl6YXRpb25cblxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcblx0XHRkYXRhLnR5cGUgPSB0aGlzLnR5cGU7XG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXHRcdGlmICggT2JqZWN0LmtleXMoIHRoaXMudXNlckRhdGEgKS5sZW5ndGggPiAwICkgZGF0YS51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XG5cblx0XHRpZiAoIHRoaXMucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcblxuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICkge1xuXG5cdFx0XHRcdGlmICggcGFyYW1ldGVyc1sga2V5IF0gIT09IHVuZGVmaW5lZCApIGRhdGFbIGtleSBdID0gcGFyYW1ldGVyc1sga2V5IF07XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cblx0XHR9XG5cblx0XHRkYXRhLmRhdGEgPSB7IGF0dHJpYnV0ZXM6IHt9IH07XG5cblx0XHR2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGluZGV4LmFycmF5ICk7XG5cblx0XHRcdGRhdGEuZGF0YS5pbmRleCA9IHtcblx0XHRcdFx0dHlwZTogaW5kZXguYXJyYXkuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdFx0YXJyYXk6IGFycmF5XG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0dmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGF0dHJpYnV0ZS5hcnJheSApO1xuXG5cdFx0XHRkYXRhLmRhdGEuYXR0cmlidXRlc1sga2V5IF0gPSB7XG5cdFx0XHRcdGl0ZW1TaXplOiBhdHRyaWJ1dGUuaXRlbVNpemUsXG5cdFx0XHRcdHR5cGU6IGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0XHRhcnJheTogYXJyYXksXG5cdFx0XHRcdG5vcm1hbGl6ZWQ6IGF0dHJpYnV0ZS5ub3JtYWxpemVkXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXG5cdFx0aWYgKCBncm91cHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0ZGF0YS5kYXRhLmdyb3VwcyA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBncm91cHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGJvdW5kaW5nU3BoZXJlID0gdGhpcy5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5ib3VuZGluZ1NwaGVyZSA9IHtcblx0XHRcdFx0Y2VudGVyOiBib3VuZGluZ1NwaGVyZS5jZW50ZXIudG9BcnJheSgpLFxuXHRcdFx0XHRyYWRpdXM6IGJvdW5kaW5nU3BoZXJlLnJhZGl1c1xuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8qXG5cdFx0IC8vIEhhbmRsZSBwcmltaXRpdmVzXG5cblx0XHQgdmFyIHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHQgaWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHQgdmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0IGZvciAoIHZhciBrZXkgaW4gcGFyYW1ldGVycyApIHtcblxuXHRcdCB2YWx1ZXMucHVzaCggcGFyYW1ldGVyc1sga2V5IF0gKTtcblxuXHRcdCB9XG5cblx0XHQgdmFyIGdlb21ldHJ5ID0gT2JqZWN0LmNyZWF0ZSggdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgKTtcblx0XHQgdGhpcy5jb25zdHJ1Y3Rvci5hcHBseSggZ2VvbWV0cnksIHZhbHVlcyApO1xuXHRcdCByZXR1cm4gZ2VvbWV0cnk7XG5cblx0XHQgfVxuXG5cdFx0IHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblx0XHQgKi9cblxuXHRcdHJldHVybiBuZXcgQnVmZmVyR2VvbWV0cnkoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHZhciBuYW1lLCBpLCBsO1xuXG5cdFx0Ly8gcmVzZXRcblxuXHRcdHRoaXMuaW5kZXggPSBudWxsO1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuXHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdC8vIG5hbWVcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0Ly8gaW5kZXhcblxuXHRcdHZhciBpbmRleCA9IHNvdXJjZS5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuc2V0SW5kZXgoIGluZGV4LmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBhdHRyaWJ1dGVzID0gc291cmNlLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBuYW1lIGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBzb3VyY2UubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhcnJheSA9IFtdO1xuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlc1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggbW9ycGhBdHRyaWJ1dGVbIGkgXS5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHR2YXIgZ3JvdXBzID0gc291cmNlLmdyb3VwcztcblxuXHRcdGZvciAoIGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBib3hcblxuXHRcdHZhciBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDtcblxuXHRcdGlmICggYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm91bmRpbmcgc3BoZXJlXG5cblx0XHR2YXIgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7XG5cblx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIGRyYXcgcmFuZ2VcblxuXHRcdHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc291cmNlLmRyYXdSYW5nZS5zdGFydDtcblx0XHR0aGlzLmRyYXdSYW5nZS5jb3VudCA9IHNvdXJjZS5kcmF3UmFuZ2UuY291bnQ7XG5cblx0XHQvLyB1c2VyIGRhdGFcblxuXHRcdHRoaXMudXNlckRhdGEgPSBzb3VyY2UudXNlckRhdGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIEJveEdlb21ldHJ5XG5cbmZ1bmN0aW9uIEJveEdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIGRlcHRoU2VnbWVudHMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdCb3hHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHdpZHRoOiB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRkZXB0aDogZGVwdGgsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQm94QnVmZmVyR2VvbWV0cnkoIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgZGVwdGhTZWdtZW50cyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkJveEdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuQm94R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQm94R2VvbWV0cnk7XG5cbi8vIEJveEJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIEJveEJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIGRlcHRoU2VnbWVudHMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdCb3hCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHdpZHRoOiB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRkZXB0aDogZGVwdGgsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xuXHR9O1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0d2lkdGggPSB3aWR0aCB8fCAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblx0ZGVwdGggPSBkZXB0aCB8fCAxO1xuXG5cdC8vIHNlZ21lbnRzXG5cblx0d2lkdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKSB8fCAxO1xuXHRoZWlnaHRTZWdtZW50cyA9IE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICkgfHwgMTtcblx0ZGVwdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoIGRlcHRoU2VnbWVudHMgKSB8fCAxO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgbnVtYmVyT2ZWZXJ0aWNlcyA9IDA7XG5cdHZhciBncm91cFN0YXJ0ID0gMDtcblxuXHQvLyBidWlsZCBlYWNoIHNpZGUgb2YgdGhlIGJveCBnZW9tZXRyeVxuXG5cdGJ1aWxkUGxhbmUoICd6JywgJ3knLCAneCcsIC0gMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCB3aWR0aCwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDAgKTsgLy8gcHhcblx0YnVpbGRQbGFuZSggJ3onLCAneScsICd4JywgMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCAtIHdpZHRoLCBkZXB0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgMSApOyAvLyBueFxuXHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAxLCB3aWR0aCwgZGVwdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgZGVwdGhTZWdtZW50cywgMiApOyAvLyBweVxuXHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAtIDEsIHdpZHRoLCBkZXB0aCwgLSBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMsIDMgKTsgLy8gbnlcblx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgMSwgLSAxLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDQgKTsgLy8gcHpcblx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgLSAxLCAtIDEsIHdpZHRoLCBoZWlnaHQsIC0gZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCA1ICk7IC8vIG56XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdGZ1bmN0aW9uIGJ1aWxkUGxhbmUoIHUsIHYsIHcsIHVkaXIsIHZkaXIsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBncmlkWCwgZ3JpZFksIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHR2YXIgc2VnbWVudFdpZHRoID0gd2lkdGggLyBncmlkWDtcblx0XHR2YXIgc2VnbWVudEhlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xuXG5cdFx0dmFyIHdpZHRoSGFsZiA9IHdpZHRoIC8gMjtcblx0XHR2YXIgaGVpZ2h0SGFsZiA9IGhlaWdodCAvIDI7XG5cdFx0dmFyIGRlcHRoSGFsZiA9IGRlcHRoIC8gMjtcblxuXHRcdHZhciBncmlkWDEgPSBncmlkWCArIDE7XG5cdFx0dmFyIGdyaWRZMSA9IGdyaWRZICsgMTtcblxuXHRcdHZhciB2ZXJ0ZXhDb3VudGVyID0gMDtcblx0XHR2YXIgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHR2YXIgaXgsIGl5O1xuXG5cdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdFx0dmFyIHkgPSBpeSAqIHNlZ21lbnRIZWlnaHQgLSBoZWlnaHRIYWxmO1xuXG5cdFx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCArKyApIHtcblxuXHRcdFx0XHR2YXIgeCA9IGl4ICogc2VnbWVudFdpZHRoIC0gd2lkdGhIYWxmO1xuXG5cdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0dmVjdG9yWyB1IF0gPSB4ICogdWRpcjtcblx0XHRcdFx0dmVjdG9yWyB2IF0gPSB5ICogdmRpcjtcblx0XHRcdFx0dmVjdG9yWyB3IF0gPSBkZXB0aEhhbGY7XG5cblx0XHRcdFx0Ly8gbm93IGFwcGx5IHZlY3RvciB0byB2ZXJ0ZXggYnVmZmVyXG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0dmVjdG9yWyB1IF0gPSAwO1xuXHRcdFx0XHR2ZWN0b3JbIHYgXSA9IDA7XG5cdFx0XHRcdHZlY3RvclsgdyBdID0gZGVwdGggPiAwID8gMSA6IC0gMTtcblxuXHRcdFx0XHQvLyBub3cgYXBwbHkgdmVjdG9yIHRvIG5vcm1hbCBidWZmZXJcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcblxuXHRcdFx0XHQvLyB1dnNcblxuXHRcdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0XHR1dnMucHVzaCggMSAtICggaXkgLyBncmlkWSApICk7XG5cblx0XHRcdFx0Ly8gY291bnRlcnNcblxuXHRcdFx0XHR2ZXJ0ZXhDb3VudGVyICs9IDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGluZGljZXNcblxuXHRcdC8vIDEuIHlvdSBuZWVkIHRocmVlIGluZGljZXMgdG8gZHJhdyBhIHNpbmdsZSBmYWNlXG5cdFx0Ly8gMi4gYSBzaW5nbGUgc2VnbWVudCBjb25zaXN0cyBvZiB0d28gZmFjZXNcblx0XHQvLyAzLiBzbyB3ZSBuZWVkIHRvIGdlbmVyYXRlIHNpeCAoMiozKSBpbmRpY2VzIHBlciBzZWdtZW50XG5cblx0XHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkge1xuXG5cdFx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkge1xuXG5cdFx0XHRcdHZhciBhID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogaXk7XG5cdFx0XHRcdHZhciBiID0gbnVtYmVyT2ZWZXJ0aWNlcyArIGl4ICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdFx0dmFyIGMgPSBudW1iZXJPZlZlcnRpY2VzICsgKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdHZhciBkID0gbnVtYmVyT2ZWZXJ0aWNlcyArICggaXggKyAxICkgKyBncmlkWDEgKiBpeTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0XHQvLyBpbmNyZWFzZSBjb3VudGVyXG5cblx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0c2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIG1hdGVyaWFsSW5kZXggKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdFx0Ly8gdXBkYXRlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlc1xuXG5cdFx0bnVtYmVyT2ZWZXJ0aWNlcyArPSB2ZXJ0ZXhDb3VudGVyO1xuXG5cdH1cblxufVxuXG5Cb3hCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkJveEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveEJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFBsYW5lR2VvbWV0cnlcblxuZnVuY3Rpb24gUGxhbmVHZW9tZXRyeSggd2lkdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQbGFuZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBQbGFuZUJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblBsYW5lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5QbGFuZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBsYW5lR2VvbWV0cnk7XG5cbi8vIFBsYW5lQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gUGxhbmVCdWZmZXJHZW9tZXRyeSggd2lkdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQbGFuZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzXG5cdH07XG5cblx0d2lkdGggPSB3aWR0aCB8fCAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblxuXHR2YXIgd2lkdGhfaGFsZiA9IHdpZHRoIC8gMjtcblx0dmFyIGhlaWdodF9oYWxmID0gaGVpZ2h0IC8gMjtcblxuXHR2YXIgZ3JpZFggPSBNYXRoLmZsb29yKCB3aWR0aFNlZ21lbnRzICkgfHwgMTtcblx0dmFyIGdyaWRZID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSB8fCAxO1xuXG5cdHZhciBncmlkWDEgPSBncmlkWCArIDE7XG5cdHZhciBncmlkWTEgPSBncmlkWSArIDE7XG5cblx0dmFyIHNlZ21lbnRfd2lkdGggPSB3aWR0aCAvIGdyaWRYO1xuXHR2YXIgc2VnbWVudF9oZWlnaHQgPSBoZWlnaHQgLyBncmlkWTtcblxuXHR2YXIgaXgsIGl5O1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdHZhciB5ID0gaXkgKiBzZWdtZW50X2hlaWdodCAtIGhlaWdodF9oYWxmO1xuXG5cdFx0Zm9yICggaXggPSAwOyBpeCA8IGdyaWRYMTsgaXggKysgKSB7XG5cblx0XHRcdHZhciB4ID0gaXggKiBzZWdtZW50X3dpZHRoIC0gd2lkdGhfaGFsZjtcblxuXHRcdFx0dmVydGljZXMucHVzaCggeCwgLSB5LCAwICk7XG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0dXZzLnB1c2goIDEgLSAoIGl5IC8gZ3JpZFkgKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaXkgPSAwOyBpeSA8IGdyaWRZOyBpeSArKyApIHtcblxuXHRcdGZvciAoIGl4ID0gMDsgaXggPCBncmlkWDsgaXggKysgKSB7XG5cblx0XHRcdHZhciBhID0gaXggKyBncmlkWDEgKiBpeTtcblx0XHRcdHZhciBiID0gaXggKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0dmFyIGMgPSAoIGl4ICsgMSApICsgZ3JpZFgxICogKCBpeSArIDEgKTtcblx0XHRcdHZhciBkID0gKCBpeCArIDEgKSArIGdyaWRYMSAqIGl5O1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuUGxhbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBsYW5lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGxhbmVCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG52YXIgbWF0ZXJpYWxJZCA9IDA7XG5cbmZ1bmN0aW9uIE1hdGVyaWFsKCkge1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogbWF0ZXJpYWxJZCArKyB9ICk7XG5cblx0dGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XG5cblx0dGhpcy5uYW1lID0gJyc7XG5cdHRoaXMudHlwZSA9ICdNYXRlcmlhbCc7XG5cblx0dGhpcy5mb2cgPSB0cnVlO1xuXHR0aGlzLmxpZ2h0cyA9IHRydWU7XG5cblx0dGhpcy5ibGVuZGluZyA9IE5vcm1hbEJsZW5kaW5nO1xuXHR0aGlzLnNpZGUgPSBGcm9udFNpZGU7XG5cdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBOb0NvbG9yczsgLy8gVEhSRUUuTm9Db2xvcnMsIFRIUkVFLlZlcnRleENvbG9ycywgVEhSRUUuRmFjZUNvbG9yc1xuXG5cdHRoaXMub3BhY2l0eSA9IDE7XG5cdHRoaXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuXHR0aGlzLmJsZW5kU3JjID0gU3JjQWxwaGFGYWN0b3I7XG5cdHRoaXMuYmxlbmREc3QgPSBPbmVNaW51c1NyY0FscGhhRmFjdG9yO1xuXHR0aGlzLmJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjtcblx0dGhpcy5ibGVuZFNyY0FscGhhID0gbnVsbDtcblx0dGhpcy5ibGVuZERzdEFscGhhID0gbnVsbDtcblx0dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXG5cdHRoaXMuZGVwdGhGdW5jID0gTGVzc0VxdWFsRGVwdGg7XG5cdHRoaXMuZGVwdGhUZXN0ID0gdHJ1ZTtcblx0dGhpcy5kZXB0aFdyaXRlID0gdHJ1ZTtcblxuXHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gbnVsbDtcblx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gZmFsc2U7XG5cdHRoaXMuY2xpcFNoYWRvd3MgPSBmYWxzZTtcblxuXHR0aGlzLnNoYWRvd1NpZGUgPSBudWxsO1xuXG5cdHRoaXMuY29sb3JXcml0ZSA9IHRydWU7XG5cblx0dGhpcy5wcmVjaXNpb24gPSBudWxsOyAvLyBvdmVycmlkZSB0aGUgcmVuZGVyZXIncyBkZWZhdWx0IHByZWNpc2lvbiBmb3IgdGhpcyBtYXRlcmlhbFxuXG5cdHRoaXMucG9seWdvbk9mZnNldCA9IGZhbHNlO1xuXHR0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSAwO1xuXHR0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IDA7XG5cblx0dGhpcy5kaXRoZXJpbmcgPSBmYWxzZTtcblxuXHR0aGlzLmFscGhhVGVzdCA9IDA7XG5cdHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG5cblx0dGhpcy5vdmVyZHJhdyA9IDA7IC8vIE92ZXJkcmF3biBwaXhlbHMgKHR5cGljYWxseSBiZXR3ZWVuIDAgYW5kIDEpIGZvciBmaXhpbmcgYW50aWFsaWFzaW5nIGdhcHMgaW4gQ2FudmFzUmVuZGVyZXJcblxuXHR0aGlzLnZpc2libGUgPSB0cnVlO1xuXG5cdHRoaXMudXNlckRhdGEgPSB7fTtcblxuXHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxufVxuXG5NYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTWF0ZXJpYWwsXG5cblx0aXNNYXRlcmlhbDogdHJ1ZSxcblxuXHRvbkJlZm9yZUNvbXBpbGU6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdHNldFZhbHVlczogZnVuY3Rpb24gKCB2YWx1ZXMgKSB7XG5cblx0XHRpZiAoIHZhbHVlcyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Zm9yICggdmFyIGtleSBpbiB2YWx1ZXMgKSB7XG5cblx0XHRcdHZhciBuZXdWYWx1ZSA9IHZhbHVlc1sga2V5IF07XG5cblx0XHRcdGlmICggbmV3VmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuTWF0ZXJpYWw6ICdcIiArIGtleSArIFwiJyBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLlwiICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZvciBiYWNrd2FyZCBjb21wYXRhYmlsaXR5IGlmIHNoYWRpbmcgaXMgc2V0IGluIHRoZSBjb25zdHJ1Y3RvclxuXHRcdFx0aWYgKCBrZXkgPT09ICdzaGFkaW5nJyApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS4nICsgdGhpcy50eXBlICsgJzogLnNoYWRpbmcgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHRoZSBib29sZWFuIC5mbGF0U2hhZGluZyBpbnN0ZWFkLicgKTtcblx0XHRcdFx0dGhpcy5mbGF0U2hhZGluZyA9ICggbmV3VmFsdWUgPT09IEZsYXRTaGFkaW5nICkgPyB0cnVlIDogZmFsc2U7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSB0aGlzWyBrZXkgXTtcblxuXHRcdFx0aWYgKCBjdXJyZW50VmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuXCIgKyB0aGlzLnR5cGUgKyBcIjogJ1wiICsga2V5ICsgXCInIGlzIG5vdCBhIHByb3BlcnR5IG9mIHRoaXMgbWF0ZXJpYWwuXCIgKTtcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdFx0Y3VycmVudFZhbHVlLnNldCggbmV3VmFsdWUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggKCBjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLmlzVmVjdG9yMyApICYmICggbmV3VmFsdWUgJiYgbmV3VmFsdWUuaXNWZWN0b3IzICkgKSB7XG5cblx0XHRcdFx0Y3VycmVudFZhbHVlLmNvcHkoIG5ld1ZhbHVlICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGtleSA9PT0gJ292ZXJkcmF3JyApIHtcblxuXHRcdFx0XHQvLyBlbnN1cmUgb3ZlcmRyYXcgaXMgYmFja3dhcmRzLWNvbXBhdGlibGUgd2l0aCBsZWdhY3kgYm9vbGVhbiB0eXBlXG5cdFx0XHRcdHRoaXNbIGtleSBdID0gTnVtYmVyKCBuZXdWYWx1ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXNbIGtleSBdID0gbmV3VmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGlzUm9vdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0aWYgKCBpc1Jvb3QgKSB7XG5cblx0XHRcdG1ldGEgPSB7XG5cdFx0XHRcdHRleHR1cmVzOiB7fSxcblx0XHRcdFx0aW1hZ2VzOiB7fVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnTWF0ZXJpYWwnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdNYXRlcmlhbC50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIE1hdGVyaWFsIHNlcmlhbGl6YXRpb25cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICYmIHRoaXMuY29sb3IuaXNDb2xvciApIGRhdGEuY29sb3IgPSB0aGlzLmNvbG9yLmdldEhleCgpO1xuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5yb3VnaG5lc3MgPSB0aGlzLnJvdWdobmVzcztcblx0XHRpZiAoIHRoaXMubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLm1ldGFsbmVzcyA9IHRoaXMubWV0YWxuZXNzO1xuXG5cdFx0aWYgKCB0aGlzLmVtaXNzaXZlICYmIHRoaXMuZW1pc3NpdmUuaXNDb2xvciApIGRhdGEuZW1pc3NpdmUgPSB0aGlzLmVtaXNzaXZlLmdldEhleCgpO1xuXHRcdGlmICggdGhpcy5lbWlzc2l2ZUludGVuc2l0eSAhPT0gMSApIGRhdGEuZW1pc3NpdmVJbnRlbnNpdHkgPSB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFyICYmIHRoaXMuc3BlY3VsYXIuaXNDb2xvciApIGRhdGEuc3BlY3VsYXIgPSB0aGlzLnNwZWN1bGFyLmdldEhleCgpO1xuXHRcdGlmICggdGhpcy5zaGluaW5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEuc2hpbmluZXNzID0gdGhpcy5zaGluaW5lc3M7XG5cdFx0aWYgKCB0aGlzLmNsZWFyQ29hdCAhPT0gdW5kZWZpbmVkICkgZGF0YS5jbGVhckNvYXQgPSB0aGlzLmNsZWFyQ29hdDtcblx0XHRpZiAoIHRoaXMuY2xlYXJDb2F0Um91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLmNsZWFyQ29hdFJvdWdobmVzcyA9IHRoaXMuY2xlYXJDb2F0Um91Z2huZXNzO1xuXG5cdFx0aWYgKCB0aGlzLm1hcCAmJiB0aGlzLm1hcC5pc1RleHR1cmUgKSBkYXRhLm1hcCA9IHRoaXMubWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLmFscGhhTWFwICYmIHRoaXMuYWxwaGFNYXAuaXNUZXh0dXJlICkgZGF0YS5hbHBoYU1hcCA9IHRoaXMuYWxwaGFNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMubGlnaHRNYXAgJiYgdGhpcy5saWdodE1hcC5pc1RleHR1cmUgKSBkYXRhLmxpZ2h0TWFwID0gdGhpcy5saWdodE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0aWYgKCB0aGlzLmFvTWFwICYmIHRoaXMuYW9NYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmFvTWFwID0gdGhpcy5hb01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5hb01hcEludGVuc2l0eSA9IHRoaXMuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYnVtcE1hcCAmJiB0aGlzLmJ1bXBNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmJ1bXBNYXAgPSB0aGlzLmJ1bXBNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuYnVtcFNjYWxlID0gdGhpcy5idW1wU2NhbGU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsTWFwICYmIHRoaXMubm9ybWFsTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5ub3JtYWxNYXAgPSB0aGlzLm5vcm1hbE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5ub3JtYWxNYXBUeXBlID0gdGhpcy5ub3JtYWxNYXBUeXBlO1xuXHRcdFx0ZGF0YS5ub3JtYWxTY2FsZSA9IHRoaXMubm9ybWFsU2NhbGUudG9BcnJheSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmRpc3BsYWNlbWVudE1hcCAmJiB0aGlzLmRpc3BsYWNlbWVudE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50TWFwID0gdGhpcy5kaXNwbGFjZW1lbnRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50U2NhbGUgPSB0aGlzLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRCaWFzID0gdGhpcy5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzc01hcCAmJiB0aGlzLnJvdWdobmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLnJvdWdobmVzc01hcCA9IHRoaXMucm91Z2huZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLm1ldGFsbmVzc01hcCAmJiB0aGlzLm1ldGFsbmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLm1ldGFsbmVzc01hcCA9IHRoaXMubWV0YWxuZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuZW1pc3NpdmVNYXAgJiYgdGhpcy5lbWlzc2l2ZU1hcC5pc1RleHR1cmUgKSBkYXRhLmVtaXNzaXZlTWFwID0gdGhpcy5lbWlzc2l2ZU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5zcGVjdWxhck1hcCAmJiB0aGlzLnNwZWN1bGFyTWFwLmlzVGV4dHVyZSApIGRhdGEuc3BlY3VsYXJNYXAgPSB0aGlzLnNwZWN1bGFyTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuZW52TWFwICYmIHRoaXMuZW52TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5lbnZNYXAgPSB0aGlzLmVudk1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5yZWZsZWN0aXZpdHkgPSB0aGlzLnJlZmxlY3Rpdml0eTsgLy8gU2NhbGUgYmVoaW5kIGVudk1hcFxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmdyYWRpZW50TWFwICYmIHRoaXMuZ3JhZGllbnRNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmdyYWRpZW50TWFwID0gdGhpcy5ncmFkaWVudE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuc2l6ZSA9IHRoaXMuc2l6ZTtcblx0XHRpZiAoIHRoaXMuc2l6ZUF0dGVudWF0aW9uICE9PSB1bmRlZmluZWQgKSBkYXRhLnNpemVBdHRlbnVhdGlvbiA9IHRoaXMuc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0aWYgKCB0aGlzLmJsZW5kaW5nICE9PSBOb3JtYWxCbGVuZGluZyApIGRhdGEuYmxlbmRpbmcgPSB0aGlzLmJsZW5kaW5nO1xuXHRcdGlmICggdGhpcy5mbGF0U2hhZGluZyA9PT0gdHJ1ZSApIGRhdGEuZmxhdFNoYWRpbmcgPSB0aGlzLmZsYXRTaGFkaW5nO1xuXHRcdGlmICggdGhpcy5zaWRlICE9PSBGcm9udFNpZGUgKSBkYXRhLnNpZGUgPSB0aGlzLnNpZGU7XG5cdFx0aWYgKCB0aGlzLnZlcnRleENvbG9ycyAhPT0gTm9Db2xvcnMgKSBkYXRhLnZlcnRleENvbG9ycyA9IHRoaXMudmVydGV4Q29sb3JzO1xuXG5cdFx0aWYgKCB0aGlzLm9wYWNpdHkgPCAxICkgZGF0YS5vcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuXHRcdGlmICggdGhpcy50cmFuc3BhcmVudCA9PT0gdHJ1ZSApIGRhdGEudHJhbnNwYXJlbnQgPSB0aGlzLnRyYW5zcGFyZW50O1xuXG5cdFx0ZGF0YS5kZXB0aEZ1bmMgPSB0aGlzLmRlcHRoRnVuYztcblx0XHRkYXRhLmRlcHRoVGVzdCA9IHRoaXMuZGVwdGhUZXN0O1xuXHRcdGRhdGEuZGVwdGhXcml0ZSA9IHRoaXMuZGVwdGhXcml0ZTtcblxuXHRcdC8vIHJvdGF0aW9uIChTcHJpdGVNYXRlcmlhbClcblx0XHRpZiAoIHRoaXMucm90YXRpb24gIT09IDAgKSBkYXRhLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbjtcblxuXHRcdGlmICggdGhpcy5saW5ld2lkdGggIT09IDEgKSBkYXRhLmxpbmV3aWR0aCA9IHRoaXMubGluZXdpZHRoO1xuXHRcdGlmICggdGhpcy5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5kYXNoU2l6ZSA9IHRoaXMuZGFzaFNpemU7XG5cdFx0aWYgKCB0aGlzLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZ2FwU2l6ZSA9IHRoaXMuZ2FwU2l6ZTtcblx0XHRpZiAoIHRoaXMuc2NhbGUgIT09IHVuZGVmaW5lZCApIGRhdGEuc2NhbGUgPSB0aGlzLnNjYWxlO1xuXG5cdFx0aWYgKCB0aGlzLmRpdGhlcmluZyA9PT0gdHJ1ZSApIGRhdGEuZGl0aGVyaW5nID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5hbHBoYVRlc3QgPiAwICkgZGF0YS5hbHBoYVRlc3QgPSB0aGlzLmFscGhhVGVzdDtcblx0XHRpZiAoIHRoaXMucHJlbXVsdGlwbGllZEFscGhhID09PSB0cnVlICkgZGF0YS5wcmVtdWx0aXBsaWVkQWxwaGEgPSB0aGlzLnByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdGlmICggdGhpcy53aXJlZnJhbWUgPT09IHRydWUgKSBkYXRhLndpcmVmcmFtZSA9IHRoaXMud2lyZWZyYW1lO1xuXHRcdGlmICggdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPiAxICkgZGF0YS53aXJlZnJhbWVMaW5ld2lkdGggPSB0aGlzLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZWNhcCAhPT0gJ3JvdW5kJyApIGRhdGEud2lyZWZyYW1lTGluZWNhcCA9IHRoaXMud2lyZWZyYW1lTGluZWNhcDtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZWpvaW4gIT09ICdyb3VuZCcgKSBkYXRhLndpcmVmcmFtZUxpbmVqb2luID0gdGhpcy53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdGlmICggdGhpcy5tb3JwaFRhcmdldHMgPT09IHRydWUgKSBkYXRhLm1vcnBoVGFyZ2V0cyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnNraW5uaW5nID09PSB0cnVlICkgZGF0YS5za2lubmluZyA9IHRydWU7XG5cblx0XHRpZiAoIHRoaXMudmlzaWJsZSA9PT0gZmFsc2UgKSBkYXRhLnZpc2libGUgPSBmYWxzZTtcblx0XHRpZiAoIEpTT04uc3RyaW5naWZ5KCB0aGlzLnVzZXJEYXRhICkgIT09ICd7fScgKSBkYXRhLnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdC8vIFRPRE86IENvcGllZCBmcm9tIE9iamVjdDNELnRvSlNPTlxuXG5cdFx0ZnVuY3Rpb24gZXh0cmFjdEZyb21DYWNoZSggY2FjaGUgKSB7XG5cblx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IGNhY2hlWyBrZXkgXTtcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlcztcblxuXHRcdH1cblxuXHRcdGlmICggaXNSb290ICkge1xuXG5cdFx0XHR2YXIgdGV4dHVyZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnRleHR1cmVzICk7XG5cdFx0XHR2YXIgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5pbWFnZXMgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlcy5sZW5ndGggPiAwICkgZGF0YS50ZXh0dXJlcyA9IHRleHR1cmVzO1xuXHRcdFx0aWYgKCBpbWFnZXMubGVuZ3RoID4gMCApIGRhdGEuaW1hZ2VzID0gaW1hZ2VzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblx0XHR0aGlzLmxpZ2h0cyA9IHNvdXJjZS5saWdodHM7XG5cblx0XHR0aGlzLmJsZW5kaW5nID0gc291cmNlLmJsZW5kaW5nO1xuXHRcdHRoaXMuc2lkZSA9IHNvdXJjZS5zaWRlO1xuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBzb3VyY2UuZmxhdFNoYWRpbmc7XG5cdFx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBzb3VyY2UudmVydGV4Q29sb3JzO1xuXG5cdFx0dGhpcy5vcGFjaXR5ID0gc291cmNlLm9wYWNpdHk7XG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IHNvdXJjZS50cmFuc3BhcmVudDtcblxuXHRcdHRoaXMuYmxlbmRTcmMgPSBzb3VyY2UuYmxlbmRTcmM7XG5cdFx0dGhpcy5ibGVuZERzdCA9IHNvdXJjZS5ibGVuZERzdDtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb24gPSBzb3VyY2UuYmxlbmRFcXVhdGlvbjtcblx0XHR0aGlzLmJsZW5kU3JjQWxwaGEgPSBzb3VyY2UuYmxlbmRTcmNBbHBoYTtcblx0XHR0aGlzLmJsZW5kRHN0QWxwaGEgPSBzb3VyY2UuYmxlbmREc3RBbHBoYTtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSA9IHNvdXJjZS5ibGVuZEVxdWF0aW9uQWxwaGE7XG5cblx0XHR0aGlzLmRlcHRoRnVuYyA9IHNvdXJjZS5kZXB0aEZ1bmM7XG5cdFx0dGhpcy5kZXB0aFRlc3QgPSBzb3VyY2UuZGVwdGhUZXN0O1xuXHRcdHRoaXMuZGVwdGhXcml0ZSA9IHNvdXJjZS5kZXB0aFdyaXRlO1xuXG5cdFx0dGhpcy5jb2xvcldyaXRlID0gc291cmNlLmNvbG9yV3JpdGU7XG5cblx0XHR0aGlzLnByZWNpc2lvbiA9IHNvdXJjZS5wcmVjaXNpb247XG5cblx0XHR0aGlzLnBvbHlnb25PZmZzZXQgPSBzb3VyY2UucG9seWdvbk9mZnNldDtcblx0XHR0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSBzb3VyY2UucG9seWdvbk9mZnNldEZhY3Rvcjtcblx0XHR0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IHNvdXJjZS5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHR0aGlzLmRpdGhlcmluZyA9IHNvdXJjZS5kaXRoZXJpbmc7XG5cblx0XHR0aGlzLmFscGhhVGVzdCA9IHNvdXJjZS5hbHBoYVRlc3Q7XG5cdFx0dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPSBzb3VyY2UucHJlbXVsdGlwbGllZEFscGhhO1xuXG5cdFx0dGhpcy5vdmVyZHJhdyA9IHNvdXJjZS5vdmVyZHJhdztcblxuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcblxuXHRcdHRoaXMuY2xpcFNoYWRvd3MgPSBzb3VyY2UuY2xpcFNoYWRvd3M7XG5cdFx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gc291cmNlLmNsaXBJbnRlcnNlY3Rpb247XG5cblx0XHR2YXIgc3JjUGxhbmVzID0gc291cmNlLmNsaXBwaW5nUGxhbmVzLFxuXHRcdFx0ZHN0UGxhbmVzID0gbnVsbDtcblxuXHRcdGlmICggc3JjUGxhbmVzICE9PSBudWxsICkge1xuXG5cdFx0XHR2YXIgbiA9IHNyY1BsYW5lcy5sZW5ndGg7XG5cdFx0XHRkc3RQbGFuZXMgPSBuZXcgQXJyYXkoIG4gKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpIClcblx0XHRcdFx0ZHN0UGxhbmVzWyBpIF0gPSBzcmNQbGFuZXNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IGRzdFBsYW5lcztcblxuXHRcdHRoaXMuc2hhZG93U2lkZSA9IHNvdXJjZS5zaGFkb3dTaWRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHksXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgZGVwdGhUZXN0OiA8Ym9vbD4sXG4gKiAgZGVwdGhXcml0ZTogPGJvb2w+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoQmFzaWNNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ01lc2hCYXNpY01hdGVyaWFsJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBlbWlzc2l2ZVxuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblxuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoQmFzaWNNYXRlcmlhbDtcblxuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaEJhc2ljTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMubGlnaHRNYXAgPSBzb3VyY2UubGlnaHRNYXA7XG5cdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgZGVmaW5lczogeyBcImxhYmVsXCIgOiBcInZhbHVlXCIgfSxcbiAqICB1bmlmb3JtczogeyBcInBhcmFtZXRlcjFcIjogeyB2YWx1ZTogMS4wIH0sIFwicGFyYW1ldGVyMlwiOiB7IHZhbHVlMjogMiB9IH0sXG4gKlxuICogIGZyYWdtZW50U2hhZGVyOiA8c3RyaW5nPixcbiAqICB2ZXJ0ZXhTaGFkZXI6IDxzdHJpbmc+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIGxpZ2h0czogPGJvb2w+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gU2hhZGVyTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTaGFkZXJNYXRlcmlhbCc7XG5cblx0dGhpcy5kZWZpbmVzID0ge307XG5cdHRoaXMudW5pZm9ybXMgPSB7fTtcblxuXHR0aGlzLnZlcnRleFNoYWRlciA9ICd2b2lkIG1haW4oKSB7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcbn0nO1xuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gJ3ZvaWQgbWFpbigpIHtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMC4wLCAxLjAgKTtcXG59JztcblxuXHR0aGlzLmxpbmV3aWR0aCA9IDE7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdHRoaXMuZm9nID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2NlbmUgZm9nXG5cdHRoaXMubGlnaHRzID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2NlbmUgbGlnaHRzXG5cdHRoaXMuY2xpcHBpbmcgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSB1c2VyLWRlZmluZWQgY2xpcHBpbmcgcGxhbmVzXG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIHNraW5uaW5nIGF0dHJpYnV0ZSBzdHJlYW1zXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7IC8vIHNldCB0byB1c2UgbW9ycGggdGFyZ2V0c1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIG1vcnBoIG5vcm1hbHNcblxuXHR0aGlzLmV4dGVuc2lvbnMgPSB7XG5cdFx0ZGVyaXZhdGl2ZXM6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGRlcml2YXRpdmVzXG5cdFx0ZnJhZ0RlcHRoOiBmYWxzZSwgLy8gc2V0IHRvIHVzZSBmcmFnbWVudCBkZXB0aCB2YWx1ZXNcblx0XHRkcmF3QnVmZmVyczogZmFsc2UsIC8vIHNldCB0byB1c2UgZHJhdyBidWZmZXJzXG5cdFx0c2hhZGVyVGV4dHVyZUxPRDogZmFsc2UgLy8gc2V0IHRvIHVzZSBzaGFkZXIgdGV4dHVyZSBMT0Rcblx0fTtcblxuXHQvLyBXaGVuIHJlbmRlcmVkIGdlb21ldHJ5IGRvZXNuJ3QgaW5jbHVkZSB0aGVzZSBhdHRyaWJ1dGVzIGJ1dCB0aGUgbWF0ZXJpYWwgZG9lcyxcblx0Ly8gdXNlIHRoZXNlIGRlZmF1bHQgdmFsdWVzIGluIFdlYkdMLiBUaGlzIGF2b2lkcyBlcnJvcnMgd2hlbiBidWZmZXIgZGF0YSBpcyBtaXNzaW5nLlxuXHR0aGlzLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgPSB7XG5cdFx0J2NvbG9yJzogWyAxLCAxLCAxIF0sXG5cdFx0J3V2JzogWyAwLCAwIF0sXG5cdFx0J3V2Mic6IFsgMCwgMCBdXG5cdH07XG5cblx0dGhpcy5pbmRleDBBdHRyaWJ1dGVOYW1lID0gdW5kZWZpbmVkO1xuXHR0aGlzLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmF0dHJpYnV0ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNoYWRlck1hdGVyaWFsOiBhdHRyaWJ1dGVzIHNob3VsZCBub3cgYmUgZGVmaW5lZCBpbiBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG59XG5cblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhZGVyTWF0ZXJpYWw7XG5cblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5pc1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gc291cmNlLmZyYWdtZW50U2hhZGVyO1xuXHR0aGlzLnZlcnRleFNoYWRlciA9IHNvdXJjZS52ZXJ0ZXhTaGFkZXI7XG5cblx0dGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMuY2xvbmUoIHNvdXJjZS51bmlmb3JtcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UuZGVmaW5lcyApO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXG5cdHRoaXMubGlnaHRzID0gc291cmNlLmxpZ2h0cztcblx0dGhpcy5jbGlwcGluZyA9IHNvdXJjZS5jbGlwcGluZztcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHRoaXMuZXh0ZW5zaW9ucyA9IHNvdXJjZS5leHRlbnNpb25zO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdHZhciBkYXRhID0gTWF0ZXJpYWwucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0ZGF0YS51bmlmb3JtcyA9IHRoaXMudW5pZm9ybXM7XG5cdGRhdGEudmVydGV4U2hhZGVyID0gdGhpcy52ZXJ0ZXhTaGFkZXI7XG5cdGRhdGEuZnJhZ21lbnRTaGFkZXIgPSB0aGlzLmZyYWdtZW50U2hhZGVyO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG5mdW5jdGlvbiBSYXkoIG9yaWdpbiwgZGlyZWN0aW9uICkge1xuXG5cdHRoaXMub3JpZ2luID0gKCBvcmlnaW4gIT09IHVuZGVmaW5lZCApID8gb3JpZ2luIDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5kaXJlY3Rpb24gPSAoIGRpcmVjdGlvbiAhPT0gdW5kZWZpbmVkICkgPyBkaXJlY3Rpb24gOiBuZXcgVmVjdG9yMygpO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFJheS5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggb3JpZ2luLCBkaXJlY3Rpb24gKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5jb3B5KCBvcmlnaW4gKTtcblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCBkaXJlY3Rpb24gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggcmF5ICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uY29weSggcmF5Lm9yaWdpbiApO1xuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIHJheS5kaXJlY3Rpb24gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXQ6IGZ1bmN0aW9uICggdCwgdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuYXQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5vcmlnaW4gKTtcblxuXHR9LFxuXG5cdGxvb2tBdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy5kaXJlY3Rpb24uY29weSggdiApLnN1YiggdGhpcy5vcmlnaW4gKS5ub3JtYWxpemUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cmVjYXN0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJlY2FzdCggdCApIHtcblxuXHRcdFx0dGhpcy5vcmlnaW4uY29weSggdGhpcy5hdCggdCwgdjEgKSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmNsb3Nlc3RQb2ludFRvUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5vcmlnaW4gKTtcblxuXHRcdHZhciBkaXJlY3Rpb25EaXN0YW5jZSA9IHRhcmdldC5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cblx0XHRpZiAoIGRpcmVjdGlvbkRpc3RhbmNlIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLmRpcmVjdGlvbiApLm11bHRpcGx5U2NhbGFyKCBkaXJlY3Rpb25EaXN0YW5jZSApLmFkZCggdGhpcy5vcmlnaW4gKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9Qb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICkgKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlU3FUb1BvaW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdFx0dmFyIGRpcmVjdGlvbkRpc3RhbmNlID0gdjEuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMub3JpZ2luICkuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0XHQvLyBwb2ludCBiZWhpbmQgdGhlIHJheVxuXG5cdFx0XHRpZiAoIGRpcmVjdGlvbkRpc3RhbmNlIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW4uZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0djEuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggZGlyZWN0aW9uRGlzdGFuY2UgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0XHRcdHJldHVybiB2MS5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGRpc3RhbmNlU3FUb1NlZ21lbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBzZWdDZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBzZWdEaXIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBkaWZmID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBkaXN0YW5jZVNxVG9TZWdtZW50KCB2MCwgdjEsIG9wdGlvbmFsUG9pbnRPblJheSwgb3B0aW9uYWxQb2ludE9uU2VnbWVudCApIHtcblxuXHRcdFx0Ly8gZnJvbSBodHRwOi8vd3d3Lmdlb21ldHJpY3Rvb2xzLmNvbS9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZURpc3RSYXlTZWdtZW50Lmhcblx0XHRcdC8vIEl0IHJldHVybnMgdGhlIG1pbiBkaXN0YW5jZSBiZXR3ZWVuIHRoZSByYXkgYW5kIHRoZSBzZWdtZW50XG5cdFx0XHQvLyBkZWZpbmVkIGJ5IHYwIGFuZCB2MVxuXHRcdFx0Ly8gSXQgY2FuIGFsc28gc2V0IHR3byBvcHRpb25hbCB0YXJnZXRzIDpcblx0XHRcdC8vIC0gVGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHJheVxuXHRcdFx0Ly8gLSBUaGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgc2VnbWVudFxuXG5cdFx0XHRzZWdDZW50ZXIuY29weSggdjAgKS5hZGQoIHYxICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXHRcdFx0c2VnRGlyLmNvcHkoIHYxICkuc3ViKCB2MCApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0ZGlmZi5jb3B5KCB0aGlzLm9yaWdpbiApLnN1Yiggc2VnQ2VudGVyICk7XG5cblx0XHRcdHZhciBzZWdFeHRlbnQgPSB2MC5kaXN0YW5jZVRvKCB2MSApICogMC41O1xuXHRcdFx0dmFyIGEwMSA9IC0gdGhpcy5kaXJlY3Rpb24uZG90KCBzZWdEaXIgKTtcblx0XHRcdHZhciBiMCA9IGRpZmYuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXHRcdFx0dmFyIGIxID0gLSBkaWZmLmRvdCggc2VnRGlyICk7XG5cdFx0XHR2YXIgYyA9IGRpZmYubGVuZ3RoU3EoKTtcblx0XHRcdHZhciBkZXQgPSBNYXRoLmFicyggMSAtIGEwMSAqIGEwMSApO1xuXHRcdFx0dmFyIHMwLCBzMSwgc3FyRGlzdCwgZXh0RGV0O1xuXG5cdFx0XHRpZiAoIGRldCA+IDAgKSB7XG5cblx0XHRcdFx0Ly8gVGhlIHJheSBhbmQgc2VnbWVudCBhcmUgbm90IHBhcmFsbGVsLlxuXG5cdFx0XHRcdHMwID0gYTAxICogYjEgLSBiMDtcblx0XHRcdFx0czEgPSBhMDEgKiBiMCAtIGIxO1xuXHRcdFx0XHRleHREZXQgPSBzZWdFeHRlbnQgKiBkZXQ7XG5cblx0XHRcdFx0aWYgKCBzMCA+PSAwICkge1xuXG5cdFx0XHRcdFx0aWYgKCBzMSA+PSAtIGV4dERldCApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBzMSA8PSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDBcblx0XHRcdFx0XHRcdFx0Ly8gTWluaW11bSBhdCBpbnRlcmlvciBwb2ludHMgb2YgcmF5IGFuZCBzZWdtZW50LlxuXG5cdFx0XHRcdFx0XHRcdHZhciBpbnZEZXQgPSAxIC8gZGV0O1xuXHRcdFx0XHRcdFx0XHRzMCAqPSBpbnZEZXQ7XG5cdFx0XHRcdFx0XHRcdHMxICo9IGludkRldDtcblx0XHRcdFx0XHRcdFx0c3FyRGlzdCA9IHMwICogKCBzMCArIGEwMSAqIHMxICsgMiAqIGIwICkgKyBzMSAqICggYTAxICogczAgKyBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyByZWdpb24gMVxuXG5cdFx0XHRcdFx0XHRcdHMxID0gc2VnRXh0ZW50O1xuXHRcdFx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7XG5cdFx0XHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIHJlZ2lvbiA1XG5cblx0XHRcdFx0XHRcdHMxID0gLSBzZWdFeHRlbnQ7XG5cdFx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7XG5cdFx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHMxIDw9IC0gZXh0RGV0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gNFxuXG5cdFx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggLSBhMDEgKiBzZWdFeHRlbnQgKyBiMCApICk7XG5cdFx0XHRcdFx0XHRzMSA9ICggczAgPiAwICkgPyAtIHNlZ0V4dGVudCA6IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XG5cdFx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggczEgPD0gZXh0RGV0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gM1xuXG5cdFx0XHRcdFx0XHRzMCA9IDA7XG5cdFx0XHRcdFx0XHRzMSA9IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XG5cdFx0XHRcdFx0XHRzcXJEaXN0ID0gczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDJcblxuXHRcdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTtcblx0XHRcdFx0XHRcdHMxID0gKCBzMCA+IDAgKSA/IHNlZ0V4dGVudCA6IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XG5cdFx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBSYXkgYW5kIHNlZ21lbnQgYXJlIHBhcmFsbGVsLlxuXG5cdFx0XHRcdHMxID0gKCBhMDEgPiAwICkgPyAtIHNlZ0V4dGVudCA6IHNlZ0V4dGVudDtcblx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHMxICsgYjAgKSApO1xuXHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb3B0aW9uYWxQb2ludE9uUmF5ICkge1xuXG5cdFx0XHRcdG9wdGlvbmFsUG9pbnRPblJheS5jb3B5KCB0aGlzLmRpcmVjdGlvbiApLm11bHRpcGx5U2NhbGFyKCBzMCApLmFkZCggdGhpcy5vcmlnaW4gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7XG5cblx0XHRcdFx0b3B0aW9uYWxQb2ludE9uU2VnbWVudC5jb3B5KCBzZWdEaXIgKS5tdWx0aXBseVNjYWxhciggczEgKS5hZGQoIHNlZ0NlbnRlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzcXJEaXN0O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0aW50ZXJzZWN0U3BoZXJlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjEgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdFNwaGVyZSggc3BoZXJlLCB0YXJnZXQgKSB7XG5cblx0XHRcdHYxLnN1YlZlY3RvcnMoIHNwaGVyZS5jZW50ZXIsIHRoaXMub3JpZ2luICk7XG5cdFx0XHR2YXIgdGNhID0gdjEuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXHRcdFx0dmFyIGQyID0gdjEuZG90KCB2MSApIC0gdGNhICogdGNhO1xuXHRcdFx0dmFyIHJhZGl1czIgPSBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cztcblxuXHRcdFx0aWYgKCBkMiA+IHJhZGl1czIgKSByZXR1cm4gbnVsbDtcblxuXHRcdFx0dmFyIHRoYyA9IE1hdGguc3FydCggcmFkaXVzMiAtIGQyICk7XG5cblx0XHRcdC8vIHQwID0gZmlyc3QgaW50ZXJzZWN0IHBvaW50IC0gZW50cmFuY2Ugb24gZnJvbnQgb2Ygc3BoZXJlXG5cdFx0XHR2YXIgdDAgPSB0Y2EgLSB0aGM7XG5cblx0XHRcdC8vIHQxID0gc2Vjb25kIGludGVyc2VjdCBwb2ludCAtIGV4aXQgcG9pbnQgb24gYmFjayBvZiBzcGhlcmVcblx0XHRcdHZhciB0MSA9IHRjYSArIHRoYztcblxuXHRcdFx0Ly8gdGVzdCB0byBzZWUgaWYgYm90aCB0MCBhbmQgdDEgYXJlIGJlaGluZCB0aGUgcmF5IC0gaWYgc28sIHJldHVybiBudWxsXG5cdFx0XHRpZiAoIHQwIDwgMCAmJiB0MSA8IDAgKSByZXR1cm4gbnVsbDtcblxuXHRcdFx0Ly8gdGVzdCB0byBzZWUgaWYgdDAgaXMgYmVoaW5kIHRoZSByYXk6XG5cdFx0XHQvLyBpZiBpdCBpcywgdGhlIHJheSBpcyBpbnNpZGUgdGhlIHNwaGVyZSwgc28gcmV0dXJuIHRoZSBzZWNvbmQgZXhpdCBwb2ludCBzY2FsZWQgYnkgdDEsXG5cdFx0XHQvLyBpbiBvcmRlciB0byBhbHdheXMgcmV0dXJuIGFuIGludGVyc2VjdCBwb2ludCB0aGF0IGlzIGluIGZyb250IG9mIHRoZSByYXkuXG5cdFx0XHRpZiAoIHQwIDwgMCApIHJldHVybiB0aGlzLmF0KCB0MSwgdGFyZ2V0ICk7XG5cblx0XHRcdC8vIGVsc2UgdDAgaXMgaW4gZnJvbnQgb2YgdGhlIHJheSwgc28gcmV0dXJuIHRoZSBmaXJzdCBjb2xsaXNpb24gcG9pbnQgc2NhbGVkIGJ5IHQwXG5cdFx0XHRyZXR1cm4gdGhpcy5hdCggdDAsIHRhcmdldCApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0aW50ZXJzZWN0c1NwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSA8PSBzcGhlcmUucmFkaXVzO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0dmFyIGRlbm9taW5hdG9yID0gcGxhbmUubm9ybWFsLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSB7XG5cblx0XHRcdC8vIGxpbmUgaXMgY29wbGFuYXIsIHJldHVybiBvcmlnaW5cblx0XHRcdGlmICggcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLm9yaWdpbiApID09PSAwICkge1xuXG5cdFx0XHRcdHJldHVybiAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIE51bGwgaXMgcHJlZmVyYWJsZSB0byB1bmRlZmluZWQgc2luY2UgdW5kZWZpbmVkIG1lYW5zLi4uLiBpdCBpcyB1bmRlZmluZWRcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHR2YXIgdCA9IC0gKCB0aGlzLm9yaWdpbi5kb3QoIHBsYW5lLm5vcm1hbCApICsgcGxhbmUuY29uc3RhbnQgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0Ly8gUmV0dXJuIGlmIHRoZSByYXkgbmV2ZXIgaW50ZXJzZWN0cyB0aGUgcGxhbmVcblxuXHRcdHJldHVybiB0ID49IDAgPyB0IDogbnVsbDtcblxuXHR9LFxuXG5cdGludGVyc2VjdFBsYW5lOiBmdW5jdGlvbiAoIHBsYW5lLCB0YXJnZXQgKSB7XG5cblx0XHR2YXIgdCA9IHRoaXMuZGlzdGFuY2VUb1BsYW5lKCBwbGFuZSApO1xuXG5cdFx0aWYgKCB0ID09PSBudWxsICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmF0KCB0LCB0YXJnZXQgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNQbGFuZTogZnVuY3Rpb24gKCBwbGFuZSApIHtcblxuXHRcdC8vIGNoZWNrIGlmIHRoZSByYXkgbGllcyBvbiB0aGUgcGxhbmUgZmlyc3RcblxuXHRcdHZhciBkaXN0VG9Qb2ludCA9IHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5vcmlnaW4gKTtcblxuXHRcdGlmICggZGlzdFRvUG9pbnQgPT09IDAgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGRlbm9taW5hdG9yID0gcGxhbmUubm9ybWFsLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgKiBkaXN0VG9Qb2ludCA8IDAgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gcmF5IG9yaWdpbiBpcyBiZWhpbmQgdGhlIHBsYW5lIChhbmQgaXMgcG9pbnRpbmcgYmVoaW5kIGl0KVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0Qm94OiBmdW5jdGlvbiAoIGJveCwgdGFyZ2V0ICkge1xuXG5cdFx0dmFyIHRtaW4sIHRtYXgsIHR5bWluLCB0eW1heCwgdHptaW4sIHR6bWF4O1xuXG5cdFx0dmFyIGludmRpcnggPSAxIC8gdGhpcy5kaXJlY3Rpb24ueCxcblx0XHRcdGludmRpcnkgPSAxIC8gdGhpcy5kaXJlY3Rpb24ueSxcblx0XHRcdGludmRpcnogPSAxIC8gdGhpcy5kaXJlY3Rpb24uejtcblxuXHRcdHZhciBvcmlnaW4gPSB0aGlzLm9yaWdpbjtcblxuXHRcdGlmICggaW52ZGlyeCA+PSAwICkge1xuXG5cdFx0XHR0bWluID0gKCBib3gubWluLnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblx0XHRcdHRtYXggPSAoIGJveC5tYXgueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dG1pbiA9ICggYm94Lm1heC54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cdFx0XHR0bWF4ID0gKCBib3gubWluLnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblxuXHRcdH1cblxuXHRcdGlmICggaW52ZGlyeSA+PSAwICkge1xuXG5cdFx0XHR0eW1pbiA9ICggYm94Lm1pbi55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cdFx0XHR0eW1heCA9ICggYm94Lm1heC55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0eW1pbiA9ICggYm94Lm1heC55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cdFx0XHR0eW1heCA9ICggYm94Lm1pbi55IC0gb3JpZ2luLnkgKSAqIGludmRpcnk7XG5cblx0XHR9XG5cblx0XHRpZiAoICggdG1pbiA+IHR5bWF4ICkgfHwgKCB0eW1pbiA+IHRtYXggKSApIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gVGhlc2UgbGluZXMgYWxzbyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdG1pbiBvciB0bWF4IGlzIE5hTlxuXHRcdC8vIChyZXN1bHQgb2YgMCAqIEluZmluaXR5KS4geCAhPT0geCByZXR1cm5zIHRydWUgaWYgeCBpcyBOYU5cblxuXHRcdGlmICggdHltaW4gPiB0bWluIHx8IHRtaW4gIT09IHRtaW4gKSB0bWluID0gdHltaW47XG5cblx0XHRpZiAoIHR5bWF4IDwgdG1heCB8fCB0bWF4ICE9PSB0bWF4ICkgdG1heCA9IHR5bWF4O1xuXG5cdFx0aWYgKCBpbnZkaXJ6ID49IDAgKSB7XG5cblx0XHRcdHR6bWluID0gKCBib3gubWluLnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblx0XHRcdHR6bWF4ID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHR6bWluID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblx0XHRcdHR6bWF4ID0gKCBib3gubWluLnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblxuXHRcdH1cblxuXHRcdGlmICggKCB0bWluID4gdHptYXggKSB8fCAoIHR6bWluID4gdG1heCApICkgcmV0dXJuIG51bGw7XG5cblx0XHRpZiAoIHR6bWluID4gdG1pbiB8fCB0bWluICE9PSB0bWluICkgdG1pbiA9IHR6bWluO1xuXG5cdFx0aWYgKCB0em1heCA8IHRtYXggfHwgdG1heCAhPT0gdG1heCApIHRtYXggPSB0em1heDtcblxuXHRcdC8vcmV0dXJuIHBvaW50IGNsb3Nlc3QgdG8gdGhlIHJheSAocG9zaXRpdmUgc2lkZSlcblxuXHRcdGlmICggdG1heCA8IDAgKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiB0aGlzLmF0KCB0bWluID49IDAgPyB0bWluIDogdG1heCwgdGFyZ2V0ICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzQm94OiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmludGVyc2VjdEJveCggYm94LCB2ICkgIT09IG51bGw7XG5cblx0XHR9O1xuXG5cdH0gKSgpLFxuXG5cdGludGVyc2VjdFRyaWFuZ2xlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBDb21wdXRlIHRoZSBvZmZzZXQgb3JpZ2luLCBlZGdlcywgYW5kIG5vcm1hbC5cblx0XHR2YXIgZGlmZiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGVkZ2UxID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgZWRnZTIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGludGVyc2VjdFRyaWFuZ2xlKCBhLCBiLCBjLCBiYWNrZmFjZUN1bGxpbmcsIHRhcmdldCApIHtcblxuXHRcdFx0Ly8gZnJvbSBodHRwOi8vd3d3Lmdlb21ldHJpY3Rvb2xzLmNvbS9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZUludHJSYXkzVHJpYW5nbGUzLmhcblxuXHRcdFx0ZWRnZTEuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdFx0ZWRnZTIuc3ViVmVjdG9ycyggYywgYSApO1xuXHRcdFx0bm9ybWFsLmNyb3NzVmVjdG9ycyggZWRnZTEsIGVkZ2UyICk7XG5cblx0XHRcdC8vIFNvbHZlIFEgKyB0KkQgPSBiMSpFMSArIGIyKkUyIChRID0ga0RpZmYsIEQgPSByYXkgZGlyZWN0aW9uLFxuXHRcdFx0Ly8gRTEgPSBrRWRnZTEsIEUyID0ga0VkZ2UyLCBOID0gQ3Jvc3MoRTEsRTIpKSBieVxuXHRcdFx0Ly8gICB8RG90KEQsTil8KmIxID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoUSxFMikpXG5cdFx0XHQvLyAgIHxEb3QoRCxOKXwqYjIgPSBzaWduKERvdChELE4pKSpEb3QoRCxDcm9zcyhFMSxRKSlcblx0XHRcdC8vICAgfERvdChELE4pfCp0ID0gLXNpZ24oRG90KEQsTikpKkRvdChRLE4pXG5cdFx0XHR2YXIgRGROID0gdGhpcy5kaXJlY3Rpb24uZG90KCBub3JtYWwgKTtcblx0XHRcdHZhciBzaWduO1xuXG5cdFx0XHRpZiAoIERkTiA+IDAgKSB7XG5cblx0XHRcdFx0aWYgKCBiYWNrZmFjZUN1bGxpbmcgKSByZXR1cm4gbnVsbDtcblx0XHRcdFx0c2lnbiA9IDE7XG5cblx0XHRcdH0gZWxzZSBpZiAoIERkTiA8IDAgKSB7XG5cblx0XHRcdFx0c2lnbiA9IC0gMTtcblx0XHRcdFx0RGROID0gLSBEZE47XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0ZGlmZi5zdWJWZWN0b3JzKCB0aGlzLm9yaWdpbiwgYSApO1xuXHRcdFx0dmFyIERkUXhFMiA9IHNpZ24gKiB0aGlzLmRpcmVjdGlvbi5kb3QoIGVkZ2UyLmNyb3NzVmVjdG9ycyggZGlmZiwgZWRnZTIgKSApO1xuXG5cdFx0XHQvLyBiMSA8IDAsIG5vIGludGVyc2VjdGlvblxuXHRcdFx0aWYgKCBEZFF4RTIgPCAwICkge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBEZEUxeFEgPSBzaWduICogdGhpcy5kaXJlY3Rpb24uZG90KCBlZGdlMS5jcm9zcyggZGlmZiApICk7XG5cblx0XHRcdC8vIGIyIDwgMCwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0XHRpZiAoIERkRTF4USA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gYjErYjIgPiAxLCBubyBpbnRlcnNlY3Rpb25cblx0XHRcdGlmICggRGRReEUyICsgRGRFMXhRID4gRGROICkge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIExpbmUgaW50ZXJzZWN0cyB0cmlhbmdsZSwgY2hlY2sgaWYgcmF5IGRvZXMuXG5cdFx0XHR2YXIgUWROID0gLSBzaWduICogZGlmZi5kb3QoIG5vcm1hbCApO1xuXG5cdFx0XHQvLyB0IDwgMCwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0XHRpZiAoIFFkTiA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmF5IGludGVyc2VjdHMgdHJpYW5nbGUuXG5cdFx0XHRyZXR1cm4gdGhpcy5hdCggUWROIC8gRGROLCB0YXJnZXQgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtYXRyaXg0ICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uYXBwbHlNYXRyaXg0KCBtYXRyaXg0ICk7XG5cdFx0dGhpcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXg0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCByYXkgKSB7XG5cblx0XHRyZXR1cm4gcmF5Lm9yaWdpbi5lcXVhbHMoIHRoaXMub3JpZ2luICkgJiYgcmF5LmRpcmVjdGlvbi5lcXVhbHMoIHRoaXMuZGlyZWN0aW9uICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbmZ1bmN0aW9uIExpbmUzKCBzdGFydCwgZW5kICkge1xuXG5cdHRoaXMuc3RhcnQgPSAoIHN0YXJ0ICE9PSB1bmRlZmluZWQgKSA/IHN0YXJ0IDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5lbmQgPSAoIGVuZCAhPT0gdW5kZWZpbmVkICkgPyBlbmQgOiBuZXcgVmVjdG9yMygpO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIExpbmUzLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBzdGFydCwgZW5kICkge1xuXG5cdFx0dGhpcy5zdGFydC5jb3B5KCBzdGFydCApO1xuXHRcdHRoaXMuZW5kLmNvcHkoIGVuZCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBsaW5lICkge1xuXG5cdFx0dGhpcy5zdGFydC5jb3B5KCBsaW5lLnN0YXJ0ICk7XG5cdFx0dGhpcy5lbmQuY29weSggbGluZS5lbmQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuZ2V0Q2VudGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMuc3RhcnQsIHRoaXMuZW5kICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH0sXG5cblx0ZGVsdGE6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZTM6IC5kZWx0YSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5zdWJWZWN0b3JzKCB0aGlzLmVuZCwgdGhpcy5zdGFydCApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VTcTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuZW5kICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUbyggdGhpcy5lbmQgKTtcblxuXHR9LFxuXG5cdGF0OiBmdW5jdGlvbiAoIHQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuYXQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmRlbHRhKCB0YXJnZXQgKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5zdGFydCApO1xuXG5cdH0sXG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHN0YXJ0UCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHN0YXJ0RW5kID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyKCBwb2ludCwgY2xhbXBUb0xpbmUgKSB7XG5cblx0XHRcdHN0YXJ0UC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5zdGFydCApO1xuXHRcdFx0c3RhcnRFbmQuc3ViVmVjdG9ycyggdGhpcy5lbmQsIHRoaXMuc3RhcnQgKTtcblxuXHRcdFx0dmFyIHN0YXJ0RW5kMiA9IHN0YXJ0RW5kLmRvdCggc3RhcnRFbmQgKTtcblx0XHRcdHZhciBzdGFydEVuZF9zdGFydFAgPSBzdGFydEVuZC5kb3QoIHN0YXJ0UCApO1xuXG5cdFx0XHR2YXIgdCA9IHN0YXJ0RW5kX3N0YXJ0UCAvIHN0YXJ0RW5kMjtcblxuXHRcdFx0aWYgKCBjbGFtcFRvTGluZSApIHtcblxuXHRcdFx0XHR0ID0gX01hdGguY2xhbXAoIHQsIDAsIDEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdDtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIGNsYW1wVG9MaW5lLCB0YXJnZXQgKSB7XG5cblx0XHR2YXIgdCA9IHRoaXMuY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlciggcG9pbnQsIGNsYW1wVG9MaW5lICk7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lMzogLmNsb3Nlc3RQb2ludFRvUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmRlbHRhKCB0YXJnZXQgKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5zdGFydCApO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMuc3RhcnQuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblx0XHR0aGlzLmVuZC5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggbGluZSApIHtcblxuXHRcdHJldHVybiBsaW5lLnN0YXJ0LmVxdWFscyggdGhpcy5zdGFydCApICYmIGxpbmUuZW5kLmVxdWFscyggdGhpcy5lbmQgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFRyaWFuZ2xlKCBhLCBiLCBjICkge1xuXG5cdHRoaXMuYSA9ICggYSAhPT0gdW5kZWZpbmVkICkgPyBhIDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5iID0gKCBiICE9PSB1bmRlZmluZWQgKSA/IGIgOiBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLmMgPSAoIGMgIT09IHVuZGVmaW5lZCApID8gYyA6IG5ldyBWZWN0b3IzKCk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUsIHtcblxuXHRnZXROb3JtYWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0Tm9ybWFsKCBhLCBiLCBjLCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXROb3JtYWwoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRhcmdldC5zdWJWZWN0b3JzKCBjLCBiICk7XG5cdFx0XHR2MC5zdWJWZWN0b3JzKCBhLCBiICk7XG5cdFx0XHR0YXJnZXQuY3Jvc3MoIHYwICk7XG5cblx0XHRcdHZhciB0YXJnZXRMZW5ndGhTcSA9IHRhcmdldC5sZW5ndGhTcSgpO1xuXHRcdFx0aWYgKCB0YXJnZXRMZW5ndGhTcSA+IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRhcmdldC5tdWx0aXBseVNjYWxhciggMSAvIE1hdGguc3FydCggdGFyZ2V0TGVuZ3RoU3EgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0YXJnZXQuc2V0KCAwLCAwLCAwICk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHQvLyBzdGF0aWMvaW5zdGFuY2UgbWV0aG9kIHRvIGNhbGN1bGF0ZSBiYXJ5Y2VudHJpYyBjb29yZGluYXRlc1xuXHQvLyBiYXNlZCBvbjogaHR0cDovL3d3dy5ibGFja3Bhd24uY29tL3RleHRzL3BvaW50aW5wb2x5L2RlZmF1bHQuaHRtbFxuXHRnZXRCYXJ5Y29vcmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdjIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdFx0djAuc3ViVmVjdG9ycyggYywgYSApO1xuXHRcdFx0djEuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdFx0djIuc3ViVmVjdG9ycyggcG9pbnQsIGEgKTtcblxuXHRcdFx0dmFyIGRvdDAwID0gdjAuZG90KCB2MCApO1xuXHRcdFx0dmFyIGRvdDAxID0gdjAuZG90KCB2MSApO1xuXHRcdFx0dmFyIGRvdDAyID0gdjAuZG90KCB2MiApO1xuXHRcdFx0dmFyIGRvdDExID0gdjEuZG90KCB2MSApO1xuXHRcdFx0dmFyIGRvdDEyID0gdjEuZG90KCB2MiApO1xuXG5cdFx0XHR2YXIgZGVub20gPSAoIGRvdDAwICogZG90MTEgLSBkb3QwMSAqIGRvdDAxICk7XG5cblx0XHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXRCYXJ5Y29vcmQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNvbGxpbmVhciBvciBzaW5ndWxhciB0cmlhbmdsZVxuXHRcdFx0aWYgKCBkZW5vbSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBhcmJpdHJhcnkgbG9jYXRpb24gb3V0c2lkZSBvZiB0cmlhbmdsZT9cblx0XHRcdFx0Ly8gbm90IHN1cmUgaWYgdGhpcyBpcyB0aGUgYmVzdCBpZGVhLCBtYXliZSBzaG91bGQgYmUgcmV0dXJuaW5nIHVuZGVmaW5lZFxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LnNldCggLSAyLCAtIDEsIC0gMSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBpbnZEZW5vbSA9IDEgLyBkZW5vbTtcblx0XHRcdHZhciB1ID0gKCBkb3QxMSAqIGRvdDAyIC0gZG90MDEgKiBkb3QxMiApICogaW52RGVub207XG5cdFx0XHR2YXIgdiA9ICggZG90MDAgKiBkb3QxMiAtIGRvdDAxICogZG90MDIgKSAqIGludkRlbm9tO1xuXG5cdFx0XHQvLyBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcyBtdXN0IGFsd2F5cyBzdW0gdG8gMVxuXHRcdFx0cmV0dXJuIHRhcmdldC5zZXQoIDEgLSB1IC0gdiwgdiwgdSApO1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjb250YWluc1BvaW50KCBwb2ludCwgYSwgYiwgYyApIHtcblxuXHRcdFx0VHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgdjEgKTtcblxuXHRcdFx0cmV0dXJuICggdjEueCA+PSAwICkgJiYgKCB2MS55ID49IDAgKSAmJiAoICggdjEueCArIHYxLnkgKSA8PSAxICk7XG5cblx0XHR9O1xuXG5cdH0oKVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFRyaWFuZ2xlLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBhLCBiLCBjICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIGEgKTtcblx0XHR0aGlzLmIuY29weSggYiApO1xuXHRcdHRoaXMuYy5jb3B5KCBjICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Qb2ludHNBbmRJbmRpY2VzOiBmdW5jdGlvbiAoIHBvaW50cywgaTAsIGkxLCBpMiApIHtcblxuXHRcdHRoaXMuYS5jb3B5KCBwb2ludHNbIGkwIF0gKTtcblx0XHR0aGlzLmIuY29weSggcG9pbnRzWyBpMSBdICk7XG5cdFx0dGhpcy5jLmNvcHkoIHBvaW50c1sgaTIgXSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCB0cmlhbmdsZSApIHtcblxuXHRcdHRoaXMuYS5jb3B5KCB0cmlhbmdsZS5hICk7XG5cdFx0dGhpcy5iLmNvcHkoIHRyaWFuZ2xlLmIgKTtcblx0XHR0aGlzLmMuY29weSggdHJpYW5nbGUuYyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRBcmVhOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdjAgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZ2V0QXJlYSgpIHtcblxuXHRcdFx0djAuc3ViVmVjdG9ycyggdGhpcy5jLCB0aGlzLmIgKTtcblx0XHRcdHYxLnN1YlZlY3RvcnMoIHRoaXMuYSwgdGhpcy5iICk7XG5cblx0XHRcdHJldHVybiB2MC5jcm9zcyggdjEgKS5sZW5ndGgoKSAqIDAuNTtcblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdGdldE1pZHBvaW50OiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuZ2V0TWlkcG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKS5hZGQoIHRoaXMuYyApLm11bHRpcGx5U2NhbGFyKCAxIC8gMyApO1xuXG5cdH0sXG5cblx0Z2V0Tm9ybWFsOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXROb3JtYWwoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHRhcmdldCApO1xuXG5cdH0sXG5cblx0Z2V0UGxhbmU6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXRQbGFuZSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXRGcm9tQ29wbGFuYXJQb2ludHMoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMgKTtcblxuXHR9LFxuXG5cdGdldEJhcnljb29yZDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldEJhcnljb29yZCggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHRhcmdldCApO1xuXG5cdH0sXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5jb250YWluc1BvaW50KCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYyApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNUcmlhbmdsZSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHBsYW5lID0gbmV3IFBsYW5lKCk7XG5cdFx0dmFyIGVkZ2VMaXN0ID0gWyBuZXcgTGluZTMoKSwgbmV3IExpbmUzKCksIG5ldyBMaW5lMygpIF07XG5cdFx0dmFyIHByb2plY3RlZFBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgY2xvc2VzdFBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBjbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuY2xvc2VzdFBvaW50VG9Qb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG1pbkRpc3RhbmNlID0gSW5maW5pdHk7XG5cblx0XHRcdC8vIHByb2plY3QgdGhlIHBvaW50IG9udG8gdGhlIHBsYW5lIG9mIHRoZSB0cmlhbmdsZVxuXG5cdFx0XHRwbGFuZS5zZXRGcm9tQ29wbGFuYXJQb2ludHMoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMgKTtcblx0XHRcdHBsYW5lLnByb2plY3RQb2ludCggcG9pbnQsIHByb2plY3RlZFBvaW50ICk7XG5cblx0XHRcdC8vIGNoZWNrIGlmIHRoZSBwcm9qZWN0aW9uIGxpZXMgd2l0aGluIHRoZSB0cmlhbmdsZVxuXG5cdFx0XHRpZiAoIHRoaXMuY29udGFpbnNQb2ludCggcHJvamVjdGVkUG9pbnQgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHQvLyBpZiBzbywgdGhpcyBpcyB0aGUgY2xvc2VzdCBwb2ludFxuXG5cdFx0XHRcdHRhcmdldC5jb3B5KCBwcm9qZWN0ZWRQb2ludCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIGlmIG5vdCwgdGhlIHBvaW50IGZhbGxzIG91dHNpZGUgdGhlIHRyaWFuZ2xlLiB0aGUgdGFyZ2V0IGlzIHRoZSBjbG9zZXN0IHBvaW50IHRvIHRoZSB0cmlhbmdsZSdzIGVkZ2VzIG9yIHZlcnRpY2VzXG5cblx0XHRcdFx0ZWRnZUxpc3RbIDAgXS5zZXQoIHRoaXMuYSwgdGhpcy5iICk7XG5cdFx0XHRcdGVkZ2VMaXN0WyAxIF0uc2V0KCB0aGlzLmIsIHRoaXMuYyApO1xuXHRcdFx0XHRlZGdlTGlzdFsgMiBdLnNldCggdGhpcy5jLCB0aGlzLmEgKTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBlZGdlTGlzdC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRlZGdlTGlzdFsgaSBdLmNsb3Nlc3RQb2ludFRvUG9pbnQoIHByb2plY3RlZFBvaW50LCB0cnVlLCBjbG9zZXN0UG9pbnQgKTtcblxuXHRcdFx0XHRcdHZhciBkaXN0YW5jZSA9IHByb2plY3RlZFBvaW50LmRpc3RhbmNlVG9TcXVhcmVkKCBjbG9zZXN0UG9pbnQgKTtcblxuXHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSApIHtcblxuXHRcdFx0XHRcdFx0bWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcblxuXHRcdFx0XHRcdFx0dGFyZ2V0LmNvcHkoIGNsb3Nlc3RQb2ludCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdFx0fTtcblxuXHR9KCksXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRyaWFuZ2xlLmEuZXF1YWxzKCB0aGlzLmEgKSAmJiB0cmlhbmdsZS5iLmVxdWFscyggdGhpcy5iICkgJiYgdHJpYW5nbGUuYy5lcXVhbHMoIHRoaXMuYyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3Igam9ub2JyMSAvIGh0dHA6Ly9qb25vYnIxLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoJztcblxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZiB9ICk7XG5cblx0dGhpcy5kcmF3TW9kZSA9IFRyaWFuZ2xlc0RyYXdNb2RlO1xuXG5cdHRoaXMudXBkYXRlTW9ycGhUYXJnZXRzKCk7XG5cbn1cblxuTWVzaC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBNZXNoLFxuXG5cdGlzTWVzaDogdHJ1ZSxcblxuXHRzZXREcmF3TW9kZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZHJhd01vZGUgPSB2YWx1ZTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmRyYXdNb2RlID0gc291cmNlLmRyYXdNb2RlO1xuXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXRJbmZsdWVuY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5zbGljZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5tb3JwaFRhcmdldERpY3Rpb25hcnkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dXBkYXRlTW9ycGhUYXJnZXRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdHZhciBtLCBtbCwgbmFtZTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblx0XHRcdHZhciBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApO1xuXG5cdFx0XHRpZiAoIGtleXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIGtleXNbIDAgXSBdO1xuXG5cdFx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gW107XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRcdGZvciAoIG0gPSAwLCBtbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgbSA8IG1sOyBtICsrICkge1xuXG5cdFx0XHRcdFx0XHRuYW1lID0gbW9ycGhBdHRyaWJ1dGVbIG0gXS5uYW1lIHx8IFN0cmluZyggbSApO1xuXG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKCAwICk7XG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgJiYgbW9ycGhUYXJnZXRzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSBbXTtcblx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRmb3IgKCBtID0gMCwgbWwgPSBtb3JwaFRhcmdldHMubGVuZ3RoOyBtIDwgbWw7IG0gKysgKSB7XG5cblx0XHRcdFx0XHRuYW1lID0gbW9ycGhUYXJnZXRzWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goIDAgKTtcblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHJheWNhc3Q6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciByYXkgPSBuZXcgUmF5KCk7XG5cdFx0dmFyIHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdHZhciB2QSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZCID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdkMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIHRlbXBBID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdGVtcEIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB0ZW1wQyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdXZBID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZCID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZDID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdHZhciBiYXJ5Y29vcmQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIGludGVyc2VjdGlvblBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRmdW5jdGlvbiB1dkludGVyc2VjdGlvbiggcG9pbnQsIHAxLCBwMiwgcDMsIHV2MSwgdXYyLCB1djMgKSB7XG5cblx0XHRcdFRyaWFuZ2xlLmdldEJhcnljb29yZCggcG9pbnQsIHAxLCBwMiwgcDMsIGJhcnljb29yZCApO1xuXG5cdFx0XHR1djEubXVsdGlwbHlTY2FsYXIoIGJhcnljb29yZC54ICk7XG5cdFx0XHR1djIubXVsdGlwbHlTY2FsYXIoIGJhcnljb29yZC55ICk7XG5cdFx0XHR1djMubXVsdGlwbHlTY2FsYXIoIGJhcnljb29yZC56ICk7XG5cblx0XHRcdHV2MS5hZGQoIHV2MiApLmFkZCggdXYzICk7XG5cblx0XHRcdHJldHVybiB1djEuY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNoZWNrSW50ZXJzZWN0aW9uKCBvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcEEsIHBCLCBwQywgcG9pbnQgKSB7XG5cblx0XHRcdHZhciBpbnRlcnNlY3Q7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB7XG5cblx0XHRcdFx0aW50ZXJzZWN0ID0gcmF5LmludGVyc2VjdFRyaWFuZ2xlKCBwQywgcEIsIHBBLCB0cnVlLCBwb2ludCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGludGVyc2VjdCA9IHJheS5pbnRlcnNlY3RUcmlhbmdsZSggcEEsIHBCLCBwQywgbWF0ZXJpYWwuc2lkZSAhPT0gRG91YmxlU2lkZSwgcG9pbnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGludGVyc2VjdCA9PT0gbnVsbCApIHJldHVybiBudWxsO1xuXG5cdFx0XHRpbnRlcnNlY3Rpb25Qb2ludFdvcmxkLmNvcHkoIHBvaW50ICk7XG5cdFx0XHRpbnRlcnNlY3Rpb25Qb2ludFdvcmxkLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyc2VjdGlvblBvaW50V29ybGQgKTtcblxuXHRcdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybiBudWxsO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRcdHBvaW50OiBpbnRlcnNlY3Rpb25Qb2ludFdvcmxkLmNsb25lKCksXG5cdFx0XHRcdG9iamVjdDogb2JqZWN0XG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBvc2l0aW9uLCB1diwgYSwgYiwgYyApIHtcblxuXHRcdFx0dkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGEgKTtcblx0XHRcdHZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBiICk7XG5cdFx0XHR2Qy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYyApO1xuXG5cdFx0XHR2YXIgaW50ZXJzZWN0aW9uID0gY2hlY2tJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCB2QSwgdkIsIHZDLCBpbnRlcnNlY3Rpb25Qb2ludCApO1xuXG5cdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRpZiAoIHV2ICkge1xuXG5cdFx0XHRcdFx0dXZBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBhICk7XG5cdFx0XHRcdFx0dXZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBiICk7XG5cdFx0XHRcdFx0dXZDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBjICk7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3Rpb24udXYgPSB1dkludGVyc2VjdGlvbiggaW50ZXJzZWN0aW9uUG9pbnQsIHZBLCB2QiwgdkMsIHV2QSwgdXZCLCB1dkMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGZhY2UgPSBuZXcgRmFjZTMoIGEsIGIsIGMgKTtcblx0XHRcdFx0VHJpYW5nbGUuZ2V0Tm9ybWFsKCB2QSwgdkIsIHZDLCBmYWNlLm5vcm1hbCApO1xuXG5cdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlID0gZmFjZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaW50ZXJzZWN0aW9uO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRcdHZhciBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7XG5cdFx0XHR2YXIgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdHNwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdFx0c3BoZXJlLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdFx0aWYgKCByYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0Ly9cblxuXHRcdFx0aW52ZXJzZU1hdHJpeC5nZXRJbnZlcnNlKCBtYXRyaXhXb3JsZCApO1xuXHRcdFx0cmF5LmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIGludmVyc2VNYXRyaXggKTtcblxuXHRcdFx0Ly8gQ2hlY2sgYm91bmRpbmdCb3ggYmVmb3JlIGNvbnRpbnVpbmdcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHJheS5pbnRlcnNlY3RzQm94KCBnZW9tZXRyeS5ib3VuZGluZ0JveCApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaW50ZXJzZWN0aW9uO1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIGEsIGIsIGM7XG5cdFx0XHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0XHR2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0XHR2YXIgdXYgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2O1xuXHRcdFx0XHR2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXHRcdFx0XHR2YXIgZHJhd1JhbmdlID0gZ2VvbWV0cnkuZHJhd1JhbmdlO1xuXHRcdFx0XHR2YXIgaSwgaiwgaWwsIGpsO1xuXHRcdFx0XHR2YXIgZ3JvdXAsIGdyb3VwTWF0ZXJpYWw7XG5cdFx0XHRcdHZhciBzdGFydCwgZW5kO1xuXG5cdFx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHQvLyBpbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVxuXG5cdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdFx0XHRcdFx0Z3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0c3RhcnQgPSBNYXRoLm1heCggZ3JvdXAuc3RhcnQsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdFx0XHRlbmQgPSBNYXRoLm1pbiggKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICksICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBqID0gc3RhcnQsIGpsID0gZW5kOyBqIDwgamw7IGogKz0gMyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGEgPSBpbmRleC5nZXRYKCBpICk7XG5cdFx0XHRcdFx0XHRcdFx0YiA9IGluZGV4LmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0XHRcdFx0YyA9IGluZGV4LmdldFgoIGkgKyAyICk7XG5cblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBncm91cE1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcG9zaXRpb24sIHV2LCBhLCBiLCBjICk7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBpbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3Ncblx0XHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKCBpbmRleC5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBpID0gc3RhcnQsIGlsID0gZW5kOyBpIDwgaWw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdFx0XHRhID0gaW5kZXguZ2V0WCggaSApO1xuXHRcdFx0XHRcdFx0XHRiID0gaW5kZXguZ2V0WCggaSArIDEgKTtcblx0XHRcdFx0XHRcdFx0YyA9IGluZGV4LmdldFgoIGkgKyAyICk7XG5cblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwb3NpdGlvbiwgdXYsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBpIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gaW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gbm9uLWluZGV4ZWQgYnVmZmVyIGdlb21ldHJ5XG5cblx0XHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHRncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHRzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKCAoIGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQgKSwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0YSA9IGo7XG5cdFx0XHRcdFx0XHRcdFx0YiA9IGogKyAxO1xuXHRcdFx0XHRcdFx0XHRcdGMgPSBqICsgMjtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24oIHRoaXMsIGdyb3VwTWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwb3NpdGlvbiwgdXYsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaSAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIG5vbi1pbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3Ncblx0XHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKCBwb3NpdGlvbi5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBpID0gc3RhcnQsIGlsID0gZW5kOyBpIDwgaWw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdFx0XHRhID0gaTtcblx0XHRcdFx0XHRcdFx0YiA9IGkgKyAxO1xuXHRcdFx0XHRcdFx0XHRjID0gaSArIDI7XG5cblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwb3NpdGlvbiwgdXYsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBpIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gbm9uLWluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRcdHZhciBmdkEsIGZ2QiwgZnZDO1xuXHRcdFx0XHR2YXIgaXNNdWx0aU1hdGVyaWFsID0gQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblx0XHRcdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XG5cdFx0XHRcdHZhciB1dnM7XG5cblx0XHRcdFx0dmFyIGZhY2VWZXJ0ZXhVdnMgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWyAwIF07XG5cdFx0XHRcdGlmICggZmFjZVZlcnRleFV2cy5sZW5ndGggPiAwICkgdXZzID0gZmFjZVZlcnRleFV2cztcblxuXHRcdFx0XHRmb3IgKCB2YXIgZiA9IDAsIGZsID0gZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgZmFjZSA9IGZhY2VzWyBmIF07XG5cdFx0XHRcdFx0dmFyIGZhY2VNYXRlcmlhbCA9IGlzTXVsdGlNYXRlcmlhbCA/IG1hdGVyaWFsWyBmYWNlLm1hdGVyaWFsSW5kZXggXSA6IG1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0aWYgKCBmYWNlTWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0ZnZBID0gdmVydGljZXNbIGZhY2UuYSBdO1xuXHRcdFx0XHRcdGZ2QiA9IHZlcnRpY2VzWyBmYWNlLmIgXTtcblx0XHRcdFx0XHRmdkMgPSB2ZXJ0aWNlc1sgZmFjZS5jIF07XG5cblx0XHRcdFx0XHRpZiAoIGZhY2VNYXRlcmlhbC5tb3JwaFRhcmdldHMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cdFx0XHRcdFx0XHR2YXIgbW9ycGhJbmZsdWVuY2VzID0gdGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXM7XG5cblx0XHRcdFx0XHRcdHZBLnNldCggMCwgMCwgMCApO1xuXHRcdFx0XHRcdFx0dkIuc2V0KCAwLCAwLCAwICk7XG5cdFx0XHRcdFx0XHR2Qy5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIHQgPSAwLCB0bCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7IHQgPCB0bDsgdCArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgaW5mbHVlbmNlID0gbW9ycGhJbmZsdWVuY2VzWyB0IF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBpbmZsdWVuY2UgPT09IDAgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgdGFyZ2V0cyA9IG1vcnBoVGFyZ2V0c1sgdCBdLnZlcnRpY2VzO1xuXG5cdFx0XHRcdFx0XHRcdHZBLmFkZFNjYWxlZFZlY3RvciggdGVtcEEuc3ViVmVjdG9ycyggdGFyZ2V0c1sgZmFjZS5hIF0sIGZ2QSApLCBpbmZsdWVuY2UgKTtcblx0XHRcdFx0XHRcdFx0dkIuYWRkU2NhbGVkVmVjdG9yKCB0ZW1wQi5zdWJWZWN0b3JzKCB0YXJnZXRzWyBmYWNlLmIgXSwgZnZCICksIGluZmx1ZW5jZSApO1xuXHRcdFx0XHRcdFx0XHR2Qy5hZGRTY2FsZWRWZWN0b3IoIHRlbXBDLnN1YlZlY3RvcnMoIHRhcmdldHNbIGZhY2UuYyBdLCBmdkMgKSwgaW5mbHVlbmNlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dkEuYWRkKCBmdkEgKTtcblx0XHRcdFx0XHRcdHZCLmFkZCggZnZCICk7XG5cdFx0XHRcdFx0XHR2Qy5hZGQoIGZ2QyApO1xuXG5cdFx0XHRcdFx0XHRmdkEgPSB2QTtcblx0XHRcdFx0XHRcdGZ2QiA9IHZCO1xuXHRcdFx0XHRcdFx0ZnZDID0gdkM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0ludGVyc2VjdGlvbiggdGhpcywgZmFjZU1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgZnZBLCBmdkIsIGZ2QywgaW50ZXJzZWN0aW9uUG9pbnQgKTtcblxuXHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHV2cyAmJiB1dnNbIGYgXSApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgdXZzX2YgPSB1dnNbIGYgXTtcblx0XHRcdFx0XHRcdFx0dXZBLmNvcHkoIHV2c19mWyAwIF0gKTtcblx0XHRcdFx0XHRcdFx0dXZCLmNvcHkoIHV2c19mWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0dXZDLmNvcHkoIHV2c19mWyAyIF0gKTtcblxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24udXYgPSB1dkludGVyc2VjdGlvbiggaW50ZXJzZWN0aW9uUG9pbnQsIGZ2QSwgZnZCLCBmdkMsIHV2QSwgdXZCLCB1dkMgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZSA9IGZhY2U7XG5cdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gZjtcblx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEJhY2tncm91bmQoIHJlbmRlcmVyLCBzdGF0ZSwgb2JqZWN0cywgcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdHZhciBjbGVhckNvbG9yID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR2YXIgY2xlYXJBbHBoYSA9IDA7XG5cblx0dmFyIHBsYW5lQ2FtZXJhLCBwbGFuZU1lc2g7XG5cdHZhciBib3hNZXNoO1xuXG5cdGZ1bmN0aW9uIHJlbmRlciggcmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSwgZm9yY2VDbGVhciApIHtcblxuXHRcdHZhciBiYWNrZ3JvdW5kID0gc2NlbmUuYmFja2dyb3VuZDtcblxuXHRcdGlmICggYmFja2dyb3VuZCA9PT0gbnVsbCApIHtcblxuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc0NvbG9yICkge1xuXG5cdFx0XHRzZXRDbGVhciggYmFja2dyb3VuZCwgMSApO1xuXHRcdFx0Zm9yY2VDbGVhciA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlcmVyLmF1dG9DbGVhciB8fCBmb3JjZUNsZWFyICkge1xuXG5cdFx0XHRyZW5kZXJlci5jbGVhciggcmVuZGVyZXIuYXV0b0NsZWFyQ29sb3IsIHJlbmRlcmVyLmF1dG9DbGVhckRlcHRoLCByZW5kZXJlci5hdXRvQ2xlYXJTdGVuY2lsICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc0N1YmVUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIGJveE1lc2ggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRib3hNZXNoID0gbmV3IE1lc2goXG5cdFx0XHRcdFx0bmV3IEJveEJ1ZmZlckdlb21ldHJ5KCAxLCAxLCAxICksXG5cdFx0XHRcdFx0bmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0XHRcdFx0XHR1bmlmb3JtczogU2hhZGVyTGliLmN1YmUudW5pZm9ybXMsXG5cdFx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckxpYi5jdWJlLnZlcnRleFNoYWRlcixcblx0XHRcdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJMaWIuY3ViZS5mcmFnbWVudFNoYWRlcixcblx0XHRcdFx0XHRcdHNpZGU6IEJhY2tTaWRlLFxuXHRcdFx0XHRcdFx0ZGVwdGhUZXN0OiB0cnVlLFxuXHRcdFx0XHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0XHRcdFx0XHRmb2c6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5yZW1vdmVBdHRyaWJ1dGUoICdub3JtYWwnICk7XG5cdFx0XHRcdGJveE1lc2guZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKCAndXYnICk7XG5cblx0XHRcdFx0Ym94TWVzaC5vbkJlZm9yZVJlbmRlciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHlQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRvYmplY3RzLnVwZGF0ZSggYm94TWVzaCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMudEN1YmUudmFsdWUgPSBiYWNrZ3JvdW5kO1xuXG5cdFx0XHRyZW5kZXJMaXN0LnB1c2goIGJveE1lc2gsIGJveE1lc2guZ2VvbWV0cnksIGJveE1lc2gubWF0ZXJpYWwsIDAsIG51bGwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGlmICggcGxhbmVDYW1lcmEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwbGFuZUNhbWVyYSA9IG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIC0gMSwgMSwgMSwgLSAxLCAwLCAxICk7XG5cblx0XHRcdFx0cGxhbmVNZXNoID0gbmV3IE1lc2goXG5cdFx0XHRcdFx0bmV3IFBsYW5lQnVmZmVyR2VvbWV0cnkoIDIsIDIgKSxcblx0XHRcdFx0XHRuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgZGVwdGhUZXN0OiBmYWxzZSwgZGVwdGhXcml0ZTogZmFsc2UsIGZvZzogZmFsc2UgfSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0b2JqZWN0cy51cGRhdGUoIHBsYW5lTWVzaCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC5tYXAgPSBiYWNrZ3JvdW5kO1xuXG5cdFx0XHQvLyBUT0RPIFB1c2ggdGhpcyB0byByZW5kZXJMaXN0XG5cblx0XHRcdHJlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggcGxhbmVDYW1lcmEsIG51bGwsIHBsYW5lTWVzaC5nZW9tZXRyeSwgcGxhbmVNZXNoLm1hdGVyaWFsLCBwbGFuZU1lc2gsIG51bGwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0Q2xlYXIoIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIsIGFscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldENsZWFyQ29sb3I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGNsZWFyQ29sb3I7XG5cblx0XHR9LFxuXHRcdHNldENsZWFyQ29sb3I6IGZ1bmN0aW9uICggY29sb3IsIGFscGhhICkge1xuXG5cdFx0XHRjbGVhckNvbG9yLnNldCggY29sb3IgKTtcblx0XHRcdGNsZWFyQWxwaGEgPSBhbHBoYSAhPT0gdW5kZWZpbmVkID8gYWxwaGEgOiAxO1xuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0sXG5cdFx0Z2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY2xlYXJBbHBoYTtcblxuXHRcdH0sXG5cdFx0c2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCBhbHBoYSApIHtcblxuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhO1xuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0sXG5cdFx0cmVuZGVyOiByZW5kZXJcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEJ1ZmZlclJlbmRlcmVyKCBnbCwgZXh0ZW5zaW9ucywgaW5mbyApIHtcblxuXHR2YXIgbW9kZTtcblxuXHRmdW5jdGlvbiBzZXRNb2RlKCB2YWx1ZSApIHtcblxuXHRcdG1vZGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHRnbC5kcmF3QXJyYXlzKCBtb2RlLCBzdGFydCwgY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJJbnN0YW5jZXMoIGdlb21ldHJ5LCBzdGFydCwgY291bnQgKSB7XG5cblx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTEJ1ZmZlclJlbmRlcmVyOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRleHRlbnNpb24uZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFKCBtb2RlLCBzdGFydCwgY291bnQsIGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ICk7XG5cblx0fVxuXG5cdC8vXG5cblx0dGhpcy5zZXRNb2RlID0gc2V0TW9kZTtcblx0dGhpcy5yZW5kZXIgPSByZW5kZXI7XG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTENhcGFiaWxpdGllcyggZ2wsIGV4dGVuc2lvbnMsIHBhcmFtZXRlcnMgKSB7XG5cblx0dmFyIG1heEFuaXNvdHJvcHk7XG5cblx0ZnVuY3Rpb24gZ2V0TWF4QW5pc290cm9weSgpIHtcblxuXHRcdGlmICggbWF4QW5pc290cm9weSAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIG1heEFuaXNvdHJvcHk7XG5cblx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0bWF4QW5pc290cm9weSA9IGdsLmdldFBhcmFtZXRlciggZXh0ZW5zaW9uLk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWF4QW5pc290cm9weSA9IDA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF4QW5pc290cm9weTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TWF4UHJlY2lzaW9uKCBwcmVjaXNpb24gKSB7XG5cblx0XHRpZiAoIHByZWNpc2lvbiA9PT0gJ2hpZ2hwJyApIHtcblxuXHRcdFx0aWYgKCBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIGdsLlZFUlRFWF9TSEFERVIsIGdsLkhJR0hfRkxPQVQgKS5wcmVjaXNpb24gPiAwICYmXG5cdFx0XHQgICAgIGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5ISUdIX0ZMT0FUICkucHJlY2lzaW9uID4gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gJ2hpZ2hwJztcblxuXHRcdFx0fVxuXG5cdFx0XHRwcmVjaXNpb24gPSAnbWVkaXVtcCc7XG5cblx0XHR9XG5cblx0XHRpZiAoIHByZWNpc2lvbiA9PT0gJ21lZGl1bXAnICkge1xuXG5cdFx0XHRpZiAoIGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggZ2wuVkVSVEVYX1NIQURFUiwgZ2wuTUVESVVNX0ZMT0FUICkucHJlY2lzaW9uID4gMCAmJlxuXHRcdFx0ICAgICBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIGdsLkZSQUdNRU5UX1NIQURFUiwgZ2wuTUVESVVNX0ZMT0FUICkucHJlY2lzaW9uID4gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gJ21lZGl1bXAnO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gJ2xvd3AnO1xuXG5cdH1cblxuXHR2YXIgcHJlY2lzaW9uID0gcGFyYW1ldGVycy5wcmVjaXNpb24gIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMucHJlY2lzaW9uIDogJ2hpZ2hwJztcblx0dmFyIG1heFByZWNpc2lvbiA9IGdldE1heFByZWNpc2lvbiggcHJlY2lzaW9uICk7XG5cblx0aWYgKCBtYXhQcmVjaXNpb24gIT09IHByZWNpc2lvbiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6JywgcHJlY2lzaW9uLCAnbm90IHN1cHBvcnRlZCwgdXNpbmcnLCBtYXhQcmVjaXNpb24sICdpbnN0ZWFkLicgKTtcblx0XHRwcmVjaXNpb24gPSBtYXhQcmVjaXNpb247XG5cblx0fVxuXG5cdHZhciBsb2dhcml0aG1pY0RlcHRoQnVmZmVyID0gcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID09PSB0cnVlO1xuXG5cdHZhciBtYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMgKTtcblx0dmFyIG1heFZlcnRleFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkVSVEVYX1RFWFRVUkVfSU1BR0VfVU5JVFMgKTtcblx0dmFyIG1heFRleHR1cmVTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVEVYVFVSRV9TSVpFICk7XG5cdHZhciBtYXhDdWJlbWFwU2l6ZSA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSApO1xuXG5cdHZhciBtYXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkVSVEVYX0FUVFJJQlMgKTtcblx0dmFyIG1heFZlcnRleFVuaWZvcm1zID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyApO1xuXHR2YXIgbWF4VmFyeWluZ3MgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9WQVJZSU5HX1ZFQ1RPUlMgKTtcblx0dmFyIG1heEZyYWdtZW50VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9GUkFHTUVOVF9VTklGT1JNX1ZFQ1RPUlMgKTtcblxuXHR2YXIgdmVydGV4VGV4dHVyZXMgPSBtYXhWZXJ0ZXhUZXh0dXJlcyA+IDA7XG5cdHZhciBmbG9hdEZyYWdtZW50VGV4dHVyZXMgPSAhISBleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0JyApO1xuXHR2YXIgZmxvYXRWZXJ0ZXhUZXh0dXJlcyA9IHZlcnRleFRleHR1cmVzICYmIGZsb2F0RnJhZ21lbnRUZXh0dXJlcztcblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0TWF4QW5pc290cm9weTogZ2V0TWF4QW5pc290cm9weSxcblx0XHRnZXRNYXhQcmVjaXNpb246IGdldE1heFByZWNpc2lvbixcblxuXHRcdHByZWNpc2lvbjogcHJlY2lzaW9uLFxuXHRcdGxvZ2FyaXRobWljRGVwdGhCdWZmZXI6IGxvZ2FyaXRobWljRGVwdGhCdWZmZXIsXG5cblx0XHRtYXhUZXh0dXJlczogbWF4VGV4dHVyZXMsXG5cdFx0bWF4VmVydGV4VGV4dHVyZXM6IG1heFZlcnRleFRleHR1cmVzLFxuXHRcdG1heFRleHR1cmVTaXplOiBtYXhUZXh0dXJlU2l6ZSxcblx0XHRtYXhDdWJlbWFwU2l6ZTogbWF4Q3ViZW1hcFNpemUsXG5cblx0XHRtYXhBdHRyaWJ1dGVzOiBtYXhBdHRyaWJ1dGVzLFxuXHRcdG1heFZlcnRleFVuaWZvcm1zOiBtYXhWZXJ0ZXhVbmlmb3Jtcyxcblx0XHRtYXhWYXJ5aW5nczogbWF4VmFyeWluZ3MsXG5cdFx0bWF4RnJhZ21lbnRVbmlmb3JtczogbWF4RnJhZ21lbnRVbmlmb3JtcyxcblxuXHRcdHZlcnRleFRleHR1cmVzOiB2ZXJ0ZXhUZXh0dXJlcyxcblx0XHRmbG9hdEZyYWdtZW50VGV4dHVyZXM6IGZsb2F0RnJhZ21lbnRUZXh0dXJlcyxcblx0XHRmbG9hdFZlcnRleFRleHR1cmVzOiBmbG9hdFZlcnRleFRleHR1cmVzXG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTENsaXBwaW5nKCkge1xuXG5cdHZhciBzY29wZSA9IHRoaXMsXG5cblx0XHRnbG9iYWxTdGF0ZSA9IG51bGwsXG5cdFx0bnVtR2xvYmFsUGxhbmVzID0gMCxcblx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLFxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSBmYWxzZSxcblxuXHRcdHBsYW5lID0gbmV3IFBsYW5lKCksXG5cdFx0dmlld05vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCksXG5cblx0XHR1bmlmb3JtID0geyB2YWx1ZTogbnVsbCwgbmVlZHNVcGRhdGU6IGZhbHNlIH07XG5cblx0dGhpcy51bmlmb3JtID0gdW5pZm9ybTtcblx0dGhpcy5udW1QbGFuZXMgPSAwO1xuXHR0aGlzLm51bUludGVyc2VjdGlvbiA9IDA7XG5cblx0dGhpcy5pbml0ID0gZnVuY3Rpb24gKCBwbGFuZXMsIGVuYWJsZUxvY2FsQ2xpcHBpbmcsIGNhbWVyYSApIHtcblxuXHRcdHZhciBlbmFibGVkID1cblx0XHRcdHBsYW5lcy5sZW5ndGggIT09IDAgfHxcblx0XHRcdGVuYWJsZUxvY2FsQ2xpcHBpbmcgfHxcblx0XHRcdC8vIGVuYWJsZSBzdGF0ZSBvZiBwcmV2aW91cyBmcmFtZSAtIHRoZSBjbGlwcGluZyBjb2RlIGhhcyB0b1xuXHRcdFx0Ly8gcnVuIGFub3RoZXIgZnJhbWUgaW4gb3JkZXIgdG8gcmVzZXQgdGhlIHN0YXRlOlxuXHRcdFx0bnVtR2xvYmFsUGxhbmVzICE9PSAwIHx8XG5cdFx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZDtcblxuXHRcdGxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZW5hYmxlTG9jYWxDbGlwcGluZztcblxuXHRcdGdsb2JhbFN0YXRlID0gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIDAgKTtcblx0XHRudW1HbG9iYWxQbGFuZXMgPSBwbGFuZXMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIGVuYWJsZWQ7XG5cblx0fTtcblxuXHR0aGlzLmJlZ2luU2hhZG93cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSB0cnVlO1xuXHRcdHByb2plY3RQbGFuZXMoIG51bGwgKTtcblxuXHR9O1xuXG5cdHRoaXMuZW5kU2hhZG93cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSBmYWxzZTtcblx0XHRyZXNldEdsb2JhbFN0YXRlKCk7XG5cblx0fTtcblxuXHR0aGlzLnNldFN0YXRlID0gZnVuY3Rpb24gKCBwbGFuZXMsIGNsaXBJbnRlcnNlY3Rpb24sIGNsaXBTaGFkb3dzLCBjYW1lcmEsIGNhY2hlLCBmcm9tQ2FjaGUgKSB7XG5cblx0XHRpZiAoICEgbG9jYWxDbGlwcGluZ0VuYWJsZWQgfHwgcGxhbmVzID09PSBudWxsIHx8IHBsYW5lcy5sZW5ndGggPT09IDAgfHwgcmVuZGVyaW5nU2hhZG93cyAmJiAhIGNsaXBTaGFkb3dzICkge1xuXG5cdFx0XHQvLyB0aGVyZSdzIG5vIGxvY2FsIGNsaXBwaW5nXG5cblx0XHRcdGlmICggcmVuZGVyaW5nU2hhZG93cyApIHtcblxuXHRcdFx0XHQvLyB0aGVyZSdzIG5vIGdsb2JhbCBjbGlwcGluZ1xuXG5cdFx0XHRcdHByb2plY3RQbGFuZXMoIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXNldEdsb2JhbFN0YXRlKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBuR2xvYmFsID0gcmVuZGVyaW5nU2hhZG93cyA/IDAgOiBudW1HbG9iYWxQbGFuZXMsXG5cdFx0XHRcdGxHbG9iYWwgPSBuR2xvYmFsICogNCxcblxuXHRcdFx0XHRkc3RBcnJheSA9IGNhY2hlLmNsaXBwaW5nU3RhdGUgfHwgbnVsbDtcblxuXHRcdFx0dW5pZm9ybS52YWx1ZSA9IGRzdEFycmF5OyAvLyBlbnN1cmUgdW5pcXVlIHN0YXRlXG5cblx0XHRcdGRzdEFycmF5ID0gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIGxHbG9iYWwsIGZyb21DYWNoZSApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IGxHbG9iYWw7ICsrIGkgKSB7XG5cblx0XHRcdFx0ZHN0QXJyYXlbIGkgXSA9IGdsb2JhbFN0YXRlWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FjaGUuY2xpcHBpbmdTdGF0ZSA9IGRzdEFycmF5O1xuXHRcdFx0dGhpcy5udW1JbnRlcnNlY3Rpb24gPSBjbGlwSW50ZXJzZWN0aW9uID8gdGhpcy5udW1QbGFuZXMgOiAwO1xuXHRcdFx0dGhpcy5udW1QbGFuZXMgKz0gbkdsb2JhbDtcblxuXHRcdH1cblxuXG5cdH07XG5cblx0ZnVuY3Rpb24gcmVzZXRHbG9iYWxTdGF0ZSgpIHtcblxuXHRcdGlmICggdW5pZm9ybS52YWx1ZSAhPT0gZ2xvYmFsU3RhdGUgKSB7XG5cblx0XHRcdHVuaWZvcm0udmFsdWUgPSBnbG9iYWxTdGF0ZTtcblx0XHRcdHVuaWZvcm0ubmVlZHNVcGRhdGUgPSBudW1HbG9iYWxQbGFuZXMgPiAwO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUubnVtUGxhbmVzID0gbnVtR2xvYmFsUGxhbmVzO1xuXHRcdHNjb3BlLm51bUludGVyc2VjdGlvbiA9IDA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHByb2plY3RQbGFuZXMoIHBsYW5lcywgY2FtZXJhLCBkc3RPZmZzZXQsIHNraXBUcmFuc2Zvcm0gKSB7XG5cblx0XHR2YXIgblBsYW5lcyA9IHBsYW5lcyAhPT0gbnVsbCA/IHBsYW5lcy5sZW5ndGggOiAwLFxuXHRcdFx0ZHN0QXJyYXkgPSBudWxsO1xuXG5cdFx0aWYgKCBuUGxhbmVzICE9PSAwICkge1xuXG5cdFx0XHRkc3RBcnJheSA9IHVuaWZvcm0udmFsdWU7XG5cblx0XHRcdGlmICggc2tpcFRyYW5zZm9ybSAhPT0gdHJ1ZSB8fCBkc3RBcnJheSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR2YXIgZmxhdFNpemUgPSBkc3RPZmZzZXQgKyBuUGxhbmVzICogNCxcblx0XHRcdFx0XHR2aWV3TWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcblxuXHRcdFx0XHR2aWV3Tm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGlmICggZHN0QXJyYXkgPT09IG51bGwgfHwgZHN0QXJyYXkubGVuZ3RoIDwgZmxhdFNpemUgKSB7XG5cblx0XHRcdFx0XHRkc3RBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIGZsYXRTaXplICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaTQgPSBkc3RPZmZzZXQ7IGkgIT09IG5QbGFuZXM7ICsrIGksIGk0ICs9IDQgKSB7XG5cblx0XHRcdFx0XHRwbGFuZS5jb3B5KCBwbGFuZXNbIGkgXSApLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCwgdmlld05vcm1hbE1hdHJpeCApO1xuXG5cdFx0XHRcdFx0cGxhbmUubm9ybWFsLnRvQXJyYXkoIGRzdEFycmF5LCBpNCApO1xuXHRcdFx0XHRcdGRzdEFycmF5WyBpNCArIDMgXSA9IHBsYW5lLmNvbnN0YW50O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7XG5cdFx0XHR1bmlmb3JtLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm51bVBsYW5lcyA9IG5QbGFuZXM7XG5cblx0XHRyZXR1cm4gZHN0QXJyYXk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEV4dGVuc2lvbnMoIGdsICkge1xuXG5cdHZhciBleHRlbnNpb25zID0ge307XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbnNbIG5hbWUgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBleHRlbnNpb25zWyBuYW1lIF07XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGV4dGVuc2lvbjtcblxuXHRcdFx0c3dpdGNoICggbmFtZSApIHtcblxuXHRcdFx0XHRjYXNlICdXRUJHTF9kZXB0aF90ZXh0dXJlJzpcblx0XHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9kZXB0aF90ZXh0dXJlJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9XRUJHTF9kZXB0aF90ZXh0dXJlJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9XRUJHTF9kZXB0aF90ZXh0dXJlJyApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyc6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Yyc6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnTU9aX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnOlxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCBuYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogJyArIG5hbWUgKyAnIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRleHRlbnNpb25zWyBuYW1lIF0gPSBleHRlbnNpb247XG5cblx0XHRcdHJldHVybiBleHRlbnNpb247XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xHZW9tZXRyaWVzKCBnbCwgYXR0cmlidXRlcywgaW5mbyApIHtcblxuXHR2YXIgZ2VvbWV0cmllcyA9IHt9O1xuXHR2YXIgd2lyZWZyYW1lQXR0cmlidXRlcyA9IHt9O1xuXG5cdGZ1bmN0aW9uIG9uR2VvbWV0cnlEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IGV2ZW50LnRhcmdldDtcblx0XHR2YXIgYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0aWYgKCBidWZmZXJnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGJ1ZmZlcmdlb21ldHJ5LmluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBidWZmZXJnZW9tZXRyeS5hdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggYnVmZmVyZ2VvbWV0cnkuYXR0cmlidXRlc1sgbmFtZSBdICk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlICk7XG5cblx0XHRkZWxldGUgZ2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdC8vIFRPRE8gUmVtb3ZlIGR1cGxpY2F0ZSBjb2RlXG5cblx0XHR2YXIgYXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggYXR0cmlidXRlICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggYXR0cmlidXRlICk7XG5cdFx0XHRkZWxldGUgd2lyZWZyYW1lQXR0cmlidXRlc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdH1cblxuXHRcdGF0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXNbIGJ1ZmZlcmdlb21ldHJ5LmlkIF07XG5cblx0XHRpZiAoIGF0dHJpYnV0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGF0dHJpYnV0ZSApO1xuXHRcdFx0ZGVsZXRlIHdpcmVmcmFtZUF0dHJpYnV0ZXNbIGJ1ZmZlcmdlb21ldHJ5LmlkIF07XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcyAtLTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0KCBvYmplY3QsIGdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggYnVmZmVyZ2VvbWV0cnkgKSByZXR1cm4gYnVmZmVyZ2VvbWV0cnk7XG5cblx0XHRnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlICk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cblx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5Ll9idWZmZXJHZW9tZXRyeSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGdlb21ldHJ5Ll9idWZmZXJHZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLnNldEZyb21PYmplY3QoIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cnkuX2J1ZmZlckdlb21ldHJ5O1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXSA9IGJ1ZmZlcmdlb21ldHJ5O1xuXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcyArKztcblxuXHRcdHJldHVybiBidWZmZXJnZW9tZXRyeTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdHZhciBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIGluZGV4LCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gZ2VvbWV0cnlBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF0sIGdsLkFSUkFZX0JVRkZFUiApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gbW9ycGggdGFyZ2V0c1xuXG5cdFx0dmFyIG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblxuXHRcdGZvciAoIHZhciBuYW1lIGluIG1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIGFycmF5WyBpIF0sIGdsLkFSUkFZX0JVRkZFUiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFdpcmVmcmFtZUF0dHJpYnV0ZSggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgYXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlc1sgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggYXR0cmlidXRlICkgcmV0dXJuIGF0dHJpYnV0ZTtcblxuXHRcdHZhciBpbmRpY2VzID0gW107XG5cblx0XHR2YXIgZ2VvbWV0cnlJbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdHZhciBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gY29uc29sZS50aW1lKCAnd2lyZWZyYW1lJyApO1xuXG5cdFx0aWYgKCBnZW9tZXRyeUluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBnZW9tZXRyeUluZGV4LmFycmF5O1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0dmFyIGEgPSBhcnJheVsgaSArIDAgXTtcblx0XHRcdFx0dmFyIGIgPSBhcnJheVsgaSArIDEgXTtcblx0XHRcdFx0dmFyIGMgPSBhcnJheVsgaSArIDIgXTtcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gZ2VvbWV0cnlBdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSAoIGFycmF5Lmxlbmd0aCAvIDMgKSAtIDE7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0dmFyIGEgPSBpICsgMDtcblx0XHRcdFx0dmFyIGIgPSBpICsgMTtcblx0XHRcdFx0dmFyIGMgPSBpICsgMjtcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY29uc29sZS50aW1lRW5kKCAnd2lyZWZyYW1lJyApO1xuXG5cdFx0YXR0cmlidXRlID0gbmV3ICggYXJyYXlNYXgoIGluZGljZXMgKSA+IDY1NTM1ID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGljZXMsIDEgKTtcblxuXHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBhdHRyaWJ1dGUsIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSICk7XG5cblx0XHR3aXJlZnJhbWVBdHRyaWJ1dGVzWyBnZW9tZXRyeS5pZCBdID0gYXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIGF0dHJpYnV0ZTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZ2V0LFxuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXG5cdFx0Z2V0V2lyZWZyYW1lQXR0cmlidXRlOiBnZXRXaXJlZnJhbWVBdHRyaWJ1dGVcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciggZ2wsIGV4dGVuc2lvbnMsIGluZm8gKSB7XG5cblx0dmFyIG1vZGU7XG5cblx0ZnVuY3Rpb24gc2V0TW9kZSggdmFsdWUgKSB7XG5cblx0XHRtb2RlID0gdmFsdWU7XG5cblx0fVxuXG5cdHZhciB0eXBlLCBieXRlc1BlckVsZW1lbnQ7XG5cblx0ZnVuY3Rpb24gc2V0SW5kZXgoIHZhbHVlICkge1xuXG5cdFx0dHlwZSA9IHZhbHVlLnR5cGU7XG5cdFx0Ynl0ZXNQZXJFbGVtZW50ID0gdmFsdWUuYnl0ZXNQZXJFbGVtZW50O1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXIoIHN0YXJ0LCBjb3VudCApIHtcblxuXHRcdGdsLmRyYXdFbGVtZW50cyggbW9kZSwgY291bnQsIHR5cGUsIHN0YXJ0ICogYnl0ZXNQZXJFbGVtZW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVySW5zdGFuY2VzKCBnZW9tZXRyeSwgc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTtcblxuXHRcdGlmICggZXh0ZW5zaW9uID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXI6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGV4dGVuc2lvbi5kcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRSggbW9kZSwgY291bnQsIHR5cGUsIHN0YXJ0ICogYnl0ZXNQZXJFbGVtZW50LCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCApO1xuXG5cdFx0aW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMuc2V0SW5kZXggPSBzZXRJbmRleDtcblx0dGhpcy5yZW5kZXIgPSByZW5kZXI7XG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEluZm8oIGdsICkge1xuXG5cdHZhciBtZW1vcnkgPSB7XG5cdFx0Z2VvbWV0cmllczogMCxcblx0XHR0ZXh0dXJlczogMFxuXHR9O1xuXG5cdHZhciByZW5kZXIgPSB7XG5cdFx0ZnJhbWU6IDAsXG5cdFx0Y2FsbHM6IDAsXG5cdFx0dHJpYW5nbGVzOiAwLFxuXHRcdHBvaW50czogMCxcblx0XHRsaW5lczogMFxuXHR9O1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggY291bnQsIG1vZGUsIGluc3RhbmNlQ291bnQgKSB7XG5cblx0XHRpbnN0YW5jZUNvdW50ID0gaW5zdGFuY2VDb3VudCB8fCAxO1xuXG5cdFx0cmVuZGVyLmNhbGxzICsrO1xuXG5cdFx0c3dpdGNoICggbW9kZSApIHtcblxuXHRcdFx0Y2FzZSBnbC5UUklBTkdMRVM6XG5cdFx0XHRcdHJlbmRlci50cmlhbmdsZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLyAzICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIGdsLlRSSUFOR0xFX1NUUklQOlxuXHRcdFx0Y2FzZSBnbC5UUklBTkdMRV9GQU46XG5cdFx0XHRcdHJlbmRlci50cmlhbmdsZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLSAyICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIGdsLkxJTkVTOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLyAyICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIGdsLkxJTkVfU1RSSVA6XG5cdFx0XHRcdHJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAtIDEgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgZ2wuTElORV9MT09QOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqIGNvdW50O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBnbC5QT0lOVFM6XG5cdFx0XHRcdHJlbmRlci5wb2ludHMgKz0gaW5zdGFuY2VDb3VudCAqIGNvdW50O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMSW5mbzogVW5rbm93biBkcmF3IG1vZGU6JywgbW9kZSApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzZXQoKSB7XG5cblx0XHRyZW5kZXIuZnJhbWUgKys7XG5cdFx0cmVuZGVyLmNhbGxzID0gMDtcblx0XHRyZW5kZXIudHJpYW5nbGVzID0gMDtcblx0XHRyZW5kZXIucG9pbnRzID0gMDtcblx0XHRyZW5kZXIubGluZXMgPSAwO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdG1lbW9yeTogbWVtb3J5LFxuXHRcdHJlbmRlcjogcmVuZGVyLFxuXHRcdHByb2dyYW1zOiBudWxsLFxuXHRcdGF1dG9SZXNldDogdHJ1ZSxcblx0XHRyZXNldDogcmVzZXQsXG5cdFx0dXBkYXRlOiB1cGRhdGVcblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gYWJzTnVtZXJpY2FsU29ydCggYSwgYiApIHtcblxuXHRyZXR1cm4gTWF0aC5hYnMoIGJbIDEgXSApIC0gTWF0aC5hYnMoIGFbIDEgXSApO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMTW9ycGh0YXJnZXRzKCBnbCApIHtcblxuXHR2YXIgaW5mbHVlbmNlc0xpc3QgPSB7fTtcblx0dmFyIG1vcnBoSW5mbHVlbmNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIDggKTtcblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBwcm9ncmFtICkge1xuXG5cdFx0dmFyIG9iamVjdEluZmx1ZW5jZXMgPSBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzO1xuXG5cdFx0dmFyIGxlbmd0aCA9IG9iamVjdEluZmx1ZW5jZXMubGVuZ3RoO1xuXG5cdFx0dmFyIGluZmx1ZW5jZXMgPSBpbmZsdWVuY2VzTGlzdFsgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggaW5mbHVlbmNlcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBpbml0aWFsaXNlIGxpc3RcblxuXHRcdFx0aW5mbHVlbmNlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0aW5mbHVlbmNlc1sgaSBdID0gWyBpLCAwIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aW5mbHVlbmNlc0xpc3RbIGdlb21ldHJ5LmlkIF0gPSBpbmZsdWVuY2VzO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG1vcnBoVGFyZ2V0cyA9IG1hdGVyaWFsLm1vcnBoVGFyZ2V0cyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0dmFyIG1vcnBoTm9ybWFscyA9IG1hdGVyaWFsLm1vcnBoTm9ybWFscyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0Ly8gUmVtb3ZlIGN1cnJlbnQgbW9ycGhBdHRyaWJ1dGVzXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBpbmZsdWVuY2UgPSBpbmZsdWVuY2VzWyBpIF07XG5cblx0XHRcdGlmICggaW5mbHVlbmNlWyAxIF0gIT09IDAgKSB7XG5cblx0XHRcdFx0aWYgKCBtb3JwaFRhcmdldHMgKSBnZW9tZXRyeS5yZW1vdmVBdHRyaWJ1dGUoICdtb3JwaFRhcmdldCcgKyBpICk7XG5cdFx0XHRcdGlmICggbW9ycGhOb3JtYWxzICkgZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKCAnbW9ycGhOb3JtYWwnICsgaSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBDb2xsZWN0IGluZmx1ZW5jZXNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGluZmx1ZW5jZSA9IGluZmx1ZW5jZXNbIGkgXTtcblxuXHRcdFx0aW5mbHVlbmNlWyAwIF0gPSBpO1xuXHRcdFx0aW5mbHVlbmNlWyAxIF0gPSBvYmplY3RJbmZsdWVuY2VzWyBpIF07XG5cblx0XHR9XG5cblx0XHRpbmZsdWVuY2VzLnNvcnQoIGFic051bWVyaWNhbFNvcnQgKTtcblxuXHRcdC8vIEFkZCBtb3JwaEF0dHJpYnV0ZXNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBpbmZsdWVuY2UgPSBpbmZsdWVuY2VzWyBpIF07XG5cblx0XHRcdGlmICggaW5mbHVlbmNlICkge1xuXG5cdFx0XHRcdHZhciBpbmRleCA9IGluZmx1ZW5jZVsgMCBdO1xuXHRcdFx0XHR2YXIgdmFsdWUgPSBpbmZsdWVuY2VbIDEgXTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBtb3JwaFRhcmdldHMgKSBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdtb3JwaFRhcmdldCcgKyBpLCBtb3JwaFRhcmdldHNbIGluZGV4IF0gKTtcblx0XHRcdFx0XHRpZiAoIG1vcnBoTm9ybWFscyApIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ21vcnBoTm9ybWFsJyArIGksIG1vcnBoTm9ybWFsc1sgaW5kZXggXSApO1xuXG5cdFx0XHRcdFx0bW9ycGhJbmZsdWVuY2VzWyBpIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0bW9ycGhJbmZsdWVuY2VzWyBpIF0gPSAwO1xuXG5cdFx0fVxuXG5cdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycsIG1vcnBoSW5mbHVlbmNlcyApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTE9iamVjdHMoIGdlb21ldHJpZXMsIGluZm8gKSB7XG5cblx0dmFyIHVwZGF0ZUxpc3QgPSB7fTtcblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCApIHtcblxuXHRcdHZhciBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXHRcdHZhciBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXMuZ2V0KCBvYmplY3QsIGdlb21ldHJ5ICk7XG5cblx0XHQvLyBVcGRhdGUgb25jZSBwZXIgZnJhbWVcblxuXHRcdGlmICggdXBkYXRlTGlzdFsgYnVmZmVyZ2VvbWV0cnkuaWQgXSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRidWZmZXJnZW9tZXRyeS51cGRhdGVGcm9tT2JqZWN0KCBvYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyaWVzLnVwZGF0ZSggYnVmZmVyZ2VvbWV0cnkgKTtcblxuXHRcdFx0dXBkYXRlTGlzdFsgYnVmZmVyZ2VvbWV0cnkuaWQgXSA9IGZyYW1lO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJ1ZmZlcmdlb21ldHJ5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0dXBkYXRlTGlzdCA9IHt9O1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEN1YmVUZXh0dXJlKCBpbWFnZXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKSB7XG5cblx0aW1hZ2VzID0gaW1hZ2VzICE9PSB1bmRlZmluZWQgPyBpbWFnZXMgOiBbXTtcblx0bWFwcGluZyA9IG1hcHBpbmcgIT09IHVuZGVmaW5lZCA/IG1hcHBpbmcgOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmc7XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCBpbWFnZXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKTtcblxuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cbn1cblxuQ3ViZVRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKTtcbkN1YmVUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmVUZXh0dXJlO1xuXG5DdWJlVGV4dHVyZS5wcm90b3R5cGUuaXNDdWJlVGV4dHVyZSA9IHRydWU7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSggQ3ViZVRleHR1cmUucHJvdG90eXBlLCAnaW1hZ2VzJywge1xuXG5cdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaW1hZ2U7XG5cblx0fSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmltYWdlID0gdmFsdWU7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciB0c2Nod1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKlxuICogVW5pZm9ybXMgb2YgYSBwcm9ncmFtLlxuICogVGhvc2UgZm9ybSBhIHRyZWUgc3RydWN0dXJlIHdpdGggYSBzcGVjaWFsIHRvcC1sZXZlbCBjb250YWluZXIgZm9yIHRoZSByb290LFxuICogd2hpY2ggeW91IGdldCBieSBjYWxsaW5nICduZXcgV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0sIHJlbmRlcmVyICknLlxuICpcbiAqXG4gKiBQcm9wZXJ0aWVzIG9mIGlubmVyIG5vZGVzIGluY2x1ZGluZyB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcjpcbiAqXG4gKiAuc2VxIC0gYXJyYXkgb2YgbmVzdGVkIHVuaWZvcm1zXG4gKiAubWFwIC0gbmVzdGVkIHVuaWZvcm1zIGJ5IG5hbWVcbiAqXG4gKlxuICogTWV0aG9kcyBvZiBhbGwgbm9kZXMgZXhjZXB0IHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIHZhbHVlLCBbcmVuZGVyZXJdIClcbiAqXG4gKiBcdFx0dXBsb2FkcyBhIHVuaWZvcm0gdmFsdWUocylcbiAqICBcdHRoZSAncmVuZGVyZXInIHBhcmFtZXRlciBpcyBuZWVkZWQgZm9yIHNhbXBsZXIgdW5pZm9ybXNcbiAqXG4gKlxuICogU3RhdGljIG1ldGhvZHMgb2YgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKHJlbmRlcmVyIGZhY3Rvcml6YXRpb25zKTpcbiAqXG4gKiAudXBsb2FkKCBnbCwgc2VxLCB2YWx1ZXMsIHJlbmRlcmVyIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtcyBpbiAnc2VxJyB0byAndmFsdWVzW2lkXS52YWx1ZSdcbiAqXG4gKiAuc2VxV2l0aFZhbHVlKCBzZXEsIHZhbHVlcyApIDogZmlsdGVyZWRTZXFcbiAqXG4gKiBcdFx0ZmlsdGVycyAnc2VxJyBlbnRyaWVzIHdpdGggY29ycmVzcG9uZGluZyBlbnRyeSBpbiB2YWx1ZXNcbiAqXG4gKlxuICogTWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAocmVuZGVyZXIgZmFjdG9yaXphdGlvbnMpOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIG5hbWUsIHZhbHVlIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtIHdpdGggIG5hbWUgJ25hbWUnIHRvICd2YWx1ZSdcbiAqXG4gKiAuc2V0KCBnbCwgb2JqLCBwcm9wIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtIGZyb20gb2JqZWN0IGFuZCBwcm9wZXJ0eSB3aXRoIHNhbWUgbmFtZSB0aGFuIHVuaWZvcm1cbiAqXG4gKiAuc2V0T3B0aW9uYWwoIGdsLCBvYmosIHByb3AgKVxuICpcbiAqIFx0XHRsaWtlIC5zZXQgZm9yIGFuIG9wdGlvbmFsIHByb3BlcnR5IG9mIHRoZSBvYmplY3RcbiAqXG4gKi9cblxudmFyIGVtcHR5VGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG52YXIgZW1wdHlDdWJlVGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSgpO1xuXG4vLyAtLS0gQmFzZSBmb3IgaW5uZXIgbm9kZXMgKGluY2x1ZGluZyB0aGUgcm9vdCkgLS0tXG5cbmZ1bmN0aW9uIFVuaWZvcm1Db250YWluZXIoKSB7XG5cblx0dGhpcy5zZXEgPSBbXTtcblx0dGhpcy5tYXAgPSB7fTtcblxufVxuXG4vLyAtLS0gVXRpbGl0aWVzIC0tLVxuXG4vLyBBcnJheSBDYWNoZXMgKHByb3ZpZGUgdHlwZWQgYXJyYXlzIGZvciB0ZW1wb3JhcnkgYnkgc2l6ZSlcblxudmFyIGFycmF5Q2FjaGVGMzIgPSBbXTtcbnZhciBhcnJheUNhY2hlSTMyID0gW107XG5cbi8vIEZsb2F0MzJBcnJheSBjYWNoZXMgdXNlZCBmb3IgdXBsb2FkaW5nIE1hdHJpeCB1bmlmb3Jtc1xuXG52YXIgbWF0NGFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggMTYgKTtcbnZhciBtYXQzYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCA5ICk7XG52YXIgbWF0MmFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggNCApO1xuXG4vLyBGbGF0dGVuaW5nIGZvciBhcnJheXMgb2YgdmVjdG9ycyBhbmQgbWF0cmljZXNcblxuZnVuY3Rpb24gZmxhdHRlbiggYXJyYXksIG5CbG9ja3MsIGJsb2NrU2l6ZSApIHtcblxuXHR2YXIgZmlyc3RFbGVtID0gYXJyYXlbIDAgXTtcblxuXHRpZiAoIGZpcnN0RWxlbSA8PSAwIHx8IGZpcnN0RWxlbSA+IDAgKSByZXR1cm4gYXJyYXk7XG5cdC8vIHVub3B0aW1pemVkOiAhIGlzTmFOKCBmaXJzdEVsZW0gKVxuXHQvLyBzZWUgaHR0cDovL2phY2tzb25kdW5zdGFuLmNvbS9hcnRpY2xlcy85ODNcblxuXHR2YXIgbiA9IG5CbG9ja3MgKiBibG9ja1NpemUsXG5cdFx0ciA9IGFycmF5Q2FjaGVGMzJbIG4gXTtcblxuXHRpZiAoIHIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHIgPSBuZXcgRmxvYXQzMkFycmF5KCBuICk7XG5cdFx0YXJyYXlDYWNoZUYzMlsgbiBdID0gcjtcblxuXHR9XG5cblx0aWYgKCBuQmxvY2tzICE9PSAwICkge1xuXG5cdFx0Zmlyc3RFbGVtLnRvQXJyYXkoIHIsIDAgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMSwgb2Zmc2V0ID0gMDsgaSAhPT0gbkJsb2NrczsgKysgaSApIHtcblxuXHRcdFx0b2Zmc2V0ICs9IGJsb2NrU2l6ZTtcblx0XHRcdGFycmF5WyBpIF0udG9BcnJheSggciwgb2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiByO1xuXG59XG5cbmZ1bmN0aW9uIGFycmF5c0VxdWFsKCBhLCBiICkge1xuXG5cdGlmICggYS5sZW5ndGggIT09IGIubGVuZ3RoICkgcmV0dXJuIGZhbHNlO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdGlmICggYVsgaSBdICE9PSBiWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdHJldHVybiB0cnVlO1xuXG59XG5cbmZ1bmN0aW9uIGNvcHlBcnJheSggYSwgYiApIHtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBiLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRhWyBpIF0gPSBiWyBpIF07XG5cblx0fVxuXG59XG5cbi8vIFRleHR1cmUgdW5pdCBhbGxvY2F0aW9uXG5cbmZ1bmN0aW9uIGFsbG9jVGV4VW5pdHMoIHJlbmRlcmVyLCBuICkge1xuXG5cdHZhciByID0gYXJyYXlDYWNoZUkzMlsgbiBdO1xuXG5cdGlmICggciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0ciA9IG5ldyBJbnQzMkFycmF5KCBuICk7XG5cdFx0YXJyYXlDYWNoZUkzMlsgbiBdID0gcjtcblxuXHR9XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpIClcblx0XHRyWyBpIF0gPSByZW5kZXJlci5hbGxvY1RleHR1cmVVbml0KCk7XG5cblx0cmV0dXJuIHI7XG5cbn1cblxuLy8gLS0tIFNldHRlcnMgLS0tXG5cbi8vIE5vdGU6IERlZmluaW5nIHRoZXNlIG1ldGhvZHMgZXh0ZXJuYWxseSwgYmVjYXVzZSB0aGV5IGNvbWUgaW4gYSBidW5jaFxuLy8gYW5kIHRoaXMgd2F5IHRoZWlyIG5hbWVzIG1pbmlmeS5cblxuLy8gU2luZ2xlIHNjYWxhclxuXG5mdW5jdGlvbiBzZXRWYWx1ZTFmKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMWYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNhY2hlWyAwIF0gPSB2O1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlMWkoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBjYWNoZVsgMCBdID09PSB2ICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y2FjaGVbIDAgXSA9IHY7XG5cbn1cblxuLy8gU2luZ2xlIGZsb2F0IHZlY3RvciAoZnJvbSBmbGF0IGFycmF5IG9yIFRIUkVFLlZlY3Rvck4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlMmZ2KCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0yZiggdGhpcy5hZGRyLCB2LngsIHYueSApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTNmdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTNmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnogKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi56O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSBpZiAoIHYuciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnIgfHwgY2FjaGVbIDEgXSAhPT0gdi5nIHx8IGNhY2hlWyAyIF0gIT09IHYuYiApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTNmKCB0aGlzLmFkZHIsIHYuciwgdi5nLCB2LmIgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYucjtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lmc7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi5iO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlNGZ2KCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56IHx8IGNhY2hlWyAzIF0gIT09IHYudyApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTRmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cdFx0XHRjYWNoZVsgMyBdID0gdi53O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTRmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbi8vIFNpbmdsZSBtYXRyaXggKGZyb20gZmxhdCBhcnJheSBvciBNYXRyaXhOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTJmbSggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIGVsZW1lbnRzID0gdi5lbGVtZW50cztcblxuXHRpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjtcblxuXHRcdG1hdDJhcnJheS5zZXQoIGVsZW1lbnRzICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQyYXJyYXkgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlM2ZtKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xuXG5cdGlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgcmV0dXJuO1xuXG5cdFx0bWF0M2FycmF5LnNldCggZWxlbWVudHMgKTtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgzZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDNhcnJheSApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWU0Zm0oIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBlbGVtZW50cyA9IHYuZWxlbWVudHM7XG5cblx0aWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSByZXR1cm47XG5cblx0XHRtYXQ0YXJyYXkuc2V0KCBlbGVtZW50cyApO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0NGFycmF5ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG4vLyBTaW5nbGUgdGV4dHVyZSAoMkQgLyBDdWJlKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQxKCBnbCwgdiwgcmVuZGVyZXIgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIHVuaXQgPSByZW5kZXJlci5hbGxvY1RleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0cmVuZGVyZXIuc2V0VGV4dHVyZTJEKCB2IHx8IGVtcHR5VGV4dHVyZSwgdW5pdCApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDYoIGdsLCB2LCByZW5kZXJlciApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgdW5pdCA9IHJlbmRlcmVyLmFsbG9jVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHRyZW5kZXJlci5zZXRUZXh0dXJlQ3ViZSggdiB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0ICk7XG5cbn1cblxuLy8gSW50ZWdlciAvIEJvb2xlYW4gdmVjdG9ycyBvciBhcnJheXMgdGhlcmVvZiAoYWx3YXlzIGZsYXQgYXJyYXlzKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTJpdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0yaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTNpdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0zaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZTRpdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm00aXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciB0aGUgc2luZ3VsYXIgY2FzZVxuXG5mdW5jdGlvbiBnZXRTaW5ndWxhclNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZTFmOyAvLyBGTE9BVFxuXHRcdGNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWUyZnY7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTE6IHJldHVybiBzZXRWYWx1ZTNmdjsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1MjogcmV0dXJuIHNldFZhbHVlNGZ2OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWE6IHJldHVybiBzZXRWYWx1ZTJmbTsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlM2ZtOyAvLyBfTUFUM1xuXHRcdGNhc2UgMHg4YjVjOiByZXR1cm4gc2V0VmFsdWU0Zm07IC8vIF9NQVQ0XG5cblx0XHRjYXNlIDB4OGI1ZTogY2FzZSAweDhkNjY6IHJldHVybiBzZXRWYWx1ZVQxOyAvLyBTQU1QTEVSXzJELCBTQU1QTEVSX0VYVEVSTkFMX09FU1xuXHRcdGNhc2UgMHg4YjYwOiByZXR1cm4gc2V0VmFsdWVUNjsgLy8gU0FNUExFUl9DVUJFXG5cblx0XHRjYXNlIDB4MTQwNDogY2FzZSAweDhiNTY6IHJldHVybiBzZXRWYWx1ZTFpOyAvLyBJTlQsIEJPT0xcblx0XHRjYXNlIDB4OGI1MzogY2FzZSAweDhiNTc6IHJldHVybiBzZXRWYWx1ZTJpdjsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGI1NDogY2FzZSAweDhiNTg6IHJldHVybiBzZXRWYWx1ZTNpdjsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1NTogY2FzZSAweDhiNTk6IHJldHVybiBzZXRWYWx1ZTRpdjsgLy8gX1ZFQzRcblxuXHR9XG5cbn1cblxuLy8gQXJyYXkgb2Ygc2NhbGFyc1xuXG5mdW5jdGlvbiBzZXRWYWx1ZTFmdiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0xZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxufVxuZnVuY3Rpb24gc2V0VmFsdWUxaXYoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdmVjdG9ycyAoZmxhdCBvciBmcm9tIFRIUkVFIGNsYXNzZXMpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJhKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMiApO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBkYXRhICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTJmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cblx0dGhpcy51cGRhdGVDYWNoZSggZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNhKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMyApO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBkYXRhICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cblx0dGhpcy51cGRhdGVDYWNoZSggZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjRhKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgNCApO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBkYXRhICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTRmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cblx0dGhpcy51cGRhdGVDYWNoZSggZGF0YSApO1xuXG59XG5cbi8vIEFycmF5IG9mIG1hdHJpY2VzIChmbGF0IG9yIGZyb20gVEhSRUUgY2xhc2VzKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0yYSggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDQgKTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZGF0YSApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm1NYXRyaXgyZnYoIHRoaXMuYWRkciwgZmFsc2UsIGRhdGEgKTtcblxuXHR0aGlzLnVwZGF0ZUNhY2hlKCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVNM2EoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA5ICk7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGRhdGEgKSApIHJldHVybjtcblxuXHRnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCBkYXRhICk7XG5cblx0dGhpcy51cGRhdGVDYWNoZSggZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTRhKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMTYgKTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZGF0YSApICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIGRhdGEgKTtcblxuXHR0aGlzLnVwZGF0ZUNhY2hlKCBkYXRhICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdGV4dHVyZXMgKDJEIC8gQ3ViZSlcblxuZnVuY3Rpb24gc2V0VmFsdWVUMWEoIGdsLCB2LCByZW5kZXJlciApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgbiA9IHYubGVuZ3RoO1xuXG5cdHZhciB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHJlbmRlcmVyLCBuICk7XG5cblx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHVuaXRzICkgPT09IGZhbHNlICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApO1xuXHRcdGNvcHlBcnJheSggY2FjaGUsIHVuaXRzICk7XG5cblx0fVxuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHJlbmRlcmVyLnNldFRleHR1cmUyRCggdlsgaSBdIHx8IGVtcHR5VGV4dHVyZSwgdW5pdHNbIGkgXSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQ2YSggZ2wsIHYsIHJlbmRlcmVyICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBuID0gdi5sZW5ndGg7XG5cblx0dmFyIHVuaXRzID0gYWxsb2NUZXhVbml0cyggcmVuZGVyZXIsIG4gKTtcblxuXHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdW5pdHMgKTtcblxuXHR9XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0cmVuZGVyZXIuc2V0VGV4dHVyZUN1YmUoIHZbIGkgXSB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0c1sgaSBdICk7XG5cblx0fVxuXG59XG5cbi8vIEhlbHBlciB0byBwaWNrIHRoZSByaWdodCBzZXR0ZXIgZm9yIGEgcHVyZSAoYm90dG9tLWxldmVsKSBhcnJheVxuXG5mdW5jdGlvbiBnZXRQdXJlQXJyYXlTZXR0ZXIoIHR5cGUgKSB7XG5cblx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdGNhc2UgMHgxNDA2OiByZXR1cm4gc2V0VmFsdWUxZnY7IC8vIEZMT0FUXG5cdFx0Y2FzZSAweDhiNTA6IHJldHVybiBzZXRWYWx1ZVYyYTsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGI1MTogcmV0dXJuIHNldFZhbHVlVjNhOyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4YjUyOiByZXR1cm4gc2V0VmFsdWVWNGE7IC8vIF9WRUM0XG5cblx0XHRjYXNlIDB4OGI1YTogcmV0dXJuIHNldFZhbHVlTTJhOyAvLyBfTUFUMlxuXHRcdGNhc2UgMHg4YjViOiByZXR1cm4gc2V0VmFsdWVNM2E7IC8vIF9NQVQzXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00YTsgLy8gX01BVDRcblxuXHRcdGNhc2UgMHg4YjVlOiByZXR1cm4gc2V0VmFsdWVUMWE7IC8vIFNBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGI2MDogcmV0dXJuIHNldFZhbHVlVDZhOyAvLyBTQU1QTEVSX0NVQkVcblxuXHRcdGNhc2UgMHgxNDA0OiBjYXNlIDB4OGI1NjogcmV0dXJuIHNldFZhbHVlMWl2OyAvLyBJTlQsIEJPT0xcblx0XHRjYXNlIDB4OGI1MzogY2FzZSAweDhiNTc6IHJldHVybiBzZXRWYWx1ZTJpdjsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGI1NDogY2FzZSAweDhiNTg6IHJldHVybiBzZXRWYWx1ZTNpdjsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1NTogY2FzZSAweDhiNTk6IHJldHVybiBzZXRWYWx1ZTRpdjsgLy8gX1ZFQzRcblxuXHR9XG5cbn1cblxuLy8gLS0tIFVuaWZvcm0gQ2xhc3NlcyAtLS1cblxuZnVuY3Rpb24gU2luZ2xlVW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSB7XG5cblx0dGhpcy5pZCA9IGlkO1xuXHR0aGlzLmFkZHIgPSBhZGRyO1xuXHR0aGlzLmNhY2hlID0gW107XG5cdHRoaXMuc2V0VmFsdWUgPSBnZXRTaW5ndWxhclNldHRlciggYWN0aXZlSW5mby50eXBlICk7XG5cblx0Ly8gdGhpcy5wYXRoID0gYWN0aXZlSW5mby5uYW1lOyAvLyBERUJVR1xuXG59XG5cbmZ1bmN0aW9uIFB1cmVBcnJheVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkge1xuXG5cdHRoaXMuaWQgPSBpZDtcblx0dGhpcy5hZGRyID0gYWRkcjtcblx0dGhpcy5jYWNoZSA9IFtdO1xuXHR0aGlzLnNpemUgPSBhY3RpdmVJbmZvLnNpemU7XG5cdHRoaXMuc2V0VmFsdWUgPSBnZXRQdXJlQXJyYXlTZXR0ZXIoIGFjdGl2ZUluZm8udHlwZSApO1xuXG5cdC8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUdcblxufVxuXG5QdXJlQXJyYXlVbmlmb3JtLnByb3RvdHlwZS51cGRhdGVDYWNoZSA9IGZ1bmN0aW9uICggZGF0YSApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggZGF0YSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSAmJiBjYWNoZS5sZW5ndGggIT09IGRhdGEubGVuZ3RoICkge1xuXG5cdFx0dGhpcy5jYWNoZSA9IG5ldyBGbG9hdDMyQXJyYXkoIGRhdGEubGVuZ3RoICk7XG5cblx0fVxuXG5cdGNvcHlBcnJheSggY2FjaGUsIGRhdGEgKTtcblxufTtcblxuZnVuY3Rpb24gU3RydWN0dXJlZFVuaWZvcm0oIGlkICkge1xuXG5cdHRoaXMuaWQgPSBpZDtcblxuXHRVbmlmb3JtQ29udGFpbmVyLmNhbGwoIHRoaXMgKTsgLy8gbWl4LWluXG5cbn1cblxuU3RydWN0dXJlZFVuaWZvcm0ucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKCBnbCwgdmFsdWUgKSB7XG5cblx0Ly8gTm90ZTogRG9uJ3QgbmVlZCBhbiBleHRyYSAncmVuZGVyZXInIHBhcmFtZXRlciwgc2luY2Ugc2FtcGxlcnNcblx0Ly8gYXJlIG5vdCBhbGxvd2VkIGluIHN0cnVjdHVyZWQgdW5pZm9ybXMuXG5cblx0dmFyIHNlcSA9IHRoaXMuc2VxO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHR2YXIgdSA9IHNlcVsgaSBdO1xuXHRcdHUuc2V0VmFsdWUoIGdsLCB2YWx1ZVsgdS5pZCBdICk7XG5cblx0fVxuXG59O1xuXG4vLyAtLS0gVG9wLWxldmVsIC0tLVxuXG4vLyBQYXJzZXIgLSBidWlsZHMgdXAgdGhlIHByb3BlcnR5IHRyZWUgZnJvbSB0aGUgcGF0aCBzdHJpbmdzXG5cbnZhciBSZVBhdGhQYXJ0ID0gLyhbXFx3XFxkX10rKShcXF0pPyhcXFt8XFwuKT8vZztcblxuLy8gZXh0cmFjdHNcbi8vIFx0LSB0aGUgaWRlbnRpZmllciAobWVtYmVyIG5hbWUgb3IgYXJyYXkgaW5kZXgpXG4vLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCByaWdodCBicmFja2V0IChmb3VuZCB3aGVuIGFycmF5IGluZGV4KVxuLy8gIC0gZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgbGVmdCBicmFja2V0IG9yIGRvdCAodHlwZSBvZiBzdWJzY3JpcHQpXG4vL1xuLy8gTm90ZTogVGhlc2UgcG9ydGlvbnMgY2FuIGJlIHJlYWQgaW4gYSBub24tb3ZlcmxhcHBpbmcgZmFzaGlvbiBhbmRcbi8vIGFsbG93IHN0cmFpZ2h0Zm9yd2FyZCBwYXJzaW5nIG9mIHRoZSBoaWVyYXJjaHkgdGhhdCBXZWJHTCBlbmNvZGVzXG4vLyBpbiB0aGUgdW5pZm9ybSBuYW1lcy5cblxuZnVuY3Rpb24gYWRkVW5pZm9ybSggY29udGFpbmVyLCB1bmlmb3JtT2JqZWN0ICkge1xuXG5cdGNvbnRhaW5lci5zZXEucHVzaCggdW5pZm9ybU9iamVjdCApO1xuXHRjb250YWluZXIubWFwWyB1bmlmb3JtT2JqZWN0LmlkIF0gPSB1bmlmb3JtT2JqZWN0O1xuXG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5pZm9ybSggYWN0aXZlSW5mbywgYWRkciwgY29udGFpbmVyICkge1xuXG5cdHZhciBwYXRoID0gYWN0aXZlSW5mby5uYW1lLFxuXHRcdHBhdGhMZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuXHQvLyByZXNldCBSZWdFeHAgb2JqZWN0LCBiZWNhdXNlIG9mIHRoZSBlYXJseSBleGl0IG9mIGEgcHJldmlvdXMgcnVuXG5cdFJlUGF0aFBhcnQubGFzdEluZGV4ID0gMDtcblxuXHR3aGlsZSAoIHRydWUgKSB7XG5cblx0XHR2YXIgbWF0Y2ggPSBSZVBhdGhQYXJ0LmV4ZWMoIHBhdGggKSxcblx0XHRcdG1hdGNoRW5kID0gUmVQYXRoUGFydC5sYXN0SW5kZXgsXG5cblx0XHRcdGlkID0gbWF0Y2hbIDEgXSxcblx0XHRcdGlkSXNJbmRleCA9IG1hdGNoWyAyIF0gPT09ICddJyxcblx0XHRcdHN1YnNjcmlwdCA9IG1hdGNoWyAzIF07XG5cblx0XHRpZiAoIGlkSXNJbmRleCApIGlkID0gaWQgfCAwOyAvLyBjb252ZXJ0IHRvIGludGVnZXJcblxuXHRcdGlmICggc3Vic2NyaXB0ID09PSB1bmRlZmluZWQgfHwgc3Vic2NyaXB0ID09PSAnWycgJiYgbWF0Y2hFbmQgKyAyID09PSBwYXRoTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBiYXJlIG5hbWUgb3IgXCJwdXJlXCIgYm90dG9tLWxldmVsIGFycmF5IFwiWzBdXCIgc3VmZml4XG5cblx0XHRcdGFkZFVuaWZvcm0oIGNvbnRhaW5lciwgc3Vic2NyaXB0ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRuZXcgU2luZ2xlVW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSA6XG5cdFx0XHRcdG5ldyBQdXJlQXJyYXlVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApICk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gc3RlcCBpbnRvIGlubmVyIG5vZGUgLyBjcmVhdGUgaXQgaW4gY2FzZSBpdCBkb2Vzbid0IGV4aXN0XG5cblx0XHRcdHZhciBtYXAgPSBjb250YWluZXIubWFwLCBuZXh0ID0gbWFwWyBpZCBdO1xuXG5cdFx0XHRpZiAoIG5leHQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRuZXh0ID0gbmV3IFN0cnVjdHVyZWRVbmlmb3JtKCBpZCApO1xuXHRcdFx0XHRhZGRVbmlmb3JtKCBjb250YWluZXIsIG5leHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb250YWluZXIgPSBuZXh0O1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vLyBSb290IENvbnRhaW5lclxuXG5mdW5jdGlvbiBXZWJHTFVuaWZvcm1zKCBnbCwgcHJvZ3JhbSwgcmVuZGVyZXIgKSB7XG5cblx0VW5pZm9ybUNvbnRhaW5lci5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuXG5cdHZhciBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgZ2wuQUNUSVZFX1VOSUZPUk1TICk7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbjsgKysgaSApIHtcblxuXHRcdHZhciBpbmZvID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybSggcHJvZ3JhbSwgaSApLFxuXHRcdFx0YWRkciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbiggcHJvZ3JhbSwgaW5mby5uYW1lICk7XG5cblx0XHRwYXJzZVVuaWZvcm0oIGluZm8sIGFkZHIsIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuV2ViR0xVbmlmb3Jtcy5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiAoIGdsLCBuYW1lLCB2YWx1ZSApIHtcblxuXHR2YXIgdSA9IHRoaXMubWFwWyBuYW1lIF07XG5cblx0aWYgKCB1ICE9PSB1bmRlZmluZWQgKSB1LnNldFZhbHVlKCBnbCwgdmFsdWUsIHRoaXMucmVuZGVyZXIgKTtcblxufTtcblxuV2ViR0xVbmlmb3Jtcy5wcm90b3R5cGUuc2V0T3B0aW9uYWwgPSBmdW5jdGlvbiAoIGdsLCBvYmplY3QsIG5hbWUgKSB7XG5cblx0dmFyIHYgPSBvYmplY3RbIG5hbWUgXTtcblxuXHRpZiAoIHYgIT09IHVuZGVmaW5lZCApIHRoaXMuc2V0VmFsdWUoIGdsLCBuYW1lLCB2ICk7XG5cbn07XG5cblxuLy8gU3RhdGljIGludGVyZmFjZVxuXG5XZWJHTFVuaWZvcm1zLnVwbG9hZCA9IGZ1bmN0aW9uICggZ2wsIHNlcSwgdmFsdWVzLCByZW5kZXJlciApIHtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dmFyIHUgPSBzZXFbIGkgXSxcblx0XHRcdHYgPSB2YWx1ZXNbIHUuaWQgXTtcblxuXHRcdGlmICggdi5uZWVkc1VwZGF0ZSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIG5vdGU6IGFsd2F5cyB1cGRhdGluZyB3aGVuIC5uZWVkc1VwZGF0ZSBpcyB1bmRlZmluZWRcblx0XHRcdHUuc2V0VmFsdWUoIGdsLCB2LnZhbHVlLCByZW5kZXJlciApO1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuV2ViR0xVbmlmb3Jtcy5zZXFXaXRoVmFsdWUgPSBmdW5jdGlvbiAoIHNlcSwgdmFsdWVzICkge1xuXG5cdHZhciByID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHZhciB1ID0gc2VxWyBpIF07XG5cdFx0aWYgKCB1LmlkIGluIHZhbHVlcyApIHIucHVzaCggdSApO1xuXG5cdH1cblxuXHRyZXR1cm4gcjtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIGFkZExpbmVOdW1iZXJzKCBzdHJpbmcgKSB7XG5cblx0dmFyIGxpbmVzID0gc3RyaW5nLnNwbGl0KCAnXFxuJyApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGxpbmVzWyBpIF0gPSAoIGkgKyAxICkgKyAnOiAnICsgbGluZXNbIGkgXTtcblxuXHR9XG5cblx0cmV0dXJuIGxpbmVzLmpvaW4oICdcXG4nICk7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xTaGFkZXIoIGdsLCB0eXBlLCBzdHJpbmcgKSB7XG5cblx0dmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlciggdHlwZSApO1xuXG5cdGdsLnNoYWRlclNvdXJjZSggc2hhZGVyLCBzdHJpbmcgKTtcblx0Z2wuY29tcGlsZVNoYWRlciggc2hhZGVyICk7XG5cblx0aWYgKCBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoIHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTaGFkZXI6IFNoYWRlciBjb3VsZG5cXCd0IGNvbXBpbGUuJyApO1xuXG5cdH1cblxuXHRpZiAoIGdsLmdldFNoYWRlckluZm9Mb2coIHNoYWRlciApICE9PSAnJyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMU2hhZGVyOiBnbC5nZXRTaGFkZXJJbmZvTG9nKCknLCB0eXBlID09PSBnbC5WRVJURVhfU0hBREVSID8gJ3ZlcnRleCcgOiAnZnJhZ21lbnQnLCBnbC5nZXRTaGFkZXJJbmZvTG9nKCBzaGFkZXIgKSwgYWRkTGluZU51bWJlcnMoIHN0cmluZyApICk7XG5cblx0fVxuXG5cdC8vIC0tZW5hYmxlLXByaXZpbGVnZWQtd2ViZ2wtZXh0ZW5zaW9uXG5cdC8vIGNvbnNvbGUubG9nKCB0eXBlLCBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9kZWJ1Z19zaGFkZXJzJyApLmdldFRyYW5zbGF0ZWRTaGFkZXJTb3VyY2UoIHNoYWRlciApICk7XG5cblx0cmV0dXJuIHNoYWRlcjtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIHByb2dyYW1JZENvdW50ID0gMDtcblxuZnVuY3Rpb24gZ2V0RW5jb2RpbmdDb21wb25lbnRzKCBlbmNvZGluZyApIHtcblxuXHRzd2l0Y2ggKCBlbmNvZGluZyApIHtcblxuXHRcdGNhc2UgTGluZWFyRW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnTGluZWFyJywgJyggdmFsdWUgKScgXTtcblx0XHRjYXNlIHNSR0JFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdzUkdCJywgJyggdmFsdWUgKScgXTtcblx0XHRjYXNlIFJHQkVFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdSR0JFJywgJyggdmFsdWUgKScgXTtcblx0XHRjYXNlIFJHQk03RW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnUkdCTScsICcoIHZhbHVlLCA3LjAgKScgXTtcblx0XHRjYXNlIFJHQk0xNkVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ1JHQk0nLCAnKCB2YWx1ZSwgMTYuMCApJyBdO1xuXHRcdGNhc2UgUkdCREVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ1JHQkQnLCAnKCB2YWx1ZSwgMjU2LjAgKScgXTtcblx0XHRjYXNlIEdhbW1hRW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnR2FtbWEnLCAnKCB2YWx1ZSwgZmxvYXQoIEdBTU1BX0ZBQ1RPUiApICknIF07XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IG5ldyBFcnJvciggJ3Vuc3VwcG9ydGVkIGVuY29kaW5nOiAnICsgZW5jb2RpbmcgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKCBmdW5jdGlvbk5hbWUsIGVuY29kaW5nICkge1xuXG5cdHZhciBjb21wb25lbnRzID0gZ2V0RW5jb2RpbmdDb21wb25lbnRzKCBlbmNvZGluZyApO1xuXHRyZXR1cm4gJ3ZlYzQgJyArIGZ1bmN0aW9uTmFtZSArICcoIHZlYzQgdmFsdWUgKSB7IHJldHVybiAnICsgY29tcG9uZW50c1sgMCBdICsgJ1RvTGluZWFyJyArIGNvbXBvbmVudHNbIDEgXSArICc7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRleGVsRW5jb2RpbmdGdW5jdGlvbiggZnVuY3Rpb25OYW1lLCBlbmNvZGluZyApIHtcblxuXHR2YXIgY29tcG9uZW50cyA9IGdldEVuY29kaW5nQ29tcG9uZW50cyggZW5jb2RpbmcgKTtcblx0cmV0dXJuICd2ZWM0ICcgKyBmdW5jdGlvbk5hbWUgKyAnKCB2ZWM0IHZhbHVlICkgeyByZXR1cm4gTGluZWFyVG8nICsgY29tcG9uZW50c1sgMCBdICsgY29tcG9uZW50c1sgMSBdICsgJzsgfSc7XG5cbn1cblxuZnVuY3Rpb24gZ2V0VG9uZU1hcHBpbmdGdW5jdGlvbiggZnVuY3Rpb25OYW1lLCB0b25lTWFwcGluZyApIHtcblxuXHR2YXIgdG9uZU1hcHBpbmdOYW1lO1xuXG5cdHN3aXRjaCAoIHRvbmVNYXBwaW5nICkge1xuXG5cdFx0Y2FzZSBMaW5lYXJUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdMaW5lYXInO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFJlaW5oYXJkVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnUmVpbmhhcmQnO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFVuY2hhcnRlZDJUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdVbmNoYXJ0ZWQyJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDaW5lb25Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdPcHRpbWl6ZWRDaW5lb24nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAndW5zdXBwb3J0ZWQgdG9uZU1hcHBpbmc6ICcgKyB0b25lTWFwcGluZyApO1xuXG5cdH1cblxuXHRyZXR1cm4gJ3ZlYzMgJyArIGZ1bmN0aW9uTmFtZSArICcoIHZlYzMgY29sb3IgKSB7IHJldHVybiAnICsgdG9uZU1hcHBpbmdOYW1lICsgJ1RvbmVNYXBwaW5nKCBjb2xvciApOyB9JztcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUV4dGVuc2lvbnMoIGV4dGVuc2lvbnMsIHBhcmFtZXRlcnMsIHJlbmRlcmVyRXh0ZW5zaW9ucyApIHtcblxuXHRleHRlbnNpb25zID0gZXh0ZW5zaW9ucyB8fCB7fTtcblxuXHR2YXIgY2h1bmtzID0gW1xuXHRcdCggZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyB8fCBwYXJhbWV0ZXJzLmVudk1hcEN1YmVVViB8fCBwYXJhbWV0ZXJzLmJ1bXBNYXAgfHwgKCBwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiAhIHBhcmFtZXRlcnMub2JqZWN0U3BhY2VOb3JtYWxNYXAgKSB8fCBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nICkgPyAnI2V4dGVuc2lvbiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgOiBlbmFibGUnIDogJycsXG5cdFx0KCBleHRlbnNpb25zLmZyYWdEZXB0aCB8fCBwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgKSAmJiByZW5kZXJlckV4dGVuc2lvbnMuZ2V0KCAnRVhUX2ZyYWdfZGVwdGgnICkgPyAnI2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZScgOiAnJyxcblx0XHQoIGV4dGVuc2lvbnMuZHJhd0J1ZmZlcnMgKSAmJiByZW5kZXJlckV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfZHJhd19idWZmZXJzJyApID8gJyNleHRlbnNpb24gR0xfRVhUX2RyYXdfYnVmZmVycyA6IHJlcXVpcmUnIDogJycsXG5cdFx0KCBleHRlbnNpb25zLnNoYWRlclRleHR1cmVMT0QgfHwgcGFyYW1ldGVycy5lbnZNYXAgKSAmJiByZW5kZXJlckV4dGVuc2lvbnMuZ2V0KCAnRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCcgKSA/ICcjZXh0ZW5zaW9uIEdMX0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QgOiBlbmFibGUnIDogJydcblx0XTtcblxuXHRyZXR1cm4gY2h1bmtzLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZURlZmluZXMoIGRlZmluZXMgKSB7XG5cblx0dmFyIGNodW5rcyA9IFtdO1xuXG5cdGZvciAoIHZhciBuYW1lIGluIGRlZmluZXMgKSB7XG5cblx0XHR2YXIgdmFsdWUgPSBkZWZpbmVzWyBuYW1lIF07XG5cblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIGNvbnRpbnVlO1xuXG5cdFx0Y2h1bmtzLnB1c2goICcjZGVmaW5lICcgKyBuYW1lICsgJyAnICsgdmFsdWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIGNodW5rcy5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGZldGNoQXR0cmlidXRlTG9jYXRpb25zKCBnbCwgcHJvZ3JhbSApIHtcblxuXHR2YXIgYXR0cmlidXRlcyA9IHt9O1xuXG5cdHZhciBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMgKTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBuOyBpICsrICkge1xuXG5cdFx0dmFyIGluZm8gPSBnbC5nZXRBY3RpdmVBdHRyaWIoIHByb2dyYW0sIGkgKTtcblx0XHR2YXIgbmFtZSA9IGluZm8ubmFtZTtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBBQ1RJVkUgVkVSVEVYIEFUVFJJQlVURTonLCBuYW1lLCBpICk7XG5cblx0XHRhdHRyaWJ1dGVzWyBuYW1lIF0gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgbmFtZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gYXR0cmlidXRlcztcblxufVxuXG5mdW5jdGlvbiBmaWx0ZXJFbXB0eUxpbmUoIHN0cmluZyApIHtcblxuXHRyZXR1cm4gc3RyaW5nICE9PSAnJztcblxufVxuXG5mdW5jdGlvbiByZXBsYWNlTGlnaHROdW1zKCBzdHJpbmcsIHBhcmFtZXRlcnMgKSB7XG5cblx0cmV0dXJuIHN0cmluZ1xuXHRcdC5yZXBsYWNlKCAvTlVNX0RJUl9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1EaXJMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fUkVDVF9BUkVBX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVJlY3RBcmVhTGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9QT0lOVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fSEVNSV9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1IZW1pTGlnaHRzICk7XG5cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCBzdHJpbmcsIHBhcmFtZXRlcnMgKSB7XG5cblx0cmV0dXJuIHN0cmluZ1xuXHRcdC5yZXBsYWNlKCAvTlVNX0NMSVBQSU5HX1BMQU5FUy9nLCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzIClcblx0XHQucmVwbGFjZSggL1VOSU9OX0NMSVBQSU5HX1BMQU5FUy9nLCAoIHBhcmFtZXRlcnMubnVtQ2xpcHBpbmdQbGFuZXMgLSBwYXJhbWV0ZXJzLm51bUNsaXBJbnRlcnNlY3Rpb24gKSApO1xuXG59XG5cbmZ1bmN0aW9uIHBhcnNlSW5jbHVkZXMoIHN0cmluZyApIHtcblxuXHR2YXIgcGF0dGVybiA9IC9eWyBcXHRdKiNpbmNsdWRlICs8KFtcXHdcXGQuXSspPi9nbTtcblxuXHRmdW5jdGlvbiByZXBsYWNlKCBtYXRjaCwgaW5jbHVkZSApIHtcblxuXHRcdHZhciByZXBsYWNlID0gU2hhZGVyQ2h1bmtbIGluY2x1ZGUgXTtcblxuXHRcdGlmICggcmVwbGFjZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdDYW4gbm90IHJlc29sdmUgI2luY2x1ZGUgPCcgKyBpbmNsdWRlICsgJz4nICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcGFyc2VJbmNsdWRlcyggcmVwbGFjZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHBhdHRlcm4sIHJlcGxhY2UgKTtcblxufVxuXG5mdW5jdGlvbiB1bnJvbGxMb29wcyggc3RyaW5nICkge1xuXG5cdHZhciBwYXR0ZXJuID0gLyNwcmFnbWEgdW5yb2xsX2xvb3BbXFxzXSs/Zm9yIFxcKCBpbnQgaSBcXD0gKFxcZCspXFw7IGkgPCAoXFxkKylcXDsgaSBcXCtcXCsgXFwpIFxceyhbXFxzXFxTXSs/KSg/PVxcfSlcXH0vZztcblxuXHRmdW5jdGlvbiByZXBsYWNlKCBtYXRjaCwgc3RhcnQsIGVuZCwgc25pcHBldCApIHtcblxuXHRcdHZhciB1bnJvbGwgPSAnJztcblxuXHRcdGZvciAoIHZhciBpID0gcGFyc2VJbnQoIHN0YXJ0ICk7IGkgPCBwYXJzZUludCggZW5kICk7IGkgKysgKSB7XG5cblx0XHRcdHVucm9sbCArPSBzbmlwcGV0LnJlcGxhY2UoIC9cXFsgaSBcXF0vZywgJ1sgJyArIGkgKyAnIF0nICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5yb2xsO1xuXG5cdH1cblxuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHBhdHRlcm4sIHJlcGxhY2UgKTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBleHRlbnNpb25zLCBjb2RlLCBtYXRlcmlhbCwgc2hhZGVyLCBwYXJhbWV0ZXJzICkge1xuXG5cdHZhciBnbCA9IHJlbmRlcmVyLmNvbnRleHQ7XG5cblx0dmFyIGRlZmluZXMgPSBtYXRlcmlhbC5kZWZpbmVzO1xuXG5cdHZhciB2ZXJ0ZXhTaGFkZXIgPSBzaGFkZXIudmVydGV4U2hhZGVyO1xuXHR2YXIgZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXIuZnJhZ21lbnRTaGFkZXI7XG5cblx0dmFyIHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfQkFTSUMnO1xuXG5cdGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBQQ0ZTaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1BDRic7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBQQ0ZTb2Z0U2hhZG93TWFwICkge1xuXG5cdFx0c2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCc7XG5cblx0fVxuXG5cdHZhciBlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkUnO1xuXHR2YXIgZW52TWFwTW9kZURlZmluZSA9ICdFTlZNQVBfTU9ERV9SRUZMRUNUSU9OJztcblx0dmFyIGVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19NVUxUSVBMWSc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApIHtcblxuXHRcdHN3aXRjaCAoIG1hdGVyaWFsLmVudk1hcC5tYXBwaW5nICkge1xuXG5cdFx0XHRjYXNlIEN1YmVSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nOlxuXHRcdFx0XHRlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkUnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRV9VVic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0Y2FzZSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZzpcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9FUVVJUkVDJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfU1BIRVJFJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHRzd2l0Y2ggKCBtYXRlcmlhbC5lbnZNYXAubWFwcGluZyApIHtcblxuXHRcdFx0Y2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRjYXNlIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOlxuXHRcdFx0XHRlbnZNYXBNb2RlRGVmaW5lID0gJ0VOVk1BUF9NT0RFX1JFRlJBQ1RJT04nO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHRcdHN3aXRjaCAoIG1hdGVyaWFsLmNvbWJpbmUgKSB7XG5cblx0XHRcdGNhc2UgTXVsdGlwbHlPcGVyYXRpb246XG5cdFx0XHRcdGVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19NVUxUSVBMWSc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIE1peE9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01JWCc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEFkZE9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX0FERCc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR2YXIgZ2FtbWFGYWN0b3JEZWZpbmUgPSAoIHJlbmRlcmVyLmdhbW1hRmFjdG9yID4gMCApID8gcmVuZGVyZXIuZ2FtbWFGYWN0b3IgOiAxLjA7XG5cblx0Ly8gY29uc29sZS5sb2coICdidWlsZGluZyBuZXcgcHJvZ3JhbSAnICk7XG5cblx0Ly9cblxuXHR2YXIgY3VzdG9tRXh0ZW5zaW9ucyA9IGdlbmVyYXRlRXh0ZW5zaW9ucyggbWF0ZXJpYWwuZXh0ZW5zaW9ucywgcGFyYW1ldGVycywgZXh0ZW5zaW9ucyApO1xuXG5cdHZhciBjdXN0b21EZWZpbmVzID0gZ2VuZXJhdGVEZWZpbmVzKCBkZWZpbmVzICk7XG5cblx0Ly9cblxuXHR2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcblxuXHR2YXIgcHJlZml4VmVydGV4LCBwcmVmaXhGcmFnbWVudDtcblxuXHRpZiAoIG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdGN1c3RvbURlZmluZXNcblxuXHRcdF0uZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG5cdFx0aWYgKCBwcmVmaXhWZXJ0ZXgubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0cHJlZml4VmVydGV4ICs9ICdcXG4nO1xuXG5cdFx0fVxuXG5cdFx0cHJlZml4RnJhZ21lbnQgPSBbXG5cblx0XHRcdGN1c3RvbUV4dGVuc2lvbnMsXG5cdFx0XHRjdXN0b21EZWZpbmVzXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdGlmICggcHJlZml4RnJhZ21lbnQubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0cHJlZml4RnJhZ21lbnQgKz0gJ1xcbic7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdHByZWZpeFZlcnRleCA9IFtcblxuXHRcdFx0J3ByZWNpc2lvbiAnICsgcGFyYW1ldGVycy5wcmVjaXNpb24gKyAnIGZsb2F0OycsXG5cdFx0XHQncHJlY2lzaW9uICcgKyBwYXJhbWV0ZXJzLnByZWNpc2lvbiArICcgaW50OycsXG5cblx0XHRcdCcjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBzaGFkZXIubmFtZSxcblxuXHRcdFx0Y3VzdG9tRGVmaW5lcyxcblxuXHRcdFx0cGFyYW1ldGVycy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzID8gJyNkZWZpbmUgVkVSVEVYX1RFWFRVUkVTJyA6ICcnLFxuXG5cdFx0XHQnI2RlZmluZSBHQU1NQV9GQUNUT1IgJyArIGdhbW1hRmFjdG9yRGVmaW5lLFxuXG5cdFx0XHQnI2RlZmluZSBNQVhfQk9ORVMgJyArIHBhcmFtZXRlcnMubWF4Qm9uZXMsXG5cdFx0XHQoIHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nICkgPyAnI2RlZmluZSBVU0VfRk9HJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZ0V4cCApID8gJyNkZWZpbmUgRk9HX0VYUDInIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubWFwID8gJyNkZWZpbmUgVVNFX01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgVVNFX0VOVk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgJyArIGVudk1hcE1vZGVEZWZpbmUgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubGlnaHRNYXAgPyAnI2RlZmluZSBVU0VfTElHSFRNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFvTWFwID8gJyNkZWZpbmUgVVNFX0FPTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbWlzc2l2ZU1hcCA/ICcjZGVmaW5lIFVTRV9FTUlTU0lWRU1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYnVtcE1hcCA/ICcjZGVmaW5lIFVTRV9CVU1QTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiBwYXJhbWV0ZXJzLm9iamVjdFNwYWNlTm9ybWFsTWFwICkgPyAnI2RlZmluZSBPQkpFQ1RTUEFDRV9OT1JNQUxNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmRpc3BsYWNlbWVudE1hcCAmJiBwYXJhbWV0ZXJzLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMgPyAnI2RlZmluZSBVU0VfRElTUExBQ0VNRU5UTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhck1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMucm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1JPVUdITkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubWV0YWxuZXNzTWFwID8gJyNkZWZpbmUgVVNFX01FVEFMTkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFNYXAgPyAnI2RlZmluZSBVU0VfQUxQSEFNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleENvbG9ycyA/ICcjZGVmaW5lIFVTRV9DT0xPUicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5mbGF0U2hhZGluZyA/ICcjZGVmaW5lIEZMQVRfU0hBREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNraW5uaW5nID8gJyNkZWZpbmUgVVNFX1NLSU5OSU5HJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy51c2VWZXJ0ZXhUZXh0dXJlID8gJyNkZWZpbmUgQk9ORV9URVhUVVJFJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyA/ICcjZGVmaW5lIFVTRV9NT1JQSFRBUkdFVFMnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1vcnBoTm9ybWFscyAmJiBwYXJhbWV0ZXJzLmZsYXRTaGFkaW5nID09PSBmYWxzZSA/ICcjZGVmaW5lIFVTRV9NT1JQSE5PUk1BTFMnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmRvdWJsZVNpZGVkID8gJyNkZWZpbmUgRE9VQkxFX1NJREVEJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5mbGlwU2lkZWQgPyAnI2RlZmluZSBGTElQX1NJREVEJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSBVU0VfU0hBRE9XTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgJyArIHNoYWRvd01hcFR5cGVEZWZpbmUgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaXplQXR0ZW51YXRpb24gPyAnI2RlZmluZSBVU0VfU0laRUFUVEVOVUFUSU9OJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUYnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgJiYgZXh0ZW5zaW9ucy5nZXQoICdFWFRfZnJhZ19kZXB0aCcgKSA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFQnIDogJycsXG5cblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgdmlld01hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247JyxcblxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzMgbm9ybWFsOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzIgdXY7JyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfQ09MT1InLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQwOycsXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDE7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MjsnLFxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQzOycsXG5cblx0XHRcdCdcdCNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTJyxcblxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDA7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwxOycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMjsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDM7JyxcblxuXHRcdFx0J1x0I2Vsc2UnLFxuXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NDsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDU7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ2OycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NzsnLFxuXG5cdFx0XHQnXHQjZW5kaWYnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfU0tJTk5JTkcnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBza2luSW5kZXg7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHNraW5XZWlnaHQ7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCdcXG4nXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRjdXN0b21FeHRlbnNpb25zLFxuXG5cdFx0XHQncHJlY2lzaW9uICcgKyBwYXJhbWV0ZXJzLnByZWNpc2lvbiArICcgZmxvYXQ7Jyxcblx0XHRcdCdwcmVjaXNpb24gJyArIHBhcmFtZXRlcnMucHJlY2lzaW9uICsgJyBpbnQ7JyxcblxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHNoYWRlci5uYW1lLFxuXG5cdFx0XHRjdXN0b21EZWZpbmVzLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhVGVzdCA/ICcjZGVmaW5lIEFMUEhBVEVTVCAnICsgcGFyYW1ldGVycy5hbHBoYVRlc3QgKyAoIHBhcmFtZXRlcnMuYWxwaGFUZXN0ICUgMSA/ICcnIDogJy4wJyApIDogJycsIC8vIGFkZCAnLjAnIGlmIGludGVnZXJcblxuXHRcdFx0JyNkZWZpbmUgR0FNTUFfRkFDVE9SICcgKyBnYW1tYUZhY3RvckRlZmluZSxcblxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyApID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAgKSA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBUeXBlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBCbGVuZGluZ0RlZmluZSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5saWdodE1hcCA/ICcjZGVmaW5lIFVTRV9MSUdIVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYW9NYXAgPyAnI2RlZmluZSBVU0VfQU9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID8gJyNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5idW1wTWFwID8gJyNkZWZpbmUgVVNFX0JVTVBNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVAnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubm9ybWFsTWFwICYmIHBhcmFtZXRlcnMub2JqZWN0U3BhY2VOb3JtYWxNYXAgKSA/ICcjZGVmaW5lIE9CSkVDVFNQQUNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcCA/ICcjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgPyAnI2RlZmluZSBVU0VfQ09MT1InIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZ3JhZGllbnRNYXAgPyAnI2RlZmluZSBVU0VfR1JBRElFTlRNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kb3VibGVTaWRlZCA/ICcjZGVmaW5lIERPVUJMRV9TSURFRCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZmxpcFNpZGVkID8gJyNkZWZpbmUgRkxJUF9TSURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhID8gJyNkZWZpbmUgUFJFTVVMVElQTElFRF9BTFBIQScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyA/ICcjZGVmaW5lIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFMnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciAmJiBleHRlbnNpb25zLmdldCggJ0VYVF9mcmFnX2RlcHRoJyApID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGX0VYVCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgJiYgZXh0ZW5zaW9ucy5nZXQoICdFWFRfc2hhZGVyX3RleHR1cmVfbG9kJyApID8gJyNkZWZpbmUgVEVYVFVSRV9MT0RfRVhUJyA6ICcnLFxuXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247JyxcblxuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyAnI2RlZmluZSBUT05FX01BUFBJTkcnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcgKSA/IFNoYWRlckNodW5rWyAndG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCcgXSA6ICcnLCAvLyB0aGlzIGNvZGUgaXMgcmVxdWlyZWQgaGVyZSBiZWNhdXNlIGl0IGlzIHVzZWQgYnkgdGhlIHRvbmVNYXBwaW5nKCkgZnVuY3Rpb24gZGVmaW5lZCBiZWxvd1xuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyBnZXRUb25lTWFwcGluZ0Z1bmN0aW9uKCAndG9uZU1hcHBpbmcnLCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICkgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kaXRoZXJpbmcgPyAnI2RlZmluZSBESVRIRVJJTkcnIDogJycsXG5cblx0XHRcdCggcGFyYW1ldGVycy5vdXRwdXRFbmNvZGluZyB8fCBwYXJhbWV0ZXJzLm1hcEVuY29kaW5nIHx8IHBhcmFtZXRlcnMuZW52TWFwRW5jb2RpbmcgfHwgcGFyYW1ldGVycy5lbWlzc2l2ZU1hcEVuY29kaW5nICkgPyBTaGFkZXJDaHVua1sgJ2VuY29kaW5nc19wYXJzX2ZyYWdtZW50JyBdIDogJycsIC8vIHRoaXMgY29kZSBpcyByZXF1aXJlZCBoZXJlIGJlY2F1c2UgaXQgaXMgdXNlZCBieSB0aGUgdmFyaW91cyBlbmNvZGluZy9kZWNvZGluZyBmdW5jdGlvbiBkZWZpbmVkIGJlbG93XG5cdFx0XHRwYXJhbWV0ZXJzLm1hcEVuY29kaW5nID8gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKCAnbWFwVGV4ZWxUb0xpbmVhcicsIHBhcmFtZXRlcnMubWFwRW5jb2RpbmcgKSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggJ2Vudk1hcFRleGVsVG9MaW5lYXInLCBwYXJhbWV0ZXJzLmVudk1hcEVuY29kaW5nICkgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggJ2VtaXNzaXZlTWFwVGV4ZWxUb0xpbmVhcicsIHBhcmFtZXRlcnMuZW1pc3NpdmVNYXBFbmNvZGluZyApIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nID8gZ2V0VGV4ZWxFbmNvZGluZ0Z1bmN0aW9uKCAnbGluZWFyVG9PdXRwdXRUZXhlbCcsIHBhcmFtZXRlcnMub3V0cHV0RW5jb2RpbmcgKSA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmRlcHRoUGFja2luZyA/ICcjZGVmaW5lIERFUFRIX1BBQ0tJTkcgJyArIG1hdGVyaWFsLmRlcHRoUGFja2luZyA6ICcnLFxuXG5cdFx0XHQnXFxuJ1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0fVxuXG5cdHZlcnRleFNoYWRlciA9IHBhcnNlSW5jbHVkZXMoIHZlcnRleFNoYWRlciApO1xuXHR2ZXJ0ZXhTaGFkZXIgPSByZXBsYWNlTGlnaHROdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblxuXHRmcmFnbWVudFNoYWRlciA9IHBhcnNlSW5jbHVkZXMoIGZyYWdtZW50U2hhZGVyICk7XG5cdGZyYWdtZW50U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyggZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblx0ZnJhZ21lbnRTaGFkZXIgPSByZXBsYWNlQ2xpcHBpbmdQbGFuZU51bXMoIGZyYWdtZW50U2hhZGVyLCBwYXJhbWV0ZXJzICk7XG5cblx0dmVydGV4U2hhZGVyID0gdW5yb2xsTG9vcHMoIHZlcnRleFNoYWRlciApO1xuXHRmcmFnbWVudFNoYWRlciA9IHVucm9sbExvb3BzKCBmcmFnbWVudFNoYWRlciApO1xuXG5cdHZhciB2ZXJ0ZXhHbHNsID0gcHJlZml4VmVydGV4ICsgdmVydGV4U2hhZGVyO1xuXHR2YXIgZnJhZ21lbnRHbHNsID0gcHJlZml4RnJhZ21lbnQgKyBmcmFnbWVudFNoYWRlcjtcblxuXHQvLyBjb25zb2xlLmxvZyggJypWRVJURVgqJywgdmVydGV4R2xzbCApO1xuXHQvLyBjb25zb2xlLmxvZyggJypGUkFHTUVOVConLCBmcmFnbWVudEdsc2wgKTtcblxuXHR2YXIgZ2xWZXJ0ZXhTaGFkZXIgPSBXZWJHTFNoYWRlciggZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHZlcnRleEdsc2wgKTtcblx0dmFyIGdsRnJhZ21lbnRTaGFkZXIgPSBXZWJHTFNoYWRlciggZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgZnJhZ21lbnRHbHNsICk7XG5cblx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbFZlcnRleFNoYWRlciApO1xuXHRnbC5hdHRhY2hTaGFkZXIoIHByb2dyYW0sIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHQvLyBGb3JjZSBhIHBhcnRpY3VsYXIgYXR0cmlidXRlIHRvIGluZGV4IDAuXG5cblx0aWYgKCBtYXRlcmlhbC5pbmRleDBBdHRyaWJ1dGVOYW1lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsIG1hdGVyaWFsLmluZGV4MEF0dHJpYnV0ZU5hbWUgKTtcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0cyA9PT0gdHJ1ZSApIHtcblxuXHRcdC8vIHByb2dyYW1zIHdpdGggbW9ycGhUYXJnZXRzIGRpc3BsYWNlIHBvc2l0aW9uIG91dCBvZiBhdHRyaWJ1dGUgMFxuXHRcdGdsLmJpbmRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgMCwgJ3Bvc2l0aW9uJyApO1xuXG5cdH1cblxuXHRnbC5saW5rUHJvZ3JhbSggcHJvZ3JhbSApO1xuXG5cdHZhciBwcm9ncmFtTG9nID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coIHByb2dyYW0gKS50cmltKCk7XG5cdHZhciB2ZXJ0ZXhMb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKCBnbFZlcnRleFNoYWRlciApLnRyaW0oKTtcblx0dmFyIGZyYWdtZW50TG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggZ2xGcmFnbWVudFNoYWRlciApLnRyaW0oKTtcblxuXHR2YXIgcnVubmFibGUgPSB0cnVlO1xuXHR2YXIgaGF2ZURpYWdub3N0aWNzID0gdHJ1ZTtcblxuXHQvLyBjb25zb2xlLmxvZyggJyoqVkVSVEVYKionLCBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9kZWJ1Z19zaGFkZXJzJyApLmdldFRyYW5zbGF0ZWRTaGFkZXJTb3VyY2UoIGdsVmVydGV4U2hhZGVyICkgKTtcblx0Ly8gY29uc29sZS5sb2coICcqKkZSQUdNRU5UKionLCBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9kZWJ1Z19zaGFkZXJzJyApLmdldFRyYW5zbGF0ZWRTaGFkZXJTb3VyY2UoIGdsRnJhZ21lbnRTaGFkZXIgKSApO1xuXG5cdGlmICggZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRydW5uYWJsZSA9IGZhbHNlO1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUHJvZ3JhbTogc2hhZGVyIGVycm9yOiAnLCBnbC5nZXRFcnJvcigpLCAnZ2wuVkFMSURBVEVfU1RBVFVTJywgZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgZ2wuVkFMSURBVEVfU1RBVFVTICksICdnbC5nZXRQcm9ncmFtSW5mb0xvZycsIHByb2dyYW1Mb2csIHZlcnRleExvZywgZnJhZ21lbnRMb2cgKTtcblxuXHR9IGVsc2UgaWYgKCBwcm9ncmFtTG9nICE9PSAnJyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbTogZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coKScsIHByb2dyYW1Mb2cgKTtcblxuXHR9IGVsc2UgaWYgKCB2ZXJ0ZXhMb2cgPT09ICcnIHx8IGZyYWdtZW50TG9nID09PSAnJyApIHtcblxuXHRcdGhhdmVEaWFnbm9zdGljcyA9IGZhbHNlO1xuXG5cdH1cblxuXHRpZiAoIGhhdmVEaWFnbm9zdGljcyApIHtcblxuXHRcdHRoaXMuZGlhZ25vc3RpY3MgPSB7XG5cblx0XHRcdHJ1bm5hYmxlOiBydW5uYWJsZSxcblx0XHRcdG1hdGVyaWFsOiBtYXRlcmlhbCxcblxuXHRcdFx0cHJvZ3JhbUxvZzogcHJvZ3JhbUxvZyxcblxuXHRcdFx0dmVydGV4U2hhZGVyOiB7XG5cblx0XHRcdFx0bG9nOiB2ZXJ0ZXhMb2csXG5cdFx0XHRcdHByZWZpeDogcHJlZml4VmVydGV4XG5cblx0XHRcdH0sXG5cblx0XHRcdGZyYWdtZW50U2hhZGVyOiB7XG5cblx0XHRcdFx0bG9nOiBmcmFnbWVudExvZyxcblx0XHRcdFx0cHJlZml4OiBwcmVmaXhGcmFnbWVudFxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHQvLyBjbGVhbiB1cFxuXG5cdGdsLmRlbGV0ZVNoYWRlciggZ2xWZXJ0ZXhTaGFkZXIgKTtcblx0Z2wuZGVsZXRlU2hhZGVyKCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0Ly8gc2V0IHVwIGNhY2hpbmcgZm9yIHVuaWZvcm0gbG9jYXRpb25zXG5cblx0dmFyIGNhY2hlZFVuaWZvcm1zO1xuXG5cdHRoaXMuZ2V0VW5pZm9ybXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGNhY2hlZFVuaWZvcm1zID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNhY2hlZFVuaWZvcm1zID0gbmV3IFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtLCByZW5kZXJlciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlZFVuaWZvcm1zO1xuXG5cdH07XG5cblx0Ly8gc2V0IHVwIGNhY2hpbmcgZm9yIGF0dHJpYnV0ZSBsb2NhdGlvbnNcblxuXHR2YXIgY2FjaGVkQXR0cmlidXRlcztcblxuXHR0aGlzLmdldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGNhY2hlZEF0dHJpYnV0ZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y2FjaGVkQXR0cmlidXRlcyA9IGZldGNoQXR0cmlidXRlTG9jYXRpb25zKCBnbCwgcHJvZ3JhbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlZEF0dHJpYnV0ZXM7XG5cblx0fTtcblxuXHQvLyBmcmVlIHJlc291cmNlXG5cblx0dGhpcy5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0Z2wuZGVsZXRlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXHRcdHRoaXMucHJvZ3JhbSA9IHVuZGVmaW5lZDtcblxuXHR9O1xuXG5cdC8vIERFUFJFQ0FURURcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcywge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbTogLnVuaWZvcm1zIGlzIG5vdyAuZ2V0VW5pZm9ybXMoKS4nICk7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldFVuaWZvcm1zKCk7XG5cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YXR0cmlidXRlczoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiAuYXR0cmlidXRlcyBpcyBub3cgLmdldEF0dHJpYnV0ZXMoKS4nICk7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdFx0fVxuXHRcdH1cblxuXHR9ICk7XG5cblxuXHQvL1xuXG5cdHRoaXMubmFtZSA9IHNoYWRlci5uYW1lO1xuXHR0aGlzLmlkID0gcHJvZ3JhbUlkQ291bnQgKys7XG5cdHRoaXMuY29kZSA9IGNvZGU7XG5cdHRoaXMudXNlZFRpbWVzID0gMTtcblx0dGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcblx0dGhpcy52ZXJ0ZXhTaGFkZXIgPSBnbFZlcnRleFNoYWRlcjtcblx0dGhpcy5mcmFnbWVudFNoYWRlciA9IGdsRnJhZ21lbnRTaGFkZXI7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMUHJvZ3JhbXMoIHJlbmRlcmVyLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0dmFyIHByb2dyYW1zID0gW107XG5cblx0dmFyIHNoYWRlcklEcyA9IHtcblx0XHRNZXNoRGVwdGhNYXRlcmlhbDogJ2RlcHRoJyxcblx0XHRNZXNoRGlzdGFuY2VNYXRlcmlhbDogJ2Rpc3RhbmNlUkdCQScsXG5cdFx0TWVzaE5vcm1hbE1hdGVyaWFsOiAnbm9ybWFsJyxcblx0XHRNZXNoQmFzaWNNYXRlcmlhbDogJ2Jhc2ljJyxcblx0XHRNZXNoTGFtYmVydE1hdGVyaWFsOiAnbGFtYmVydCcsXG5cdFx0TWVzaFBob25nTWF0ZXJpYWw6ICdwaG9uZycsXG5cdFx0TWVzaFRvb25NYXRlcmlhbDogJ3Bob25nJyxcblx0XHRNZXNoU3RhbmRhcmRNYXRlcmlhbDogJ3BoeXNpY2FsJyxcblx0XHRNZXNoUGh5c2ljYWxNYXRlcmlhbDogJ3BoeXNpY2FsJyxcblx0XHRMaW5lQmFzaWNNYXRlcmlhbDogJ2Jhc2ljJyxcblx0XHRMaW5lRGFzaGVkTWF0ZXJpYWw6ICdkYXNoZWQnLFxuXHRcdFBvaW50c01hdGVyaWFsOiAncG9pbnRzJyxcblx0XHRTaGFkb3dNYXRlcmlhbDogJ3NoYWRvdydcblx0fTtcblxuXHR2YXIgcGFyYW1ldGVyTmFtZXMgPSBbXG5cdFx0XCJwcmVjaXNpb25cIiwgXCJzdXBwb3J0c1ZlcnRleFRleHR1cmVzXCIsIFwibWFwXCIsIFwibWFwRW5jb2RpbmdcIiwgXCJlbnZNYXBcIiwgXCJlbnZNYXBNb2RlXCIsIFwiZW52TWFwRW5jb2RpbmdcIixcblx0XHRcImxpZ2h0TWFwXCIsIFwiYW9NYXBcIiwgXCJlbWlzc2l2ZU1hcFwiLCBcImVtaXNzaXZlTWFwRW5jb2RpbmdcIiwgXCJidW1wTWFwXCIsIFwibm9ybWFsTWFwXCIsIFwib2JqZWN0U3BhY2VOb3JtYWxNYXBcIiwgXCJkaXNwbGFjZW1lbnRNYXBcIiwgXCJzcGVjdWxhck1hcFwiLFxuXHRcdFwicm91Z2huZXNzTWFwXCIsIFwibWV0YWxuZXNzTWFwXCIsIFwiZ3JhZGllbnRNYXBcIixcblx0XHRcImFscGhhTWFwXCIsIFwiY29tYmluZVwiLCBcInZlcnRleENvbG9yc1wiLCBcImZvZ1wiLCBcInVzZUZvZ1wiLCBcImZvZ0V4cFwiLFxuXHRcdFwiZmxhdFNoYWRpbmdcIiwgXCJzaXplQXR0ZW51YXRpb25cIiwgXCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyXCIsIFwic2tpbm5pbmdcIixcblx0XHRcIm1heEJvbmVzXCIsIFwidXNlVmVydGV4VGV4dHVyZVwiLCBcIm1vcnBoVGFyZ2V0c1wiLCBcIm1vcnBoTm9ybWFsc1wiLFxuXHRcdFwibWF4TW9ycGhUYXJnZXRzXCIsIFwibWF4TW9ycGhOb3JtYWxzXCIsIFwicHJlbXVsdGlwbGllZEFscGhhXCIsXG5cdFx0XCJudW1EaXJMaWdodHNcIiwgXCJudW1Qb2ludExpZ2h0c1wiLCBcIm51bVNwb3RMaWdodHNcIiwgXCJudW1IZW1pTGlnaHRzXCIsIFwibnVtUmVjdEFyZWFMaWdodHNcIixcblx0XHRcInNoYWRvd01hcEVuYWJsZWRcIiwgXCJzaGFkb3dNYXBUeXBlXCIsIFwidG9uZU1hcHBpbmdcIiwgJ3BoeXNpY2FsbHlDb3JyZWN0TGlnaHRzJyxcblx0XHRcImFscGhhVGVzdFwiLCBcImRvdWJsZVNpZGVkXCIsIFwiZmxpcFNpZGVkXCIsIFwibnVtQ2xpcHBpbmdQbGFuZXNcIiwgXCJudW1DbGlwSW50ZXJzZWN0aW9uXCIsIFwiZGVwdGhQYWNraW5nXCIsIFwiZGl0aGVyaW5nXCJcblx0XTtcblxuXG5cdGZ1bmN0aW9uIGFsbG9jYXRlQm9uZXMoIG9iamVjdCApIHtcblxuXHRcdHZhciBza2VsZXRvbiA9IG9iamVjdC5za2VsZXRvbjtcblx0XHR2YXIgYm9uZXMgPSBza2VsZXRvbi5ib25lcztcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzLmZsb2F0VmVydGV4VGV4dHVyZXMgKSB7XG5cblx0XHRcdHJldHVybiAxMDI0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gZGVmYXVsdCBmb3Igd2hlbiBvYmplY3QgaXMgbm90IHNwZWNpZmllZFxuXHRcdFx0Ly8gKCBmb3IgZXhhbXBsZSB3aGVuIHByZWJ1aWxkaW5nIHNoYWRlciB0byBiZSB1c2VkIHdpdGggbXVsdGlwbGUgb2JqZWN0cyApXG5cdFx0XHQvL1xuXHRcdFx0Ly8gIC0gbGVhdmUgc29tZSBleHRyYSBzcGFjZSBmb3Igb3RoZXIgdW5pZm9ybXNcblx0XHRcdC8vICAtIGxpbWl0IGhlcmUgaXMgQU5HTEUncyAyNTQgbWF4IHVuaWZvcm0gdmVjdG9yc1xuXHRcdFx0Ly8gICAgKHVwIHRvIDU0IHNob3VsZCBiZSBzYWZlKVxuXG5cdFx0XHR2YXIgblZlcnRleFVuaWZvcm1zID0gY2FwYWJpbGl0aWVzLm1heFZlcnRleFVuaWZvcm1zO1xuXHRcdFx0dmFyIG5WZXJ0ZXhNYXRyaWNlcyA9IE1hdGguZmxvb3IoICggblZlcnRleFVuaWZvcm1zIC0gMjAgKSAvIDQgKTtcblxuXHRcdFx0dmFyIG1heEJvbmVzID0gTWF0aC5taW4oIG5WZXJ0ZXhNYXRyaWNlcywgYm9uZXMubGVuZ3RoICk7XG5cblx0XHRcdGlmICggbWF4Qm9uZXMgPCBib25lcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogU2tlbGV0b24gaGFzICcgKyBib25lcy5sZW5ndGggKyAnIGJvbmVzLiBUaGlzIEdQVSBzdXBwb3J0cyAnICsgbWF4Qm9uZXMgKyAnLicgKTtcblx0XHRcdFx0cmV0dXJuIDA7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1heEJvbmVzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBtYXAsIGdhbW1hT3ZlcnJpZGVMaW5lYXIgKSB7XG5cblx0XHR2YXIgZW5jb2Rpbmc7XG5cblx0XHRpZiAoICEgbWFwICkge1xuXG5cdFx0XHRlbmNvZGluZyA9IExpbmVhckVuY29kaW5nO1xuXG5cdFx0fSBlbHNlIGlmICggbWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZW5jb2RpbmcgPSBtYXAuZW5jb2Rpbmc7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXAuaXNXZWJHTFJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLldlYkdMUHJvZ3JhbXMuZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcDogZG9uJ3QgdXNlIHJlbmRlciB0YXJnZXRzIGFzIHRleHR1cmVzLiBVc2UgdGhlaXIgLnRleHR1cmUgcHJvcGVydHkgaW5zdGVhZC5cIiApO1xuXHRcdFx0ZW5jb2RpbmcgPSBtYXAudGV4dHVyZS5lbmNvZGluZztcblxuXHRcdH1cblxuXHRcdC8vIGFkZCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3IgV2ViR0xSZW5kZXJlci5nYW1tYUlucHV0L2dhbW1hT3V0cHV0IHBhcmFtZXRlciwgc2hvdWxkIHByb2JhYmx5IGJlIHJlbW92ZWQgYXQgc29tZSBwb2ludC5cblx0XHRpZiAoIGVuY29kaW5nID09PSBMaW5lYXJFbmNvZGluZyAmJiBnYW1tYU92ZXJyaWRlTGluZWFyICkge1xuXG5cdFx0XHRlbmNvZGluZyA9IEdhbW1hRW5jb2Rpbmc7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZW5jb2Rpbmc7XG5cblx0fVxuXG5cdHRoaXMuZ2V0UGFyYW1ldGVycyA9IGZ1bmN0aW9uICggbWF0ZXJpYWwsIGxpZ2h0cywgc2hhZG93cywgZm9nLCBuQ2xpcFBsYW5lcywgbkNsaXBJbnRlcnNlY3Rpb24sIG9iamVjdCApIHtcblxuXHRcdHZhciBzaGFkZXJJRCA9IHNoYWRlcklEc1sgbWF0ZXJpYWwudHlwZSBdO1xuXG5cdFx0Ly8gaGV1cmlzdGljcyB0byBjcmVhdGUgc2hhZGVyIHBhcmFtZXRlcnMgYWNjb3JkaW5nIHRvIGxpZ2h0cyBpbiB0aGUgc2NlbmVcblx0XHQvLyAobm90IHRvIGJsb3cgb3ZlciBtYXhMaWdodHMgYnVkZ2V0KVxuXG5cdFx0dmFyIG1heEJvbmVzID0gb2JqZWN0LmlzU2tpbm5lZE1lc2ggPyBhbGxvY2F0ZUJvbmVzKCBvYmplY3QgKSA6IDA7XG5cdFx0dmFyIHByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5wcmVjaXNpb247XG5cblx0XHRpZiAoIG1hdGVyaWFsLnByZWNpc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0cHJlY2lzaW9uID0gY2FwYWJpbGl0aWVzLmdldE1heFByZWNpc2lvbiggbWF0ZXJpYWwucHJlY2lzaW9uICk7XG5cblx0XHRcdGlmICggcHJlY2lzaW9uICE9PSBtYXRlcmlhbC5wcmVjaXNpb24gKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtLmdldFBhcmFtZXRlcnM6JywgbWF0ZXJpYWwucHJlY2lzaW9uLCAnbm90IHN1cHBvcnRlZCwgdXNpbmcnLCBwcmVjaXNpb24sICdpbnN0ZWFkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGN1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblxuXHRcdHZhciBwYXJhbWV0ZXJzID0ge1xuXG5cdFx0XHRzaGFkZXJJRDogc2hhZGVySUQsXG5cblx0XHRcdHByZWNpc2lvbjogcHJlY2lzaW9uLFxuXHRcdFx0c3VwcG9ydHNWZXJ0ZXhUZXh0dXJlczogY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzLFxuXHRcdFx0b3V0cHV0RW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoICggISBjdXJyZW50UmVuZGVyVGFyZ2V0ICkgPyBudWxsIDogY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlLCByZW5kZXJlci5nYW1tYU91dHB1dCApLFxuXHRcdFx0bWFwOiAhISBtYXRlcmlhbC5tYXAsXG5cdFx0XHRtYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWF0ZXJpYWwubWFwLCByZW5kZXJlci5nYW1tYUlucHV0ICksXG5cdFx0XHRlbnZNYXA6ICEhIG1hdGVyaWFsLmVudk1hcCxcblx0XHRcdGVudk1hcE1vZGU6IG1hdGVyaWFsLmVudk1hcCAmJiBtYXRlcmlhbC5lbnZNYXAubWFwcGluZyxcblx0XHRcdGVudk1hcEVuY29kaW5nOiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBtYXRlcmlhbC5lbnZNYXAsIHJlbmRlcmVyLmdhbW1hSW5wdXQgKSxcblx0XHRcdGVudk1hcEN1YmVVVjogKCAhISBtYXRlcmlhbC5lbnZNYXAgKSAmJiAoICggbWF0ZXJpYWwuZW52TWFwLm1hcHBpbmcgPT09IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nICkgfHwgKCBtYXRlcmlhbC5lbnZNYXAubWFwcGluZyA9PT0gQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmcgKSApLFxuXHRcdFx0bGlnaHRNYXA6ICEhIG1hdGVyaWFsLmxpZ2h0TWFwLFxuXHRcdFx0YW9NYXA6ICEhIG1hdGVyaWFsLmFvTWFwLFxuXHRcdFx0ZW1pc3NpdmVNYXA6ICEhIG1hdGVyaWFsLmVtaXNzaXZlTWFwLFxuXHRcdFx0ZW1pc3NpdmVNYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWF0ZXJpYWwuZW1pc3NpdmVNYXAsIHJlbmRlcmVyLmdhbW1hSW5wdXQgKSxcblx0XHRcdGJ1bXBNYXA6ICEhIG1hdGVyaWFsLmJ1bXBNYXAsXG5cdFx0XHRub3JtYWxNYXA6ICEhIG1hdGVyaWFsLm5vcm1hbE1hcCxcblx0XHRcdG9iamVjdFNwYWNlTm9ybWFsTWFwOiBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID09PSBPYmplY3RTcGFjZU5vcm1hbE1hcCxcblx0XHRcdGRpc3BsYWNlbWVudE1hcDogISEgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLFxuXHRcdFx0cm91Z2huZXNzTWFwOiAhISBtYXRlcmlhbC5yb3VnaG5lc3NNYXAsXG5cdFx0XHRtZXRhbG5lc3NNYXA6ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcCxcblx0XHRcdHNwZWN1bGFyTWFwOiAhISBtYXRlcmlhbC5zcGVjdWxhck1hcCxcblx0XHRcdGFscGhhTWFwOiAhISBtYXRlcmlhbC5hbHBoYU1hcCxcblxuXHRcdFx0Z3JhZGllbnRNYXA6ICEhIG1hdGVyaWFsLmdyYWRpZW50TWFwLFxuXG5cdFx0XHRjb21iaW5lOiBtYXRlcmlhbC5jb21iaW5lLFxuXG5cdFx0XHR2ZXJ0ZXhDb2xvcnM6IG1hdGVyaWFsLnZlcnRleENvbG9ycyxcblxuXHRcdFx0Zm9nOiAhISBmb2csXG5cdFx0XHR1c2VGb2c6IG1hdGVyaWFsLmZvZyxcblx0XHRcdGZvZ0V4cDogKCBmb2cgJiYgZm9nLmlzRm9nRXhwMiApLFxuXG5cdFx0XHRmbGF0U2hhZGluZzogbWF0ZXJpYWwuZmxhdFNoYWRpbmcsXG5cblx0XHRcdHNpemVBdHRlbnVhdGlvbjogbWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uLFxuXHRcdFx0bG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIsXG5cblx0XHRcdHNraW5uaW5nOiBtYXRlcmlhbC5za2lubmluZyAmJiBtYXhCb25lcyA+IDAsXG5cdFx0XHRtYXhCb25lczogbWF4Qm9uZXMsXG5cdFx0XHR1c2VWZXJ0ZXhUZXh0dXJlOiBjYXBhYmlsaXRpZXMuZmxvYXRWZXJ0ZXhUZXh0dXJlcyxcblxuXHRcdFx0bW9ycGhUYXJnZXRzOiBtYXRlcmlhbC5tb3JwaFRhcmdldHMsXG5cdFx0XHRtb3JwaE5vcm1hbHM6IG1hdGVyaWFsLm1vcnBoTm9ybWFscyxcblx0XHRcdG1heE1vcnBoVGFyZ2V0czogcmVuZGVyZXIubWF4TW9ycGhUYXJnZXRzLFxuXHRcdFx0bWF4TW9ycGhOb3JtYWxzOiByZW5kZXJlci5tYXhNb3JwaE5vcm1hbHMsXG5cblx0XHRcdG51bURpckxpZ2h0czogbGlnaHRzLmRpcmVjdGlvbmFsLmxlbmd0aCxcblx0XHRcdG51bVBvaW50TGlnaHRzOiBsaWdodHMucG9pbnQubGVuZ3RoLFxuXHRcdFx0bnVtU3BvdExpZ2h0czogbGlnaHRzLnNwb3QubGVuZ3RoLFxuXHRcdFx0bnVtUmVjdEFyZWFMaWdodHM6IGxpZ2h0cy5yZWN0QXJlYS5sZW5ndGgsXG5cdFx0XHRudW1IZW1pTGlnaHRzOiBsaWdodHMuaGVtaS5sZW5ndGgsXG5cblx0XHRcdG51bUNsaXBwaW5nUGxhbmVzOiBuQ2xpcFBsYW5lcyxcblx0XHRcdG51bUNsaXBJbnRlcnNlY3Rpb246IG5DbGlwSW50ZXJzZWN0aW9uLFxuXG5cdFx0XHRkaXRoZXJpbmc6IG1hdGVyaWFsLmRpdGhlcmluZyxcblxuXHRcdFx0c2hhZG93TWFwRW5hYmxlZDogcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgJiYgb2JqZWN0LnJlY2VpdmVTaGFkb3cgJiYgc2hhZG93cy5sZW5ndGggPiAwLFxuXHRcdFx0c2hhZG93TWFwVHlwZTogcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUsXG5cblx0XHRcdHRvbmVNYXBwaW5nOiByZW5kZXJlci50b25lTWFwcGluZyxcblx0XHRcdHBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzOiByZW5kZXJlci5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyxcblxuXHRcdFx0cHJlbXVsdGlwbGllZEFscGhhOiBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEsXG5cblx0XHRcdGFscGhhVGVzdDogbWF0ZXJpYWwuYWxwaGFUZXN0LFxuXHRcdFx0ZG91YmxlU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUsXG5cdFx0XHRmbGlwU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlLFxuXG5cdFx0XHRkZXB0aFBhY2tpbmc6ICggbWF0ZXJpYWwuZGVwdGhQYWNraW5nICE9PSB1bmRlZmluZWQgKSA/IG1hdGVyaWFsLmRlcHRoUGFja2luZyA6IGZhbHNlXG5cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHBhcmFtZXRlcnM7XG5cblx0fTtcblxuXHR0aGlzLmdldFByb2dyYW1Db2RlID0gZnVuY3Rpb24gKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApIHtcblxuXHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICkge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoYWRlcklEICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciApO1xuXHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWwudmVydGV4U2hhZGVyICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRlZmluZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIG5hbWUgaW4gbWF0ZXJpYWwuZGVmaW5lcyApIHtcblxuXHRcdFx0XHRhcnJheS5wdXNoKCBuYW1lICk7XG5cdFx0XHRcdGFycmF5LnB1c2goIG1hdGVyaWFsLmRlZmluZXNbIG5hbWUgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBwYXJhbWV0ZXJOYW1lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnNbIHBhcmFtZXRlck5hbWVzWyBpIF0gXSApO1xuXG5cdFx0fVxuXG5cdFx0YXJyYXkucHVzaCggbWF0ZXJpYWwub25CZWZvcmVDb21waWxlLnRvU3RyaW5nKCkgKTtcblxuXHRcdGFycmF5LnB1c2goIHJlbmRlcmVyLmdhbW1hT3V0cHV0ICk7XG5cblx0XHRyZXR1cm4gYXJyYXkuam9pbigpO1xuXG5cdH07XG5cblx0dGhpcy5hY3F1aXJlUHJvZ3JhbSA9IGZ1bmN0aW9uICggbWF0ZXJpYWwsIHNoYWRlciwgcGFyYW1ldGVycywgY29kZSApIHtcblxuXHRcdHZhciBwcm9ncmFtO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgY29kZSBoYXMgYmVlbiBhbHJlYWR5IGNvbXBpbGVkXG5cdFx0Zm9yICggdmFyIHAgPSAwLCBwbCA9IHByb2dyYW1zLmxlbmd0aDsgcCA8IHBsOyBwICsrICkge1xuXG5cdFx0XHR2YXIgcHJvZ3JhbUluZm8gPSBwcm9ncmFtc1sgcCBdO1xuXG5cdFx0XHRpZiAoIHByb2dyYW1JbmZvLmNvZGUgPT09IGNvZGUgKSB7XG5cblx0XHRcdFx0cHJvZ3JhbSA9IHByb2dyYW1JbmZvO1xuXHRcdFx0XHQrKyBwcm9ncmFtLnVzZWRUaW1lcztcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwcm9ncmFtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHByb2dyYW0gPSBuZXcgV2ViR0xQcm9ncmFtKCByZW5kZXJlciwgZXh0ZW5zaW9ucywgY29kZSwgbWF0ZXJpYWwsIHNoYWRlciwgcGFyYW1ldGVycyApO1xuXHRcdFx0cHJvZ3JhbXMucHVzaCggcHJvZ3JhbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fTtcblxuXHR0aGlzLnJlbGVhc2VQcm9ncmFtID0gZnVuY3Rpb24gKCBwcm9ncmFtICkge1xuXG5cdFx0aWYgKCAtLSBwcm9ncmFtLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGZyb20gdW5vcmRlcmVkIHNldFxuXHRcdFx0dmFyIGkgPSBwcm9ncmFtcy5pbmRleE9mKCBwcm9ncmFtICk7XG5cdFx0XHRwcm9ncmFtc1sgaSBdID0gcHJvZ3JhbXNbIHByb2dyYW1zLmxlbmd0aCAtIDEgXTtcblx0XHRcdHByb2dyYW1zLnBvcCgpO1xuXG5cdFx0XHQvLyBGcmVlIFdlYkdMIHJlc291cmNlc1xuXHRcdFx0cHJvZ3JhbS5kZXN0cm95KCk7XG5cblx0XHR9XG5cblx0fTtcblxuXHQvLyBFeHBvc2VkIGZvciByZXNvdXJjZSBtb25pdG9yaW5nICYgZXJyb3IgZmVlZGJhY2sgdmlhIHJlbmRlcmVyLmluZm86XG5cdHRoaXMucHJvZ3JhbXMgPSBwcm9ncmFtcztcblxufVxuXG4vKipcbiAqIEBhdXRob3IgZm9yZGFjaW91cyAvIGZvcmRhY2lvdXMuZ2l0aHViLmlvXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xQcm9wZXJ0aWVzKCkge1xuXG5cdHZhciBwcm9wZXJ0aWVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIG9iamVjdCApIHtcblxuXHRcdHZhciBtYXAgPSBwcm9wZXJ0aWVzLmdldCggb2JqZWN0ICk7XG5cblx0XHRpZiAoIG1hcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXAgPSB7fTtcblx0XHRcdHByb3BlcnRpZXMuc2V0KCBvYmplY3QsIG1hcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hcDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlKCBvYmplY3QgKSB7XG5cblx0XHRwcm9wZXJ0aWVzLmRlbGV0ZSggb2JqZWN0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBrZXksIHZhbHVlICkge1xuXG5cdFx0cHJvcGVydGllcy5nZXQoIG9iamVjdCApWyBrZXkgXSA9IHZhbHVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0cHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBwYWludGVyU29ydFN0YWJsZSggYSwgYiApIHtcblxuXHRpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS5wcm9ncmFtICYmIGIucHJvZ3JhbSAmJiBhLnByb2dyYW0gIT09IGIucHJvZ3JhbSApIHtcblxuXHRcdHJldHVybiBhLnByb2dyYW0uaWQgLSBiLnByb2dyYW0uaWQ7XG5cblx0fSBlbHNlIGlmICggYS5tYXRlcmlhbC5pZCAhPT0gYi5tYXRlcmlhbC5pZCApIHtcblxuXHRcdHJldHVybiBhLm1hdGVyaWFsLmlkIC0gYi5tYXRlcmlhbC5pZDtcblxuXHR9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHtcblxuXHRcdHJldHVybiBhLnogLSBiLno7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBhLmlkIC0gYi5pZDtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlciApIHtcblxuXHRcdHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcblxuXHR9IGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYi56IC0gYS56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyTGlzdCgpIHtcblxuXHR2YXIgcmVuZGVySXRlbXMgPSBbXTtcblx0dmFyIHJlbmRlckl0ZW1zSW5kZXggPSAwO1xuXG5cdHZhciBvcGFxdWUgPSBbXTtcblx0dmFyIHRyYW5zcGFyZW50ID0gW107XG5cblx0ZnVuY3Rpb24gaW5pdCgpIHtcblxuXHRcdHJlbmRlckl0ZW1zSW5kZXggPSAwO1xuXG5cdFx0b3BhcXVlLmxlbmd0aCA9IDA7XG5cdFx0dHJhbnNwYXJlbnQubGVuZ3RoID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHosIGdyb3VwICkge1xuXG5cdFx0dmFyIHJlbmRlckl0ZW0gPSByZW5kZXJJdGVtc1sgcmVuZGVySXRlbXNJbmRleCBdO1xuXG5cdFx0aWYgKCByZW5kZXJJdGVtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlbmRlckl0ZW0gPSB7XG5cdFx0XHRcdGlkOiBvYmplY3QuaWQsXG5cdFx0XHRcdG9iamVjdDogb2JqZWN0LFxuXHRcdFx0XHRnZW9tZXRyeTogZ2VvbWV0cnksXG5cdFx0XHRcdG1hdGVyaWFsOiBtYXRlcmlhbCxcblx0XHRcdFx0cHJvZ3JhbTogbWF0ZXJpYWwucHJvZ3JhbSxcblx0XHRcdFx0cmVuZGVyT3JkZXI6IG9iamVjdC5yZW5kZXJPcmRlcixcblx0XHRcdFx0ejogeixcblx0XHRcdFx0Z3JvdXA6IGdyb3VwXG5cdFx0XHR9O1xuXG5cdFx0XHRyZW5kZXJJdGVtc1sgcmVuZGVySXRlbXNJbmRleCBdID0gcmVuZGVySXRlbTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlckl0ZW0uaWQgPSBvYmplY3QuaWQ7XG5cdFx0XHRyZW5kZXJJdGVtLm9iamVjdCA9IG9iamVjdDtcblx0XHRcdHJlbmRlckl0ZW0uZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblx0XHRcdHJlbmRlckl0ZW0ubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblx0XHRcdHJlbmRlckl0ZW0ucHJvZ3JhbSA9IG1hdGVyaWFsLnByb2dyYW07XG5cdFx0XHRyZW5kZXJJdGVtLnJlbmRlck9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyO1xuXHRcdFx0cmVuZGVySXRlbS56ID0gejtcblx0XHRcdHJlbmRlckl0ZW0uZ3JvdXAgPSBncm91cDtcblxuXHRcdH1cblxuXHRcdCggbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IHRydWUgPyB0cmFuc3BhcmVudCA6IG9wYXF1ZSApLnB1c2goIHJlbmRlckl0ZW0gKTtcblxuXHRcdHJlbmRlckl0ZW1zSW5kZXggKys7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNvcnQoKSB7XG5cblx0XHRpZiAoIG9wYXF1ZS5sZW5ndGggPiAxICkgb3BhcXVlLnNvcnQoIHBhaW50ZXJTb3J0U3RhYmxlICk7XG5cdFx0aWYgKCB0cmFuc3BhcmVudC5sZW5ndGggPiAxICkgdHJhbnNwYXJlbnQuc29ydCggcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0b3BhcXVlOiBvcGFxdWUsXG5cdFx0dHJhbnNwYXJlbnQ6IHRyYW5zcGFyZW50LFxuXG5cdFx0aW5pdDogaW5pdCxcblx0XHRwdXNoOiBwdXNoLFxuXG5cdFx0c29ydDogc29ydFxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyTGlzdHMoKSB7XG5cblx0dmFyIGxpc3RzID0ge307XG5cblx0ZnVuY3Rpb24gZ2V0KCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0dmFyIGhhc2ggPSBzY2VuZS5pZCArICcsJyArIGNhbWVyYS5pZDtcblx0XHR2YXIgbGlzdCA9IGxpc3RzWyBoYXNoIF07XG5cblx0XHRpZiAoIGxpc3QgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlckxpc3RzOicsIGhhc2ggKTtcblxuXHRcdFx0bGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTtcblx0XHRcdGxpc3RzWyBoYXNoIF0gPSBsaXN0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxpc3Q7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRsaXN0cyA9IHt9O1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdldDogZ2V0LFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2Vcblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gVW5pZm9ybXNDYWNoZSgpIHtcblxuXHR2YXIgbGlnaHRzID0ge307XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCBsaWdodCApIHtcblxuXHRcdFx0aWYgKCBsaWdodHNbIGxpZ2h0LmlkIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbGlnaHRzWyBsaWdodC5pZCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB1bmlmb3JtcztcblxuXHRcdFx0c3dpdGNoICggbGlnaHQudHlwZSApIHtcblxuXHRcdFx0XHRjYXNlICdEaXJlY3Rpb25hbExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKSxcblxuXHRcdFx0XHRcdFx0c2hhZG93OiBmYWxzZSxcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdTcG90TGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0cG9zaXRpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogMCxcblx0XHRcdFx0XHRcdGNvbmVDb3M6IDAsXG5cdFx0XHRcdFx0XHRwZW51bWJyYUNvczogMCxcblx0XHRcdFx0XHRcdGRlY2F5OiAwLFxuXG5cdFx0XHRcdFx0XHRzaGFkb3c6IGZhbHNlLFxuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd1JhZGl1czogMSxcblx0XHRcdFx0XHRcdHNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1BvaW50TGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0cG9zaXRpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogMCxcblx0XHRcdFx0XHRcdGRlY2F5OiAwLFxuXG5cdFx0XHRcdFx0XHRzaGFkb3c6IGZhbHNlLFxuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd1JhZGl1czogMSxcblx0XHRcdFx0XHRcdHNoYWRvd01hcFNpemU6IG5ldyBWZWN0b3IyKCksXG5cdFx0XHRcdFx0XHRzaGFkb3dDYW1lcmFOZWFyOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93Q2FtZXJhRmFyOiAxMDAwXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdIZW1pc3BoZXJlTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0c2t5Q29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0Z3JvdW5kQ29sb3I6IG5ldyBDb2xvcigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdSZWN0QXJlYUxpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0aGFsZldpZHRoOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0aGFsZkhlaWdodDogbmV3IFZlY3RvcjMoKVxuXHRcdFx0XHRcdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IHNldCBSZWN0QXJlYUxpZ2h0IHNoYWRvdyB1bmlmb3Jtc1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0bGlnaHRzWyBsaWdodC5pZCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdHJldHVybiB1bmlmb3JtcztcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbnZhciBjb3VudCA9IDA7XG5cbmZ1bmN0aW9uIFdlYkdMTGlnaHRzKCkge1xuXG5cdHZhciBjYWNoZSA9IG5ldyBVbmlmb3Jtc0NhY2hlKCk7XG5cblx0dmFyIHN0YXRlID0ge1xuXG5cdFx0aWQ6IGNvdW50ICsrLFxuXG5cdFx0aGFzaDogJycsXG5cblx0XHRhbWJpZW50OiBbIDAsIDAsIDAgXSxcblx0XHRkaXJlY3Rpb25hbDogW10sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXA6IFtdLFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWF0cml4OiBbXSxcblx0XHRzcG90OiBbXSxcblx0XHRzcG90U2hhZG93TWFwOiBbXSxcblx0XHRzcG90U2hhZG93TWF0cml4OiBbXSxcblx0XHRyZWN0QXJlYTogW10sXG5cdFx0cG9pbnQ6IFtdLFxuXHRcdHBvaW50U2hhZG93TWFwOiBbXSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogW10sXG5cdFx0aGVtaTogW11cblxuXHR9O1xuXG5cdHZhciB2ZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIG1hdHJpeDQgPSBuZXcgTWF0cml4NCgpO1xuXHR2YXIgbWF0cml4NDIgPSBuZXcgTWF0cml4NCgpO1xuXG5cdGZ1bmN0aW9uIHNldHVwKCBsaWdodHMsIHNoYWRvd3MsIGNhbWVyYSApIHtcblxuXHRcdHZhciByID0gMCwgZyA9IDAsIGIgPSAwO1xuXG5cdFx0dmFyIGRpcmVjdGlvbmFsTGVuZ3RoID0gMDtcblx0XHR2YXIgcG9pbnRMZW5ndGggPSAwO1xuXHRcdHZhciBzcG90TGVuZ3RoID0gMDtcblx0XHR2YXIgcmVjdEFyZWFMZW5ndGggPSAwO1xuXHRcdHZhciBoZW1pTGVuZ3RoID0gMDtcblxuXHRcdHZhciB2aWV3TWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGxpZ2h0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbGlnaHQgPSBsaWdodHNbIGkgXTtcblxuXHRcdFx0dmFyIGNvbG9yID0gbGlnaHQuY29sb3I7XG5cdFx0XHR2YXIgaW50ZW5zaXR5ID0gbGlnaHQuaW50ZW5zaXR5O1xuXHRcdFx0dmFyIGRpc3RhbmNlID0gbGlnaHQuZGlzdGFuY2U7XG5cblx0XHRcdHZhciBzaGFkb3dNYXAgPSAoIGxpZ2h0LnNoYWRvdyAmJiBsaWdodC5zaGFkb3cubWFwICkgPyBsaWdodC5zaGFkb3cubWFwLnRleHR1cmUgOiBudWxsO1xuXG5cdFx0XHRpZiAoIGxpZ2h0LmlzQW1iaWVudExpZ2h0ICkge1xuXG5cdFx0XHRcdHIgKz0gY29sb3IuciAqIGludGVuc2l0eTtcblx0XHRcdFx0ZyArPSBjb2xvci5nICogaW50ZW5zaXR5O1xuXHRcdFx0XHRiICs9IGNvbG9yLmIgKiBpbnRlbnNpdHk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzRGlyZWN0aW9uYWxMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggbGlnaHQuaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnN1YiggdmVjdG9yMyApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2hhZG93ID0gbGlnaHQuY2FzdFNoYWRvdztcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHR2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHNoYWRvd01hcDtcblx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xuXHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBjb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zdWIoIHZlY3RvcjMgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbmVDb3MgPSBNYXRoLmNvcyggbGlnaHQuYW5nbGUgKTtcblx0XHRcdFx0dW5pZm9ybXMucGVudW1icmFDb3MgPSBNYXRoLmNvcyggbGlnaHQuYW5nbGUgKiAoIDEgLSBsaWdodC5wZW51bWJyYSApICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRlY2F5ID0gKCBsaWdodC5kaXN0YW5jZSA9PT0gMCApID8gMC4wIDogbGlnaHQuZGVjYXk7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2hhZG93ID0gbGlnaHQuY2FzdFNoYWRvdztcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHR2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5zcG90U2hhZG93TWFwWyBzcG90TGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXRyaXhbIHNwb3RMZW5ndGggXSA9IGxpZ2h0LnNoYWRvdy5tYXRyaXg7XG5cdFx0XHRcdHN0YXRlLnNwb3RbIHNwb3RMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdHNwb3RMZW5ndGggKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzUmVjdEFyZWFMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0Ly8gKGEpIGludGVuc2l0eSBpcyB0aGUgdG90YWwgdmlzaWJsZSBsaWdodCBlbWl0dGVkXG5cdFx0XHRcdC8vdW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5IC8gKCBsaWdodC53aWR0aCAqIGxpZ2h0LmhlaWdodCAqIE1hdGguUEkgKSApO1xuXG5cdFx0XHRcdC8vIChiKSBpbnRlbnNpdHkgaXMgdGhlIGJyaWdodG5lc3Mgb2YgdGhlIGxpZ2h0XG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0Ly8gZXh0cmFjdCBsb2NhbCByb3RhdGlvbiBvZiBsaWdodCB0byBkZXJpdmUgd2lkdGgvaGVpZ2h0IGhhbGYgdmVjdG9yc1xuXHRcdFx0XHRtYXRyaXg0Mi5pZGVudGl0eSgpO1xuXHRcdFx0XHRtYXRyaXg0LmNvcHkoIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdG1hdHJpeDQucHJlbXVsdGlwbHkoIHZpZXdNYXRyaXggKTtcblx0XHRcdFx0bWF0cml4NDIuZXh0cmFjdFJvdGF0aW9uKCBtYXRyaXg0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuaGFsZldpZHRoLnNldCggbGlnaHQud2lkdGggKiAwLjUsIDAuMCwgMC4wICk7XG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZIZWlnaHQuc2V0KCAwLjAsIGxpZ2h0LmhlaWdodCAqIDAuNSwgMC4wICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuaGFsZldpZHRoLmFwcGx5TWF0cml4NCggbWF0cml4NDIgKTtcblx0XHRcdFx0dW5pZm9ybXMuaGFsZkhlaWdodC5hcHBseU1hdHJpeDQoIG1hdHJpeDQyICk7XG5cblx0XHRcdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IFJlY3RBcmVhTGlnaHQgZGlzdGFuY2U/XG5cdFx0XHRcdC8vIHVuaWZvcm1zLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cblx0XHRcdFx0c3RhdGUucmVjdEFyZWFbIHJlY3RBcmVhTGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRyZWN0QXJlYUxlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdHZhciB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGxpZ2h0LmludGVuc2l0eSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXHRcdFx0XHR1bmlmb3Jtcy5kZWNheSA9ICggbGlnaHQuZGlzdGFuY2UgPT09IDAgKSA/IDAuMCA6IGxpZ2h0LmRlY2F5O1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNoYWRvdyA9IGxpZ2h0LmNhc3RTaGFkb3c7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0dmFyIHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dDYW1lcmFOZWFyID0gc2hhZG93LmNhbWVyYS5uZWFyO1xuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd0NhbWVyYUZhciA9IHNoYWRvdy5jYW1lcmEuZmFyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcFsgcG9pbnRMZW5ndGggXSA9IHNoYWRvd01hcDtcblx0XHRcdFx0c3RhdGUucG9pbnRTaGFkb3dNYXRyaXhbIHBvaW50TGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xuXHRcdFx0XHRzdGF0ZS5wb2ludFsgcG9pbnRMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdHBvaW50TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc0hlbWlzcGhlcmVMaWdodCApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24ubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2t5Q29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmdyb3VuZENvbG9yLmNvcHkoIGxpZ2h0Lmdyb3VuZENvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXG5cdFx0XHRcdHN0YXRlLmhlbWlbIGhlbWlMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGhlbWlMZW5ndGggKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHN0YXRlLmFtYmllbnRbIDAgXSA9IHI7XG5cdFx0c3RhdGUuYW1iaWVudFsgMSBdID0gZztcblx0XHRzdGF0ZS5hbWJpZW50WyAyIF0gPSBiO1xuXG5cdFx0c3RhdGUuZGlyZWN0aW9uYWwubGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0c3RhdGUuc3BvdC5sZW5ndGggPSBzcG90TGVuZ3RoO1xuXHRcdHN0YXRlLnJlY3RBcmVhLmxlbmd0aCA9IHJlY3RBcmVhTGVuZ3RoO1xuXHRcdHN0YXRlLnBvaW50Lmxlbmd0aCA9IHBvaW50TGVuZ3RoO1xuXHRcdHN0YXRlLmhlbWkubGVuZ3RoID0gaGVtaUxlbmd0aDtcblxuXHRcdHN0YXRlLmhhc2ggPSBzdGF0ZS5pZCArICcsJyArIGRpcmVjdGlvbmFsTGVuZ3RoICsgJywnICsgcG9pbnRMZW5ndGggKyAnLCcgKyBzcG90TGVuZ3RoICsgJywnICsgcmVjdEFyZWFMZW5ndGggKyAnLCcgKyBoZW1pTGVuZ3RoICsgJywnICsgc2hhZG93cy5sZW5ndGg7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0c2V0dXA6IHNldHVwLFxuXHRcdHN0YXRlOiBzdGF0ZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFJlbmRlclN0YXRlKCkge1xuXG5cdHZhciBsaWdodHMgPSBuZXcgV2ViR0xMaWdodHMoKTtcblxuXHR2YXIgbGlnaHRzQXJyYXkgPSBbXTtcblx0dmFyIHNoYWRvd3NBcnJheSA9IFtdO1xuXHR2YXIgc3ByaXRlc0FycmF5ID0gW107XG5cblx0ZnVuY3Rpb24gaW5pdCgpIHtcblxuXHRcdGxpZ2h0c0FycmF5Lmxlbmd0aCA9IDA7XG5cdFx0c2hhZG93c0FycmF5Lmxlbmd0aCA9IDA7XG5cdFx0c3ByaXRlc0FycmF5Lmxlbmd0aCA9IDA7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2hMaWdodCggbGlnaHQgKSB7XG5cblx0XHRsaWdodHNBcnJheS5wdXNoKCBsaWdodCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoU2hhZG93KCBzaGFkb3dMaWdodCApIHtcblxuXHRcdHNoYWRvd3NBcnJheS5wdXNoKCBzaGFkb3dMaWdodCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoU3ByaXRlKCBzcHJpdGUgKSB7XG5cblx0XHRzcHJpdGVzQXJyYXkucHVzaCggc3ByaXRlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwTGlnaHRzKCBjYW1lcmEgKSB7XG5cblx0XHRsaWdodHMuc2V0dXAoIGxpZ2h0c0FycmF5LCBzaGFkb3dzQXJyYXksIGNhbWVyYSApO1xuXG5cdH1cblxuXHR2YXIgc3RhdGUgPSB7XG5cdFx0bGlnaHRzQXJyYXk6IGxpZ2h0c0FycmF5LFxuXHRcdHNoYWRvd3NBcnJheTogc2hhZG93c0FycmF5LFxuXHRcdHNwcml0ZXNBcnJheTogc3ByaXRlc0FycmF5LFxuXG5cdFx0bGlnaHRzOiBsaWdodHNcblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXQsXG5cdFx0c3RhdGU6IHN0YXRlLFxuXHRcdHNldHVwTGlnaHRzOiBzZXR1cExpZ2h0cyxcblxuXHRcdHB1c2hMaWdodDogcHVzaExpZ2h0LFxuXHRcdHB1c2hTaGFkb3c6IHB1c2hTaGFkb3csXG5cdFx0cHVzaFNwcml0ZTogcHVzaFNwcml0ZVxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyU3RhdGVzKCkge1xuXG5cdHZhciByZW5kZXJTdGF0ZXMgPSB7fTtcblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHR2YXIgaGFzaCA9IHNjZW5lLmlkICsgJywnICsgY2FtZXJhLmlkO1xuXG5cdFx0dmFyIHJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzWyBoYXNoIF07XG5cblx0XHRpZiAoIHJlbmRlclN0YXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoKTtcblx0XHRcdHJlbmRlclN0YXRlc1sgaGFzaCBdID0gcmVuZGVyU3RhdGU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVuZGVyU3RhdGU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRyZW5kZXJTdGF0ZXMgPSB7fTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwczovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICpcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaERlcHRoTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoRGVwdGhNYXRlcmlhbCc7XG5cblx0dGhpcy5kZXB0aFBhY2tpbmcgPSBCYXNpY0RlcHRoUGFja2luZztcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdHRoaXMuZm9nID0gZmFsc2U7XG5cdHRoaXMubGlnaHRzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hEZXB0aE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hEZXB0aE1hdGVyaWFsO1xuXG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoRGVwdGhNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hEZXB0aE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5kZXB0aFBhY2tpbmcgPSBzb3VyY2UuZGVwdGhQYWNraW5nO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKlxuICogIHJlZmVyZW5jZVBvc2l0aW9uOiA8ZmxvYXQ+LFxuICogIG5lYXJEaXN0YW5jZTogPGZsb2F0PixcbiAqICBmYXJEaXN0YW5jZTogPGZsb2F0PixcbiAqXG4gKiAgc2tpbm5pbmc6IDxib29sPixcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD5cbiAqXG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaERpc3RhbmNlTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoRGlzdGFuY2VNYXRlcmlhbCc7XG5cblx0dGhpcy5yZWZlcmVuY2VQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMubmVhckRpc3RhbmNlID0gMTtcblx0dGhpcy5mYXJEaXN0YW5jZSA9IDEwMDA7XG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMuZm9nID0gZmFsc2U7XG5cdHRoaXMubGlnaHRzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoRGlzdGFuY2VNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hEaXN0YW5jZU1hdGVyaWFsO1xuXG5NZXNoRGlzdGFuY2VNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5yZWZlcmVuY2VQb3NpdGlvbi5jb3B5KCBzb3VyY2UucmVmZXJlbmNlUG9zaXRpb24gKTtcblx0dGhpcy5uZWFyRGlzdGFuY2UgPSBzb3VyY2UubmVhckRpc3RhbmNlO1xuXHR0aGlzLmZhckRpc3RhbmNlID0gc291cmNlLmZhckRpc3RhbmNlO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMU2hhZG93TWFwKCBfcmVuZGVyZXIsIF9vYmplY3RzLCBtYXhUZXh0dXJlU2l6ZSApIHtcblxuXHR2YXIgX2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpLFxuXHRcdF9wcm9qU2NyZWVuTWF0cml4ID0gbmV3IE1hdHJpeDQoKSxcblxuXHRcdF9zaGFkb3dNYXBTaXplID0gbmV3IFZlY3RvcjIoKSxcblx0XHRfbWF4U2hhZG93TWFwU2l6ZSA9IG5ldyBWZWN0b3IyKCBtYXhUZXh0dXJlU2l6ZSwgbWF4VGV4dHVyZVNpemUgKSxcblxuXHRcdF9sb29rVGFyZ2V0ID0gbmV3IFZlY3RvcjMoKSxcblx0XHRfbGlnaHRQb3NpdGlvbldvcmxkID0gbmV3IFZlY3RvcjMoKSxcblxuXHRcdF9Nb3JwaGluZ0ZsYWcgPSAxLFxuXHRcdF9Ta2lubmluZ0ZsYWcgPSAyLFxuXG5cdFx0X051bWJlck9mTWF0ZXJpYWxWYXJpYW50cyA9ICggX01vcnBoaW5nRmxhZyB8IF9Ta2lubmluZ0ZsYWcgKSArIDEsXG5cblx0XHRfZGVwdGhNYXRlcmlhbHMgPSBuZXcgQXJyYXkoIF9OdW1iZXJPZk1hdGVyaWFsVmFyaWFudHMgKSxcblx0XHRfZGlzdGFuY2VNYXRlcmlhbHMgPSBuZXcgQXJyYXkoIF9OdW1iZXJPZk1hdGVyaWFsVmFyaWFudHMgKSxcblxuXHRcdF9tYXRlcmlhbENhY2hlID0ge307XG5cblx0dmFyIHNoYWRvd1NpZGUgPSB7IDA6IEJhY2tTaWRlLCAxOiBGcm9udFNpZGUsIDI6IERvdWJsZVNpZGUgfTtcblxuXHR2YXIgY3ViZURpcmVjdGlvbnMgPSBbXG5cdFx0bmV3IFZlY3RvcjMoIDEsIDAsIDAgKSwgbmV3IFZlY3RvcjMoIC0gMSwgMCwgMCApLCBuZXcgVmVjdG9yMyggMCwgMCwgMSApLFxuXHRcdG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIC0gMSwgMCApXG5cdF07XG5cblx0dmFyIGN1YmVVcHMgPSBbXG5cdFx0bmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSxcblx0XHRuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMCwgMSApLFx0bmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApXG5cdF07XG5cblx0dmFyIGN1YmUyRFZpZXdQb3J0cyA9IFtcblx0XHRuZXcgVmVjdG9yNCgpLCBuZXcgVmVjdG9yNCgpLCBuZXcgVmVjdG9yNCgpLFxuXHRcdG5ldyBWZWN0b3I0KCksIG5ldyBWZWN0b3I0KCksIG5ldyBWZWN0b3I0KClcblx0XTtcblxuXHQvLyBpbml0XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzOyArKyBpICkge1xuXG5cdFx0dmFyIHVzZU1vcnBoaW5nID0gKCBpICYgX01vcnBoaW5nRmxhZyApICE9PSAwO1xuXHRcdHZhciB1c2VTa2lubmluZyA9ICggaSAmIF9Ta2lubmluZ0ZsYWcgKSAhPT0gMDtcblxuXHRcdHZhciBkZXB0aE1hdGVyaWFsID0gbmV3IE1lc2hEZXB0aE1hdGVyaWFsKCB7XG5cblx0XHRcdGRlcHRoUGFja2luZzogUkdCQURlcHRoUGFja2luZyxcblxuXHRcdFx0bW9ycGhUYXJnZXRzOiB1c2VNb3JwaGluZyxcblx0XHRcdHNraW5uaW5nOiB1c2VTa2lubmluZ1xuXG5cdFx0fSApO1xuXG5cdFx0X2RlcHRoTWF0ZXJpYWxzWyBpIF0gPSBkZXB0aE1hdGVyaWFsO1xuXG5cdFx0Ly9cblxuXHRcdHZhciBkaXN0YW5jZU1hdGVyaWFsID0gbmV3IE1lc2hEaXN0YW5jZU1hdGVyaWFsKCB7XG5cblx0XHRcdG1vcnBoVGFyZ2V0czogdXNlTW9ycGhpbmcsXG5cdFx0XHRza2lubmluZzogdXNlU2tpbm5pbmdcblxuXHRcdH0gKTtcblxuXHRcdF9kaXN0YW5jZU1hdGVyaWFsc1sgaSBdID0gZGlzdGFuY2VNYXRlcmlhbDtcblxuXHR9XG5cblx0Ly9cblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG5cdHRoaXMubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnR5cGUgPSBQQ0ZTaGFkb3dNYXA7XG5cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIGxpZ2h0cywgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cdFx0aWYgKCBzY29wZS5hdXRvVXBkYXRlID09PSBmYWxzZSAmJiBzY29wZS5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRpZiAoIGxpZ2h0cy5sZW5ndGggPT09IDAgKSByZXR1cm47XG5cblx0XHQvLyBUT0RPIENsZWFuIHVwIChuZWVkZWQgaW4gY2FzZSBvZiBjb250ZXh0bG9zdClcblx0XHR2YXIgX2dsID0gX3JlbmRlcmVyLmNvbnRleHQ7XG5cdFx0dmFyIF9zdGF0ZSA9IF9yZW5kZXJlci5zdGF0ZTtcblxuXHRcdC8vIFNldCBHTCBzdGF0ZSBmb3IgZGVwdGggbWFwLlxuXHRcdF9zdGF0ZS5kaXNhYmxlKCBfZ2wuQkxFTkQgKTtcblx0XHRfc3RhdGUuYnVmZmVycy5jb2xvci5zZXRDbGVhciggMSwgMSwgMSwgMSApO1xuXHRcdF9zdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QoIHRydWUgKTtcblx0XHRfc3RhdGUuc2V0U2Npc3NvclRlc3QoIGZhbHNlICk7XG5cblx0XHQvLyByZW5kZXIgZGVwdGggbWFwXG5cblx0XHR2YXIgZmFjZUNvdW50O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGxpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGxpZ2h0ID0gbGlnaHRzWyBpIF07XG5cdFx0XHR2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXHRcdFx0dmFyIGlzUG9pbnRMaWdodCA9IGxpZ2h0ICYmIGxpZ2h0LmlzUG9pbnRMaWdodDtcblxuXHRcdFx0aWYgKCBzaGFkb3cgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFNoYWRvd01hcDonLCBsaWdodCwgJ2hhcyBubyBzaGFkb3cuJyApO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc2hhZG93Q2FtZXJhID0gc2hhZG93LmNhbWVyYTtcblxuXHRcdFx0X3NoYWRvd01hcFNpemUuY29weSggc2hhZG93Lm1hcFNpemUgKTtcblx0XHRcdF9zaGFkb3dNYXBTaXplLm1pbiggX21heFNoYWRvd01hcFNpemUgKTtcblxuXHRcdFx0aWYgKCBpc1BvaW50TGlnaHQgKSB7XG5cblx0XHRcdFx0dmFyIHZwV2lkdGggPSBfc2hhZG93TWFwU2l6ZS54O1xuXHRcdFx0XHR2YXIgdnBIZWlnaHQgPSBfc2hhZG93TWFwU2l6ZS55O1xuXG5cdFx0XHRcdC8vIFRoZXNlIHZpZXdwb3J0cyBtYXAgYSBjdWJlLW1hcCBvbnRvIGEgMkQgdGV4dHVyZSB3aXRoIHRoZVxuXHRcdFx0XHQvLyBmb2xsb3dpbmcgb3JpZW50YXRpb246XG5cdFx0XHRcdC8vXG5cdFx0XHRcdC8vICB4elhaXG5cdFx0XHRcdC8vICAgeSBZXG5cdFx0XHRcdC8vXG5cdFx0XHRcdC8vIFggLSBQb3NpdGl2ZSB4IGRpcmVjdGlvblxuXHRcdFx0XHQvLyB4IC0gTmVnYXRpdmUgeCBkaXJlY3Rpb25cblx0XHRcdFx0Ly8gWSAtIFBvc2l0aXZlIHkgZGlyZWN0aW9uXG5cdFx0XHRcdC8vIHkgLSBOZWdhdGl2ZSB5IGRpcmVjdGlvblxuXHRcdFx0XHQvLyBaIC0gUG9zaXRpdmUgeiBkaXJlY3Rpb25cblx0XHRcdFx0Ly8geiAtIE5lZ2F0aXZlIHogZGlyZWN0aW9uXG5cblx0XHRcdFx0Ly8gcG9zaXRpdmUgWFxuXHRcdFx0XHRjdWJlMkRWaWV3UG9ydHNbIDAgXS5zZXQoIHZwV2lkdGggKiAyLCB2cEhlaWdodCwgdnBXaWR0aCwgdnBIZWlnaHQgKTtcblx0XHRcdFx0Ly8gbmVnYXRpdmUgWFxuXHRcdFx0XHRjdWJlMkRWaWV3UG9ydHNbIDEgXS5zZXQoIDAsIHZwSGVpZ2h0LCB2cFdpZHRoLCB2cEhlaWdodCApO1xuXHRcdFx0XHQvLyBwb3NpdGl2ZSBaXG5cdFx0XHRcdGN1YmUyRFZpZXdQb3J0c1sgMiBdLnNldCggdnBXaWR0aCAqIDMsIHZwSGVpZ2h0LCB2cFdpZHRoLCB2cEhlaWdodCApO1xuXHRcdFx0XHQvLyBuZWdhdGl2ZSBaXG5cdFx0XHRcdGN1YmUyRFZpZXdQb3J0c1sgMyBdLnNldCggdnBXaWR0aCwgdnBIZWlnaHQsIHZwV2lkdGgsIHZwSGVpZ2h0ICk7XG5cdFx0XHRcdC8vIHBvc2l0aXZlIFlcblx0XHRcdFx0Y3ViZTJEVmlld1BvcnRzWyA0IF0uc2V0KCB2cFdpZHRoICogMywgMCwgdnBXaWR0aCwgdnBIZWlnaHQgKTtcblx0XHRcdFx0Ly8gbmVnYXRpdmUgWVxuXHRcdFx0XHRjdWJlMkRWaWV3UG9ydHNbIDUgXS5zZXQoIHZwV2lkdGgsIDAsIHZwV2lkdGgsIHZwSGVpZ2h0ICk7XG5cblx0XHRcdFx0X3NoYWRvd01hcFNpemUueCAqPSA0LjA7XG5cdFx0XHRcdF9zaGFkb3dNYXBTaXplLnkgKj0gMi4wO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2hhZG93Lm1hcCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR2YXIgcGFycyA9IHsgbWluRmlsdGVyOiBOZWFyZXN0RmlsdGVyLCBtYWdGaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsIGZvcm1hdDogUkdCQUZvcm1hdCB9O1xuXG5cdFx0XHRcdHNoYWRvdy5tYXAgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIF9zaGFkb3dNYXBTaXplLngsIF9zaGFkb3dNYXBTaXplLnksIHBhcnMgKTtcblx0XHRcdFx0c2hhZG93Lm1hcC50ZXh0dXJlLm5hbWUgPSBsaWdodC5uYW1lICsgXCIuc2hhZG93TWFwXCI7XG5cblx0XHRcdFx0c2hhZG93Q2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNoYWRvdy5pc1Nwb3RMaWdodFNoYWRvdyApIHtcblxuXHRcdFx0XHRzaGFkb3cudXBkYXRlKCBsaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBzaGFkb3dNYXAgPSBzaGFkb3cubWFwO1xuXHRcdFx0dmFyIHNoYWRvd01hdHJpeCA9IHNoYWRvdy5tYXRyaXg7XG5cblx0XHRcdF9saWdodFBvc2l0aW9uV29ybGQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0c2hhZG93Q2FtZXJhLnBvc2l0aW9uLmNvcHkoIF9saWdodFBvc2l0aW9uV29ybGQgKTtcblxuXHRcdFx0aWYgKCBpc1BvaW50TGlnaHQgKSB7XG5cblx0XHRcdFx0ZmFjZUNvdW50ID0gNjtcblxuXHRcdFx0XHQvLyBmb3IgcG9pbnQgbGlnaHRzIHdlIHNldCB0aGUgc2hhZG93IG1hdHJpeCB0byBiZSBhIHRyYW5zbGF0aW9uLW9ubHkgbWF0cml4XG5cdFx0XHRcdC8vIGVxdWFsIHRvIGludmVyc2Ugb2YgdGhlIGxpZ2h0J3MgcG9zaXRpb25cblxuXHRcdFx0XHRzaGFkb3dNYXRyaXgubWFrZVRyYW5zbGF0aW9uKCAtIF9saWdodFBvc2l0aW9uV29ybGQueCwgLSBfbGlnaHRQb3NpdGlvbldvcmxkLnksIC0gX2xpZ2h0UG9zaXRpb25Xb3JsZC56ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZmFjZUNvdW50ID0gMTtcblxuXHRcdFx0XHRfbG9va1RhcmdldC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHRzaGFkb3dDYW1lcmEubG9va0F0KCBfbG9va1RhcmdldCApO1xuXHRcdFx0XHRzaGFkb3dDYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdFx0XHQvLyBjb21wdXRlIHNoYWRvdyBtYXRyaXhcblxuXHRcdFx0XHRzaGFkb3dNYXRyaXguc2V0KFxuXHRcdFx0XHRcdDAuNSwgMC4wLCAwLjAsIDAuNSxcblx0XHRcdFx0XHQwLjAsIDAuNSwgMC4wLCAwLjUsXG5cdFx0XHRcdFx0MC4wLCAwLjAsIDAuNSwgMC41LFxuXHRcdFx0XHRcdDAuMCwgMC4wLCAwLjAsIDEuMFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdHNoYWRvd01hdHJpeC5tdWx0aXBseSggc2hhZG93Q2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblx0XHRcdFx0c2hhZG93TWF0cml4Lm11bHRpcGx5KCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93TWFwICk7XG5cdFx0XHRfcmVuZGVyZXIuY2xlYXIoKTtcblxuXHRcdFx0Ly8gcmVuZGVyIHNoYWRvdyBtYXAgZm9yIGVhY2ggY3ViZSBmYWNlIChpZiBvbW5pLWRpcmVjdGlvbmFsKSBvclxuXHRcdFx0Ly8gcnVuIGEgc2luZ2xlIHBhc3MgaWYgbm90XG5cblx0XHRcdGZvciAoIHZhciBmYWNlID0gMDsgZmFjZSA8IGZhY2VDb3VudDsgZmFjZSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGlzUG9pbnRMaWdodCApIHtcblxuXHRcdFx0XHRcdF9sb29rVGFyZ2V0LmNvcHkoIHNoYWRvd0NhbWVyYS5wb3NpdGlvbiApO1xuXHRcdFx0XHRcdF9sb29rVGFyZ2V0LmFkZCggY3ViZURpcmVjdGlvbnNbIGZhY2UgXSApO1xuXHRcdFx0XHRcdHNoYWRvd0NhbWVyYS51cC5jb3B5KCBjdWJlVXBzWyBmYWNlIF0gKTtcblx0XHRcdFx0XHRzaGFkb3dDYW1lcmEubG9va0F0KCBfbG9va1RhcmdldCApO1xuXHRcdFx0XHRcdHNoYWRvd0NhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0XHRcdFx0dmFyIHZwRGltZW5zaW9ucyA9IGN1YmUyRFZpZXdQb3J0c1sgZmFjZSBdO1xuXHRcdFx0XHRcdF9zdGF0ZS52aWV3cG9ydCggdnBEaW1lbnNpb25zICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHVwZGF0ZSBjYW1lcmEgbWF0cmljZXMgYW5kIGZydXN0dW1cblxuXHRcdFx0XHRfcHJvalNjcmVlbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBzaGFkb3dDYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgc2hhZG93Q2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXHRcdFx0XHRfZnJ1c3R1bS5zZXRGcm9tTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdFx0XHRcdC8vIHNldCBvYmplY3QgbWF0cmljZXMgJiBmcnVzdHVtIGN1bGxpbmdcblxuXHRcdFx0XHRyZW5kZXJPYmplY3QoIHNjZW5lLCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgaXNQb2ludExpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHNjb3BlLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0fTtcblxuXHRmdW5jdGlvbiBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIG1hdGVyaWFsLCBpc1BvaW50TGlnaHQsIGxpZ2h0UG9zaXRpb25Xb3JsZCwgc2hhZG93Q2FtZXJhTmVhciwgc2hhZG93Q2FtZXJhRmFyICkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0dmFyIHJlc3VsdCA9IG51bGw7XG5cblx0XHR2YXIgbWF0ZXJpYWxWYXJpYW50cyA9IF9kZXB0aE1hdGVyaWFscztcblx0XHR2YXIgY3VzdG9tTWF0ZXJpYWwgPSBvYmplY3QuY3VzdG9tRGVwdGhNYXRlcmlhbDtcblxuXHRcdGlmICggaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRtYXRlcmlhbFZhcmlhbnRzID0gX2Rpc3RhbmNlTWF0ZXJpYWxzO1xuXHRcdFx0Y3VzdG9tTWF0ZXJpYWwgPSBvYmplY3QuY3VzdG9tRGlzdGFuY2VNYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdGlmICggISBjdXN0b21NYXRlcmlhbCApIHtcblxuXHRcdFx0dmFyIHVzZU1vcnBoaW5nID0gZmFsc2U7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdHVzZU1vcnBoaW5nID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzICYmIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24ubGVuZ3RoID4gMDtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0dXNlTW9ycGhpbmcgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHMgJiYgZ2VvbWV0cnkubW9ycGhUYXJnZXRzLmxlbmd0aCA+IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggJiYgbWF0ZXJpYWwuc2tpbm5pbmcgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMU2hhZG93TWFwOiBUSFJFRS5Ta2lubmVkTWVzaCB3aXRoIG1hdGVyaWFsLnNraW5uaW5nIHNldCB0byBmYWxzZTonLCBvYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdXNlU2tpbm5pbmcgPSBvYmplY3QuaXNTa2lubmVkTWVzaCAmJiBtYXRlcmlhbC5za2lubmluZztcblxuXHRcdFx0dmFyIHZhcmlhbnRJbmRleCA9IDA7XG5cblx0XHRcdGlmICggdXNlTW9ycGhpbmcgKSB2YXJpYW50SW5kZXggfD0gX01vcnBoaW5nRmxhZztcblx0XHRcdGlmICggdXNlU2tpbm5pbmcgKSB2YXJpYW50SW5kZXggfD0gX1NraW5uaW5nRmxhZztcblxuXHRcdFx0cmVzdWx0ID0gbWF0ZXJpYWxWYXJpYW50c1sgdmFyaWFudEluZGV4IF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXN1bHQgPSBjdXN0b21NYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdGlmICggX3JlbmRlcmVyLmxvY2FsQ2xpcHBpbmdFbmFibGVkICYmXG5cdFx0XHRcdG1hdGVyaWFsLmNsaXBTaGFkb3dzID09PSB0cnVlICYmXG5cdFx0XHRcdG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzLmxlbmd0aCAhPT0gMCApIHtcblxuXHRcdFx0Ly8gaW4gdGhpcyBjYXNlIHdlIG5lZWQgYSB1bmlxdWUgbWF0ZXJpYWwgaW5zdGFuY2UgcmVmbGVjdGluZyB0aGVcblx0XHRcdC8vIGFwcHJvcHJpYXRlIHN0YXRlXG5cblx0XHRcdHZhciBrZXlBID0gcmVzdWx0LnV1aWQsIGtleUIgPSBtYXRlcmlhbC51dWlkO1xuXG5cdFx0XHR2YXIgbWF0ZXJpYWxzRm9yVmFyaWFudCA9IF9tYXRlcmlhbENhY2hlWyBrZXlBIF07XG5cblx0XHRcdGlmICggbWF0ZXJpYWxzRm9yVmFyaWFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsc0ZvclZhcmlhbnQgPSB7fTtcblx0XHRcdFx0X21hdGVyaWFsQ2FjaGVbIGtleUEgXSA9IG1hdGVyaWFsc0ZvclZhcmlhbnQ7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGNhY2hlZE1hdGVyaWFsID0gbWF0ZXJpYWxzRm9yVmFyaWFudFsga2V5QiBdO1xuXG5cdFx0XHRpZiAoIGNhY2hlZE1hdGVyaWFsID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y2FjaGVkTWF0ZXJpYWwgPSByZXN1bHQuY2xvbmUoKTtcblx0XHRcdFx0bWF0ZXJpYWxzRm9yVmFyaWFudFsga2V5QiBdID0gY2FjaGVkTWF0ZXJpYWw7XG5cblx0XHRcdH1cblxuXHRcdFx0cmVzdWx0ID0gY2FjaGVkTWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHRyZXN1bHQudmlzaWJsZSA9IG1hdGVyaWFsLnZpc2libGU7XG5cdFx0cmVzdWx0LndpcmVmcmFtZSA9IG1hdGVyaWFsLndpcmVmcmFtZTtcblxuXHRcdHJlc3VsdC5zaWRlID0gKCBtYXRlcmlhbC5zaGFkb3dTaWRlICE9IG51bGwgKSA/IG1hdGVyaWFsLnNoYWRvd1NpZGUgOiBzaGFkb3dTaWRlWyBtYXRlcmlhbC5zaWRlIF07XG5cblx0XHRyZXN1bHQuY2xpcFNoYWRvd3MgPSBtYXRlcmlhbC5jbGlwU2hhZG93cztcblx0XHRyZXN1bHQuY2xpcHBpbmdQbGFuZXMgPSBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcztcblx0XHRyZXN1bHQuY2xpcEludGVyc2VjdGlvbiA9IG1hdGVyaWFsLmNsaXBJbnRlcnNlY3Rpb247XG5cblx0XHRyZXN1bHQud2lyZWZyYW1lTGluZXdpZHRoID0gbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdHJlc3VsdC5saW5ld2lkdGggPSBtYXRlcmlhbC5saW5ld2lkdGg7XG5cblx0XHRpZiAoIGlzUG9pbnRMaWdodCAmJiByZXN1bHQuaXNNZXNoRGlzdGFuY2VNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVzdWx0LnJlZmVyZW5jZVBvc2l0aW9uLmNvcHkoIGxpZ2h0UG9zaXRpb25Xb3JsZCApO1xuXHRcdFx0cmVzdWx0Lm5lYXJEaXN0YW5jZSA9IHNoYWRvd0NhbWVyYU5lYXI7XG5cdFx0XHRyZXN1bHQuZmFyRGlzdGFuY2UgPSBzaGFkb3dDYW1lcmFGYXI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3QoIG9iamVjdCwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGlzUG9pbnRMaWdodCApIHtcblxuXHRcdGlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0dmFyIHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTtcblxuXHRcdGlmICggdmlzaWJsZSAmJiAoIG9iamVjdC5pc01lc2ggfHwgb2JqZWN0LmlzTGluZSB8fCBvYmplY3QuaXNQb2ludHMgKSApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuY2FzdFNoYWRvdyAmJiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgKSApIHtcblxuXHRcdFx0XHRvYmplY3QubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdHZhciBnZW9tZXRyeSA9IF9vYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7XG5cdFx0XHRcdHZhciBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHR2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGsgPSAwLCBrbCA9IGdyb3Vwcy5sZW5ndGg7IGsgPCBrbDsgayArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzWyBrIF07XG5cdFx0XHRcdFx0XHR2YXIgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdGlmICggZ3JvdXBNYXRlcmlhbCAmJiBncm91cE1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIGRlcHRoTWF0ZXJpYWwgPSBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIGdyb3VwTWF0ZXJpYWwsIGlzUG9pbnRMaWdodCwgX2xpZ2h0UG9zaXRpb25Xb3JsZCwgc2hhZG93Q2FtZXJhLm5lYXIsIHNoYWRvd0NhbWVyYS5mYXIgKTtcblx0XHRcdFx0XHRcdFx0X3JlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggc2hhZG93Q2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdHZhciBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBtYXRlcmlhbCwgaXNQb2ludExpZ2h0LCBfbGlnaHRQb3NpdGlvbldvcmxkLCBzaGFkb3dDYW1lcmEubmVhciwgc2hhZG93Q2FtZXJhLmZhciApO1xuXHRcdFx0XHRcdF9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIHNoYWRvd0NhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG9iamVjdCwgbnVsbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0cmVuZGVyT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgaXNQb2ludExpZ2h0ICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBDYW52YXNUZXh0dXJlKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHtcblxuXHRUZXh0dXJlLmNhbGwoIHRoaXMsIGNhbnZhcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XG5cblx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbn1cblxuQ2FudmFzVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuQ2FudmFzVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDYW52YXNUZXh0dXJlO1xuQ2FudmFzVGV4dHVyZS5wcm90b3R5cGUuaXNDYW52YXNUZXh0dXJlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFNwcml0ZVJlbmRlcmVyKCByZW5kZXJlciwgZ2wsIHN0YXRlLCB0ZXh0dXJlcywgY2FwYWJpbGl0aWVzICkge1xuXG5cdHZhciB2ZXJ0ZXhCdWZmZXIsIGVsZW1lbnRCdWZmZXI7XG5cdHZhciBwcm9ncmFtLCBhdHRyaWJ1dGVzLCB1bmlmb3JtcztcblxuXHR2YXIgdGV4dHVyZTtcblxuXHQvLyBkZWNvbXBvc2UgbWF0cml4V29ybGRcblxuXHR2YXIgc3ByaXRlUG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgc3ByaXRlUm90YXRpb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHR2YXIgc3ByaXRlU2NhbGUgPSBuZXcgVmVjdG9yMygpO1xuXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cblx0XHR2YXIgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KCBbXG5cdFx0XHQtIDAuNSwgLSAwLjUsIDAsIDAsXG5cdFx0XHQgIDAuNSwgLSAwLjUsIDEsIDAsXG5cdFx0XHQgIDAuNSwgMC41LCAxLCAxLFxuXHRcdFx0LSAwLjUsIDAuNSwgMCwgMVxuXHRcdF0gKTtcblxuXHRcdHZhciBmYWNlcyA9IG5ldyBVaW50MTZBcnJheSggW1xuXHRcdFx0MCwgMSwgMixcblx0XHRcdDAsIDIsIDNcblx0XHRdICk7XG5cblx0XHR2ZXJ0ZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblx0XHRlbGVtZW50QnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5BUlJBWV9CVUZGRVIsIHZlcnRleEJ1ZmZlciApO1xuXHRcdGdsLmJ1ZmZlckRhdGEoIGdsLkFSUkFZX0JVRkZFUiwgdmVydGljZXMsIGdsLlNUQVRJQ19EUkFXICk7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgZWxlbWVudEJ1ZmZlciApO1xuXHRcdGdsLmJ1ZmZlckRhdGEoIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBmYWNlcywgZ2wuU1RBVElDX0RSQVcgKTtcblxuXHRcdHByb2dyYW0gPSBjcmVhdGVQcm9ncmFtKCk7XG5cblx0XHRhdHRyaWJ1dGVzID0ge1xuXHRcdFx0cG9zaXRpb246IGdsLmdldEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCAncG9zaXRpb24nICksXG5cdFx0XHR1djogZ2wuZ2V0QXR0cmliTG9jYXRpb24oIHByb2dyYW0sICd1dicgKVxuXHRcdH07XG5cblx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdHV2T2Zmc2V0OiBnbC5nZXRVbmlmb3JtTG9jYXRpb24oIHByb2dyYW0sICd1dk9mZnNldCcgKSxcblx0XHRcdHV2U2NhbGU6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbiggcHJvZ3JhbSwgJ3V2U2NhbGUnICksXG5cblx0XHRcdHJvdGF0aW9uOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24oIHByb2dyYW0sICdyb3RhdGlvbicgKSxcblx0XHRcdGNlbnRlcjogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCAnY2VudGVyJyApLFxuXHRcdFx0c2NhbGU6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbiggcHJvZ3JhbSwgJ3NjYWxlJyApLFxuXG5cdFx0XHRjb2xvcjogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCAnY29sb3InICksXG5cdFx0XHRtYXA6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbiggcHJvZ3JhbSwgJ21hcCcgKSxcblx0XHRcdG9wYWNpdHk6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbiggcHJvZ3JhbSwgJ29wYWNpdHknICksXG5cblx0XHRcdG1vZGVsVmlld01hdHJpeDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCAnbW9kZWxWaWV3TWF0cml4JyApLFxuXHRcdFx0cHJvamVjdGlvbk1hdHJpeDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCAncHJvamVjdGlvbk1hdHJpeCcgKSxcblxuXHRcdFx0Zm9nVHlwZTogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCAnZm9nVHlwZScgKSxcblx0XHRcdGZvZ0RlbnNpdHk6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbiggcHJvZ3JhbSwgJ2ZvZ0RlbnNpdHknICksXG5cdFx0XHRmb2dOZWFyOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24oIHByb2dyYW0sICdmb2dOZWFyJyApLFxuXHRcdFx0Zm9nRmFyOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24oIHByb2dyYW0sICdmb2dGYXInICksXG5cdFx0XHRmb2dDb2xvcjogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCAnZm9nQ29sb3InICksXG5cdFx0XHRmb2dEZXB0aDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCAnZm9nRGVwdGgnICksXG5cblx0XHRcdGFscGhhVGVzdDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCAnYWxwaGFUZXN0JyApXG5cdFx0fTtcblxuXHRcdHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKTtcblx0XHRjYW52YXMud2lkdGggPSA4O1xuXHRcdGNhbnZhcy5oZWlnaHQgPSA4O1xuXG5cdFx0dmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJ3doaXRlJztcblx0XHRjb250ZXh0LmZpbGxSZWN0KCAwLCAwLCA4LCA4ICk7XG5cblx0XHR0ZXh0dXJlID0gbmV3IENhbnZhc1RleHR1cmUoIGNhbnZhcyApO1xuXG5cdH1cblxuXHR0aGlzLnJlbmRlciA9IGZ1bmN0aW9uICggc3ByaXRlcywgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGlmICggc3ByaXRlcy5sZW5ndGggPT09IDAgKSByZXR1cm47XG5cblx0XHQvLyBzZXR1cCBnbFxuXG5cdFx0aWYgKCBwcm9ncmFtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGluaXQoKTtcblxuXHRcdH1cblxuXHRcdHN0YXRlLnVzZVByb2dyYW0oIHByb2dyYW0gKTtcblxuXHRcdHN0YXRlLmluaXRBdHRyaWJ1dGVzKCk7XG5cdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBhdHRyaWJ1dGVzLnBvc2l0aW9uICk7XG5cdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBhdHRyaWJ1dGVzLnV2ICk7XG5cdFx0c3RhdGUuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtcblxuXHRcdHN0YXRlLmRpc2FibGUoIGdsLkNVTExfRkFDRSApO1xuXHRcdHN0YXRlLmVuYWJsZSggZ2wuQkxFTkQgKTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLkFSUkFZX0JVRkZFUiwgdmVydGV4QnVmZmVyICk7XG5cdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlciggYXR0cmlidXRlcy5wb3NpdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAyICogOCwgMCApO1xuXHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoIGF0dHJpYnV0ZXMudXYsIDIsIGdsLkZMT0FULCBmYWxzZSwgMiAqIDgsIDggKTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBlbGVtZW50QnVmZmVyICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KCB1bmlmb3Jtcy5wcm9qZWN0aW9uTWF0cml4LCBmYWxzZSwgY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHMgKTtcblxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIGdsLlRFWFRVUkUwICk7XG5cdFx0Z2wudW5pZm9ybTFpKCB1bmlmb3Jtcy5tYXAsIDAgKTtcblxuXHRcdHZhciBvbGRGb2dUeXBlID0gMDtcblx0XHR2YXIgc2NlbmVGb2dUeXBlID0gMDtcblx0XHR2YXIgZm9nID0gc2NlbmUuZm9nO1xuXG5cdFx0aWYgKCBmb2cgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zZiggdW5pZm9ybXMuZm9nQ29sb3IsIGZvZy5jb2xvci5yLCBmb2cuY29sb3IuZywgZm9nLmNvbG9yLmIgKTtcblxuXHRcdFx0aWYgKCBmb2cuaXNGb2cgKSB7XG5cblx0XHRcdFx0Z2wudW5pZm9ybTFmKCB1bmlmb3Jtcy5mb2dOZWFyLCBmb2cubmVhciApO1xuXHRcdFx0XHRnbC51bmlmb3JtMWYoIHVuaWZvcm1zLmZvZ0ZhciwgZm9nLmZhciApO1xuXG5cdFx0XHRcdGdsLnVuaWZvcm0xaSggdW5pZm9ybXMuZm9nVHlwZSwgMSApO1xuXHRcdFx0XHRvbGRGb2dUeXBlID0gMTtcblx0XHRcdFx0c2NlbmVGb2dUeXBlID0gMTtcblxuXHRcdFx0fSBlbHNlIGlmICggZm9nLmlzRm9nRXhwMiApIHtcblxuXHRcdFx0XHRnbC51bmlmb3JtMWYoIHVuaWZvcm1zLmZvZ0RlbnNpdHksIGZvZy5kZW5zaXR5ICk7XG5cblx0XHRcdFx0Z2wudW5pZm9ybTFpKCB1bmlmb3Jtcy5mb2dUeXBlLCAyICk7XG5cdFx0XHRcdG9sZEZvZ1R5cGUgPSAyO1xuXHRcdFx0XHRzY2VuZUZvZ1R5cGUgPSAyO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRnbC51bmlmb3JtMWkoIHVuaWZvcm1zLmZvZ1R5cGUsIDAgKTtcblx0XHRcdG9sZEZvZ1R5cGUgPSAwO1xuXHRcdFx0c2NlbmVGb2dUeXBlID0gMDtcblxuXHRcdH1cblxuXG5cdFx0Ly8gdXBkYXRlIHBvc2l0aW9ucyBhbmQgc29ydFxuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc3ByaXRlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgc3ByaXRlID0gc3ByaXRlc1sgaSBdO1xuXG5cdFx0XHRzcHJpdGUubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIHNwcml0ZS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0c3ByaXRlLnogPSAtIHNwcml0ZS5tb2RlbFZpZXdNYXRyaXguZWxlbWVudHNbIDE0IF07XG5cblx0XHR9XG5cblx0XHRzcHJpdGVzLnNvcnQoIHBhaW50ZXJTb3J0U3RhYmxlICk7XG5cblx0XHQvLyByZW5kZXIgYWxsIHNwcml0ZXNcblxuXHRcdHZhciBzY2FsZSA9IFtdO1xuXHRcdHZhciBjZW50ZXIgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHNwcml0ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHNwcml0ZSA9IHNwcml0ZXNbIGkgXTtcblx0XHRcdHZhciBtYXRlcmlhbCA9IHNwcml0ZS5tYXRlcmlhbDtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC52aXNpYmxlID09PSBmYWxzZSApIGNvbnRpbnVlO1xuXG5cdFx0XHRzcHJpdGUub25CZWZvcmVSZW5kZXIoIHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCB1bmRlZmluZWQsIG1hdGVyaWFsLCB1bmRlZmluZWQgKTtcblxuXHRcdFx0Z2wudW5pZm9ybTFmKCB1bmlmb3Jtcy5hbHBoYVRlc3QsIG1hdGVyaWFsLmFscGhhVGVzdCApO1xuXHRcdFx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdW5pZm9ybXMubW9kZWxWaWV3TWF0cml4LCBmYWxzZSwgc3ByaXRlLm1vZGVsVmlld01hdHJpeC5lbGVtZW50cyApO1xuXG5cdFx0XHRzcHJpdGUubWF0cml4V29ybGQuZGVjb21wb3NlKCBzcHJpdGVQb3NpdGlvbiwgc3ByaXRlUm90YXRpb24sIHNwcml0ZVNjYWxlICk7XG5cblx0XHRcdHNjYWxlWyAwIF0gPSBzcHJpdGVTY2FsZS54O1xuXHRcdFx0c2NhbGVbIDEgXSA9IHNwcml0ZVNjYWxlLnk7XG5cblx0XHRcdGNlbnRlclsgMCBdID0gc3ByaXRlLmNlbnRlci54IC0gMC41O1xuXHRcdFx0Y2VudGVyWyAxIF0gPSBzcHJpdGUuY2VudGVyLnkgLSAwLjU7XG5cblx0XHRcdHZhciBmb2dUeXBlID0gMDtcblxuXHRcdFx0aWYgKCBzY2VuZS5mb2cgJiYgbWF0ZXJpYWwuZm9nICkge1xuXG5cdFx0XHRcdGZvZ1R5cGUgPSBzY2VuZUZvZ1R5cGU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBvbGRGb2dUeXBlICE9PSBmb2dUeXBlICkge1xuXG5cdFx0XHRcdGdsLnVuaWZvcm0xaSggdW5pZm9ybXMuZm9nVHlwZSwgZm9nVHlwZSApO1xuXHRcdFx0XHRvbGRGb2dUeXBlID0gZm9nVHlwZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLm1hcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRnbC51bmlmb3JtMmYoIHVuaWZvcm1zLnV2T2Zmc2V0LCBtYXRlcmlhbC5tYXAub2Zmc2V0LngsIG1hdGVyaWFsLm1hcC5vZmZzZXQueSApO1xuXHRcdFx0XHRnbC51bmlmb3JtMmYoIHVuaWZvcm1zLnV2U2NhbGUsIG1hdGVyaWFsLm1hcC5yZXBlYXQueCwgbWF0ZXJpYWwubWFwLnJlcGVhdC55ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Z2wudW5pZm9ybTJmKCB1bmlmb3Jtcy51dk9mZnNldCwgMCwgMCApO1xuXHRcdFx0XHRnbC51bmlmb3JtMmYoIHVuaWZvcm1zLnV2U2NhbGUsIDEsIDEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnbC51bmlmb3JtMWYoIHVuaWZvcm1zLm9wYWNpdHksIG1hdGVyaWFsLm9wYWNpdHkgKTtcblx0XHRcdGdsLnVuaWZvcm0zZiggdW5pZm9ybXMuY29sb3IsIG1hdGVyaWFsLmNvbG9yLnIsIG1hdGVyaWFsLmNvbG9yLmcsIG1hdGVyaWFsLmNvbG9yLmIgKTtcblxuXHRcdFx0Z2wudW5pZm9ybTFmKCB1bmlmb3Jtcy5yb3RhdGlvbiwgbWF0ZXJpYWwucm90YXRpb24gKTtcblx0XHRcdGdsLnVuaWZvcm0yZnYoIHVuaWZvcm1zLmNlbnRlciwgY2VudGVyICk7XG5cdFx0XHRnbC51bmlmb3JtMmZ2KCB1bmlmb3Jtcy5zY2FsZSwgc2NhbGUgKTtcblxuXHRcdFx0c3RhdGUuc2V0QmxlbmRpbmcoIG1hdGVyaWFsLmJsZW5kaW5nLCBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uLCBtYXRlcmlhbC5ibGVuZFNyYywgbWF0ZXJpYWwuYmxlbmREc3QsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb25BbHBoYSwgbWF0ZXJpYWwuYmxlbmRTcmNBbHBoYSwgbWF0ZXJpYWwuYmxlbmREc3RBbHBoYSwgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhICk7XG5cdFx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QoIG1hdGVyaWFsLmRlcHRoVGVzdCApO1xuXHRcdFx0c3RhdGUuYnVmZmVycy5kZXB0aC5zZXRNYXNrKCBtYXRlcmlhbC5kZXB0aFdyaXRlICk7XG5cdFx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldE1hc2soIG1hdGVyaWFsLmNvbG9yV3JpdGUgKTtcblxuXHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEKCBtYXRlcmlhbC5tYXAgfHwgdGV4dHVyZSwgMCApO1xuXG5cdFx0XHRnbC5kcmF3RWxlbWVudHMoIGdsLlRSSUFOR0xFUywgNiwgZ2wuVU5TSUdORURfU0hPUlQsIDAgKTtcblxuXHRcdFx0c3ByaXRlLm9uQWZ0ZXJSZW5kZXIoIHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCB1bmRlZmluZWQsIG1hdGVyaWFsLCB1bmRlZmluZWQgKTtcblxuXHRcdH1cblxuXHRcdC8vIHJlc3RvcmUgZ2xcblxuXHRcdHN0YXRlLmVuYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cblx0XHRzdGF0ZS5yZXNldCgpO1xuXG5cdH07XG5cblx0ZnVuY3Rpb24gY3JlYXRlUHJvZ3JhbSgpIHtcblxuXHRcdHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuXG5cdFx0dmFyIHZlcnRleFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlciggZ2wuVkVSVEVYX1NIQURFUiApO1xuXHRcdHZhciBmcmFnbWVudFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlciggZ2wuRlJBR01FTlRfU0hBREVSICk7XG5cblx0XHRnbC5zaGFkZXJTb3VyY2UoIHZlcnRleFNoYWRlciwgW1xuXG5cdFx0XHQncHJlY2lzaW9uICcgKyBjYXBhYmlsaXRpZXMucHJlY2lzaW9uICsgJyBmbG9hdDsnLFxuXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfTkFNRSAnICsgJ1Nwcml0ZU1hdGVyaWFsJyxcblxuXHRcdFx0J3VuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gZmxvYXQgcm90YXRpb247Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzIgY2VudGVyOycsXG5cdFx0XHQndW5pZm9ybSB2ZWMyIHNjYWxlOycsXG5cdFx0XHQndW5pZm9ybSB2ZWMyIHV2T2Zmc2V0OycsXG5cdFx0XHQndW5pZm9ybSB2ZWMyIHV2U2NhbGU7JyxcblxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMyIHBvc2l0aW9uOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzIgdXY7JyxcblxuXHRcdFx0J3ZhcnlpbmcgdmVjMiB2VVY7Jyxcblx0XHRcdCd2YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoOycsXG5cblx0XHRcdCd2b2lkIG1haW4oKSB7JyxcblxuXHRcdFx0J1x0dlVWID0gdXZPZmZzZXQgKyB1diAqIHV2U2NhbGU7JyxcblxuXHRcdFx0J1x0dmVjMiBhbGlnbmVkUG9zaXRpb24gPSAoIHBvc2l0aW9uIC0gY2VudGVyICkgKiBzY2FsZTsnLFxuXG5cdFx0XHQnXHR2ZWMyIHJvdGF0ZWRQb3NpdGlvbjsnLFxuXHRcdFx0J1x0cm90YXRlZFBvc2l0aW9uLnggPSBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55OycsXG5cdFx0XHQnXHRyb3RhdGVkUG9zaXRpb24ueSA9IHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54ICsgY29zKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7JyxcblxuXHRcdFx0J1x0dmVjNCBtdlBvc2l0aW9uOycsXG5cblx0XHRcdCdcdG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCAwLjAsIDAuMCwgMC4wLCAxLjAgKTsnLFxuXHRcdFx0J1x0bXZQb3NpdGlvbi54eSArPSByb3RhdGVkUG9zaXRpb247JyxcblxuXHRcdFx0J1x0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjsnLFxuXG5cdFx0XHQnXHRmb2dEZXB0aCA9IC0gbXZQb3NpdGlvbi56OycsXG5cblx0XHRcdCd9J1xuXG5cdFx0XS5qb2luKCAnXFxuJyApICk7XG5cblx0XHRnbC5zaGFkZXJTb3VyY2UoIGZyYWdtZW50U2hhZGVyLCBbXG5cblx0XHRcdCdwcmVjaXNpb24gJyArIGNhcGFiaWxpdGllcy5wcmVjaXNpb24gKyAnIGZsb2F0OycsXG5cblx0XHRcdCcjZGVmaW5lIFNIQURFUl9OQU1FICcgKyAnU3ByaXRlTWF0ZXJpYWwnLFxuXG5cdFx0XHQndW5pZm9ybSB2ZWMzIGNvbG9yOycsXG5cdFx0XHQndW5pZm9ybSBzYW1wbGVyMkQgbWFwOycsXG5cdFx0XHQndW5pZm9ybSBmbG9hdCBvcGFjaXR5OycsXG5cblx0XHRcdCd1bmlmb3JtIGludCBmb2dUeXBlOycsXG5cdFx0XHQndW5pZm9ybSB2ZWMzIGZvZ0NvbG9yOycsXG5cdFx0XHQndW5pZm9ybSBmbG9hdCBmb2dEZW5zaXR5OycsXG5cdFx0XHQndW5pZm9ybSBmbG9hdCBmb2dOZWFyOycsXG5cdFx0XHQndW5pZm9ybSBmbG9hdCBmb2dGYXI7Jyxcblx0XHRcdCd1bmlmb3JtIGZsb2F0IGFscGhhVGVzdDsnLFxuXG5cdFx0XHQndmFyeWluZyB2ZWMyIHZVVjsnLFxuXHRcdFx0J3ZhcnlpbmcgZmxvYXQgZm9nRGVwdGg7JyxcblxuXHRcdFx0J3ZvaWQgbWFpbigpIHsnLFxuXG5cdFx0XHQnXHR2ZWM0IHRleHR1cmUgPSB0ZXh0dXJlMkQoIG1hcCwgdlVWICk7JyxcblxuXHRcdFx0J1x0Z2xfRnJhZ0NvbG9yID0gdmVjNCggY29sb3IgKiB0ZXh0dXJlLnh5eiwgdGV4dHVyZS5hICogb3BhY2l0eSApOycsXG5cblx0XHRcdCdcdGlmICggZ2xfRnJhZ0NvbG9yLmEgPCBhbHBoYVRlc3QgKSBkaXNjYXJkOycsXG5cblx0XHRcdCdcdGlmICggZm9nVHlwZSA+IDAgKSB7JyxcblxuXHRcdFx0J1x0XHRmbG9hdCBmb2dGYWN0b3IgPSAwLjA7JyxcblxuXHRcdFx0J1x0XHRpZiAoIGZvZ1R5cGUgPT0gMSApIHsnLFxuXG5cdFx0XHQnXHRcdFx0Zm9nRmFjdG9yID0gc21vb3Roc3RlcCggZm9nTmVhciwgZm9nRmFyLCBmb2dEZXB0aCApOycsXG5cblx0XHRcdCdcdFx0fSBlbHNlIHsnLFxuXG5cdFx0XHQnXHRcdFx0Y29uc3QgZmxvYXQgTE9HMiA9IDEuNDQyNjk1OycsXG5cdFx0XHQnXHRcdFx0Zm9nRmFjdG9yID0gZXhwMiggLSBmb2dEZW5zaXR5ICogZm9nRGVuc2l0eSAqIGZvZ0RlcHRoICogZm9nRGVwdGggKiBMT0cyICk7Jyxcblx0XHRcdCdcdFx0XHRmb2dGYWN0b3IgPSAxLjAgLSBjbGFtcCggZm9nRmFjdG9yLCAwLjAsIDEuMCApOycsXG5cblx0XHRcdCdcdFx0fScsXG5cblx0XHRcdCdcdFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IG1peCggZ2xfRnJhZ0NvbG9yLnJnYiwgZm9nQ29sb3IsIGZvZ0ZhY3RvciApOycsXG5cblx0XHRcdCdcdH0nLFxuXG5cdFx0XHQnfSdcblxuXHRcdF0uam9pbiggJ1xcbicgKSApO1xuXG5cdFx0Z2wuY29tcGlsZVNoYWRlciggdmVydGV4U2hhZGVyICk7XG5cdFx0Z2wuY29tcGlsZVNoYWRlciggZnJhZ21lbnRTaGFkZXIgKTtcblxuXHRcdGdsLmF0dGFjaFNoYWRlciggcHJvZ3JhbSwgdmVydGV4U2hhZGVyICk7XG5cdFx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBmcmFnbWVudFNoYWRlciApO1xuXG5cdFx0Z2wubGlua1Byb2dyYW0oIHByb2dyYW0gKTtcblxuXHRcdHJldHVybiBwcm9ncmFtO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwYWludGVyU29ydFN0YWJsZSggYSwgYiApIHtcblxuXHRcdGlmICggYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlciApIHtcblxuXHRcdFx0cmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuXG5cdFx0fSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRcdHJldHVybiBiLnogLSBhLno7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gYi5pZCAtIGEuaWQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFN0YXRlKCBnbCwgZXh0ZW5zaW9ucywgdXRpbHMgKSB7XG5cblx0ZnVuY3Rpb24gQ29sb3JCdWZmZXIoKSB7XG5cblx0XHR2YXIgbG9ja2VkID0gZmFsc2U7XG5cblx0XHR2YXIgY29sb3IgPSBuZXcgVmVjdG9yNCgpO1xuXHRcdHZhciBjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcblx0XHR2YXIgY3VycmVudENvbG9yQ2xlYXIgPSBuZXcgVmVjdG9yNCggMCwgMCwgMCwgMCApO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBjb2xvck1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50Q29sb3JNYXNrICE9PSBjb2xvck1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5jb2xvck1hc2soIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnRDb2xvck1hc2sgPSBjb2xvck1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCByLCBnLCBiLCBhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRcdFx0aWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRyICo9IGE7IGcgKj0gYTsgYiAqPSBhO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb2xvci5zZXQoIHIsIGcsIGIsIGEgKTtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRDb2xvckNsZWFyLmVxdWFscyggY29sb3IgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRnbC5jbGVhckNvbG9yKCByLCBnLCBiLCBhICk7XG5cdFx0XHRcdFx0Y3VycmVudENvbG9yQ2xlYXIuY29weSggY29sb3IgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gZmFsc2U7XG5cblx0XHRcdFx0Y3VycmVudENvbG9yTWFzayA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRDb2xvckNsZWFyLnNldCggLSAxLCAwLCAwLCAwICk7IC8vIHNldCB0byBpbnZhbGlkIHN0YXRlXG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIERlcHRoQnVmZmVyKCkge1xuXG5cdFx0dmFyIGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0dmFyIGN1cnJlbnREZXB0aE1hc2sgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50RGVwdGhGdW5jID0gbnVsbDtcblx0XHR2YXIgY3VycmVudERlcHRoQ2xlYXIgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0VGVzdDogZnVuY3Rpb24gKCBkZXB0aFRlc3QgKSB7XG5cblx0XHRcdFx0aWYgKCBkZXB0aFRlc3QgKSB7XG5cblx0XHRcdFx0XHRlbmFibGUoIGdsLkRFUFRIX1RFU1QgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZGlzYWJsZSggZ2wuREVQVEhfVEVTVCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBkZXB0aE1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50RGVwdGhNYXNrICE9PSBkZXB0aE1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5kZXB0aE1hc2soIGRlcHRoTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnREZXB0aE1hc2sgPSBkZXB0aE1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRGdW5jOiBmdW5jdGlvbiAoIGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnREZXB0aEZ1bmMgIT09IGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRcdGlmICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0XHRzd2l0Y2ggKCBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBOZXZlckRlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5ORVZFUiApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgQWx3YXlzRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkFMV0FZUyApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgTGVzc0RlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5MRVNTICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBMZXNzRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuTEVRVUFMICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5FUVVBTCApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgR3JlYXRlckVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkdFUVVBTCApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgR3JlYXRlckRlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5HUkVBVEVSICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBOb3RFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5OT1RFUVVBTCApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkxFUVVBTCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkxFUVVBTCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3VycmVudERlcHRoRnVuYyA9IGRlcHRoRnVuYztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIGRlcHRoICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoQ2xlYXIgIT09IGRlcHRoICkge1xuXG5cdFx0XHRcdFx0Z2wuY2xlYXJEZXB0aCggZGVwdGggKTtcblx0XHRcdFx0XHRjdXJyZW50RGVwdGhDbGVhciA9IGRlcHRoO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50RGVwdGhNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudERlcHRoRnVuYyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnREZXB0aENsZWFyID0gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gU3RlbmNpbEJ1ZmZlcigpIHtcblxuXHRcdHZhciBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdHZhciBjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0VGVzdDogZnVuY3Rpb24gKCBzdGVuY2lsVGVzdCApIHtcblxuXHRcdFx0XHRpZiAoIHN0ZW5jaWxUZXN0ICkge1xuXG5cdFx0XHRcdFx0ZW5hYmxlKCBnbC5TVEVOQ0lMX1RFU1QgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZGlzYWJsZSggZ2wuU1RFTkNJTF9URVNUICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoIHN0ZW5jaWxNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxNYXNrICE9PSBzdGVuY2lsTWFzayAmJiAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxNYXNrKCBzdGVuY2lsTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsTWFzayA9IHN0ZW5jaWxNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0RnVuYzogZnVuY3Rpb24gKCBzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbEZ1bmMgIT09IHN0ZW5jaWxGdW5jIHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxSZWYgXHQhPT0gc3RlbmNpbFJlZiBcdHx8XG5cdFx0XHRcdCAgICAgY3VycmVudFN0ZW5jaWxGdW5jTWFzayAhPT0gc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsRnVuYyggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICk7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmMgPSBzdGVuY2lsRnVuYztcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiA9IHN0ZW5jaWxSZWY7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IHN0ZW5jaWxNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0T3A6IGZ1bmN0aW9uICggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxGYWlsXHQgIT09IHN0ZW5jaWxGYWlsIFx0fHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbFpGYWlsICE9PSBzdGVuY2lsWkZhaWwgfHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbFpQYXNzICE9PSBzdGVuY2lsWlBhc3MgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsT3AoIHN0ZW5jaWxGYWlsLCBzdGVuY2lsWkZhaWwsIHN0ZW5jaWxaUGFzcyApO1xuXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGYWlsID0gc3RlbmNpbEZhaWw7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaRmFpbCA9IHN0ZW5jaWxaRmFpbDtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFpQYXNzID0gc3RlbmNpbFpQYXNzO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TG9ja2VkOiBmdW5jdGlvbiAoIGxvY2sgKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gbG9jaztcblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0Q2xlYXI6IGZ1bmN0aW9uICggc3RlbmNpbCApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsQ2xlYXIgIT09IHN0ZW5jaWwgKSB7XG5cblx0XHRcdFx0XHRnbC5jbGVhclN0ZW5jaWwoIHN0ZW5jaWwgKTtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbENsZWFyID0gc3RlbmNpbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gZmFsc2U7XG5cblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxSZWYgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGYWlsID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaRmFpbCA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbENsZWFyID0gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0Ly9cblxuXHR2YXIgY29sb3JCdWZmZXIgPSBuZXcgQ29sb3JCdWZmZXIoKTtcblx0dmFyIGRlcHRoQnVmZmVyID0gbmV3IERlcHRoQnVmZmVyKCk7XG5cdHZhciBzdGVuY2lsQnVmZmVyID0gbmV3IFN0ZW5jaWxCdWZmZXIoKTtcblxuXHR2YXIgbWF4VmVydGV4QXR0cmlidXRlcyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX1ZFUlRFWF9BVFRSSUJTICk7XG5cdHZhciBuZXdBdHRyaWJ1dGVzID0gbmV3IFVpbnQ4QXJyYXkoIG1heFZlcnRleEF0dHJpYnV0ZXMgKTtcblx0dmFyIGVuYWJsZWRBdHRyaWJ1dGVzID0gbmV3IFVpbnQ4QXJyYXkoIG1heFZlcnRleEF0dHJpYnV0ZXMgKTtcblx0dmFyIGF0dHJpYnV0ZURpdmlzb3JzID0gbmV3IFVpbnQ4QXJyYXkoIG1heFZlcnRleEF0dHJpYnV0ZXMgKTtcblxuXHR2YXIgY2FwYWJpbGl0aWVzID0ge307XG5cblx0dmFyIGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cyA9IG51bGw7XG5cblx0dmFyIGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuXHR2YXIgY3VycmVudEJsZW5kaW5nID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdHZhciBjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBmYWxzZTtcblxuXHR2YXIgY3VycmVudEZsaXBTaWRlZCA9IG51bGw7XG5cdHZhciBjdXJyZW50Q3VsbEZhY2UgPSBudWxsO1xuXG5cdHZhciBjdXJyZW50TGluZVdpZHRoID0gbnVsbDtcblxuXHR2YXIgY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IgPSBudWxsO1xuXHR2YXIgY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IG51bGw7XG5cblx0dmFyIG1heFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyApO1xuXG5cdHZhciBsaW5lV2lkdGhBdmFpbGFibGUgPSBmYWxzZTtcblx0dmFyIHZlcnNpb24gPSAwO1xuXHR2YXIgZ2xWZXJzaW9uID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5WRVJTSU9OICk7XG5cblx0aWYgKCBnbFZlcnNpb24uaW5kZXhPZiggJ1dlYkdMJyApICE9PSAtIDEgKSB7XG5cblx0XHR2ZXJzaW9uID0gcGFyc2VGbG9hdCggL15XZWJHTFxcIChbMC05XSkvLmV4ZWMoIGdsVmVyc2lvbiApWyAxIF0gKTtcblx0XHRsaW5lV2lkdGhBdmFpbGFibGUgPSAoIHZlcnNpb24gPj0gMS4wICk7XG5cblx0fSBlbHNlIGlmICggZ2xWZXJzaW9uLmluZGV4T2YoICdPcGVuR0wgRVMnICkgIT09IC0gMSApIHtcblxuXHRcdHZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXk9wZW5HTFxcIEVTXFwgKFswLTldKS8uZXhlYyggZ2xWZXJzaW9uIClbIDEgXSApO1xuXHRcdGxpbmVXaWR0aEF2YWlsYWJsZSA9ICggdmVyc2lvbiA+PSAyLjAgKTtcblxuXHR9XG5cblx0dmFyIGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdHZhciBjdXJyZW50Qm91bmRUZXh0dXJlcyA9IHt9O1xuXG5cdHZhciBjdXJyZW50U2Npc3NvciA9IG5ldyBWZWN0b3I0KCk7XG5cdHZhciBjdXJyZW50Vmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoIHR5cGUsIHRhcmdldCwgY291bnQgKSB7XG5cblx0XHR2YXIgZGF0YSA9IG5ldyBVaW50OEFycmF5KCA0ICk7IC8vIDQgaXMgcmVxdWlyZWQgdG8gbWF0Y2ggZGVmYXVsdCB1bnBhY2sgYWxpZ25tZW50IG9mIDQuXG5cdFx0dmFyIHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRnbC5iaW5kVGV4dHVyZSggdHlwZSwgdGV4dHVyZSApO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCApO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdGdsLnRleEltYWdlMkQoIHRhcmdldCArIGksIDAsIGdsLlJHQkEsIDEsIDEsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGRhdGEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH1cblxuXHR2YXIgZW1wdHlUZXh0dXJlcyA9IHt9O1xuXHRlbXB0eVRleHR1cmVzWyBnbC5URVhUVVJFXzJEIF0gPSBjcmVhdGVUZXh0dXJlKCBnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFXzJELCAxICk7XG5cdGVtcHR5VGV4dHVyZXNbIGdsLlRFWFRVUkVfQ1VCRV9NQVAgXSA9IGNyZWF0ZVRleHR1cmUoIGdsLlRFWFRVUkVfQ1VCRV9NQVAsIGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCwgNiApO1xuXG5cdC8vIGluaXRcblxuXHRjb2xvckJ1ZmZlci5zZXRDbGVhciggMCwgMCwgMCwgMSApO1xuXHRkZXB0aEJ1ZmZlci5zZXRDbGVhciggMSApO1xuXHRzdGVuY2lsQnVmZmVyLnNldENsZWFyKCAwICk7XG5cblx0ZW5hYmxlKCBnbC5ERVBUSF9URVNUICk7XG5cdGRlcHRoQnVmZmVyLnNldEZ1bmMoIExlc3NFcXVhbERlcHRoICk7XG5cblx0c2V0RmxpcFNpZGVkKCBmYWxzZSApO1xuXHRzZXRDdWxsRmFjZSggQ3VsbEZhY2VCYWNrICk7XG5cdGVuYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cblx0ZW5hYmxlKCBnbC5CTEVORCApO1xuXHRzZXRCbGVuZGluZyggTm9ybWFsQmxlbmRpbmcgKTtcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGluaXRBdHRyaWJ1dGVzKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbmV3QXR0cmlidXRlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRuZXdBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBlbmFibGVBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIGF0dHJpYnV0ZSwgMCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBhdHRyaWJ1dGUsIG1lc2hQZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRuZXdBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9IDE7XG5cblx0XHRpZiAoIGVuYWJsZWRBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9PT0gMCApIHtcblxuXHRcdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoIGF0dHJpYnV0ZSApO1xuXHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGF0dHJpYnV0ZSBdID0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggYXR0cmlidXRlRGl2aXNvcnNbIGF0dHJpYnV0ZSBdICE9PSBtZXNoUGVyQXR0cmlidXRlICkge1xuXG5cdFx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0XHRleHRlbnNpb24udmVydGV4QXR0cmliRGl2aXNvckFOR0xFKCBhdHRyaWJ1dGUsIG1lc2hQZXJBdHRyaWJ1dGUgKTtcblx0XHRcdGF0dHJpYnV0ZURpdmlzb3JzWyBhdHRyaWJ1dGUgXSA9IG1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gZW5hYmxlZEF0dHJpYnV0ZXMubGVuZ3RoOyBpICE9PSBsOyArKyBpICkge1xuXG5cdFx0XHRpZiAoIGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gIT09IG5ld0F0dHJpYnV0ZXNbIGkgXSApIHtcblxuXHRcdFx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoIGkgKTtcblx0XHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlKCBpZCApIHtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzWyBpZCBdICE9PSB0cnVlICkge1xuXG5cdFx0XHRnbC5lbmFibGUoIGlkICk7XG5cdFx0XHRjYXBhYmlsaXRpZXNbIGlkIF0gPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNhYmxlKCBpZCApIHtcblxuXHRcdGlmICggY2FwYWJpbGl0aWVzWyBpZCBdICE9PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wuZGlzYWJsZSggaWQgKTtcblx0XHRcdGNhcGFiaWxpdGllc1sgaWQgXSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMoKSB7XG5cblx0XHRpZiAoIGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cyA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29tcHJlc3NlZFRleHR1cmVGb3JtYXRzID0gW107XG5cblx0XHRcdGlmICggZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICkgfHxcblx0XHRcdCAgICAgZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fFxuXHRcdFx0ICAgICBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyApIHx8XG5cdFx0XHQgICAgIGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMnICkgKSB7XG5cblx0XHRcdFx0dmFyIGZvcm1hdHMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLkNPTVBSRVNTRURfVEVYVFVSRV9GT1JNQVRTICk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZm9ybWF0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMucHVzaCggZm9ybWF0c1sgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1c2VQcm9ncmFtKCBwcm9ncmFtICkge1xuXG5cdFx0aWYgKCBjdXJyZW50UHJvZ3JhbSAhPT0gcHJvZ3JhbSApIHtcblxuXHRcdFx0Z2wudXNlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXG5cdFx0XHRjdXJyZW50UHJvZ3JhbSA9IHByb2dyYW07XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRCbGVuZGluZyggYmxlbmRpbmcsIGJsZW5kRXF1YXRpb24sIGJsZW5kU3JjLCBibGVuZERzdCwgYmxlbmRFcXVhdGlvbkFscGhhLCBibGVuZFNyY0FscGhhLCBibGVuZERzdEFscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRpZiAoIGJsZW5kaW5nICE9PSBOb0JsZW5kaW5nICkge1xuXG5cdFx0XHRlbmFibGUoIGdsLkJMRU5EICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkaXNhYmxlKCBnbC5CTEVORCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBibGVuZGluZyAhPT0gQ3VzdG9tQmxlbmRpbmcgKSB7XG5cblx0XHRcdGlmICggYmxlbmRpbmcgIT09IGN1cnJlbnRCbGVuZGluZyB8fCBwcmVtdWx0aXBsaWVkQWxwaGEgIT09IGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSApIHtcblxuXHRcdFx0XHRzd2l0Y2ggKCBibGVuZGluZyApIHtcblxuXHRcdFx0XHRcdGNhc2UgQWRkaXRpdmVCbGVuZGluZzpcblxuXHRcdFx0XHRcdFx0aWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKCBnbC5GVU5DX0FERCwgZ2wuRlVOQ19BREQgKTtcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIGdsLk9ORSwgZ2wuT05FLCBnbC5PTkUsIGdsLk9ORSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRXF1YXRpb24oIGdsLkZVTkNfQUREICk7XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggZ2wuU1JDX0FMUEhBLCBnbC5PTkUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6XG5cblx0XHRcdFx0XHRcdGlmICggcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZSggZ2wuRlVOQ19BREQsIGdsLkZVTkNfQUREICk7XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5aRVJPLCBnbC5aRVJPLCBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRFcXVhdGlvbiggZ2wuRlVOQ19BREQgKTtcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCBnbC5aRVJPLCBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SICk7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBNdWx0aXBseUJsZW5kaW5nOlxuXG5cdFx0XHRcdFx0XHRpZiAoIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoIGdsLkZVTkNfQURELCBnbC5GVU5DX0FERCApO1xuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZ2wuWkVSTywgZ2wuU1JDX0NPTE9SLCBnbC5aRVJPLCBnbC5TUkNfQUxQSEEgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEVxdWF0aW9uKCBnbC5GVU5DX0FERCApO1xuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIGdsLlpFUk8sIGdsLlNSQ19DT0xPUiApO1xuXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdGlmICggcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZSggZ2wuRlVOQ19BREQsIGdsLkZVTkNfQUREICk7XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZSggZ2wuRlVOQ19BREQsIGdsLkZVTkNfQUREICk7XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gbnVsbDtcblx0XHRcdGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XG5cdFx0XHRjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IG51bGw7XG5cdFx0XHRjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdFx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRibGVuZEVxdWF0aW9uQWxwaGEgPSBibGVuZEVxdWF0aW9uQWxwaGEgfHwgYmxlbmRFcXVhdGlvbjtcblx0XHRcdGJsZW5kU3JjQWxwaGEgPSBibGVuZFNyY0FscGhhIHx8IGJsZW5kU3JjO1xuXHRcdFx0YmxlbmREc3RBbHBoYSA9IGJsZW5kRHN0QWxwaGEgfHwgYmxlbmREc3Q7XG5cblx0XHRcdGlmICggYmxlbmRFcXVhdGlvbiAhPT0gY3VycmVudEJsZW5kRXF1YXRpb24gfHwgYmxlbmRFcXVhdGlvbkFscGhhICE9PSBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICkge1xuXG5cdFx0XHRcdGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZSggdXRpbHMuY29udmVydCggYmxlbmRFcXVhdGlvbiApLCB1dGlscy5jb252ZXJ0KCBibGVuZEVxdWF0aW9uQWxwaGEgKSApO1xuXG5cdFx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gYmxlbmRFcXVhdGlvbjtcblx0XHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJsZW5kU3JjICE9PSBjdXJyZW50QmxlbmRTcmMgfHwgYmxlbmREc3QgIT09IGN1cnJlbnRCbGVuZERzdCB8fCBibGVuZFNyY0FscGhhICE9PSBjdXJyZW50QmxlbmRTcmNBbHBoYSB8fCBibGVuZERzdEFscGhhICE9PSBjdXJyZW50QmxlbmREc3RBbHBoYSApIHtcblxuXHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggdXRpbHMuY29udmVydCggYmxlbmRTcmMgKSwgdXRpbHMuY29udmVydCggYmxlbmREc3QgKSwgdXRpbHMuY29udmVydCggYmxlbmRTcmNBbHBoYSApLCB1dGlscy5jb252ZXJ0KCBibGVuZERzdEFscGhhICkgKTtcblxuXHRcdFx0XHRjdXJyZW50QmxlbmRTcmMgPSBibGVuZFNyYztcblx0XHRcdFx0Y3VycmVudEJsZW5kRHN0ID0gYmxlbmREc3Q7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYTtcblx0XHRcdFx0Y3VycmVudEJsZW5kRHN0QWxwaGEgPSBibGVuZERzdEFscGhhO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjdXJyZW50QmxlbmRpbmcgPSBibGVuZGluZztcblx0XHRjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBwcmVtdWx0aXBsaWVkQWxwaGE7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldE1hdGVyaWFsKCBtYXRlcmlhbCwgZnJvbnRGYWNlQ1cgKSB7XG5cblx0XHRtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlXG5cdFx0XHQ/IGRpc2FibGUoIGdsLkNVTExfRkFDRSApXG5cdFx0XHQ6IGVuYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cblx0XHR2YXIgZmxpcFNpZGVkID0gKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApO1xuXHRcdGlmICggZnJvbnRGYWNlQ1cgKSBmbGlwU2lkZWQgPSAhIGZsaXBTaWRlZDtcblxuXHRcdHNldEZsaXBTaWRlZCggZmxpcFNpZGVkICk7XG5cblx0XHQoIG1hdGVyaWFsLmJsZW5kaW5nID09PSBOb3JtYWxCbGVuZGluZyAmJiBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gZmFsc2UgKVxuXHRcdFx0PyBzZXRCbGVuZGluZyggTm9CbGVuZGluZyApXG5cdFx0XHQ6IHNldEJsZW5kaW5nKCBtYXRlcmlhbC5ibGVuZGluZywgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbiwgbWF0ZXJpYWwuYmxlbmRTcmMsIG1hdGVyaWFsLmJsZW5kRHN0LCBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uQWxwaGEsIG1hdGVyaWFsLmJsZW5kU3JjQWxwaGEsIG1hdGVyaWFsLmJsZW5kRHN0QWxwaGEsIG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdFx0ZGVwdGhCdWZmZXIuc2V0RnVuYyggbWF0ZXJpYWwuZGVwdGhGdW5jICk7XG5cdFx0ZGVwdGhCdWZmZXIuc2V0VGVzdCggbWF0ZXJpYWwuZGVwdGhUZXN0ICk7XG5cdFx0ZGVwdGhCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuZGVwdGhXcml0ZSApO1xuXHRcdGNvbG9yQnVmZmVyLnNldE1hc2soIG1hdGVyaWFsLmNvbG9yV3JpdGUgKTtcblxuXHRcdHNldFBvbHlnb25PZmZzZXQoIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHNldEZsaXBTaWRlZCggZmxpcFNpZGVkICkge1xuXG5cdFx0aWYgKCBjdXJyZW50RmxpcFNpZGVkICE9PSBmbGlwU2lkZWQgKSB7XG5cblx0XHRcdGlmICggZmxpcFNpZGVkICkge1xuXG5cdFx0XHRcdGdsLmZyb250RmFjZSggZ2wuQ1cgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRnbC5mcm9udEZhY2UoIGdsLkNDVyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGN1cnJlbnRGbGlwU2lkZWQgPSBmbGlwU2lkZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldEN1bGxGYWNlKCBjdWxsRmFjZSApIHtcblxuXHRcdGlmICggY3VsbEZhY2UgIT09IEN1bGxGYWNlTm9uZSApIHtcblxuXHRcdFx0ZW5hYmxlKCBnbC5DVUxMX0ZBQ0UgKTtcblxuXHRcdFx0aWYgKCBjdWxsRmFjZSAhPT0gY3VycmVudEN1bGxGYWNlICkge1xuXG5cdFx0XHRcdGlmICggY3VsbEZhY2UgPT09IEN1bGxGYWNlQmFjayApIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCBnbC5CQUNLICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggY3VsbEZhY2UgPT09IEN1bGxGYWNlRnJvbnQgKSB7XG5cblx0XHRcdFx0XHRnbC5jdWxsRmFjZSggZ2wuRlJPTlQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIGdsLkZST05UX0FORF9CQUNLICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkaXNhYmxlKCBnbC5DVUxMX0ZBQ0UgKTtcblxuXHRcdH1cblxuXHRcdGN1cnJlbnRDdWxsRmFjZSA9IGN1bGxGYWNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRMaW5lV2lkdGgoIHdpZHRoICkge1xuXG5cdFx0aWYgKCB3aWR0aCAhPT0gY3VycmVudExpbmVXaWR0aCApIHtcblxuXHRcdFx0aWYgKCBsaW5lV2lkdGhBdmFpbGFibGUgKSBnbC5saW5lV2lkdGgoIHdpZHRoICk7XG5cblx0XHRcdGN1cnJlbnRMaW5lV2lkdGggPSB3aWR0aDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0UG9seWdvbk9mZnNldCggcG9seWdvbk9mZnNldCwgZmFjdG9yLCB1bml0cyApIHtcblxuXHRcdGlmICggcG9seWdvbk9mZnNldCApIHtcblxuXHRcdFx0ZW5hYmxlKCBnbC5QT0xZR09OX09GRlNFVF9GSUxMICk7XG5cblx0XHRcdGlmICggY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IgIT09IGZhY3RvciB8fCBjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzICE9PSB1bml0cyApIHtcblxuXHRcdFx0XHRnbC5wb2x5Z29uT2Zmc2V0KCBmYWN0b3IsIHVuaXRzICk7XG5cblx0XHRcdFx0Y3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IgPSBmYWN0b3I7XG5cdFx0XHRcdGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgPSB1bml0cztcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGlzYWJsZSggZ2wuUE9MWUdPTl9PRkZTRVRfRklMTCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRTY2lzc29yVGVzdCggc2Npc3NvclRlc3QgKSB7XG5cblx0XHRpZiAoIHNjaXNzb3JUZXN0ICkge1xuXG5cdFx0XHRlbmFibGUoIGdsLlNDSVNTT1JfVEVTVCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGlzYWJsZSggZ2wuU0NJU1NPUl9URVNUICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIHRleHR1cmVcblxuXHRmdW5jdGlvbiBhY3RpdmVUZXh0dXJlKCB3ZWJnbFNsb3QgKSB7XG5cblx0XHRpZiAoIHdlYmdsU2xvdCA9PT0gdW5kZWZpbmVkICkgd2ViZ2xTbG90ID0gZ2wuVEVYVFVSRTAgKyBtYXhUZXh0dXJlcyAtIDE7XG5cblx0XHRpZiAoIGN1cnJlbnRUZXh0dXJlU2xvdCAhPT0gd2ViZ2xTbG90ICkge1xuXG5cdFx0XHRnbC5hY3RpdmVUZXh0dXJlKCB3ZWJnbFNsb3QgKTtcblx0XHRcdGN1cnJlbnRUZXh0dXJlU2xvdCA9IHdlYmdsU2xvdDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gYmluZFRleHR1cmUoIHdlYmdsVHlwZSwgd2ViZ2xUZXh0dXJlICkge1xuXG5cdFx0aWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgPT09IG51bGwgKSB7XG5cblx0XHRcdGFjdGl2ZVRleHR1cmUoKTtcblxuXHRcdH1cblxuXHRcdHZhciBib3VuZFRleHR1cmUgPSBjdXJyZW50Qm91bmRUZXh0dXJlc1sgY3VycmVudFRleHR1cmVTbG90IF07XG5cblx0XHRpZiAoIGJvdW5kVGV4dHVyZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRib3VuZFRleHR1cmUgPSB7IHR5cGU6IHVuZGVmaW5lZCwgdGV4dHVyZTogdW5kZWZpbmVkIH07XG5cdFx0XHRjdXJyZW50Qm91bmRUZXh0dXJlc1sgY3VycmVudFRleHR1cmVTbG90IF0gPSBib3VuZFRleHR1cmU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJvdW5kVGV4dHVyZS50eXBlICE9PSB3ZWJnbFR5cGUgfHwgYm91bmRUZXh0dXJlLnRleHR1cmUgIT09IHdlYmdsVGV4dHVyZSApIHtcblxuXHRcdFx0Z2wuYmluZFRleHR1cmUoIHdlYmdsVHlwZSwgd2ViZ2xUZXh0dXJlIHx8IGVtcHR5VGV4dHVyZXNbIHdlYmdsVHlwZSBdICk7XG5cblx0XHRcdGJvdW5kVGV4dHVyZS50eXBlID0gd2ViZ2xUeXBlO1xuXHRcdFx0Ym91bmRUZXh0dXJlLnRleHR1cmUgPSB3ZWJnbFRleHR1cmU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvbXByZXNzZWRUZXhJbWFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wuY29tcHJlc3NlZFRleEltYWdlMkQuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4SW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleEltYWdlMkQuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzY2lzc29yKCBzY2lzc29yICkge1xuXG5cdFx0aWYgKCBjdXJyZW50U2Npc3Nvci5lcXVhbHMoIHNjaXNzb3IgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGdsLnNjaXNzb3IoIHNjaXNzb3IueCwgc2Npc3Nvci55LCBzY2lzc29yLnosIHNjaXNzb3IudyApO1xuXHRcdFx0Y3VycmVudFNjaXNzb3IuY29weSggc2Npc3NvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB2aWV3cG9ydCggdmlld3BvcnQgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRWaWV3cG9ydC5lcXVhbHMoIHZpZXdwb3J0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC52aWV3cG9ydCggdmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQueiwgdmlld3BvcnQudyApO1xuXHRcdFx0Y3VycmVudFZpZXdwb3J0LmNvcHkoIHZpZXdwb3J0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gcmVzZXQoKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbmFibGVkQXR0cmlidXRlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGlmICggZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSA9PT0gMSApIHtcblxuXHRcdFx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoIGkgKTtcblx0XHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNhcGFiaWxpdGllcyA9IHt9O1xuXG5cdFx0Y29tcHJlc3NlZFRleHR1cmVGb3JtYXRzID0gbnVsbDtcblxuXHRcdGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdFx0Y3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuXHRcdGN1cnJlbnRCbGVuZGluZyA9IG51bGw7XG5cblx0XHRjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBudWxsO1xuXG5cdFx0Y29sb3JCdWZmZXIucmVzZXQoKTtcblx0XHRkZXB0aEJ1ZmZlci5yZXNldCgpO1xuXHRcdHN0ZW5jaWxCdWZmZXIucmVzZXQoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGJ1ZmZlcnM6IHtcblx0XHRcdGNvbG9yOiBjb2xvckJ1ZmZlcixcblx0XHRcdGRlcHRoOiBkZXB0aEJ1ZmZlcixcblx0XHRcdHN0ZW5jaWw6IHN0ZW5jaWxCdWZmZXJcblx0XHR9LFxuXG5cdFx0aW5pdEF0dHJpYnV0ZXM6IGluaXRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZTogZW5hYmxlQXR0cmlidXRlLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3I6IGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IsXG5cdFx0ZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXM6IGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZTogZW5hYmxlLFxuXHRcdGRpc2FibGU6IGRpc2FibGUsXG5cdFx0Z2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzOiBnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMsXG5cblx0XHR1c2VQcm9ncmFtOiB1c2VQcm9ncmFtLFxuXG5cdFx0c2V0QmxlbmRpbmc6IHNldEJsZW5kaW5nLFxuXHRcdHNldE1hdGVyaWFsOiBzZXRNYXRlcmlhbCxcblxuXHRcdHNldEZsaXBTaWRlZDogc2V0RmxpcFNpZGVkLFxuXHRcdHNldEN1bGxGYWNlOiBzZXRDdWxsRmFjZSxcblxuXHRcdHNldExpbmVXaWR0aDogc2V0TGluZVdpZHRoLFxuXHRcdHNldFBvbHlnb25PZmZzZXQ6IHNldFBvbHlnb25PZmZzZXQsXG5cblx0XHRzZXRTY2lzc29yVGVzdDogc2V0U2Npc3NvclRlc3QsXG5cblx0XHRhY3RpdmVUZXh0dXJlOiBhY3RpdmVUZXh0dXJlLFxuXHRcdGJpbmRUZXh0dXJlOiBiaW5kVGV4dHVyZSxcblx0XHRjb21wcmVzc2VkVGV4SW1hZ2UyRDogY29tcHJlc3NlZFRleEltYWdlMkQsXG5cdFx0dGV4SW1hZ2UyRDogdGV4SW1hZ2UyRCxcblxuXHRcdHNjaXNzb3I6IHNjaXNzb3IsXG5cdFx0dmlld3BvcnQ6IHZpZXdwb3J0LFxuXG5cdFx0cmVzZXQ6IHJlc2V0XG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xUZXh0dXJlcyggX2dsLCBleHRlbnNpb25zLCBzdGF0ZSwgcHJvcGVydGllcywgY2FwYWJpbGl0aWVzLCB1dGlscywgaW5mbyApIHtcblxuXHR2YXIgX2lzV2ViR0wyID0gKCB0eXBlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCAhPT0gJ3VuZGVmaW5lZCcgJiYgX2dsIGluc3RhbmNlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCApOyAvKiBnbG9iYWwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCAqL1xuXHR2YXIgX3ZpZGVvVGV4dHVyZXMgPSB7fTtcblx0dmFyIF9jYW52YXM7XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBjbGFtcFRvTWF4U2l6ZSggaW1hZ2UsIG1heFNpemUgKSB7XG5cblx0XHRpZiAoIGltYWdlLndpZHRoID4gbWF4U2l6ZSB8fCBpbWFnZS5oZWlnaHQgPiBtYXhTaXplICkge1xuXG5cdFx0XHRpZiAoICdkYXRhJyBpbiBpbWFnZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBpbWFnZSBpbiBEYXRhVGV4dHVyZSBpcyB0b28gYmlnICgnICsgaW1hZ2Uud2lkdGggKyAneCcgKyBpbWFnZS5oZWlnaHQgKyAnKS4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBXYXJuaW5nOiBTY2FsaW5nIHRocm91Z2ggdGhlIGNhbnZhcyB3aWxsIG9ubHkgd29yayB3aXRoIGltYWdlcyB0aGF0IHVzZVxuXHRcdFx0Ly8gcHJlbXVsdGlwbGllZCBhbHBoYS5cblxuXHRcdFx0dmFyIHNjYWxlID0gbWF4U2l6ZSAvIE1hdGgubWF4KCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICk7XG5cblx0XHRcdHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKTtcblx0XHRcdGNhbnZhcy53aWR0aCA9IE1hdGguZmxvb3IoIGltYWdlLndpZHRoICogc2NhbGUgKTtcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKCBpbWFnZS5oZWlnaHQgKiBzY2FsZSApO1xuXG5cdFx0XHR2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCAnMmQnICk7XG5cdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCApO1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBpbWFnZSBpcyB0b28gYmlnICgnICsgaW1hZ2Uud2lkdGggKyAneCcgKyBpbWFnZS5oZWlnaHQgKyAnKS4gUmVzaXplZCB0byAnICsgY2FudmFzLndpZHRoICsgJ3gnICsgY2FudmFzLmhlaWdodCwgaW1hZ2UgKTtcblxuXHRcdFx0cmV0dXJuIGNhbnZhcztcblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaXNQb3dlck9mVHdvKCBpbWFnZSApIHtcblxuXHRcdHJldHVybiBfTWF0aC5pc1Bvd2VyT2ZUd28oIGltYWdlLndpZHRoICkgJiYgX01hdGguaXNQb3dlck9mVHdvKCBpbWFnZS5oZWlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gbWFrZVBvd2VyT2ZUd28oIGltYWdlICkge1xuXG5cdFx0aWYgKCBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgfHwgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCB8fCBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwICkge1xuXG5cdFx0XHRpZiAoIF9jYW52YXMgPT09IHVuZGVmaW5lZCApIF9jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKTtcblxuXHRcdFx0X2NhbnZhcy53aWR0aCA9IF9NYXRoLmZsb29yUG93ZXJPZlR3byggaW1hZ2Uud2lkdGggKTtcblx0XHRcdF9jYW52YXMuaGVpZ2h0ID0gX01hdGguZmxvb3JQb3dlck9mVHdvKCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0dmFyIGNvbnRleHQgPSBfY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcblx0XHRcdGNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZSwgMCwgMCwgX2NhbnZhcy53aWR0aCwgX2NhbnZhcy5oZWlnaHQgKTtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogaW1hZ2UgaXMgbm90IHBvd2VyIG9mIHR3byAoJyArIGltYWdlLndpZHRoICsgJ3gnICsgaW1hZ2UuaGVpZ2h0ICsgJykuIFJlc2l6ZWQgdG8gJyArIF9jYW52YXMud2lkdGggKyAneCcgKyBfY2FudmFzLmhlaWdodCwgaW1hZ2UgKTtcblxuXHRcdFx0cmV0dXJuIF9jYW52YXM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleHR1cmVOZWVkc1Bvd2VyT2ZUd28oIHRleHR1cmUgKSB7XG5cblx0XHRyZXR1cm4gKCB0ZXh0dXJlLndyYXBTICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nIHx8IHRleHR1cmUud3JhcFQgIT09IENsYW1wVG9FZGdlV3JhcHBpbmcgKSB8fFxuXHRcdFx0KCB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgaXNQb3dlck9mVHdvICkge1xuXG5cdFx0cmV0dXJuIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICYmIGlzUG93ZXJPZlR3byAmJlxuXHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlcjtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVNaXBtYXAoIHRhcmdldCwgdGV4dHVyZSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdF9nbC5nZW5lcmF0ZU1pcG1hcCggdGFyZ2V0ICk7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0Ly8gTm90ZTogTWF0aC5sb2coIHggKSAqIE1hdGguTE9HMkUgdXNlZCBpbnN0ZWFkIG9mIE1hdGgubG9nMiggeCApIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUxMVxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBNYXRoLmxvZyggTWF0aC5tYXgoIHdpZHRoLCBoZWlnaHQgKSApICogTWF0aC5MT0cyRTtcblxuXHR9XG5cblx0Ly8gRmFsbGJhY2sgZmlsdGVycyBmb3Igbm9uLXBvd2VyLW9mLTIgdGV4dHVyZXNcblxuXHRmdW5jdGlvbiBmaWx0ZXJGYWxsYmFjayggZiApIHtcblxuXHRcdGlmICggZiA9PT0gTmVhcmVzdEZpbHRlciB8fCBmID09PSBOZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlciB8fCBmID09PSBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyICkge1xuXG5cdFx0XHRyZXR1cm4gX2dsLk5FQVJFU1Q7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gX2dsLkxJTkVBUjtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBvblRleHR1cmVEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdHZhciB0ZXh0dXJlID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0dGV4dHVyZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UgKTtcblxuXHRcdGRlYWxsb2NhdGVUZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgKSB7XG5cblx0XHRcdGRlbGV0ZSBfdmlkZW9UZXh0dXJlc1sgdGV4dHVyZS5pZCBdO1xuXG5cdFx0fVxuXG5cdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgLS07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25SZW5kZXJUYXJnZXREaXNwb3NlICk7XG5cblx0XHRkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdGluZm8ubWVtb3J5LnRleHR1cmVzIC0tO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVUZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pbWFnZSAmJiB0ZXh0dXJlUHJvcGVydGllcy5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlICkge1xuXG5cdFx0XHQvLyBjdWJlIHRleHR1cmVcblxuXHRcdFx0X2dsLmRlbGV0ZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIDJEIHRleHR1cmVcblxuXHRcdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0XHRfZ2wuZGVsZXRlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdC8vIHJlbW92ZSBhbGwgd2ViZ2wgcHJvcGVydGllc1xuXHRcdHByb3BlcnRpZXMucmVtb3ZlKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXG5cdFx0aWYgKCAhIHJlbmRlclRhcmdldCApIHJldHVybjtcblxuXHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2dsLmRlbGV0ZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICk7XG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApO1xuXG5cdFx0fVxuXG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvL1xuXG5cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlMkQoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkgdXBkYXRlVmlkZW9UZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHZhciBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdGlmICggaW1hZ2UgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyB1bmRlZmluZWQnLCB0ZXh0dXJlICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGltYWdlLmNvbXBsZXRlID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyBpbmNvbXBsZXRlJywgdGV4dHVyZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggX2dsLlRFWFRVUkUwICsgc2xvdCApO1xuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBfZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZUN1YmUoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmltYWdlLmxlbmd0aCA9PT0gNiApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHRcdGlmICggISB0ZXh0dXJlUHJvcGVydGllcy5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UgKTtcblxuXHRcdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG5cdFx0XHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIF9nbC5URVhUVVJFMCArIHNsb3QgKTtcblx0XHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCB0ZXh0dXJlUHJvcGVydGllcy5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlICk7XG5cblx0XHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdGV4dHVyZS5mbGlwWSApO1xuXG5cdFx0XHRcdHZhciBpc0NvbXByZXNzZWQgPSAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlICk7XG5cdFx0XHRcdHZhciBpc0RhdGFUZXh0dXJlID0gKCB0ZXh0dXJlLmltYWdlWyAwIF0gJiYgdGV4dHVyZS5pbWFnZVsgMCBdLmlzRGF0YVRleHR1cmUgKTtcblxuXHRcdFx0XHR2YXIgY3ViZUltYWdlID0gW107XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRcdGlmICggISBpc0NvbXByZXNzZWQgJiYgISBpc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHRjdWJlSW1hZ2VbIGkgXSA9IGNsYW1wVG9NYXhTaXplKCB0ZXh0dXJlLmltYWdlWyBpIF0sIGNhcGFiaWxpdGllcy5tYXhDdWJlbWFwU2l6ZSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y3ViZUltYWdlWyBpIF0gPSBpc0RhdGFUZXh0dXJlID8gdGV4dHVyZS5pbWFnZVsgaSBdLmltYWdlIDogdGV4dHVyZS5pbWFnZVsgaSBdO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgaW1hZ2UgPSBjdWJlSW1hZ2VbIDAgXSxcblx0XHRcdFx0XHRpc1Bvd2VyT2ZUd29JbWFnZSA9IGlzUG93ZXJPZlR3byggaW1hZ2UgKSxcblx0XHRcdFx0XHRnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0ICksXG5cdFx0XHRcdFx0Z2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cblx0XHRcdFx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCB0ZXh0dXJlLCBpc1Bvd2VyT2ZUd29JbWFnZSApO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoICEgaXNDb21wcmVzc2VkICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIDAsIGdsRm9ybWF0LCBjdWJlSW1hZ2VbIGkgXS53aWR0aCwgY3ViZUltYWdlWyBpIF0uaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIDAsIGdsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR2YXIgbWlwbWFwLCBtaXBtYXBzID0gY3ViZUltYWdlWyBpIF0ubWlwbWFwcztcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IG1pcG1hcHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdGV4dHVyZS5mb3JtYXQgIT09IFJHQkFGb3JtYXQgJiYgdGV4dHVyZS5mb3JtYXQgIT09IFJHQkZvcm1hdCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggc3RhdGUuZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzKCkuaW5kZXhPZiggZ2xGb3JtYXQgKSA+IC0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqLCBnbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnNldFRleHR1cmVDdWJlKCknICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqLCBnbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICEgaXNDb21wcmVzc2VkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IDA7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBtaXBtYXBzLmxlbmd0aCAtIDE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBpc1Bvd2VyT2ZUd29JbWFnZSApICkge1xuXG5cdFx0XHRcdFx0Ly8gV2UgYXNzdW1lIGltYWdlcyBmb3IgY3ViZSBtYXAgaGF2ZSB0aGUgc2FtZSBzaXplLlxuXHRcdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCwgdGV4dHVyZSwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLm9uVXBkYXRlICkgdGV4dHVyZS5vblVwZGF0ZSggdGV4dHVyZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIF9nbC5URVhUVVJFMCArIHNsb3QgKTtcblx0XHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCB0ZXh0dXJlUHJvcGVydGllcy5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZUN1YmVEeW5hbWljKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggX2dsLlRFWFRVUkUwICsgc2xvdCApO1xuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCwgcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUsIGlzUG93ZXJPZlR3b0ltYWdlICkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbjtcblxuXHRcdGlmICggaXNQb3dlck9mVHdvSW1hZ2UgKSB7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfV1JBUF9TLCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLndyYXBTICkgKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfV1JBUF9ULCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLndyYXBUICkgKTtcblxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLm1hZ0ZpbHRlciApICk7XG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIF9nbC5URVhUVVJFX01JTl9GSUxURVIsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmUubWluRmlsdGVyICkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfV1JBUF9TLCBfZ2wuQ0xBTVBfVE9fRURHRSApO1xuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9XUkFQX1QsIF9nbC5DTEFNUF9UT19FREdFICk7XG5cblx0XHRcdGlmICggdGV4dHVyZS53cmFwUyAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyB8fCB0ZXh0dXJlLndyYXBUICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS53cmFwUyBhbmQgVGV4dHVyZS53cmFwVCBzaG91bGQgYmUgc2V0IHRvIFRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmcuJywgdGV4dHVyZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZmlsdGVyRmFsbGJhY2soIHRleHR1cmUubWFnRmlsdGVyICkgKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZmlsdGVyRmFsbGJhY2soIHRleHR1cmUubWluRmlsdGVyICkgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS5taW5GaWx0ZXIgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5OZWFyZXN0RmlsdGVyIG9yIFRIUkVFLkxpbmVhckZpbHRlci4nLCB0ZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gKSB7XG5cblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgJiYgZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICkgPT09IG51bGwgKSByZXR1cm47XG5cdFx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gSGFsZkZsb2F0VHlwZSAmJiBleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyApID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUuYW5pc290cm9weSA+IDEgfHwgcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX2N1cnJlbnRBbmlzb3Ryb3B5ICkge1xuXG5cdFx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJmKCB0ZXh0dXJlVHlwZSwgZXh0ZW5zaW9uLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBNYXRoLm1pbiggdGV4dHVyZS5hbmlzb3Ryb3B5LCBjYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpICkgKTtcblx0XHRcdFx0cHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX2N1cnJlbnRBbmlzb3Ryb3B5ID0gdGV4dHVyZS5hbmlzb3Ryb3B5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9IHRydWU7XG5cblx0XHRcdHRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFXzJELCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdGV4dHVyZS5mbGlwWSApO1xuXHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0FMSUdOTUVOVCwgdGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgKTtcblxuXHRcdHZhciBpbWFnZSA9IGNsYW1wVG9NYXhTaXplKCB0ZXh0dXJlLmltYWdlLCBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZVNpemUgKTtcblxuXHRcdGlmICggdGV4dHVyZU5lZWRzUG93ZXJPZlR3byggdGV4dHVyZSApICYmIGlzUG93ZXJPZlR3byggaW1hZ2UgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGltYWdlID0gbWFrZVBvd2VyT2ZUd28oIGltYWdlICk7XG5cblx0XHR9XG5cblx0XHR2YXIgaXNQb3dlck9mVHdvSW1hZ2UgPSBpc1Bvd2VyT2ZUd28oIGltYWdlICksXG5cdFx0XHRnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0ICksXG5cdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCBfZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSwgaXNQb3dlck9mVHdvSW1hZ2UgKTtcblxuXHRcdHZhciBtaXBtYXAsIG1pcG1hcHMgPSB0ZXh0dXJlLm1pcG1hcHM7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNEZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdC8vIHBvcHVsYXRlIGRlcHRoIHRleHR1cmUgd2l0aCBkdW1teSBkYXRhXG5cblx0XHRcdHZhciBpbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSF9DT01QT05FTlQ7XG5cblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0aWYgKCAhIF9pc1dlYkdMMiApIHRocm93IG5ldyBFcnJvciggJ0Zsb2F0IERlcHRoIFRleHR1cmUgb25seSBzdXBwb3J0ZWQgaW4gV2ViR0wyLjAnICk7XG5cdFx0XHRcdGludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIX0NPTVBPTkVOVDMyRjtcblxuXHRcdFx0fSBlbHNlIGlmICggX2lzV2ViR0wyICkge1xuXG5cdFx0XHRcdC8vIFdlYkdMIDIuMCByZXF1aXJlcyBzaWduZWQgaW50ZXJuYWxmb3JtYXQgZm9yIGdsVGV4SW1hZ2UyRFxuXHRcdFx0XHRpbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSF9DT01QT05FTlQxNjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ID09PSBEZXB0aEZvcm1hdCAmJiBpbnRlcm5hbEZvcm1hdCA9PT0gX2dsLkRFUFRIX0NPTVBPTkVOVCApIHtcblxuXHRcdFx0XHQvLyBUaGUgZXJyb3IgSU5WQUxJRF9PUEVSQVRJT04gaXMgZ2VuZXJhdGVkIGJ5IHRleEltYWdlMkQgaWYgZm9ybWF0IGFuZCBpbnRlcm5hbGZvcm1hdCBhcmVcblx0XHRcdFx0Ly8gREVQVEhfQ09NUE9ORU5UIGFuZCB0eXBlIGlzIG5vdCBVTlNJR05FRF9TSE9SVCBvciBVTlNJR05FRF9JTlRcblx0XHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRcdGlmICggdGV4dHVyZS50eXBlICE9PSBVbnNpZ25lZFNob3J0VHlwZSAmJiB0ZXh0dXJlLnR5cGUgIT09IFVuc2lnbmVkSW50VHlwZSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFVzZSBVbnNpZ25lZFNob3J0VHlwZSBvciBVbnNpZ25lZEludFR5cGUgZm9yIERlcHRoRm9ybWF0IERlcHRoVGV4dHVyZS4nICk7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSBVbnNpZ25lZFNob3J0VHlwZTtcblx0XHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVwdGggc3RlbmNpbCB0ZXh0dXJlcyBuZWVkIHRoZSBERVBUSF9TVEVOQ0lMIGludGVybmFsIGZvcm1hdFxuXHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXG5cdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHRcdFx0aW50ZXJuYWxGb3JtYXQgPSBfZ2wuREVQVEhfU1RFTkNJTDtcblxuXHRcdFx0XHQvLyBUaGUgZXJyb3IgSU5WQUxJRF9PUEVSQVRJT04gaXMgZ2VuZXJhdGVkIGJ5IHRleEltYWdlMkQgaWYgZm9ybWF0IGFuZCBpbnRlcm5hbGZvcm1hdCBhcmVcblx0XHRcdFx0Ly8gREVQVEhfU1RFTkNJTCBhbmQgdHlwZSBpcyBub3QgVU5TSUdORURfSU5UXzI0XzhfV0VCR0wuXG5cdFx0XHRcdC8vIChodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2RlcHRoX3RleHR1cmUvKVxuXHRcdFx0XHRpZiAoIHRleHR1cmUudHlwZSAhPT0gVW5zaWduZWRJbnQyNDhUeXBlICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVXNlIFVuc2lnbmVkSW50MjQ4VHlwZSBmb3IgRGVwdGhTdGVuY2lsRm9ybWF0IERlcHRoVGV4dHVyZS4nICk7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSBVbnNpZ25lZEludDI0OFR5cGU7XG5cdFx0XHRcdFx0Z2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCBpbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHQvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZVxuXHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXG5cdFx0XHQvLyBzZXQgMCBsZXZlbCBtaXBtYXAgYW5kIHRoZW4gdXNlIEdMIHRvIGdlbmVyYXRlIG90aGVyIG1pcG1hcCBsZXZlbHNcblxuXHRcdFx0aWYgKCBtaXBtYXBzLmxlbmd0aCA+IDAgJiYgaXNQb3dlck9mVHdvSW1hZ2UgKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRtaXBtYXAgPSBtaXBtYXBzWyBpIF07XG5cdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIGdsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBtaXBtYXBzLmxlbmd0aCAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIDAsIGdsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICYmIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JGb3JtYXQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHN0YXRlLmdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0cygpLmluZGV4T2YoIGdsRm9ybWF0ICkgPiAtIDEgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgaSwgZ2xGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC51cGxvYWRUZXh0dXJlKCknICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCBnbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gcmVndWxhciBUZXh0dXJlIChpbWFnZSwgdmlkZW8sIGNhbnZhcylcblxuXHRcdFx0Ly8gdXNlIG1hbnVhbGx5IGNyZWF0ZWQgbWlwbWFwcyBpZiBhdmFpbGFibGVcblx0XHRcdC8vIGlmIHRoZXJlIGFyZSBubyBtYW51YWwgbWlwbWFwc1xuXHRcdFx0Ly8gc2V0IDAgbGV2ZWwgbWlwbWFwIGFuZCB0aGVuIHVzZSBHTCB0byBnZW5lcmF0ZSBvdGhlciBtaXBtYXAgbGV2ZWxzXG5cblx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICYmIGlzUG93ZXJPZlR3b0ltYWdlICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBpLCBnbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBtaXBtYXBzLmxlbmd0aCAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIDAsIGdsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApO1xuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIGlzUG93ZXJPZlR3b0ltYWdlICkgKSB7XG5cblx0XHRcdGdlbmVyYXRlTWlwbWFwKCBfZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0dGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLm9uVXBkYXRlICkgdGV4dHVyZS5vblVwZGF0ZSggdGV4dHVyZSApO1xuXG5cdH1cblxuXHQvLyBSZW5kZXIgdGFyZ2V0c1xuXG5cdC8vIFNldHVwIHN0b3JhZ2UgZm9yIHRhcmdldCB0ZXh0dXJlIGFuZCBiaW5kIGl0IHRvIGNvcnJlY3QgZnJhbWVidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIGZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQgKSB7XG5cblx0XHR2YXIgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCByZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQgKTtcblx0XHR2YXIgZ2xUeXBlID0gdXRpbHMuY29udmVydCggcmVuZGVyVGFyZ2V0LnRleHR1cmUudHlwZSApO1xuXHRcdHN0YXRlLnRleEltYWdlMkQoIHRleHR1cmVUYXJnZXQsIDAsIGdsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTtcblx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyICk7XG5cdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRlJBTUVCVUZGRVIsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQsIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlLCAwICk7XG5cdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBudWxsICk7XG5cblx0fVxuXG5cdC8vIFNldHVwIHN0b3JhZ2UgZm9yIGludGVybmFsIGRlcHRoL3N0ZW5jaWwgYnVmZmVycyBhbmQgYmluZCB0byBjb3JyZWN0IGZyYW1lYnVmZmVyXG5cdGZ1bmN0aW9uIHNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggcmVuZGVyYnVmZmVyLCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciAmJiAhIHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyICkge1xuXG5cdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggX2dsLlJFTkRFUkJVRkZFUiwgX2dsLkRFUFRIX0NPTVBPTkVOVDE2LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuREVQVEhfQVRUQUNITUVOVCwgX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgJiYgcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgKSB7XG5cblx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKCBfZ2wuUkVOREVSQlVGRkVSLCBfZ2wuREVQVEhfU1RFTkNJTCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCwgX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGSVhNRTogV2UgZG9uJ3Qgc3VwcG9ydCAhZGVwdGggIXN0ZW5jaWxcblx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKCBfZ2wuUkVOREVSQlVGRkVSLCBfZ2wuUkdCQTQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIF9nbC5SRU5ERVJCVUZGRVIsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gU2V0dXAgcmVzb3VyY2VzIGZvciBhIERlcHRoIFRleHR1cmUgZm9yIGEgRkJPIChuZWVkcyBhbiBleHRlbnNpb24pXG5cdGZ1bmN0aW9uIHNldHVwRGVwdGhUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dmFyIGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSApO1xuXHRcdGlmICggaXNDdWJlICkgdGhyb3cgbmV3IEVycm9yKCAnRGVwdGggVGV4dHVyZSB3aXRoIGN1YmUgcmVuZGVyIHRhcmdldHMgaXMgbm90IHN1cHBvcnRlZCcgKTtcblxuXHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTtcblxuXHRcdGlmICggISAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgJiYgcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pc0RlcHRoVGV4dHVyZSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuRGVwdGhUZXh0dXJlJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBsb2FkIGFuIGVtcHR5IGRlcHRoIHRleHR1cmUgd2l0aCBmcmFtZWJ1ZmZlciBzaXplXG5cdFx0aWYgKCAhIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmUgfHxcblx0XHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCAhPT0gcmVuZGVyVGFyZ2V0LndpZHRoIHx8XG5cdFx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ICE9PSByZW5kZXJUYXJnZXQuaGVpZ2h0ICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgPSByZW5kZXJUYXJnZXQuaGVpZ2h0O1xuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRzZXRUZXh0dXJlMkQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdHZhciB3ZWJnbERlcHRoVGV4dHVyZSA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmU7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aEZvcm1hdCApIHtcblxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5ERVBUSF9BVFRBQ0hNRU5ULCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xEZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xEZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Vua25vd24gZGVwdGhUZXh0dXJlIGZvcm1hdCcgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gU2V0dXAgR0wgcmVzb3VyY2VzIGZvciBhIG5vbi10ZXh0dXJlIGRlcHRoIGJ1ZmZlclxuXHRmdW5jdGlvbiBzZXR1cERlcHRoUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdHZhciBpc0N1YmUgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSA9PT0gdHJ1ZSApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIGlzQ3ViZSApIHRocm93IG5ldyBFcnJvciggJ3RhcmdldC5kZXB0aFRleHR1cmUgbm90IHN1cHBvcnRlZCBpbiBDdWJlIHJlbmRlciB0YXJnZXRzJyApO1xuXG5cdFx0XHRzZXR1cERlcHRoVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICk7XG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXJbIGkgXSA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblx0XHRcdFx0XHRzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0sIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXHRcdFx0XHRzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBudWxsICk7XG5cblx0fVxuXG5cdC8vIFNldCB1cCBHTCByZXNvdXJjZXMgZm9yIHRoZSByZW5kZXIgdGFyZ2V0XG5cdGZ1bmN0aW9uIHNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTtcblxuXHRcdHJlbmRlclRhcmdldC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSApO1xuXG5cdFx0dGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG5cdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHR2YXIgaXNDdWJlID0gKCByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgPT09IHRydWUgKTtcblx0XHR2YXIgaXNUYXJnZXRQb3dlck9mVHdvID0gaXNQb3dlck9mVHdvKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdC8vIFNldHVwIGZyYW1lYnVmZmVyXG5cblx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHR9XG5cblx0XHQvLyBTZXR1cCBjb2xvciBidWZmZXJcblxuXHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHJlbmRlclRhcmdldC50ZXh0dXJlLCBpc1RhcmdldFBvd2VyT2ZUd28gKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSwgcmVuZGVyVGFyZ2V0LCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHJlbmRlclRhcmdldC50ZXh0dXJlLCBpc1RhcmdldFBvd2VyT2ZUd28gKSApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHJlbmRlclRhcmdldC50ZXh0dXJlLCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIG51bGwgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBfZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCBfZ2wuVEVYVFVSRV8yRCwgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIGlzVGFyZ2V0UG93ZXJPZlR3byApO1xuXHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfMkQgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHJlbmRlclRhcmdldC50ZXh0dXJlLCBpc1RhcmdldFBvd2VyT2ZUd28gKSApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggX2dsLlRFWFRVUkVfMkQsIHJlbmRlclRhcmdldC50ZXh0dXJlLCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfMkQsIG51bGwgKTtcblxuXHRcdH1cblxuXHRcdC8vIFNldHVwIGRlcHRoIGFuZCBzdGVuY2lsIGJ1ZmZlcnNcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRzZXR1cERlcHRoUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHR2YXIgdGV4dHVyZSA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXHRcdHZhciBpc1RhcmdldFBvd2VyT2ZUd28gPSBpc1Bvd2VyT2ZUd28oIHJlbmRlclRhcmdldCApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUsIGlzVGFyZ2V0UG93ZXJPZlR3byApICkge1xuXG5cdFx0XHR2YXIgdGFyZ2V0ID0gcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID8gX2dsLlRFWFRVUkVfQ1VCRV9NQVAgOiBfZ2wuVEVYVFVSRV8yRDtcblx0XHRcdHZhciB3ZWJnbFRleHR1cmUgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlO1xuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggdGFyZ2V0LCB3ZWJnbFRleHR1cmUgKTtcblx0XHRcdGdlbmVyYXRlTWlwbWFwKCB0YXJnZXQsIHRleHR1cmUsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIHRhcmdldCwgbnVsbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKSB7XG5cblx0XHR2YXIgaWQgPSB0ZXh0dXJlLmlkO1xuXHRcdHZhciBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0Ly8gQ2hlY2sgdGhlIGxhc3QgZnJhbWUgd2UgdXBkYXRlZCB0aGUgVmlkZW9UZXh0dXJlXG5cblx0XHRpZiAoIF92aWRlb1RleHR1cmVzWyBpZCBdICE9PSBmcmFtZSApIHtcblxuXHRcdFx0X3ZpZGVvVGV4dHVyZXNbIGlkIF0gPSBmcmFtZTtcblx0XHRcdHRleHR1cmUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHRoaXMuc2V0VGV4dHVyZTJEID0gc2V0VGV4dHVyZTJEO1xuXHR0aGlzLnNldFRleHR1cmVDdWJlID0gc2V0VGV4dHVyZUN1YmU7XG5cdHRoaXMuc2V0VGV4dHVyZUN1YmVEeW5hbWljID0gc2V0VGV4dHVyZUN1YmVEeW5hbWljO1xuXHR0aGlzLnNldHVwUmVuZGVyVGFyZ2V0ID0gc2V0dXBSZW5kZXJUYXJnZXQ7XG5cdHRoaXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwID0gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciB0aGVzcGl0ZSAvIGh0dHA6Ly93d3cudHdpdHRlci5jb20vdGhlc3BpdGVcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFV0aWxzKCBnbCwgZXh0ZW5zaW9ucyApIHtcblxuXHRmdW5jdGlvbiBjb252ZXJ0KCBwICkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbjtcblxuXHRcdGlmICggcCA9PT0gUmVwZWF0V3JhcHBpbmcgKSByZXR1cm4gZ2wuUkVQRUFUO1xuXHRcdGlmICggcCA9PT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyApIHJldHVybiBnbC5DTEFNUF9UT19FREdFO1xuXHRcdGlmICggcCA9PT0gTWlycm9yZWRSZXBlYXRXcmFwcGluZyApIHJldHVybiBnbC5NSVJST1JFRF9SRVBFQVQ7XG5cblx0XHRpZiAoIHAgPT09IE5lYXJlc3RGaWx0ZXIgKSByZXR1cm4gZ2wuTkVBUkVTVDtcblx0XHRpZiAoIHAgPT09IE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyICkgcmV0dXJuIGdsLk5FQVJFU1RfTUlQTUFQX05FQVJFU1Q7XG5cdFx0aWYgKCBwID09PSBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyICkgcmV0dXJuIGdsLk5FQVJFU1RfTUlQTUFQX0xJTkVBUjtcblxuXHRcdGlmICggcCA9PT0gTGluZWFyRmlsdGVyICkgcmV0dXJuIGdsLkxJTkVBUjtcblx0XHRpZiAoIHAgPT09IExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIgKSByZXR1cm4gZ2wuTElORUFSX01JUE1BUF9ORUFSRVNUO1xuXHRcdGlmICggcCA9PT0gTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyICkgcmV0dXJuIGdsLkxJTkVBUl9NSVBNQVBfTElORUFSO1xuXG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEJ5dGVUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZFNob3J0NDQ0NFR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlRfNF80XzRfNDtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVF81XzVfNV8xO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDU2NVR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlRfNV82XzU7XG5cblx0XHRpZiAoIHAgPT09IEJ5dGVUeXBlICkgcmV0dXJuIGdsLkJZVEU7XG5cdFx0aWYgKCBwID09PSBTaG9ydFR5cGUgKSByZXR1cm4gZ2wuU0hPUlQ7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZFNob3J0VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVDtcblx0XHRpZiAoIHAgPT09IEludFR5cGUgKSByZXR1cm4gZ2wuSU5UO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRJbnRUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX0lOVDtcblx0XHRpZiAoIHAgPT09IEZsb2F0VHlwZSApIHJldHVybiBnbC5GTE9BVDtcblxuXHRcdGlmICggcCA9PT0gSGFsZkZsb2F0VHlwZSApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0JyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHJldHVybiBleHRlbnNpb24uSEFMRl9GTE9BVF9PRVM7XG5cblx0XHR9XG5cblx0XHRpZiAoIHAgPT09IEFscGhhRm9ybWF0ICkgcmV0dXJuIGdsLkFMUEhBO1xuXHRcdGlmICggcCA9PT0gUkdCRm9ybWF0ICkgcmV0dXJuIGdsLlJHQjtcblx0XHRpZiAoIHAgPT09IFJHQkFGb3JtYXQgKSByZXR1cm4gZ2wuUkdCQTtcblx0XHRpZiAoIHAgPT09IEx1bWluYW5jZUZvcm1hdCApIHJldHVybiBnbC5MVU1JTkFOQ0U7XG5cdFx0aWYgKCBwID09PSBMdW1pbmFuY2VBbHBoYUZvcm1hdCApIHJldHVybiBnbC5MVU1JTkFOQ0VfQUxQSEE7XG5cdFx0aWYgKCBwID09PSBEZXB0aEZvcm1hdCApIHJldHVybiBnbC5ERVBUSF9DT01QT05FTlQ7XG5cdFx0aWYgKCBwID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSByZXR1cm4gZ2wuREVQVEhfU1RFTkNJTDtcblxuXHRcdGlmICggcCA9PT0gQWRkRXF1YXRpb24gKSByZXR1cm4gZ2wuRlVOQ19BREQ7XG5cdFx0aWYgKCBwID09PSBTdWJ0cmFjdEVxdWF0aW9uICkgcmV0dXJuIGdsLkZVTkNfU1VCVFJBQ1Q7XG5cdFx0aWYgKCBwID09PSBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiApIHJldHVybiBnbC5GVU5DX1JFVkVSU0VfU1VCVFJBQ1Q7XG5cblx0XHRpZiAoIHAgPT09IFplcm9GYWN0b3IgKSByZXR1cm4gZ2wuWkVSTztcblx0XHRpZiAoIHAgPT09IE9uZUZhY3RvciApIHJldHVybiBnbC5PTkU7XG5cdFx0aWYgKCBwID09PSBTcmNDb2xvckZhY3RvciApIHJldHVybiBnbC5TUkNfQ09MT1I7XG5cdFx0aWYgKCBwID09PSBPbmVNaW51c1NyY0NvbG9yRmFjdG9yICkgcmV0dXJuIGdsLk9ORV9NSU5VU19TUkNfQ09MT1I7XG5cdFx0aWYgKCBwID09PSBTcmNBbHBoYUZhY3RvciApIHJldHVybiBnbC5TUkNfQUxQSEE7XG5cdFx0aWYgKCBwID09PSBPbmVNaW51c1NyY0FscGhhRmFjdG9yICkgcmV0dXJuIGdsLk9ORV9NSU5VU19TUkNfQUxQSEE7XG5cdFx0aWYgKCBwID09PSBEc3RBbHBoYUZhY3RvciApIHJldHVybiBnbC5EU1RfQUxQSEE7XG5cdFx0aWYgKCBwID09PSBPbmVNaW51c0RzdEFscGhhRmFjdG9yICkgcmV0dXJuIGdsLk9ORV9NSU5VU19EU1RfQUxQSEE7XG5cblx0XHRpZiAoIHAgPT09IERzdENvbG9yRmFjdG9yICkgcmV0dXJuIGdsLkRTVF9DT0xPUjtcblx0XHRpZiAoIHAgPT09IE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IgKSByZXR1cm4gZ2wuT05FX01JTlVTX0RTVF9DT0xPUjtcblx0XHRpZiAoIHAgPT09IFNyY0FscGhhU2F0dXJhdGVGYWN0b3IgKSByZXR1cm4gZ2wuU1JDX0FMUEhBX1NBVFVSQVRFO1xuXG5cdFx0aWYgKCBwID09PSBSR0JfUzNUQ19EWFQxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBSR0JfRVRDMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNHg0X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNXg0X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNXg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzh4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ184eDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ184eDhfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzEweDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4MTBfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHAgPT09IE1pbkVxdWF0aW9uIHx8IHAgPT09IE1heEVxdWF0aW9uICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF9ibGVuZF9taW5tYXgnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gTWluRXF1YXRpb24gKSByZXR1cm4gZXh0ZW5zaW9uLk1JTl9FWFQ7XG5cdFx0XHRcdGlmICggcCA9PT0gTWF4RXF1YXRpb24gKSByZXR1cm4gZXh0ZW5zaW9uLk1BWF9FWFQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcCA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkgcmV0dXJuIGV4dGVuc2lvbi5VTlNJR05FRF9JTlRfMjRfOF9XRUJHTDtcblxuXHRcdH1cblxuXHRcdHJldHVybiAwO1xuXG5cdH1cblxuXHRyZXR1cm4geyBjb252ZXJ0OiBjb252ZXJ0IH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEdyb3VwKCkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnR3JvdXAnO1xuXG59XG5cbkdyb3VwLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEdyb3VwLFxuXG5cdGlzR3JvdXA6IHRydWVcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGdyZWdnbWFuIC8gaHR0cDovL2dhbWVzLmdyZWdnbWFuLmNvbS9cbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApIHtcblxuXHRDYW1lcmEuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQZXJzcGVjdGl2ZUNhbWVyYSc7XG5cblx0dGhpcy5mb3YgPSBmb3YgIT09IHVuZGVmaW5lZCA/IGZvdiA6IDUwO1xuXHR0aGlzLnpvb20gPSAxO1xuXG5cdHRoaXMubmVhciA9IG5lYXIgIT09IHVuZGVmaW5lZCA/IG5lYXIgOiAwLjE7XG5cdHRoaXMuZmFyID0gZmFyICE9PSB1bmRlZmluZWQgPyBmYXIgOiAyMDAwO1xuXHR0aGlzLmZvY3VzID0gMTA7XG5cblx0dGhpcy5hc3BlY3QgPSBhc3BlY3QgIT09IHVuZGVmaW5lZCA/IGFzcGVjdCA6IDE7XG5cdHRoaXMudmlldyA9IG51bGw7XG5cblx0dGhpcy5maWxtR2F1Z2UgPSAzNTtcdC8vIHdpZHRoIG9mIHRoZSBmaWxtIChkZWZhdWx0IGluIG1pbGxpbWV0ZXJzKVxuXHR0aGlzLmZpbG1PZmZzZXQgPSAwO1x0Ly8gaG9yaXpvbnRhbCBmaWxtIG9mZnNldCAoc2FtZSB1bml0IGFzIGdhdWdlKVxuXG5cdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG59XG5cblBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIENhbWVyYS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBQZXJzcGVjdGl2ZUNhbWVyYSxcblxuXHRpc1BlcnNwZWN0aXZlQ2FtZXJhOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRDYW1lcmEucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuZm92ID0gc291cmNlLmZvdjtcblx0XHR0aGlzLnpvb20gPSBzb3VyY2Uuem9vbTtcblxuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xuXHRcdHRoaXMuZmFyID0gc291cmNlLmZhcjtcblx0XHR0aGlzLmZvY3VzID0gc291cmNlLmZvY3VzO1xuXG5cdFx0dGhpcy5hc3BlY3QgPSBzb3VyY2UuYXNwZWN0O1xuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApO1xuXG5cdFx0dGhpcy5maWxtR2F1Z2UgPSBzb3VyY2UuZmlsbUdhdWdlO1xuXHRcdHRoaXMuZmlsbU9mZnNldCA9IHNvdXJjZS5maWxtT2Zmc2V0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvKipcblx0ICogU2V0cyB0aGUgRk9WIGJ5IGZvY2FsIGxlbmd0aCBpbiByZXNwZWN0IHRvIHRoZSBjdXJyZW50IC5maWxtR2F1Z2UuXG5cdCAqXG5cdCAqIFRoZSBkZWZhdWx0IGZpbG0gZ2F1Z2UgaXMgMzUsIHNvIHRoYXQgdGhlIGZvY2FsIGxlbmd0aCBjYW4gYmUgc3BlY2lmaWVkIGZvclxuXHQgKiBhIDM1bW0gKGZ1bGwgZnJhbWUpIGNhbWVyYS5cblx0ICpcblx0ICogVmFsdWVzIGZvciBmb2NhbCBsZW5ndGggYW5kIGZpbG0gZ2F1Z2UgbXVzdCBoYXZlIHRoZSBzYW1lIHVuaXQuXG5cdCAqL1xuXHRzZXRGb2NhbExlbmd0aDogZnVuY3Rpb24gKCBmb2NhbExlbmd0aCApIHtcblxuXHRcdC8vIHNlZSBodHRwOi8vd3d3LmJvYmF0a2lucy5jb20vcGhvdG9ncmFwaHkvdGVjaG5pY2FsL2ZpZWxkX29mX3ZpZXcuaHRtbFxuXHRcdHZhciB2RXh0ZW50U2xvcGUgPSAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIGZvY2FsTGVuZ3RoO1xuXG5cdFx0dGhpcy5mb3YgPSBfTWF0aC5SQUQyREVHICogMiAqIE1hdGguYXRhbiggdkV4dGVudFNsb3BlICk7XG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHQvKipcblx0ICogQ2FsY3VsYXRlcyB0aGUgZm9jYWwgbGVuZ3RoIGZyb20gdGhlIGN1cnJlbnQgLmZvdiBhbmQgLmZpbG1HYXVnZS5cblx0ICovXG5cdGdldEZvY2FsTGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdkV4dGVudFNsb3BlID0gTWF0aC50YW4oIF9NYXRoLkRFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApO1xuXG5cdFx0cmV0dXJuIDAuNSAqIHRoaXMuZ2V0RmlsbUhlaWdodCgpIC8gdkV4dGVudFNsb3BlO1xuXG5cdH0sXG5cblx0Z2V0RWZmZWN0aXZlRk9WOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX01hdGguUkFEMkRFRyAqIDIgKiBNYXRoLmF0YW4oXG5cdFx0XHRNYXRoLnRhbiggX01hdGguREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICkgLyB0aGlzLnpvb20gKTtcblxuXHR9LFxuXG5cdGdldEZpbG1XaWR0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gZmlsbSBub3QgY29tcGxldGVseSBjb3ZlcmVkIGluIHBvcnRyYWl0IGZvcm1hdCAoYXNwZWN0IDwgMSlcblx0XHRyZXR1cm4gdGhpcy5maWxtR2F1Z2UgKiBNYXRoLm1pbiggdGhpcy5hc3BlY3QsIDEgKTtcblxuXHR9LFxuXG5cdGdldEZpbG1IZWlnaHQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGZpbG0gbm90IGNvbXBsZXRlbHkgY292ZXJlZCBpbiBsYW5kc2NhcGUgZm9ybWF0IChhc3BlY3QgPiAxKVxuXHRcdHJldHVybiB0aGlzLmZpbG1HYXVnZSAvIE1hdGgubWF4KCB0aGlzLmFzcGVjdCwgMSApO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldHMgYW4gb2Zmc2V0IGluIGEgbGFyZ2VyIGZydXN0dW0uIFRoaXMgaXMgdXNlZnVsIGZvciBtdWx0aS13aW5kb3cgb3Jcblx0ICogbXVsdGktbW9uaXRvci9tdWx0aS1tYWNoaW5lIHNldHVwcy5cblx0ICpcblx0ICogRm9yIGV4YW1wbGUsIGlmIHlvdSBoYXZlIDN4MiBtb25pdG9ycyBhbmQgZWFjaCBtb25pdG9yIGlzIDE5MjB4MTA4MCBhbmRcblx0ICogdGhlIG1vbml0b3JzIGFyZSBpbiBncmlkIGxpa2UgdGhpc1xuXHQgKlxuXHQgKiAgICstLS0rLS0tKy0tLStcblx0ICogICB8IEEgfCBCIHwgQyB8XG5cdCAqICAgKy0tLSstLS0rLS0tK1xuXHQgKiAgIHwgRCB8IEUgfCBGIHxcblx0ICogICArLS0tKy0tLSstLS0rXG5cdCAqXG5cdCAqIHRoZW4gZm9yIGVhY2ggbW9uaXRvciB5b3Ugd291bGQgY2FsbCBpdCBsaWtlIHRoaXNcblx0ICpcblx0ICogICB2YXIgdyA9IDE5MjA7XG5cdCAqICAgdmFyIGggPSAxMDgwO1xuXHQgKiAgIHZhciBmdWxsV2lkdGggPSB3ICogMztcblx0ICogICB2YXIgZnVsbEhlaWdodCA9IGggKiAyO1xuXHQgKlxuXHQgKiAgIC0tQS0tXG5cdCAqICAgY2FtZXJhLnNldE9mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMCwgaCAqIDAsIHcsIGggKTtcblx0ICogICAtLUItLVxuXHQgKiAgIGNhbWVyYS5zZXRPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDEsIGggKiAwLCB3LCBoICk7XG5cdCAqICAgLS1DLS1cblx0ICogICBjYW1lcmEuc2V0T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAyLCBoICogMCwgdywgaCApO1xuXHQgKiAgIC0tRC0tXG5cdCAqICAgY2FtZXJhLnNldE9mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMCwgaCAqIDEsIHcsIGggKTtcblx0ICogICAtLUUtLVxuXHQgKiAgIGNhbWVyYS5zZXRPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDEsIGggKiAxLCB3LCBoICk7XG5cdCAqICAgLS1GLS1cblx0ICogICBjYW1lcmEuc2V0T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAyLCBoICogMSwgdywgaCApO1xuXHQgKlxuXHQgKiAgIE5vdGUgdGhlcmUgaXMgbm8gcmVhc29uIG1vbml0b3JzIGhhdmUgdG8gYmUgdGhlIHNhbWUgc2l6ZSBvciBpbiBhIGdyaWQuXG5cdCAqL1xuXHRzZXRWaWV3T2Zmc2V0OiBmdW5jdGlvbiAoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdHRoaXMuYXNwZWN0ID0gZnVsbFdpZHRoIC8gZnVsbEhlaWdodDtcblxuXHRcdGlmICggdGhpcy52aWV3ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcgPSB7XG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXG5cdFx0XHRcdGZ1bGxXaWR0aDogMSxcblx0XHRcdFx0ZnVsbEhlaWdodDogMSxcblx0XHRcdFx0b2Zmc2V0WDogMCxcblx0XHRcdFx0b2Zmc2V0WTogMCxcblx0XHRcdFx0d2lkdGg6IDEsXG5cdFx0XHRcdGhlaWdodDogMVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlldy5lbmFibGVkID0gdHJ1ZTtcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xuXHRcdHRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WCA9IHg7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xuXHRcdHRoaXMudmlldy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMudmlldy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9LFxuXG5cdGNsZWFyVmlld09mZnNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9LFxuXG5cdHVwZGF0ZVByb2plY3Rpb25NYXRyaXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBuZWFyID0gdGhpcy5uZWFyLFxuXHRcdFx0dG9wID0gbmVhciAqIE1hdGgudGFuKFxuXHRcdFx0XHRfTWF0aC5ERUcyUkFEICogMC41ICogdGhpcy5mb3YgKSAvIHRoaXMuem9vbSxcblx0XHRcdGhlaWdodCA9IDIgKiB0b3AsXG5cdFx0XHR3aWR0aCA9IHRoaXMuYXNwZWN0ICogaGVpZ2h0LFxuXHRcdFx0bGVmdCA9IC0gMC41ICogd2lkdGgsXG5cdFx0XHR2aWV3ID0gdGhpcy52aWV3O1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgJiYgdGhpcy52aWV3LmVuYWJsZWQgKSB7XG5cblx0XHRcdHZhciBmdWxsV2lkdGggPSB2aWV3LmZ1bGxXaWR0aCxcblx0XHRcdFx0ZnVsbEhlaWdodCA9IHZpZXcuZnVsbEhlaWdodDtcblxuXHRcdFx0bGVmdCArPSB2aWV3Lm9mZnNldFggKiB3aWR0aCAvIGZ1bGxXaWR0aDtcblx0XHRcdHRvcCAtPSB2aWV3Lm9mZnNldFkgKiBoZWlnaHQgLyBmdWxsSGVpZ2h0O1xuXHRcdFx0d2lkdGggKj0gdmlldy53aWR0aCAvIGZ1bGxXaWR0aDtcblx0XHRcdGhlaWdodCAqPSB2aWV3LmhlaWdodCAvIGZ1bGxIZWlnaHQ7XG5cblx0XHR9XG5cblx0XHR2YXIgc2tldyA9IHRoaXMuZmlsbU9mZnNldDtcblx0XHRpZiAoIHNrZXcgIT09IDAgKSBsZWZ0ICs9IG5lYXIgKiBza2V3IC8gdGhpcy5nZXRGaWxtV2lkdGgoKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlUGVyc3BlY3RpdmUoIGxlZnQsIGxlZnQgKyB3aWR0aCwgdG9wLCB0b3AgLSBoZWlnaHQsIG5lYXIsIHRoaXMuZmFyICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5mb3YgPSB0aGlzLmZvdjtcblx0XHRkYXRhLm9iamVjdC56b29tID0gdGhpcy56b29tO1xuXG5cdFx0ZGF0YS5vYmplY3QubmVhciA9IHRoaXMubmVhcjtcblx0XHRkYXRhLm9iamVjdC5mYXIgPSB0aGlzLmZhcjtcblx0XHRkYXRhLm9iamVjdC5mb2N1cyA9IHRoaXMuZm9jdXM7XG5cblx0XHRkYXRhLm9iamVjdC5hc3BlY3QgPSB0aGlzLmFzcGVjdDtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkgZGF0YS5vYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLnZpZXcgKTtcblxuXHRcdGRhdGEub2JqZWN0LmZpbG1HYXVnZSA9IHRoaXMuZmlsbUdhdWdlO1xuXHRcdGRhdGEub2JqZWN0LmZpbG1PZmZzZXQgPSB0aGlzLmZpbG1PZmZzZXQ7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEFycmF5Q2FtZXJhKCBhcnJheSApIHtcblxuXHRQZXJzcGVjdGl2ZUNhbWVyYS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5jYW1lcmFzID0gYXJyYXkgfHwgW107XG5cbn1cblxuQXJyYXlDYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQXJyYXlDYW1lcmEsXG5cblx0aXNBcnJheUNhbWVyYTogdHJ1ZVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJWUk1hbmFnZXIoIHJlbmRlcmVyICkge1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0dmFyIGRldmljZSA9IG51bGw7XG5cdHZhciBmcmFtZURhdGEgPSBudWxsO1xuXG5cdHZhciBwb3NlVGFyZ2V0ID0gbnVsbDtcblxuXHR2YXIgY29udHJvbGxlcnMgPSBbXTtcblx0dmFyIHN0YW5kaW5nTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0dmFyIHN0YW5kaW5nTWF0cml4SW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0aWYgKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAnVlJGcmFtZURhdGEnIGluIHdpbmRvdyApIHtcblxuXHRcdGZyYW1lRGF0YSA9IG5ldyB3aW5kb3cuVlJGcmFtZURhdGEoKTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCBvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UsIGZhbHNlICk7XG5cblx0fVxuXG5cdHZhciBtYXRyaXhXb3JsZEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXHR2YXIgdGVtcFF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHR2YXIgdGVtcFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRjYW1lcmFMLmJvdW5kcyA9IG5ldyBWZWN0b3I0KCAwLjAsIDAuMCwgMC41LCAxLjAgKTtcblx0Y2FtZXJhTC5sYXllcnMuZW5hYmxlKCAxICk7XG5cblx0dmFyIGNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0Y2FtZXJhUi5ib3VuZHMgPSBuZXcgVmVjdG9yNCggMC41LCAwLjAsIDAuNSwgMS4wICk7XG5cdGNhbWVyYVIubGF5ZXJzLmVuYWJsZSggMiApO1xuXG5cdHZhciBjYW1lcmFWUiA9IG5ldyBBcnJheUNhbWVyYSggWyBjYW1lcmFMLCBjYW1lcmFSIF0gKTtcblx0Y2FtZXJhVlIubGF5ZXJzLmVuYWJsZSggMSApO1xuXHRjYW1lcmFWUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBpc1ByZXNlbnRpbmcoKSB7XG5cblx0XHRyZXR1cm4gZGV2aWNlICE9PSBudWxsICYmIGRldmljZS5pc1ByZXNlbnRpbmcgPT09IHRydWU7XG5cblx0fVxuXG5cdHZhciBjdXJyZW50U2l6ZSwgY3VycmVudFBpeGVsUmF0aW87XG5cblx0ZnVuY3Rpb24gb25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlKCkge1xuXG5cdFx0aWYgKCBpc1ByZXNlbnRpbmcoKSApIHtcblxuXHRcdFx0dmFyIGV5ZVBhcmFtZXRlcnMgPSBkZXZpY2UuZ2V0RXllUGFyYW1ldGVycyggJ2xlZnQnICk7XG5cdFx0XHR2YXIgcmVuZGVyV2lkdGggPSBleWVQYXJhbWV0ZXJzLnJlbmRlcldpZHRoO1xuXHRcdFx0dmFyIHJlbmRlckhlaWdodCA9IGV5ZVBhcmFtZXRlcnMucmVuZGVySGVpZ2h0O1xuXG5cdFx0XHRjdXJyZW50UGl4ZWxSYXRpbyA9IHJlbmRlcmVyLmdldFBpeGVsUmF0aW8oKTtcblx0XHRcdGN1cnJlbnRTaXplID0gcmVuZGVyZXIuZ2V0U2l6ZSgpO1xuXG5cdFx0XHRyZW5kZXJlci5zZXREcmF3aW5nQnVmZmVyU2l6ZSggcmVuZGVyV2lkdGggKiAyLCByZW5kZXJIZWlnaHQsIDEgKTtcblxuXHRcdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZS5lbmFibGVkICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXREcmF3aW5nQnVmZmVyU2l6ZSggY3VycmVudFNpemUud2lkdGgsIGN1cnJlbnRTaXplLmhlaWdodCwgY3VycmVudFBpeGVsUmF0aW8gKTtcblxuXHRcdFx0YW5pbWF0aW9uLnN0b3AoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHR2YXIgaXNUcmlnZ2VyUHJlc3NlZCA9IGZhbHNlO1xuXG5cdGZ1bmN0aW9uIGZpbmRHYW1lcGFkKCBpZCApIHtcblxuXHRcdHZhciBnYW1lcGFkcyA9IG5hdmlnYXRvci5nZXRHYW1lcGFkcyAmJiBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaiA9IDAsIGwgPSBnYW1lcGFkcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZ2FtZXBhZCA9IGdhbWVwYWRzWyBpIF07XG5cblx0XHRcdGlmICggZ2FtZXBhZCAmJiAoIGdhbWVwYWQuaWQgPT09ICdEYXlkcmVhbSBDb250cm9sbGVyJyB8fFxuXHRcdFx0XHRnYW1lcGFkLmlkID09PSAnR2VhciBWUiBDb250cm9sbGVyJyB8fCBnYW1lcGFkLmlkID09PSAnT2N1bHVzIEdvIENvbnRyb2xsZXInIHx8XG5cdFx0XHRcdGdhbWVwYWQuaWQgPT09ICdPcGVuVlIgR2FtZXBhZCcgfHwgZ2FtZXBhZC5pZC5zdGFydHNXaXRoKCAnT2N1bHVzIFRvdWNoJyApIHx8XG5cdFx0XHRcdGdhbWVwYWQuaWQuc3RhcnRzV2l0aCggJ1NwYXRpYWwgQ29udHJvbGxlcicgKSApICkge1xuXG5cdFx0XHRcdGlmICggaiA9PT0gaWQgKSByZXR1cm4gZ2FtZXBhZDtcblxuXHRcdFx0XHRqICsrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZUNvbnRyb2xsZXJzKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpIF07XG5cblx0XHRcdHZhciBnYW1lcGFkID0gZmluZEdhbWVwYWQoIGkgKTtcblxuXHRcdFx0aWYgKCBnYW1lcGFkICE9PSB1bmRlZmluZWQgJiYgZ2FtZXBhZC5wb3NlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBnYW1lcGFkLnBvc2UgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRcdFx0Ly8gIFBvc2VcblxuXHRcdFx0XHR2YXIgcG9zZSA9IGdhbWVwYWQucG9zZTtcblxuXHRcdFx0XHRpZiAoIHBvc2UuaGFzUG9zaXRpb24gPT09IGZhbHNlICkgY29udHJvbGxlci5wb3NpdGlvbi5zZXQoIDAuMiwgLSAwLjYsIC0gMC4wNSApO1xuXG5cdFx0XHRcdGlmICggcG9zZS5wb3NpdGlvbiAhPT0gbnVsbCApIGNvbnRyb2xsZXIucG9zaXRpb24uZnJvbUFycmF5KCBwb3NlLnBvc2l0aW9uICk7XG5cdFx0XHRcdGlmICggcG9zZS5vcmllbnRhdGlvbiAhPT0gbnVsbCApIGNvbnRyb2xsZXIucXVhdGVybmlvbi5mcm9tQXJyYXkoIHBvc2Uub3JpZW50YXRpb24gKTtcblx0XHRcdFx0Y29udHJvbGxlci5tYXRyaXguY29tcG9zZSggY29udHJvbGxlci5wb3NpdGlvbiwgY29udHJvbGxlci5xdWF0ZXJuaW9uLCBjb250cm9sbGVyLnNjYWxlICk7XG5cdFx0XHRcdGNvbnRyb2xsZXIubWF0cml4LnByZW11bHRpcGx5KCBzdGFuZGluZ01hdHJpeCApO1xuXHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeC5kZWNvbXBvc2UoIGNvbnRyb2xsZXIucG9zaXRpb24sIGNvbnRyb2xsZXIucXVhdGVybmlvbiwgY29udHJvbGxlci5zY2FsZSApO1xuXHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRjb250cm9sbGVyLnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHRcdC8vICBUcmlnZ2VyXG5cblx0XHRcdFx0dmFyIGJ1dHRvbklkID0gZ2FtZXBhZC5pZCA9PT0gJ0RheWRyZWFtIENvbnRyb2xsZXInID8gMCA6IDE7XG5cblx0XHRcdFx0aWYgKCBpc1RyaWdnZXJQcmVzc2VkICE9PSBnYW1lcGFkLmJ1dHRvbnNbIGJ1dHRvbklkIF0ucHJlc3NlZCApIHtcblxuXHRcdFx0XHRcdGlzVHJpZ2dlclByZXNzZWQgPSBnYW1lcGFkLmJ1dHRvbnNbIGJ1dHRvbklkIF0ucHJlc3NlZDtcblxuXHRcdFx0XHRcdGlmICggaXNUcmlnZ2VyUHJlc3NlZCApIHtcblxuXHRcdFx0XHRcdFx0Y29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZWxlY3RzdGFydCcgfSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdzZWxlY3RlbmQnIH0gKTtcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc2VsZWN0JyB9ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cdHRoaXMudXNlckhlaWdodCA9IDEuNjtcblxuXHR0aGlzLmdldENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoIGlkICkge1xuXG5cdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaWQgXTtcblxuXHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb250cm9sbGVyID0gbmV3IEdyb3VwKCk7XG5cdFx0XHRjb250cm9sbGVyLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0XHRjb250cm9sbGVyc1sgaWQgXSA9IGNvbnRyb2xsZXI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29udHJvbGxlcjtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0RGV2aWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIGRldmljZTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0RGV2aWNlID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIGRldmljZSA9IHZhbHVlO1xuXG5cdFx0YW5pbWF0aW9uLnNldENvbnRleHQoIHZhbHVlICk7XG5cblx0fTtcblxuXHR0aGlzLnNldFBvc2VUYXJnZXQgPSBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdGlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSBwb3NlVGFyZ2V0ID0gb2JqZWN0O1xuXG5cdH07XG5cblx0dGhpcy5nZXRDYW1lcmEgPSBmdW5jdGlvbiAoIGNhbWVyYSApIHtcblxuXHRcdGlmICggZGV2aWNlID09PSBudWxsICkge1xuXG5cdFx0XHRjYW1lcmEucG9zaXRpb24uc2V0KCAwLCBzY29wZS51c2VySGVpZ2h0LCAwICk7XG5cdFx0XHRyZXR1cm4gY2FtZXJhO1xuXG5cdFx0fVxuXG5cdFx0ZGV2aWNlLmRlcHRoTmVhciA9IGNhbWVyYS5uZWFyO1xuXHRcdGRldmljZS5kZXB0aEZhciA9IGNhbWVyYS5mYXI7XG5cblx0XHRkZXZpY2UuZ2V0RnJhbWVEYXRhKCBmcmFtZURhdGEgKTtcblxuXHRcdC8vXG5cblx0XHR2YXIgc3RhZ2VQYXJhbWV0ZXJzID0gZGV2aWNlLnN0YWdlUGFyYW1ldGVycztcblxuXHRcdGlmICggc3RhZ2VQYXJhbWV0ZXJzICkge1xuXG5cdFx0XHRzdGFuZGluZ01hdHJpeC5mcm9tQXJyYXkoIHN0YWdlUGFyYW1ldGVycy5zaXR0aW5nVG9TdGFuZGluZ1RyYW5zZm9ybSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c3RhbmRpbmdNYXRyaXgubWFrZVRyYW5zbGF0aW9uKCAwLCBzY29wZS51c2VySGVpZ2h0LCAwICk7XG5cblx0XHR9XG5cblxuXHRcdHZhciBwb3NlID0gZnJhbWVEYXRhLnBvc2U7XG5cdFx0dmFyIHBvc2VPYmplY3QgPSBwb3NlVGFyZ2V0ICE9PSBudWxsID8gcG9zZVRhcmdldCA6IGNhbWVyYTtcblxuXHRcdC8vIFdlIHdhbnQgdG8gbWFuaXB1bGF0ZSBwb3NlT2JqZWN0IGJ5IGl0cyBwb3NpdGlvbiBhbmQgcXVhdGVybmlvbiBjb21wb25lbnRzIHNpbmNlIHVzZXJzIG1heSByZWx5IG9uIHRoZW0uXG5cdFx0cG9zZU9iamVjdC5tYXRyaXguY29weSggc3RhbmRpbmdNYXRyaXggKTtcblx0XHRwb3NlT2JqZWN0Lm1hdHJpeC5kZWNvbXBvc2UoIHBvc2VPYmplY3QucG9zaXRpb24sIHBvc2VPYmplY3QucXVhdGVybmlvbiwgcG9zZU9iamVjdC5zY2FsZSApO1xuXG5cdFx0aWYgKCBwb3NlLm9yaWVudGF0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHR0ZW1wUXVhdGVybmlvbi5mcm9tQXJyYXkoIHBvc2Uub3JpZW50YXRpb24gKTtcblx0XHRcdHBvc2VPYmplY3QucXVhdGVybmlvbi5tdWx0aXBseSggdGVtcFF1YXRlcm5pb24gKTtcblxuXHRcdH1cblxuXHRcdGlmICggcG9zZS5wb3NpdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGVtcFF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBzdGFuZGluZ01hdHJpeCApO1xuXHRcdFx0dGVtcFBvc2l0aW9uLmZyb21BcnJheSggcG9zZS5wb3NpdGlvbiApO1xuXHRcdFx0dGVtcFBvc2l0aW9uLmFwcGx5UXVhdGVybmlvbiggdGVtcFF1YXRlcm5pb24gKTtcblx0XHRcdHBvc2VPYmplY3QucG9zaXRpb24uYWRkKCB0ZW1wUG9zaXRpb24gKTtcblxuXHRcdH1cblxuXHRcdHBvc2VPYmplY3QudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdGlmICggZGV2aWNlLmlzUHJlc2VudGluZyA9PT0gZmFsc2UgKSByZXR1cm4gY2FtZXJhO1xuXG5cdFx0Ly9cblxuXHRcdGNhbWVyYUwubmVhciA9IGNhbWVyYS5uZWFyO1xuXHRcdGNhbWVyYVIubmVhciA9IGNhbWVyYS5uZWFyO1xuXG5cdFx0Y2FtZXJhTC5mYXIgPSBjYW1lcmEuZmFyO1xuXHRcdGNhbWVyYVIuZmFyID0gY2FtZXJhLmZhcjtcblxuXHRcdGNhbWVyYVZSLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXHRcdGNhbWVyYVZSLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHRjYW1lcmFMLm1hdHJpeFdvcmxkSW52ZXJzZS5mcm9tQXJyYXkoIGZyYW1lRGF0YS5sZWZ0Vmlld01hdHJpeCApO1xuXHRcdGNhbWVyYVIubWF0cml4V29ybGRJbnZlcnNlLmZyb21BcnJheSggZnJhbWVEYXRhLnJpZ2h0Vmlld01hdHJpeCApO1xuXG5cdFx0Ly8gVE9ETyAobXJkb29iKSBEb3VibGUgY2hlY2sgdGhpcyBjb2RlXG5cblx0XHRzdGFuZGluZ01hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggc3RhbmRpbmdNYXRyaXggKTtcblxuXHRcdGNhbWVyYUwubWF0cml4V29ybGRJbnZlcnNlLm11bHRpcGx5KCBzdGFuZGluZ01hdHJpeEludmVyc2UgKTtcblx0XHRjYW1lcmFSLm1hdHJpeFdvcmxkSW52ZXJzZS5tdWx0aXBseSggc3RhbmRpbmdNYXRyaXhJbnZlcnNlICk7XG5cblx0XHR2YXIgcGFyZW50ID0gcG9zZU9iamVjdC5wYXJlbnQ7XG5cblx0XHRpZiAoIHBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0bWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoIHBhcmVudC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRjYW1lcmFMLm1hdHJpeFdvcmxkSW52ZXJzZS5tdWx0aXBseSggbWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0XHRjYW1lcmFSLm1hdHJpeFdvcmxkSW52ZXJzZS5tdWx0aXBseSggbWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHR9XG5cblx0XHQvLyBlbnZNYXAgYW5kIE1pcnJvciBuZWVkcyBjYW1lcmEubWF0cml4V29ybGRcblxuXHRcdGNhbWVyYUwubWF0cml4V29ybGQuZ2V0SW52ZXJzZSggY2FtZXJhTC5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHRjYW1lcmFSLm1hdHJpeFdvcmxkLmdldEludmVyc2UoIGNhbWVyYVIubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0XHRjYW1lcmFMLnByb2plY3Rpb25NYXRyaXguZnJvbUFycmF5KCBmcmFtZURhdGEubGVmdFByb2plY3Rpb25NYXRyaXggKTtcblx0XHRjYW1lcmFSLnByb2plY3Rpb25NYXRyaXguZnJvbUFycmF5KCBmcmFtZURhdGEucmlnaHRQcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHQvLyBIQUNLIChtcmRvb2IpXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3czYy93ZWJ2ci9pc3N1ZXMvMjAzXG5cblx0XHRjYW1lcmFWUi5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0Ly9cblxuXHRcdHZhciBsYXllcnMgPSBkZXZpY2UuZ2V0TGF5ZXJzKCk7XG5cblx0XHRpZiAoIGxheWVycy5sZW5ndGggKSB7XG5cblx0XHRcdHZhciBsYXllciA9IGxheWVyc1sgMCBdO1xuXG5cdFx0XHRpZiAoIGxheWVyLmxlZnRCb3VuZHMgIT09IG51bGwgJiYgbGF5ZXIubGVmdEJvdW5kcy5sZW5ndGggPT09IDQgKSB7XG5cblx0XHRcdFx0Y2FtZXJhTC5ib3VuZHMuZnJvbUFycmF5KCBsYXllci5sZWZ0Qm91bmRzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBsYXllci5yaWdodEJvdW5kcyAhPT0gbnVsbCAmJiBsYXllci5yaWdodEJvdW5kcy5sZW5ndGggPT09IDQgKSB7XG5cblx0XHRcdFx0Y2FtZXJhUi5ib3VuZHMuZnJvbUFycmF5KCBsYXllci5yaWdodEJvdW5kcyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR1cGRhdGVDb250cm9sbGVycygpO1xuXG5cdFx0cmV0dXJuIGNhbWVyYVZSO1xuXG5cdH07XG5cblx0dGhpcy5nZXRTdGFuZGluZ01hdHJpeCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBzdGFuZGluZ01hdHJpeDtcblxuXHR9O1xuXG5cdHRoaXMuaXNQcmVzZW50aW5nID0gaXNQcmVzZW50aW5nO1xuXG5cdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0dmFyIGFuaW1hdGlvbiA9IG5ldyBXZWJHTEFuaW1hdGlvbigpO1xuXG5cdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKTtcblxuXHR9O1xuXG5cdHRoaXMuc3VibWl0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGlzUHJlc2VudGluZygpICkgZGV2aWNlLnN1Ym1pdEZyYW1lKCk7XG5cblx0fTtcblxuXHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCBvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UgKTtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJYUk1hbmFnZXIoIHJlbmRlcmVyICkge1xuXG5cdHZhciBnbCA9IHJlbmRlcmVyLmNvbnRleHQ7XG5cblx0dmFyIGRldmljZSA9IG51bGw7XG5cdHZhciBzZXNzaW9uID0gbnVsbDtcblxuXHR2YXIgZnJhbWVPZlJlZiA9IG51bGw7XG5cblx0dmFyIHBvc2UgPSBudWxsO1xuXG5cdHZhciBjb250cm9sbGVycyA9IFtdO1xuXHR2YXIgaW5wdXRTb3VyY2VzID0gW107XG5cblx0ZnVuY3Rpb24gaXNQcmVzZW50aW5nKCkge1xuXG5cdFx0cmV0dXJuIHNlc3Npb24gIT09IG51bGwgJiYgZnJhbWVPZlJlZiAhPT0gbnVsbDtcblxuXG5cdH1cblxuXHQvL1xuXG5cdHZhciBjYW1lcmFMID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCk7XG5cdGNhbWVyYUwubGF5ZXJzLmVuYWJsZSggMSApO1xuXHRjYW1lcmFMLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHR2YXIgY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRjYW1lcmFSLmxheWVycy5lbmFibGUoIDIgKTtcblx0Y2FtZXJhUi52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cblx0dmFyIGNhbWVyYVZSID0gbmV3IEFycmF5Q2FtZXJhKCBbIGNhbWVyYUwsIGNhbWVyYVIgXSApO1xuXHRjYW1lcmFWUi5sYXllcnMuZW5hYmxlKCAxICk7XG5cdGNhbWVyYVZSLmxheWVycy5lbmFibGUoIDIgKTtcblxuXHQvL1xuXG5cdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdHRoaXMuZ2V0Q29udHJvbGxlciA9IGZ1bmN0aW9uICggaWQgKSB7XG5cblx0XHR2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpZCBdO1xuXG5cdFx0aWYgKCBjb250cm9sbGVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnRyb2xsZXIgPSBuZXcgR3JvdXAoKTtcblx0XHRcdGNvbnRyb2xsZXIubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Y29udHJvbGxlci52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdGNvbnRyb2xsZXJzWyBpZCBdID0gY29udHJvbGxlcjtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb250cm9sbGVyO1xuXG5cdH07XG5cblx0dGhpcy5nZXREZXZpY2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gZGV2aWNlO1xuXG5cdH07XG5cblx0dGhpcy5zZXREZXZpY2UgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkgZGV2aWNlID0gdmFsdWU7XG5cblx0XHRnbC5zZXRDb21wYXRpYmxlWFJEZXZpY2UoIHZhbHVlICk7XG5cblx0fTtcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIG9uU2Vzc2lvbkV2ZW50KCBldmVudCApIHtcblxuXHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGlucHV0U291cmNlcy5pbmRleE9mKCBldmVudC5pbnB1dFNvdXJjZSApIF07XG5cdFx0aWYgKCBjb250cm9sbGVyICkgY29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6IGV2ZW50LnR5cGUgfSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBvblNlc3Npb25FbmQoKSB7XG5cblx0XHRyZW5kZXJlci5zZXRGcmFtZWJ1ZmZlciggbnVsbCApO1xuXHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0fVxuXG5cdHRoaXMuc2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICggdmFsdWUsIG9wdGlvbnMgKSB7XG5cblx0XHRzZXNzaW9uID0gdmFsdWU7XG5cblx0XHRpZiAoIHNlc3Npb24gIT09IG51bGwgKSB7XG5cblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3RzdGFydCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3RlbmQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnZW5kJywgb25TZXNzaW9uRW5kICk7XG5cblx0XHRcdHNlc3Npb24uYmFzZUxheWVyID0gbmV3IFhSV2ViR0xMYXllciggc2Vzc2lvbiwgZ2wgKTtcblx0XHRcdHNlc3Npb24ucmVxdWVzdEZyYW1lT2ZSZWZlcmVuY2UoIG9wdGlvbnMuZnJhbWVPZlJlZmVyZW5jZVR5cGUgKS50aGVuKCBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRcdGZyYW1lT2ZSZWYgPSB2YWx1ZTtcblxuXHRcdFx0XHRyZW5kZXJlci5zZXRGcmFtZWJ1ZmZlciggc2Vzc2lvbi5iYXNlTGF5ZXIuZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHRhbmltYXRpb24uc2V0Q29udGV4dCggc2Vzc2lvbiApO1xuXHRcdFx0XHRhbmltYXRpb24uc3RhcnQoKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRpbnB1dFNvdXJjZXMgPSBzZXNzaW9uLmdldElucHV0U291cmNlcygpO1xuXG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dHNvdXJjZXNjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0aW5wdXRTb3VyY2VzID0gc2Vzc2lvbi5nZXRJbnB1dFNvdXJjZXMoKTtcblx0XHRcdFx0Y29uc29sZS5sb2coIGlucHV0U291cmNlcyApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHRmdW5jdGlvbiB1cGRhdGVDYW1lcmEoIGNhbWVyYSwgcGFyZW50ICkge1xuXG5cdFx0aWYgKCBwYXJlbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjYW1lcmEubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggcGFyZW50Lm1hdHJpeFdvcmxkLCBjYW1lcmEubWF0cml4ICk7XG5cblx0XHR9XG5cblx0XHRjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXG5cdH1cblxuXHR0aGlzLmdldENhbWVyYSA9IGZ1bmN0aW9uICggY2FtZXJhICkge1xuXG5cdFx0aWYgKCBpc1ByZXNlbnRpbmcoKSApIHtcblxuXHRcdFx0dmFyIHBhcmVudCA9IGNhbWVyYS5wYXJlbnQ7XG5cdFx0XHR2YXIgY2FtZXJhcyA9IGNhbWVyYVZSLmNhbWVyYXM7XG5cblx0XHRcdC8vIGFwcGx5IGNhbWVyYS5wYXJlbnQgdG8gY2FtZXJhVlJcblxuXHRcdFx0dXBkYXRlQ2FtZXJhKCBjYW1lcmFWUiwgcGFyZW50ICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNhbWVyYXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHVwZGF0ZUNhbWVyYSggY2FtZXJhc1sgaSBdLCBwYXJlbnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB1cGRhdGUgY2FtZXJhIGFuZCBpdHMgY2hpbGRyZW5cblxuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYVZSLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdHZhciBjaGlsZHJlbiA9IGNhbWVyYS5jaGlsZHJlbjtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjaGlsZHJlblsgaSBdLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNhbWVyYVZSO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhbWVyYTtcblxuXHR9O1xuXG5cdHRoaXMuaXNQcmVzZW50aW5nID0gaXNQcmVzZW50aW5nO1xuXG5cdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0dmFyIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IG51bGw7XG5cblx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSwgZnJhbWUgKSB7XG5cblx0XHRwb3NlID0gZnJhbWUuZ2V0RGV2aWNlUG9zZSggZnJhbWVPZlJlZiApO1xuXG5cdFx0aWYgKCBwb3NlICE9PSBudWxsICkge1xuXG5cdFx0XHR2YXIgbGF5ZXIgPSBzZXNzaW9uLmJhc2VMYXllcjtcblx0XHRcdHZhciB2aWV3cyA9IGZyYW1lLnZpZXdzO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB2aWV3cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHZpZXcgPSB2aWV3c1sgaSBdO1xuXHRcdFx0XHR2YXIgdmlld3BvcnQgPSBsYXllci5nZXRWaWV3cG9ydCggdmlldyApO1xuXHRcdFx0XHR2YXIgdmlld01hdHJpeCA9IHBvc2UuZ2V0Vmlld01hdHJpeCggdmlldyApO1xuXG5cdFx0XHRcdHZhciBjYW1lcmEgPSBjYW1lcmFWUi5jYW1lcmFzWyBpIF07XG5cdFx0XHRcdGNhbWVyYS5tYXRyaXguZnJvbUFycmF5KCB2aWV3TWF0cml4ICkuZ2V0SW52ZXJzZSggY2FtZXJhLm1hdHJpeCApO1xuXHRcdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkoIHZpZXcucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0XHRjYW1lcmEudmlld3BvcnQuc2V0KCB2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0aWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRcdFx0Y2FtZXJhVlIubWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdFx0XHRcdC8vIEhBQ0sgKG1yZG9vYilcblx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vdzNjL3dlYnZyL2lzc3Vlcy8yMDNcblxuXHRcdFx0XHRcdGNhbWVyYVZSLnByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGkgXTtcblxuXHRcdFx0dmFyIGlucHV0U291cmNlID0gaW5wdXRTb3VyY2VzWyBpIF07XG5cblx0XHRcdGlmICggaW5wdXRTb3VyY2UgKSB7XG5cblx0XHRcdFx0dmFyIGlucHV0UG9zZSA9IGZyYW1lLmdldElucHV0UG9zZSggaW5wdXRTb3VyY2UsIGZyYW1lT2ZSZWYgKTtcblxuXHRcdFx0XHRpZiAoIGlucHV0UG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGNvbnRyb2xsZXIubWF0cml4LmVsZW1lbnRzID0gaW5wdXRQb3NlLnBvaW50ZXJNYXRyaXg7XG5cdFx0XHRcdFx0Y29udHJvbGxlci5tYXRyaXguZGVjb21wb3NlKCBjb250cm9sbGVyLnBvc2l0aW9uLCBjb250cm9sbGVyLnJvdGF0aW9uLCBjb250cm9sbGVyLnNjYWxlICk7XG5cdFx0XHRcdFx0Y29udHJvbGxlci52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRjb250cm9sbGVyLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lICk7XG5cblx0fVxuXG5cdHZhciBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcblx0YW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHR0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0b25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0fTtcblxuXHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7fTtcblxuXHQvLyBERVBSRUNBVEVEXG5cblx0dGhpcy5nZXRTdGFuZGluZ01hdHJpeCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYlhSTWFuYWdlcjogZ2V0U3RhbmRpbmdNYXRyaXgoKSBpcyBubyBsb25nZXIgbmVlZGVkLicgKTtcblx0XHRyZXR1cm4gbmV3IFRIUkVFLk1hdHJpeDQoKTtcblxuXHR9O1xuXG5cdHRoaXMuc3VibWl0RnJhbWUgPSBmdW5jdGlvbiAoKSB7fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFJlbmRlcmVyKCBwYXJhbWV0ZXJzICkge1xuXG5cdGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJlcicsIFJFVklTSU9OICk7XG5cblx0cGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307XG5cblx0dmFyIF9jYW52YXMgPSBwYXJhbWV0ZXJzLmNhbnZhcyAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jYW52YXMgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKSxcblx0XHRfY29udGV4dCA9IHBhcmFtZXRlcnMuY29udGV4dCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jb250ZXh0IDogbnVsbCxcblxuXHRcdF9hbHBoYSA9IHBhcmFtZXRlcnMuYWxwaGEgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuYWxwaGEgOiBmYWxzZSxcblx0XHRfZGVwdGggPSBwYXJhbWV0ZXJzLmRlcHRoICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmRlcHRoIDogdHJ1ZSxcblx0XHRfc3RlbmNpbCA9IHBhcmFtZXRlcnMuc3RlbmNpbCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5zdGVuY2lsIDogdHJ1ZSxcblx0XHRfYW50aWFsaWFzID0gcGFyYW1ldGVycy5hbnRpYWxpYXMgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuYW50aWFsaWFzIDogZmFsc2UsXG5cdFx0X3ByZW11bHRpcGxpZWRBbHBoYSA9IHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZW11bHRpcGxpZWRBbHBoYSA6IHRydWUsXG5cdFx0X3ByZXNlcnZlRHJhd2luZ0J1ZmZlciA9IHBhcmFtZXRlcnMucHJlc2VydmVEcmF3aW5nQnVmZmVyICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZXNlcnZlRHJhd2luZ0J1ZmZlciA6IGZhbHNlLFxuXHRcdF9wb3dlclByZWZlcmVuY2UgPSBwYXJhbWV0ZXJzLnBvd2VyUHJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wb3dlclByZWZlcmVuY2UgOiAnZGVmYXVsdCc7XG5cblx0dmFyIGN1cnJlbnRSZW5kZXJMaXN0ID0gbnVsbDtcblx0dmFyIGN1cnJlbnRSZW5kZXJTdGF0ZSA9IG51bGw7XG5cblx0Ly8gcHVibGljIHByb3BlcnRpZXNcblxuXHR0aGlzLmRvbUVsZW1lbnQgPSBfY2FudmFzO1xuXHR0aGlzLmNvbnRleHQgPSBudWxsO1xuXG5cdC8vIGNsZWFyaW5nXG5cblx0dGhpcy5hdXRvQ2xlYXIgPSB0cnVlO1xuXHR0aGlzLmF1dG9DbGVhckNvbG9yID0gdHJ1ZTtcblx0dGhpcy5hdXRvQ2xlYXJEZXB0aCA9IHRydWU7XG5cdHRoaXMuYXV0b0NsZWFyU3RlbmNpbCA9IHRydWU7XG5cblx0Ly8gc2NlbmUgZ3JhcGhcblxuXHR0aGlzLnNvcnRPYmplY3RzID0gdHJ1ZTtcblxuXHQvLyB1c2VyLWRlZmluZWQgY2xpcHBpbmdcblxuXHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gW107XG5cdHRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuXHQvLyBwaHlzaWNhbGx5IGJhc2VkIHNoYWRpbmdcblxuXHR0aGlzLmdhbW1hRmFjdG9yID0gMi4wO1x0Ly8gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdHRoaXMuZ2FtbWFJbnB1dCA9IGZhbHNlO1xuXHR0aGlzLmdhbW1hT3V0cHV0ID0gZmFsc2U7XG5cblx0Ly8gcGh5c2ljYWwgbGlnaHRzXG5cblx0dGhpcy5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyA9IGZhbHNlO1xuXG5cdC8vIHRvbmUgbWFwcGluZ1xuXG5cdHRoaXMudG9uZU1hcHBpbmcgPSBMaW5lYXJUb25lTWFwcGluZztcblx0dGhpcy50b25lTWFwcGluZ0V4cG9zdXJlID0gMS4wO1xuXHR0aGlzLnRvbmVNYXBwaW5nV2hpdGVQb2ludCA9IDEuMDtcblxuXHQvLyBtb3JwaHNcblxuXHR0aGlzLm1heE1vcnBoVGFyZ2V0cyA9IDg7XG5cdHRoaXMubWF4TW9ycGhOb3JtYWxzID0gNDtcblxuXHQvLyBpbnRlcm5hbCBwcm9wZXJ0aWVzXG5cblx0dmFyIF90aGlzID0gdGhpcyxcblxuXHRcdF9pc0NvbnRleHRMb3N0ID0gZmFsc2UsXG5cblx0XHQvLyBpbnRlcm5hbCBzdGF0ZSBjYWNoZVxuXG5cdFx0X2ZyYW1lYnVmZmVyID0gbnVsbCxcblxuXHRcdF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gbnVsbCxcblx0XHRfY3VycmVudEZyYW1lYnVmZmVyID0gbnVsbCxcblx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSAtIDEsXG5cdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0gPSAnJyxcblxuXHRcdF9jdXJyZW50Q2FtZXJhID0gbnVsbCxcblx0XHRfY3VycmVudEFycmF5Q2FtZXJhID0gbnVsbCxcblxuXHRcdF9jdXJyZW50Vmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpLFxuXHRcdF9jdXJyZW50U2Npc3NvciA9IG5ldyBWZWN0b3I0KCksXG5cdFx0X2N1cnJlbnRTY2lzc29yVGVzdCA9IG51bGwsXG5cblx0XHQvL1xuXG5cdFx0X3VzZWRUZXh0dXJlVW5pdHMgPSAwLFxuXG5cdFx0Ly9cblxuXHRcdF93aWR0aCA9IF9jYW52YXMud2lkdGgsXG5cdFx0X2hlaWdodCA9IF9jYW52YXMuaGVpZ2h0LFxuXG5cdFx0X3BpeGVsUmF0aW8gPSAxLFxuXG5cdFx0X3ZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApLFxuXHRcdF9zY2lzc29yID0gbmV3IFZlY3RvcjQoIDAsIDAsIF93aWR0aCwgX2hlaWdodCApLFxuXHRcdF9zY2lzc29yVGVzdCA9IGZhbHNlLFxuXG5cdFx0Ly8gZnJ1c3R1bVxuXG5cdFx0X2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpLFxuXG5cdFx0Ly8gY2xpcHBpbmdcblxuXHRcdF9jbGlwcGluZyA9IG5ldyBXZWJHTENsaXBwaW5nKCksXG5cdFx0X2NsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLFxuXHRcdF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlLFxuXG5cdFx0Ly8gY2FtZXJhIG1hdHJpY2VzIGNhY2hlXG5cblx0XHRfcHJvalNjcmVlbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCksXG5cblx0XHRfdmVjdG9yMyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0ZnVuY3Rpb24gZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpIHtcblxuXHRcdHJldHVybiBfY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCA/IF9waXhlbFJhdGlvIDogMTtcblxuXHR9XG5cblx0Ly8gaW5pdGlhbGl6ZVxuXG5cdHZhciBfZ2w7XG5cblx0dHJ5IHtcblxuXHRcdHZhciBjb250ZXh0QXR0cmlidXRlcyA9IHtcblx0XHRcdGFscGhhOiBfYWxwaGEsXG5cdFx0XHRkZXB0aDogX2RlcHRoLFxuXHRcdFx0c3RlbmNpbDogX3N0ZW5jaWwsXG5cdFx0XHRhbnRpYWxpYXM6IF9hbnRpYWxpYXMsXG5cdFx0XHRwcmVtdWx0aXBsaWVkQWxwaGE6IF9wcmVtdWx0aXBsaWVkQWxwaGEsXG5cdFx0XHRwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IF9wcmVzZXJ2ZURyYXdpbmdCdWZmZXIsXG5cdFx0XHRwb3dlclByZWZlcmVuY2U6IF9wb3dlclByZWZlcmVuY2Vcblx0XHR9O1xuXG5cdFx0Ly8gZXZlbnQgbGlzdGVuZXJzIG11c3QgYmUgcmVnaXN0ZXJlZCBiZWZvcmUgV2ViR0wgY29udGV4dCBpcyBjcmVhdGVkLCBzZWUgIzEyNzUzXG5cblx0XHRfY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRsb3N0Jywgb25Db250ZXh0TG9zdCwgZmFsc2UgKTtcblx0XHRfY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIG9uQ29udGV4dFJlc3RvcmUsIGZhbHNlICk7XG5cblx0XHRfZ2wgPSBfY29udGV4dCB8fCBfY2FudmFzLmdldENvbnRleHQoICd3ZWJnbCcsIGNvbnRleHRBdHRyaWJ1dGVzICkgfHwgX2NhbnZhcy5nZXRDb250ZXh0KCAnZXhwZXJpbWVudGFsLXdlYmdsJywgY29udGV4dEF0dHJpYnV0ZXMgKTtcblxuXHRcdGlmICggX2dsID09PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIF9jYW52YXMuZ2V0Q29udGV4dCggJ3dlYmdsJyApICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQgd2l0aCB5b3VyIHNlbGVjdGVkIGF0dHJpYnV0ZXMuJyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBTb21lIGV4cGVyaW1lbnRhbC13ZWJnbCBpbXBsZW1lbnRhdGlvbnMgZG8gbm90IGhhdmUgZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0XG5cblx0XHRpZiAoIF9nbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2dsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRyZXR1cm4geyAncmFuZ2VNaW4nOiAxLCAncmFuZ2VNYXgnOiAxLCAncHJlY2lzaW9uJzogMSB9O1xuXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAnICsgZXJyb3IubWVzc2FnZSApO1xuXG5cdH1cblxuXHR2YXIgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzLCBzdGF0ZSwgaW5mbztcblx0dmFyIHByb3BlcnRpZXMsIHRleHR1cmVzLCBhdHRyaWJ1dGVzLCBnZW9tZXRyaWVzLCBvYmplY3RzO1xuXHR2YXIgcHJvZ3JhbUNhY2hlLCByZW5kZXJMaXN0cywgcmVuZGVyU3RhdGVzO1xuXG5cdHZhciBiYWNrZ3JvdW5kLCBtb3JwaHRhcmdldHMsIGJ1ZmZlclJlbmRlcmVyLCBpbmRleGVkQnVmZmVyUmVuZGVyZXI7XG5cdHZhciBzcHJpdGVSZW5kZXJlcjtcblxuXHR2YXIgdXRpbHM7XG5cblx0ZnVuY3Rpb24gaW5pdEdMQ29udGV4dCgpIHtcblxuXHRcdGV4dGVuc2lvbnMgPSBuZXcgV2ViR0xFeHRlbnNpb25zKCBfZ2wgKTtcblx0XHRleHRlbnNpb25zLmdldCggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICk7XG5cdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdCcgKTtcblx0XHRleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKTtcblx0XHRleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICk7XG5cdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicgKTtcblx0XHRleHRlbnNpb25zLmdldCggJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycgKTtcblx0XHRleHRlbnNpb25zLmdldCggJ09FU19lbGVtZW50X2luZGV4X3VpbnQnICk7XG5cdFx0ZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0dXRpbHMgPSBuZXcgV2ViR0xVdGlscyggX2dsLCBleHRlbnNpb25zICk7XG5cblx0XHRjYXBhYmlsaXRpZXMgPSBuZXcgV2ViR0xDYXBhYmlsaXRpZXMoIF9nbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycyApO1xuXG5cdFx0c3RhdGUgPSBuZXcgV2ViR0xTdGF0ZSggX2dsLCBleHRlbnNpb25zLCB1dGlscyApO1xuXHRcdHN0YXRlLnNjaXNzb3IoIF9jdXJyZW50U2Npc3Nvci5jb3B5KCBfc2Npc3NvciApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApICk7XG5cdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggX3ZpZXdwb3J0ICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkgKTtcblxuXHRcdGluZm8gPSBuZXcgV2ViR0xJbmZvKCBfZ2wgKTtcblx0XHRwcm9wZXJ0aWVzID0gbmV3IFdlYkdMUHJvcGVydGllcygpO1xuXHRcdHRleHR1cmVzID0gbmV3IFdlYkdMVGV4dHVyZXMoIF9nbCwgZXh0ZW5zaW9ucywgc3RhdGUsIHByb3BlcnRpZXMsIGNhcGFiaWxpdGllcywgdXRpbHMsIGluZm8gKTtcblx0XHRhdHRyaWJ1dGVzID0gbmV3IFdlYkdMQXR0cmlidXRlcyggX2dsICk7XG5cdFx0Z2VvbWV0cmllcyA9IG5ldyBXZWJHTEdlb21ldHJpZXMoIF9nbCwgYXR0cmlidXRlcywgaW5mbyApO1xuXHRcdG9iamVjdHMgPSBuZXcgV2ViR0xPYmplY3RzKCBnZW9tZXRyaWVzLCBpbmZvICk7XG5cdFx0bW9ycGh0YXJnZXRzID0gbmV3IFdlYkdMTW9ycGh0YXJnZXRzKCBfZ2wgKTtcblx0XHRwcm9ncmFtQ2FjaGUgPSBuZXcgV2ViR0xQcm9ncmFtcyggX3RoaXMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApO1xuXHRcdHJlbmRlckxpc3RzID0gbmV3IFdlYkdMUmVuZGVyTGlzdHMoKTtcblx0XHRyZW5kZXJTdGF0ZXMgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZXMoKTtcblxuXHRcdGJhY2tncm91bmQgPSBuZXcgV2ViR0xCYWNrZ3JvdW5kKCBfdGhpcywgc3RhdGUsIG9iamVjdHMsIF9wcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHRcdGJ1ZmZlclJlbmRlcmVyID0gbmV3IFdlYkdMQnVmZmVyUmVuZGVyZXIoIF9nbCwgZXh0ZW5zaW9ucywgaW5mbyApO1xuXHRcdGluZGV4ZWRCdWZmZXJSZW5kZXJlciA9IG5ldyBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciggX2dsLCBleHRlbnNpb25zLCBpbmZvICk7XG5cblx0XHRzcHJpdGVSZW5kZXJlciA9IG5ldyBXZWJHTFNwcml0ZVJlbmRlcmVyKCBfdGhpcywgX2dsLCBzdGF0ZSwgdGV4dHVyZXMsIGNhcGFiaWxpdGllcyApO1xuXG5cdFx0aW5mby5wcm9ncmFtcyA9IHByb2dyYW1DYWNoZS5wcm9ncmFtcztcblxuXHRcdF90aGlzLmNvbnRleHQgPSBfZ2w7XG5cdFx0X3RoaXMuY2FwYWJpbGl0aWVzID0gY2FwYWJpbGl0aWVzO1xuXHRcdF90aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuXHRcdF90aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuXHRcdF90aGlzLnJlbmRlckxpc3RzID0gcmVuZGVyTGlzdHM7XG5cdFx0X3RoaXMuc3RhdGUgPSBzdGF0ZTtcblx0XHRfdGhpcy5pbmZvID0gaW5mbztcblxuXHR9XG5cblx0aW5pdEdMQ29udGV4dCgpO1xuXG5cdC8vIHZyXG5cblx0dmFyIHZyID0gKCAneHInIGluIG5hdmlnYXRvciApID8gbmV3IFdlYlhSTWFuYWdlciggX3RoaXMgKSA6IG5ldyBXZWJWUk1hbmFnZXIoIF90aGlzICk7XG5cblx0dGhpcy52ciA9IHZyO1xuXG5cdC8vIHNoYWRvdyBtYXBcblxuXHR2YXIgc2hhZG93TWFwID0gbmV3IFdlYkdMU2hhZG93TWFwKCBfdGhpcywgb2JqZWN0cywgY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplICk7XG5cblx0dGhpcy5zaGFkb3dNYXAgPSBzaGFkb3dNYXA7XG5cblx0Ly8gQVBJXG5cblx0dGhpcy5nZXRDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9nbDtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0Q29udGV4dEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX2dsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7XG5cblx0fTtcblxuXHR0aGlzLmZvcmNlQ29udGV4dExvc3MgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9sb3NlX2NvbnRleHQnICk7XG5cdFx0aWYgKCBleHRlbnNpb24gKSBleHRlbnNpb24ubG9zZUNvbnRleHQoKTtcblxuXHR9O1xuXG5cdHRoaXMuZm9yY2VDb250ZXh0UmVzdG9yZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2xvc2VfY29udGV4dCcgKTtcblx0XHRpZiAoIGV4dGVuc2lvbiApIGV4dGVuc2lvbi5yZXN0b3JlQ29udGV4dCgpO1xuXG5cdH07XG5cblx0dGhpcy5nZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9waXhlbFJhdGlvO1xuXG5cdH07XG5cblx0dGhpcy5zZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdF9waXhlbFJhdGlvID0gdmFsdWU7XG5cblx0XHR0aGlzLnNldFNpemUoIF93aWR0aCwgX2hlaWdodCwgZmFsc2UgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0U2l6ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogX3dpZHRoLFxuXHRcdFx0aGVpZ2h0OiBfaGVpZ2h0XG5cdFx0fTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U2l6ZSA9IGZ1bmN0aW9uICggd2lkdGgsIGhlaWdodCwgdXBkYXRlU3R5bGUgKSB7XG5cblx0XHRpZiAoIHZyLmlzUHJlc2VudGluZygpICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDYW5cXCd0IGNoYW5nZSBzaXplIHdoaWxlIFZSIGRldmljZSBpcyBwcmVzZW50aW5nLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdF93aWR0aCA9IHdpZHRoO1xuXHRcdF9oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRfY2FudmFzLndpZHRoID0gd2lkdGggKiBfcGl4ZWxSYXRpbztcblx0XHRfY2FudmFzLmhlaWdodCA9IGhlaWdodCAqIF9waXhlbFJhdGlvO1xuXG5cdFx0aWYgKCB1cGRhdGVTdHlsZSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdF9jYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG5cdFx0XHRfY2FudmFzLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldFZpZXdwb3J0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0fTtcblxuXHR0aGlzLmdldERyYXdpbmdCdWZmZXJTaXplID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiBfd2lkdGggKiBfcGl4ZWxSYXRpbyxcblx0XHRcdGhlaWdodDogX2hlaWdodCAqIF9waXhlbFJhdGlvXG5cdFx0fTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0RHJhd2luZ0J1ZmZlclNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQsIHBpeGVsUmF0aW8gKSB7XG5cblx0XHRfd2lkdGggPSB3aWR0aDtcblx0XHRfaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0X3BpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuXG5cdFx0X2NhbnZhcy53aWR0aCA9IHdpZHRoICogcGl4ZWxSYXRpbztcblx0XHRfY2FudmFzLmhlaWdodCA9IGhlaWdodCAqIHBpeGVsUmF0aW87XG5cblx0XHR0aGlzLnNldFZpZXdwb3J0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0fTtcblxuXHR0aGlzLmdldEN1cnJlbnRWaWV3cG9ydCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfY3VycmVudFZpZXdwb3J0O1xuXG5cdH07XG5cblx0dGhpcy5zZXRWaWV3cG9ydCA9IGZ1bmN0aW9uICggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdF92aWV3cG9ydC5zZXQoIHgsIF9oZWlnaHQgLSB5IC0gaGVpZ2h0LCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggX3ZpZXdwb3J0ICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkgKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U2Npc3NvciA9IGZ1bmN0aW9uICggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdF9zY2lzc29yLnNldCggeCwgX2hlaWdodCAtIHkgLSBoZWlnaHQsIHdpZHRoLCBoZWlnaHQgKTtcblx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKSApO1xuXG5cdH07XG5cblx0dGhpcy5zZXRTY2lzc29yVGVzdCA9IGZ1bmN0aW9uICggYm9vbGVhbiApIHtcblxuXHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KCBfc2Npc3NvclRlc3QgPSBib29sZWFuICk7XG5cblx0fTtcblxuXHQvLyBDbGVhcmluZ1xuXG5cdHRoaXMuZ2V0Q2xlYXJDb2xvciA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBiYWNrZ3JvdW5kLmdldENsZWFyQ29sb3IoKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0Q2xlYXJDb2xvciA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGJhY2tncm91bmQuc2V0Q2xlYXJDb2xvci5hcHBseSggYmFja2dyb3VuZCwgYXJndW1lbnRzICk7XG5cblx0fTtcblxuXHR0aGlzLmdldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gYmFja2dyb3VuZC5nZXRDbGVhckFscGhhKCk7XG5cblx0fTtcblxuXHR0aGlzLnNldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRiYWNrZ3JvdW5kLnNldENsZWFyQWxwaGEuYXBwbHkoIGJhY2tncm91bmQsIGFyZ3VtZW50cyApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhciA9IGZ1bmN0aW9uICggY29sb3IsIGRlcHRoLCBzdGVuY2lsICkge1xuXG5cdFx0dmFyIGJpdHMgPSAwO1xuXG5cdFx0aWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkIHx8IGNvbG9yICkgYml0cyB8PSBfZ2wuQ09MT1JfQlVGRkVSX0JJVDtcblx0XHRpZiAoIGRlcHRoID09PSB1bmRlZmluZWQgfHwgZGVwdGggKSBiaXRzIHw9IF9nbC5ERVBUSF9CVUZGRVJfQklUO1xuXHRcdGlmICggc3RlbmNpbCA9PT0gdW5kZWZpbmVkIHx8IHN0ZW5jaWwgKSBiaXRzIHw9IF9nbC5TVEVOQ0lMX0JVRkZFUl9CSVQ7XG5cblx0XHRfZ2wuY2xlYXIoIGJpdHMgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXJDb2xvciA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY2xlYXIoIHRydWUsIGZhbHNlLCBmYWxzZSApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhckRlcHRoID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jbGVhciggZmFsc2UsIHRydWUsIGZhbHNlICk7XG5cblx0fTtcblxuXHR0aGlzLmNsZWFyU3RlbmNpbCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY2xlYXIoIGZhbHNlLCBmYWxzZSwgdHJ1ZSApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhclRhcmdldCA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKSB7XG5cblx0XHR0aGlzLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5jbGVhciggY29sb3IsIGRlcHRoLCBzdGVuY2lsICk7XG5cblx0fTtcblxuXHQvL1xuXG5cdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdF9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSApO1xuXHRcdF9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgb25Db250ZXh0UmVzdG9yZSwgZmFsc2UgKTtcblxuXHRcdHJlbmRlckxpc3RzLmRpc3Bvc2UoKTtcblx0XHRyZW5kZXJTdGF0ZXMuZGlzcG9zZSgpO1xuXHRcdHByb3BlcnRpZXMuZGlzcG9zZSgpO1xuXHRcdG9iamVjdHMuZGlzcG9zZSgpO1xuXG5cdFx0dnIuZGlzcG9zZSgpO1xuXG5cdFx0YW5pbWF0aW9uLnN0b3AoKTtcblxuXHR9O1xuXG5cdC8vIEV2ZW50c1xuXG5cdGZ1bmN0aW9uIG9uQ29udGV4dExvc3QoIGV2ZW50ICkge1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ29udGV4dCBMb3N0LicgKTtcblxuXHRcdF9pc0NvbnRleHRMb3N0ID0gdHJ1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Db250ZXh0UmVzdG9yZSggLyogZXZlbnQgKi8gKSB7XG5cblx0XHRjb25zb2xlLmxvZyggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENvbnRleHQgUmVzdG9yZWQuJyApO1xuXG5cdFx0X2lzQ29udGV4dExvc3QgPSBmYWxzZTtcblxuXHRcdGluaXRHTENvbnRleHQoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25NYXRlcmlhbERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0dmFyIG1hdGVyaWFsID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0bWF0ZXJpYWwucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZU1hdGVyaWFsKCBtYXRlcmlhbCApO1xuXG5cdH1cblxuXHQvLyBCdWZmZXIgZGVhbGxvY2F0aW9uXG5cblx0ZnVuY3Rpb24gZGVhbGxvY2F0ZU1hdGVyaWFsKCBtYXRlcmlhbCApIHtcblxuXHRcdHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2UoIG1hdGVyaWFsICk7XG5cblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggbWF0ZXJpYWwgKTtcblxuXHR9XG5cblxuXHRmdW5jdGlvbiByZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlKCBtYXRlcmlhbCApIHtcblxuXHRcdHZhciBwcm9ncmFtSW5mbyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLnByb2dyYW07XG5cblx0XHRtYXRlcmlhbC5wcm9ncmFtID0gdW5kZWZpbmVkO1xuXG5cdFx0aWYgKCBwcm9ncmFtSW5mbyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwcm9ncmFtQ2FjaGUucmVsZWFzZVByb2dyYW0oIHByb2dyYW1JbmZvICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIEJ1ZmZlciByZW5kZXJpbmdcblxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3RJbW1lZGlhdGUoIG9iamVjdCwgcHJvZ3JhbSwgbWF0ZXJpYWwgKSB7XG5cblx0XHRvYmplY3QucmVuZGVyKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0X3RoaXMucmVuZGVyQnVmZmVySW1tZWRpYXRlKCBvYmplY3QsIHByb2dyYW0sIG1hdGVyaWFsICk7XG5cblx0XHR9ICk7XG5cblx0fVxuXG5cdHRoaXMucmVuZGVyQnVmZmVySW1tZWRpYXRlID0gZnVuY3Rpb24gKCBvYmplY3QsIHByb2dyYW0sIG1hdGVyaWFsICkge1xuXG5cdFx0c3RhdGUuaW5pdEF0dHJpYnV0ZXMoKTtcblxuXHRcdHZhciBidWZmZXJzID0gcHJvcGVydGllcy5nZXQoIG9iamVjdCApO1xuXG5cdFx0aWYgKCBvYmplY3QuaGFzUG9zaXRpb25zICYmICEgYnVmZmVycy5wb3NpdGlvbiApIGJ1ZmZlcnMucG9zaXRpb24gPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0aWYgKCBvYmplY3QuaGFzTm9ybWFscyAmJiAhIGJ1ZmZlcnMubm9ybWFsICkgYnVmZmVycy5ub3JtYWwgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0aWYgKCBvYmplY3QuaGFzVXZzICYmICEgYnVmZmVycy51diApIGJ1ZmZlcnMudXYgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0aWYgKCBvYmplY3QuaGFzQ29sb3JzICYmICEgYnVmZmVycy5jb2xvciApIGJ1ZmZlcnMuY29sb3IgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0XHR2YXIgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdGlmICggb2JqZWN0Lmhhc1Bvc2l0aW9ucyApIHtcblxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoIF9nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcnMucG9zaXRpb24gKTtcblx0XHRcdF9nbC5idWZmZXJEYXRhKCBfZ2wuQVJSQVlfQlVGRkVSLCBvYmplY3QucG9zaXRpb25BcnJheSwgX2dsLkRZTkFNSUNfRFJBVyApO1xuXG5cdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGVzLnBvc2l0aW9uICk7XG5cdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMucG9zaXRpb24sIDMsIF9nbC5GTE9BVCwgZmFsc2UsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0Lmhhc05vcm1hbHMgKSB7XG5cblx0XHRcdF9nbC5iaW5kQnVmZmVyKCBfZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJzLm5vcm1hbCApO1xuXG5cdFx0XHRpZiAoICEgbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCAmJlxuXHRcdFx0XHQhIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgJiZcblx0XHRcdFx0ISBtYXRlcmlhbC5pc01lc2hOb3JtYWxNYXRlcmlhbCAmJlxuXHRcdFx0XHRtYXRlcmlhbC5mbGF0U2hhZGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBvYmplY3QuY291bnQgKiAzOyBpIDwgbDsgaSArPSA5ICkge1xuXG5cdFx0XHRcdFx0dmFyIGFycmF5ID0gb2JqZWN0Lm5vcm1hbEFycmF5O1xuXG5cdFx0XHRcdFx0dmFyIG54ID0gKCBhcnJheVsgaSArIDAgXSArIGFycmF5WyBpICsgMyBdICsgYXJyYXlbIGkgKyA2IF0gKSAvIDM7XG5cdFx0XHRcdFx0dmFyIG55ID0gKCBhcnJheVsgaSArIDEgXSArIGFycmF5WyBpICsgNCBdICsgYXJyYXlbIGkgKyA3IF0gKSAvIDM7XG5cdFx0XHRcdFx0dmFyIG56ID0gKCBhcnJheVsgaSArIDIgXSArIGFycmF5WyBpICsgNSBdICsgYXJyYXlbIGkgKyA4IF0gKSAvIDM7XG5cblx0XHRcdFx0XHRhcnJheVsgaSArIDAgXSA9IG54O1xuXHRcdFx0XHRcdGFycmF5WyBpICsgMSBdID0gbnk7XG5cdFx0XHRcdFx0YXJyYXlbIGkgKyAyIF0gPSBuejtcblxuXHRcdFx0XHRcdGFycmF5WyBpICsgMyBdID0gbng7XG5cdFx0XHRcdFx0YXJyYXlbIGkgKyA0IF0gPSBueTtcblx0XHRcdFx0XHRhcnJheVsgaSArIDUgXSA9IG56O1xuXG5cdFx0XHRcdFx0YXJyYXlbIGkgKyA2IF0gPSBueDtcblx0XHRcdFx0XHRhcnJheVsgaSArIDcgXSA9IG55O1xuXHRcdFx0XHRcdGFycmF5WyBpICsgOCBdID0gbno7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdF9nbC5idWZmZXJEYXRhKCBfZ2wuQVJSQVlfQlVGRkVSLCBvYmplY3Qubm9ybWFsQXJyYXksIF9nbC5EWU5BTUlDX0RSQVcgKTtcblxuXHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlcy5ub3JtYWwgKTtcblxuXHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGVzLm5vcm1hbCwgMywgX2dsLkZMT0FULCBmYWxzZSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaGFzVXZzICYmIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoIF9nbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcnMudXYgKTtcblx0XHRcdF9nbC5idWZmZXJEYXRhKCBfZ2wuQVJSQVlfQlVGRkVSLCBvYmplY3QudXZBcnJheSwgX2dsLkRZTkFNSUNfRFJBVyApO1xuXG5cdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGVzLnV2ICk7XG5cblx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlcy51diwgMiwgX2dsLkZMT0FULCBmYWxzZSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaGFzQ29sb3JzICYmIG1hdGVyaWFsLnZlcnRleENvbG9ycyAhPT0gTm9Db2xvcnMgKSB7XG5cblx0XHRcdF9nbC5iaW5kQnVmZmVyKCBfZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJzLmNvbG9yICk7XG5cdFx0XHRfZ2wuYnVmZmVyRGF0YSggX2dsLkFSUkFZX0JVRkZFUiwgb2JqZWN0LmNvbG9yQXJyYXksIF9nbC5EWU5BTUlDX0RSQVcgKTtcblxuXHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlcy5jb2xvciApO1xuXG5cdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMuY29sb3IsIDMsIF9nbC5GTE9BVCwgZmFsc2UsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdHN0YXRlLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7XG5cblx0XHRfZ2wuZHJhd0FycmF5cyggX2dsLlRSSUFOR0xFUywgMCwgb2JqZWN0LmNvdW50ICk7XG5cblx0XHRvYmplY3QuY291bnQgPSAwO1xuXG5cdH07XG5cblx0dGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QgPSBmdW5jdGlvbiAoIGNhbWVyYSwgZm9nLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXAgKSB7XG5cblx0XHR2YXIgZnJvbnRGYWNlQ1cgPSAoIG9iamVjdC5pc01lc2ggJiYgb2JqZWN0Lm1hdHJpeFdvcmxkLmRldGVybWluYW50KCkgPCAwICk7XG5cblx0XHRzdGF0ZS5zZXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZyb250RmFjZUNXICk7XG5cblx0XHR2YXIgcHJvZ3JhbSA9IHNldFByb2dyYW0oIGNhbWVyYSwgZm9nLCBtYXRlcmlhbCwgb2JqZWN0ICk7XG5cdFx0dmFyIGdlb21ldHJ5UHJvZ3JhbSA9IGdlb21ldHJ5LmlkICsgJ18nICsgcHJvZ3JhbS5pZCArICdfJyArICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICk7XG5cblx0XHR2YXIgdXBkYXRlQnVmZmVycyA9IGZhbHNlO1xuXG5cdFx0aWYgKCBnZW9tZXRyeVByb2dyYW0gIT09IF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtICkge1xuXG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbSA9IGdlb21ldHJ5UHJvZ3JhbTtcblx0XHRcdHVwZGF0ZUJ1ZmZlcnMgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzICkge1xuXG5cdFx0XHRtb3JwaHRhcmdldHMudXBkYXRlKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcHJvZ3JhbSApO1xuXG5cdFx0XHR1cGRhdGVCdWZmZXJzID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHR2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdHZhciByYW5nZUZhY3RvciA9IDE7XG5cblx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0aW5kZXggPSBnZW9tZXRyaWVzLmdldFdpcmVmcmFtZUF0dHJpYnV0ZSggZ2VvbWV0cnkgKTtcblx0XHRcdHJhbmdlRmFjdG9yID0gMjtcblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGU7XG5cdFx0dmFyIHJlbmRlcmVyID0gYnVmZmVyUmVuZGVyZXI7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldCggaW5kZXggKTtcblxuXHRcdFx0cmVuZGVyZXIgPSBpbmRleGVkQnVmZmVyUmVuZGVyZXI7XG5cdFx0XHRyZW5kZXJlci5zZXRJbmRleCggYXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHVwZGF0ZUJ1ZmZlcnMgKSB7XG5cblx0XHRcdHNldHVwVmVydGV4QXR0cmlidXRlcyggbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5ICk7XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoIF9nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYXR0cmlidXRlLmJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dmFyIGRhdGFDb3VudCA9IEluZmluaXR5O1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0ZGF0YUNvdW50ID0gaW5kZXguY291bnQ7XG5cblx0XHR9IGVsc2UgaWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhQ291bnQgPSBwb3NpdGlvbi5jb3VudDtcblxuXHRcdH1cblxuXHRcdHZhciByYW5nZVN0YXJ0ID0gZ2VvbWV0cnkuZHJhd1JhbmdlLnN0YXJ0ICogcmFuZ2VGYWN0b3I7XG5cdFx0dmFyIHJhbmdlQ291bnQgPSBnZW9tZXRyeS5kcmF3UmFuZ2UuY291bnQgKiByYW5nZUZhY3RvcjtcblxuXHRcdHZhciBncm91cFN0YXJ0ID0gZ3JvdXAgIT09IG51bGwgPyBncm91cC5zdGFydCAqIHJhbmdlRmFjdG9yIDogMDtcblx0XHR2YXIgZ3JvdXBDb3VudCA9IGdyb3VwICE9PSBudWxsID8gZ3JvdXAuY291bnQgKiByYW5nZUZhY3RvciA6IEluZmluaXR5O1xuXG5cdFx0dmFyIGRyYXdTdGFydCA9IE1hdGgubWF4KCByYW5nZVN0YXJ0LCBncm91cFN0YXJ0ICk7XG5cdFx0dmFyIGRyYXdFbmQgPSBNYXRoLm1pbiggZGF0YUNvdW50LCByYW5nZVN0YXJ0ICsgcmFuZ2VDb3VudCwgZ3JvdXBTdGFydCArIGdyb3VwQ291bnQgKSAtIDE7XG5cblx0XHR2YXIgZHJhd0NvdW50ID0gTWF0aC5tYXgoIDAsIGRyYXdFbmQgLSBkcmF3U3RhcnQgKyAxICk7XG5cblx0XHRpZiAoIGRyYXdDb3VudCA9PT0gMCApIHJldHVybjtcblxuXHRcdC8vXG5cblx0XHRpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHN0YXRlLnNldExpbmVXaWR0aCggbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoICogZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpICk7XG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5MSU5FUyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN3aXRjaCAoIG9iamVjdC5kcmF3TW9kZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgVHJpYW5nbGVzRHJhd01vZGU6XG5cdFx0XHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCBfZ2wuVFJJQU5HTEVTICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgVHJpYW5nbGVTdHJpcERyYXdNb2RlOlxuXHRcdFx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLlRSSUFOR0xFX1NUUklQICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgVHJpYW5nbGVGYW5EcmF3TW9kZTpcblx0XHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5UUklBTkdMRV9GQU4gKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cblx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaW5lICkge1xuXG5cdFx0XHR2YXIgbGluZVdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoO1xuXG5cdFx0XHRpZiAoIGxpbmVXaWR0aCA9PT0gdW5kZWZpbmVkICkgbGluZVdpZHRoID0gMTsgLy8gTm90IHVzaW5nIExpbmUqTWF0ZXJpYWxcblxuXHRcdFx0c3RhdGUuc2V0TGluZVdpZHRoKCBsaW5lV2lkdGggKiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkgKTtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNMaW5lU2VnbWVudHMgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLkxJTkVTICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0xpbmVMb29wICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5MSU5FX0xPT1AgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCBfZ2wuTElORV9TVFJJUCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNQb2ludHMgKSB7XG5cblx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5QT0lOVFMgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA+IDAgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIucmVuZGVySW5zdGFuY2VzKCBnZW9tZXRyeSwgZHJhd1N0YXJ0LCBkcmF3Q291bnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmVuZGVyZXIucmVuZGVyKCBkcmF3U3RhcnQsIGRyYXdDb3VudCApO1xuXG5cdFx0fVxuXG5cdH07XG5cblx0ZnVuY3Rpb24gc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzKCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnkgKSB7XG5cblx0XHRpZiAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnNldHVwVmVydGV4QXR0cmlidXRlczogdXNpbmcgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgYnV0IGhhcmR3YXJlIGRvZXMgbm90IHN1cHBvcnQgZXh0ZW5zaW9uIEFOR0xFX2luc3RhbmNlZF9hcnJheXMuJyApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHN0YXRlLmluaXRBdHRyaWJ1dGVzKCk7XG5cblx0XHR2YXIgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdHZhciBwcm9ncmFtQXR0cmlidXRlcyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlcygpO1xuXG5cdFx0dmFyIG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IG1hdGVyaWFsLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXM7XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBwcm9ncmFtQXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIHByb2dyYW1BdHRyaWJ1dGUgPSBwcm9ncmFtQXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRpZiAoIHByb2dyYW1BdHRyaWJ1dGUgPj0gMCApIHtcblxuXHRcdFx0XHR2YXIgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBnZW9tZXRyeUF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR2YXIgbm9ybWFsaXplZCA9IGdlb21ldHJ5QXR0cmlidXRlLm5vcm1hbGl6ZWQ7XG5cdFx0XHRcdFx0dmFyIHNpemUgPSBnZW9tZXRyeUF0dHJpYnV0ZS5pdGVtU2l6ZTtcblxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldCggZ2VvbWV0cnlBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdC8vIFRPRE8gQXR0cmlidXRlIG1heSBub3QgYmUgYXZhaWxhYmxlIG9uIGNvbnRleHQgcmVzdG9yZVxuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0dmFyIGJ1ZmZlciA9IGF0dHJpYnV0ZS5idWZmZXI7XG5cdFx0XHRcdFx0dmFyIHR5cGUgPSBhdHRyaWJ1dGUudHlwZTtcblx0XHRcdFx0XHR2YXIgYnl0ZXNQZXJFbGVtZW50ID0gYXR0cmlidXRlLmJ5dGVzUGVyRWxlbWVudDtcblxuXHRcdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGRhdGEgPSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhO1xuXHRcdFx0XHRcdFx0dmFyIHN0cmlkZSA9IGRhdGEuc3RyaWRlO1xuXHRcdFx0XHRcdFx0dmFyIG9mZnNldCA9IGdlb21ldHJ5QXR0cmlidXRlLm9mZnNldDtcblxuXHRcdFx0XHRcdFx0aWYgKCBkYXRhICYmIGRhdGEuaXNJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBwcm9ncmFtQXR0cmlidXRlLCBkYXRhLm1lc2hQZXJBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA9IGRhdGEubWVzaFBlckF0dHJpYnV0ZSAqIGRhdGEuY291bnQ7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdF9nbC5iaW5kQnVmZmVyKCBfZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCBzdHJpZGUgKiBieXRlc1BlckVsZW1lbnQsIG9mZnNldCAqIGJ5dGVzUGVyRWxlbWVudCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBwcm9ncmFtQXR0cmlidXRlLCBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICogZ2VvbWV0cnlBdHRyaWJ1dGUuY291bnQ7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdF9nbC5iaW5kQnVmZmVyKCBfZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCAwLCAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmFsdWUgPSBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNbIG5hbWUgXTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0c3dpdGNoICggdmFsdWUubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliMmZ2KCBwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliM2Z2KCBwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliNGZ2KCBwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjFmdiggcHJvZ3JhbUF0dHJpYnV0ZSwgdmFsdWUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtcblxuXHR9XG5cblx0Ly8gQ29tcGlsZVxuXG5cdHRoaXMuY29tcGlsZSA9IGZ1bmN0aW9uICggc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCBjYW1lcmEgKTtcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUuaW5pdCgpO1xuXG5cdFx0c2NlbmUudHJhdmVyc2UoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5pc0xpZ2h0ICkge1xuXG5cdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoTGlnaHQoIG9iamVjdCApO1xuXG5cdFx0XHRcdGlmICggb2JqZWN0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyggb2JqZWN0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9ICk7XG5cblx0XHRjdXJyZW50UmVuZGVyU3RhdGUuc2V0dXBMaWdodHMoIGNhbWVyYSApO1xuXG5cdFx0c2NlbmUudHJhdmVyc2UoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5tYXRlcmlhbCApIHtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iamVjdC5tYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgb2JqZWN0Lm1hdGVyaWFsLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0aW5pdE1hdGVyaWFsKCBvYmplY3QubWF0ZXJpYWxbIGkgXSwgc2NlbmUuZm9nLCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aW5pdE1hdGVyaWFsKCBvYmplY3QubWF0ZXJpYWwsIHNjZW5lLmZvZywgb2JqZWN0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9ICk7XG5cblx0fTtcblxuXHQvLyBBbmltYXRpb24gTG9vcFxuXG5cdHZhciBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUgKSB7XG5cblx0XHRpZiAoIHZyLmlzUHJlc2VudGluZygpICkgcmV0dXJuO1xuXHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lICk7XG5cblx0fVxuXG5cdHZhciBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcblx0YW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHRpZiAoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICkgYW5pbWF0aW9uLnNldENvbnRleHQoIHdpbmRvdyApO1xuXG5cdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHR2ci5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApO1xuXG5cdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0fTtcblxuXHQvLyBSZW5kZXJpbmdcblxuXHR0aGlzLnJlbmRlciA9IGZ1bmN0aW9uICggc2NlbmUsIGNhbWVyYSwgcmVuZGVyVGFyZ2V0LCBmb3JjZUNsZWFyICkge1xuXG5cdFx0aWYgKCAhICggY2FtZXJhICYmIGNhbWVyYS5pc0NhbWVyYSApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZW5kZXI6IGNhbWVyYSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuQ2FtZXJhLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggX2lzQ29udGV4dExvc3QgKSByZXR1cm47XG5cblx0XHQvLyByZXNldCBjYWNoaW5nIGZvciB0aGlzIGZyYW1lXG5cblx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbSA9ICcnO1xuXHRcdF9jdXJyZW50TWF0ZXJpYWxJZCA9IC0gMTtcblx0XHRfY3VycmVudENhbWVyYSA9IG51bGw7XG5cblx0XHQvLyB1cGRhdGUgc2NlbmUgZ3JhcGhcblxuXHRcdGlmICggc2NlbmUuYXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHQvLyB1cGRhdGUgY2FtZXJhIG1hdHJpY2VzIGFuZCBmcnVzdHVtXG5cblx0XHRpZiAoIGNhbWVyYS5wYXJlbnQgPT09IG51bGwgKSBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdGlmICggdnIuZW5hYmxlZCApIHtcblxuXHRcdFx0Y2FtZXJhID0gdnIuZ2V0Q2FtZXJhKCBjYW1lcmEgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLmluaXQoKTtcblxuXHRcdHNjZW5lLm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRfcHJvalNjcmVlbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXHRcdF9mcnVzdHVtLnNldEZyb21NYXRyaXgoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSB0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkO1xuXHRcdF9jbGlwcGluZ0VuYWJsZWQgPSBfY2xpcHBpbmcuaW5pdCggdGhpcy5jbGlwcGluZ1BsYW5lcywgX2xvY2FsQ2xpcHBpbmdFbmFibGVkLCBjYW1lcmEgKTtcblxuXHRcdGN1cnJlbnRSZW5kZXJMaXN0ID0gcmVuZGVyTGlzdHMuZ2V0KCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0Y3VycmVudFJlbmRlckxpc3QuaW5pdCgpO1xuXG5cdFx0cHJvamVjdE9iamVjdCggc2NlbmUsIGNhbWVyYSwgX3RoaXMuc29ydE9iamVjdHMgKTtcblxuXHRcdGlmICggX3RoaXMuc29ydE9iamVjdHMgPT09IHRydWUgKSB7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnNvcnQoKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgKSBfY2xpcHBpbmcuYmVnaW5TaGFkb3dzKCk7XG5cblx0XHR2YXIgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTtcblxuXHRcdHNoYWRvd01hcC5yZW5kZXIoIHNoYWRvd3NBcnJheSwgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBjYW1lcmEgKTtcblxuXHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCApIF9jbGlwcGluZy5lbmRTaGFkb3dzKCk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmluZm8uYXV0b1Jlc2V0ICkgdGhpcy5pbmZvLnJlc2V0KCk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0Ly9cblxuXHRcdGJhY2tncm91bmQucmVuZGVyKCBjdXJyZW50UmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSwgZm9yY2VDbGVhciApO1xuXG5cdFx0Ly8gcmVuZGVyIHNjZW5lXG5cblx0XHR2YXIgb3BhcXVlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0Lm9wYXF1ZTtcblx0XHR2YXIgdHJhbnNwYXJlbnRPYmplY3RzID0gY3VycmVudFJlbmRlckxpc3QudHJhbnNwYXJlbnQ7XG5cblx0XHRpZiAoIHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHZhciBvdmVycmlkZU1hdGVyaWFsID0gc2NlbmUub3ZlcnJpZGVNYXRlcmlhbDtcblxuXHRcdFx0aWYgKCBvcGFxdWVPYmplY3RzLmxlbmd0aCApIHJlbmRlck9iamVjdHMoIG9wYXF1ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEsIG92ZXJyaWRlTWF0ZXJpYWwgKTtcblx0XHRcdGlmICggdHJhbnNwYXJlbnRPYmplY3RzLmxlbmd0aCApIHJlbmRlck9iamVjdHMoIHRyYW5zcGFyZW50T2JqZWN0cywgc2NlbmUsIGNhbWVyYSwgb3ZlcnJpZGVNYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gb3BhcXVlIHBhc3MgKGZyb250LXRvLWJhY2sgb3JkZXIpXG5cblx0XHRcdGlmICggb3BhcXVlT2JqZWN0cy5sZW5ndGggKSByZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdC8vIHRyYW5zcGFyZW50IHBhc3MgKGJhY2stdG8tZnJvbnQgb3JkZXIpXG5cblx0XHRcdGlmICggdHJhbnNwYXJlbnRPYmplY3RzLmxlbmd0aCApIHJlbmRlck9iamVjdHMoIHRyYW5zcGFyZW50T2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY3VzdG9tIHJlbmRlcmVyc1xuXG5cdFx0dmFyIHNwcml0ZXNBcnJheSA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5zcHJpdGVzQXJyYXk7XG5cblx0XHRzcHJpdGVSZW5kZXJlci5yZW5kZXIoIHNwcml0ZXNBcnJheSwgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0Ly8gR2VuZXJhdGUgbWlwbWFwIGlmIHdlJ3JlIHVzaW5nIGFueSBraW5kIG9mIG1pcG1hcCBmaWx0ZXJpbmdcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHR0ZXh0dXJlcy51cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIGRlcHRoIGJ1ZmZlciB3cml0aW5nIGlzIGVuYWJsZWQgc28gaXQgY2FuIGJlIGNsZWFyZWQgb24gbmV4dCByZW5kZXJcblxuXHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCggdHJ1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayggdHJ1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0TWFzayggdHJ1ZSApO1xuXG5cdFx0c3RhdGUuc2V0UG9seWdvbk9mZnNldCggZmFsc2UgKTtcblxuXHRcdHNjZW5lLm9uQWZ0ZXJSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRpZiAoIHZyLmVuYWJsZWQgKSB7XG5cblx0XHRcdHZyLnN1Ym1pdEZyYW1lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBfZ2wuZmluaXNoKCk7XG5cblx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IG51bGw7XG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gbnVsbDtcblxuXHR9O1xuXG5cdC8qXG5cdC8vIFRPRE8gRHVwbGljYXRlZCBjb2RlIChGcnVzdHVtKVxuXG5cdHZhciBfc3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdGZ1bmN0aW9uIGlzT2JqZWN0Vmlld2FibGUoIG9iamVjdCApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKVxuXHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRfc3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICkuXG5cdFx0YXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdHJldHVybiBpc1NwaGVyZVZpZXdhYmxlKCBfc3BoZXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGlzU3ByaXRlVmlld2FibGUoIHNwcml0ZSApIHtcblxuXHRcdF9zcGhlcmUuY2VudGVyLnNldCggMCwgMCwgMCApO1xuXHRcdF9zcGhlcmUucmFkaXVzID0gMC43MDcxMDY3ODExODY1NDc2O1xuXHRcdF9zcGhlcmUuYXBwbHlNYXRyaXg0KCBzcHJpdGUubWF0cml4V29ybGQgKTtcblxuXHRcdHJldHVybiBpc1NwaGVyZVZpZXdhYmxlKCBfc3BoZXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGlzU3BoZXJlVmlld2FibGUoIHNwaGVyZSApIHtcblxuXHRcdGlmICggISBfZnJ1c3R1bS5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSApIHJldHVybiBmYWxzZTtcblxuXHRcdHZhciBudW1QbGFuZXMgPSBfY2xpcHBpbmcubnVtUGxhbmVzO1xuXG5cdFx0aWYgKCBudW1QbGFuZXMgPT09IDAgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdHZhciBwbGFuZXMgPSBfdGhpcy5jbGlwcGluZ1BsYW5lcyxcblxuXHRcdFx0Y2VudGVyID0gc3BoZXJlLmNlbnRlcixcblx0XHRcdG5lZ1JhZCA9IC0gc3BoZXJlLnJhZGl1cyxcblx0XHRcdGkgPSAwO1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHQvLyBvdXQgd2hlbiBkZWVwZXIgdGhhbiByYWRpdXMgaW4gdGhlIG5lZ2F0aXZlIGhhbGZzcGFjZVxuXHRcdFx0aWYgKCBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIGNlbnRlciApIDwgbmVnUmFkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0fSB3aGlsZSAoICsrIGkgIT09IG51bVBsYW5lcyApO1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXHQqL1xuXG5cdGZ1bmN0aW9uIHByb2plY3RPYmplY3QoIG9iamVjdCwgY2FtZXJhLCBzb3J0T2JqZWN0cyApIHtcblxuXHRcdGlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0dmFyIHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTtcblxuXHRcdGlmICggdmlzaWJsZSApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNMaWdodCApIHtcblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzU3ByaXRlICkge1xuXG5cdFx0XHRcdGlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzU3ByaXRlKCBvYmplY3QgKSApIHtcblxuXHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoU3ByaXRlKCBvYmplY3QgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0ltbWVkaWF0ZVJlbmRlck9iamVjdCApIHtcblxuXHRcdFx0XHRpZiAoIHNvcnRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0X3ZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QubWF0cml4V29ybGQgKVxuXHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBudWxsLCBvYmplY3QubWF0ZXJpYWwsIF92ZWN0b3IzLnosIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cyApIHtcblxuXHRcdFx0XHRpZiAoIG9iamVjdC5pc1NraW5uZWRNZXNoICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0LnNrZWxldG9uLnVwZGF0ZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNvcnRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7XG5cdFx0XHRcdFx0dmFyIG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgZ3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdFx0XHRcdFx0dmFyIGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ3JvdXBNYXRlcmlhbCAmJiBncm91cE1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBncm91cE1hdGVyaWFsLCBfdmVjdG9yMy56LCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIF92ZWN0b3IzLnosIG51bGwgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHByb2plY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGNhbWVyYSwgc29ydE9iamVjdHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0cyggcmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSwgb3ZlcnJpZGVNYXRlcmlhbCApIHtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHJlbmRlckxpc3QubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHJlbmRlckl0ZW0gPSByZW5kZXJMaXN0WyBpIF07XG5cblx0XHRcdHZhciBvYmplY3QgPSByZW5kZXJJdGVtLm9iamVjdDtcblx0XHRcdHZhciBnZW9tZXRyeSA9IHJlbmRlckl0ZW0uZ2VvbWV0cnk7XG5cdFx0XHR2YXIgbWF0ZXJpYWwgPSBvdmVycmlkZU1hdGVyaWFsID09PSB1bmRlZmluZWQgPyByZW5kZXJJdGVtLm1hdGVyaWFsIDogb3ZlcnJpZGVNYXRlcmlhbDtcblx0XHRcdHZhciBncm91cCA9IHJlbmRlckl0ZW0uZ3JvdXA7XG5cblx0XHRcdGlmICggY2FtZXJhLmlzQXJyYXlDYW1lcmEgKSB7XG5cblx0XHRcdFx0X2N1cnJlbnRBcnJheUNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdFx0XHR2YXIgY2FtZXJhcyA9IGNhbWVyYS5jYW1lcmFzO1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBjYW1lcmFzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGNhbWVyYTIgPSBjYW1lcmFzWyBqIF07XG5cblx0XHRcdFx0XHRpZiAoIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhMi5sYXllcnMgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCAndmlld3BvcnQnIGluIGNhbWVyYTIgKSB7IC8vIFhSXG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggY2FtZXJhMi52aWV3cG9ydCApICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIGJvdW5kcyA9IGNhbWVyYTIuYm91bmRzO1xuXG5cdFx0XHRcdFx0XHRcdHZhciB4ID0gYm91bmRzLnggKiBfd2lkdGg7XG5cdFx0XHRcdFx0XHRcdHZhciB5ID0gYm91bmRzLnkgKiBfaGVpZ2h0O1xuXHRcdFx0XHRcdFx0XHR2YXIgd2lkdGggPSBib3VuZHMueiAqIF93aWR0aDtcblx0XHRcdFx0XHRcdFx0dmFyIGhlaWdodCA9IGJvdW5kcy53ICogX2hlaWdodDtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhMiwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfY3VycmVudEFycmF5Q2FtZXJhID0gbnVsbDtcblxuXHRcdFx0XHRyZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICkge1xuXG5cdFx0b2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCBfY3VycmVudEFycmF5Q2FtZXJhIHx8IGNhbWVyYSApO1xuXG5cdFx0b2JqZWN0Lm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCBvYmplY3QubWF0cml4V29ybGQgKTtcblx0XHRvYmplY3Qubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXG5cdFx0aWYgKCBvYmplY3QuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QgKSB7XG5cblx0XHRcdHZhciBmcm9udEZhY2VDVyA9ICggb2JqZWN0LmlzTWVzaCAmJiBvYmplY3QubWF0cml4V29ybGQuZGV0ZXJtaW5hbnQoKSA8IDAgKTtcblxuXHRcdFx0c3RhdGUuc2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVyApO1xuXG5cdFx0XHR2YXIgcHJvZ3JhbSA9IHNldFByb2dyYW0oIGNhbWVyYSwgc2NlbmUuZm9nLCBtYXRlcmlhbCwgb2JqZWN0ICk7XG5cblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtID0gJyc7XG5cblx0XHRcdHJlbmRlck9iamVjdEltbWVkaWF0ZSggb2JqZWN0LCBwcm9ncmFtLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3RoaXMucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIHNjZW5lLmZvZywgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHR9XG5cblx0XHRvYmplY3Qub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSwgX2N1cnJlbnRBcnJheUNhbWVyYSB8fCBjYW1lcmEgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdE1hdGVyaWFsKCBtYXRlcmlhbCwgZm9nLCBvYmplY3QgKSB7XG5cblx0XHR2YXIgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHR2YXIgbGlnaHRzID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLmxpZ2h0cztcblx0XHR2YXIgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTtcblxuXHRcdHZhciBwYXJhbWV0ZXJzID0gcHJvZ3JhbUNhY2hlLmdldFBhcmFtZXRlcnMoXG5cdFx0XHRtYXRlcmlhbCwgbGlnaHRzLnN0YXRlLCBzaGFkb3dzQXJyYXksIGZvZywgX2NsaXBwaW5nLm51bVBsYW5lcywgX2NsaXBwaW5nLm51bUludGVyc2VjdGlvbiwgb2JqZWN0ICk7XG5cblx0XHR2YXIgY29kZSA9IHByb2dyYW1DYWNoZS5nZXRQcm9ncmFtQ29kZSggbWF0ZXJpYWwsIHBhcmFtZXRlcnMgKTtcblxuXHRcdHZhciBwcm9ncmFtID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW07XG5cdFx0dmFyIHByb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0aWYgKCBwcm9ncmFtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG5ldyBtYXRlcmlhbFxuXHRcdFx0bWF0ZXJpYWwuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdFx0fSBlbHNlIGlmICggcHJvZ3JhbS5jb2RlICE9PSBjb2RlICkge1xuXG5cdFx0XHQvLyBjaGFuZ2VkIGdsc2wgb3IgcGFyYW1ldGVyc1xuXHRcdFx0cmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZSggbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNIYXNoICE9PSBsaWdodHMuc3RhdGUuaGFzaCApIHtcblxuXHRcdFx0cHJvcGVydGllcy51cGRhdGUoIG1hdGVyaWFsLCAnbGlnaHRzSGFzaCcsIGxpZ2h0cy5zdGF0ZS5oYXNoICk7XG5cdFx0XHRwcm9ncmFtQ2hhbmdlID0gZmFsc2U7XG5cblx0XHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIHNhbWUgZ2xzbCBhbmQgdW5pZm9ybSBsaXN0XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBvbmx5IHJlYnVpbGQgdW5pZm9ybSBsaXN0XG5cdFx0XHRwcm9ncmFtQ2hhbmdlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIHByb2dyYW1DaGFuZ2UgKSB7XG5cblx0XHRcdGlmICggcGFyYW1ldGVycy5zaGFkZXJJRCApIHtcblxuXHRcdFx0XHR2YXIgc2hhZGVyID0gU2hhZGVyTGliWyBwYXJhbWV0ZXJzLnNoYWRlcklEIF07XG5cblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciA9IHtcblx0XHRcdFx0XHRuYW1lOiBtYXRlcmlhbC50eXBlLFxuXHRcdFx0XHRcdHVuaWZvcm1zOiBVbmlmb3Jtc1V0aWxzLmNsb25lKCBzaGFkZXIudW5pZm9ybXMgKSxcblx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IHNoYWRlci52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHNoYWRlci5mcmFnbWVudFNoYWRlclxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIgPSB7XG5cdFx0XHRcdFx0bmFtZTogbWF0ZXJpYWwudHlwZSxcblx0XHRcdFx0XHR1bmlmb3JtczogbWF0ZXJpYWwudW5pZm9ybXMsXG5cdFx0XHRcdFx0dmVydGV4U2hhZGVyOiBtYXRlcmlhbC52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdFx0bWF0ZXJpYWwub25CZWZvcmVDb21waWxlKCBtYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyLCBfdGhpcyApO1xuXG5cdFx0XHRwcm9ncmFtID0gcHJvZ3JhbUNhY2hlLmFjcXVpcmVQcm9ncmFtKCBtYXRlcmlhbCwgbWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciwgcGFyYW1ldGVycywgY29kZSApO1xuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbSA9IHByb2dyYW07XG5cdFx0XHRtYXRlcmlhbC5wcm9ncmFtID0gcHJvZ3JhbTtcblxuXHRcdH1cblxuXHRcdHZhciBwcm9ncmFtQXR0cmlidXRlcyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlcygpO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cyA9IDA7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IF90aGlzLm1heE1vcnBoVGFyZ2V0czsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIHByb2dyYW1BdHRyaWJ1dGVzWyAnbW9ycGhUYXJnZXQnICsgaSBdID49IDAgKSB7XG5cblx0XHRcdFx0XHRtYXRlcmlhbC5udW1TdXBwb3J0ZWRNb3JwaFRhcmdldHMgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1vcnBoTm9ybWFscyApIHtcblxuXHRcdFx0bWF0ZXJpYWwubnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgX3RoaXMubWF4TW9ycGhOb3JtYWxzOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggcHJvZ3JhbUF0dHJpYnV0ZXNbICdtb3JwaE5vcm1hbCcgKyBpIF0gPj0gMCApIHtcblxuXHRcdFx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciB1bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIudW5pZm9ybXM7XG5cblx0XHRpZiAoICEgbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJlxuXHRcdFx0ISBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsIHx8XG5cdFx0XHRtYXRlcmlhbC5jbGlwcGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzID0gX2NsaXBwaW5nLm51bVBsYW5lcztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5udW1JbnRlcnNlY3Rpb24gPSBfY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uO1xuXHRcdFx0dW5pZm9ybXMuY2xpcHBpbmdQbGFuZXMgPSBfY2xpcHBpbmcudW5pZm9ybTtcblxuXHRcdH1cblxuXHRcdG1hdGVyaWFsUHJvcGVydGllcy5mb2cgPSBmb2c7XG5cblx0XHQvLyBzdG9yZSB0aGUgbGlnaHQgc2V0dXAgaXQgd2FzIGNyZWF0ZWQgZm9yXG5cblx0XHRtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzSGFzaCA9IGxpZ2h0cy5zdGF0ZS5oYXNoO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5saWdodHMgKSB7XG5cblx0XHRcdC8vIHdpcmUgdXAgdGhlIG1hdGVyaWFsIHRvIHRoaXMgcmVuZGVyZXIncyBsaWdodGluZyBzdGF0ZVxuXG5cdFx0XHR1bmlmb3Jtcy5hbWJpZW50TGlnaHRDb2xvci52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5hbWJpZW50O1xuXHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWw7XG5cdFx0XHR1bmlmb3Jtcy5zcG90TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3Q7XG5cdFx0XHR1bmlmb3Jtcy5yZWN0QXJlYUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYTtcblx0XHRcdHVuaWZvcm1zLnBvaW50TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50O1xuXHRcdFx0dW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5oZW1pO1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcDtcblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4O1xuXHRcdFx0dW5pZm9ybXMuc3BvdFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93TWFwO1xuXHRcdFx0dW5pZm9ybXMuc3BvdFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93TWF0cml4O1xuXHRcdFx0dW5pZm9ybXMucG9pbnRTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3dNYXA7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hdHJpeDtcblx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBhZGQgYXJlYSBsaWdodHMgc2hhZG93IGluZm8gdG8gdW5pZm9ybXNcblxuXHRcdH1cblxuXHRcdHZhciBwcm9nVW5pZm9ybXMgPSBtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbS5nZXRVbmlmb3JtcygpLFxuXHRcdFx0dW5pZm9ybXNMaXN0ID1cblx0XHRcdFx0V2ViR0xVbmlmb3Jtcy5zZXFXaXRoVmFsdWUoIHByb2dVbmlmb3Jtcy5zZXEsIHVuaWZvcm1zICk7XG5cblx0XHRtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0ID0gdW5pZm9ybXNMaXN0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRQcm9ncmFtKCBjYW1lcmEsIGZvZywgbWF0ZXJpYWwsIG9iamVjdCApIHtcblxuXHRcdF91c2VkVGV4dHVyZVVuaXRzID0gMDtcblxuXHRcdHZhciBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblx0XHR2YXIgbGlnaHRzID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLmxpZ2h0cztcblxuXHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCApIHtcblxuXHRcdFx0aWYgKCBfbG9jYWxDbGlwcGluZ0VuYWJsZWQgfHwgY2FtZXJhICE9PSBfY3VycmVudENhbWVyYSApIHtcblxuXHRcdFx0XHR2YXIgdXNlQ2FjaGUgPVxuXHRcdFx0XHRcdGNhbWVyYSA9PT0gX2N1cnJlbnRDYW1lcmEgJiZcblx0XHRcdFx0XHRtYXRlcmlhbC5pZCA9PT0gX2N1cnJlbnRNYXRlcmlhbElkO1xuXG5cdFx0XHRcdC8vIHdlIG1pZ2h0IHdhbnQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGggc29tZSBDbGlwcGluZ0dyb3VwXG5cdFx0XHRcdC8vIG9iamVjdCBpbnN0ZWFkIG9mIHRoZSBtYXRlcmlhbCwgb25jZSBpdCBiZWNvbWVzIGZlYXNpYmxlXG5cdFx0XHRcdC8vICgjODQ2NSwgIzgzNzkpXG5cdFx0XHRcdF9jbGlwcGluZy5zZXRTdGF0ZShcblx0XHRcdFx0XHRtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcywgbWF0ZXJpYWwuY2xpcEludGVyc2VjdGlvbiwgbWF0ZXJpYWwuY2xpcFNoYWRvd3MsXG5cdFx0XHRcdFx0Y2FtZXJhLCBtYXRlcmlhbFByb3BlcnRpZXMsIHVzZUNhY2hlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubmVlZHNVcGRhdGUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5mb2cgJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmZvZyAhPT0gZm9nICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwubGlnaHRzICYmIG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNIYXNoICE9PSBsaWdodHMuc3RhdGUuaGFzaCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdCggbWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzICE9PSBfY2xpcHBpbmcubnVtUGxhbmVzIHx8XG5cdFx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5udW1JbnRlcnNlY3Rpb24gIT09IF9jbGlwcGluZy5udW1JbnRlcnNlY3Rpb24gKSApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdGluaXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZvZywgb2JqZWN0ICk7XG5cdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHJlZnJlc2hQcm9ncmFtID0gZmFsc2U7XG5cdFx0dmFyIHJlZnJlc2hNYXRlcmlhbCA9IGZhbHNlO1xuXHRcdHZhciByZWZyZXNoTGlnaHRzID0gZmFsc2U7XG5cblx0XHR2YXIgcHJvZ3JhbSA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtLFxuXHRcdFx0cF91bmlmb3JtcyA9IHByb2dyYW0uZ2V0VW5pZm9ybXMoKSxcblx0XHRcdG1fdW5pZm9ybXMgPSBtYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyLnVuaWZvcm1zO1xuXG5cdFx0aWYgKCBzdGF0ZS51c2VQcm9ncmFtKCBwcm9ncmFtLnByb2dyYW0gKSApIHtcblxuXHRcdFx0cmVmcmVzaFByb2dyYW0gPSB0cnVlO1xuXHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcblx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5pZCAhPT0gX2N1cnJlbnRNYXRlcmlhbElkICkge1xuXG5cdFx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSBtYXRlcmlhbC5pZDtcblxuXHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVmcmVzaFByb2dyYW0gfHwgY2FtZXJhICE9PSBfY3VycmVudENhbWVyYSApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAncHJvamVjdGlvbk1hdHJpeCcsIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbG9nRGVwdGhCdWZGQycsXG5cdFx0XHRcdFx0Mi4wIC8gKCBNYXRoLmxvZyggY2FtZXJhLmZhciArIDEuMCApIC8gTWF0aC5MTjIgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIEF2b2lkIHVubmVlZGVkIHVuaWZvcm0gdXBkYXRlcyBwZXIgQXJyYXlDYW1lcmEncyBzdWItY2FtZXJhXG5cblx0XHRcdGlmICggX2N1cnJlbnRDYW1lcmEgIT09ICggX2N1cnJlbnRBcnJheUNhbWVyYSB8fCBjYW1lcmEgKSApIHtcblxuXHRcdFx0XHRfY3VycmVudENhbWVyYSA9ICggX2N1cnJlbnRBcnJheUNhbWVyYSB8fCBjYW1lcmEgKTtcblxuXHRcdFx0XHQvLyBsaWdodGluZyB1bmlmb3JtcyBkZXBlbmQgb24gdGhlIGNhbWVyYSBzbyBlbmZvcmNlIGFuIHVwZGF0ZVxuXHRcdFx0XHQvLyBub3csIGluIGNhc2UgdGhpcyBtYXRlcmlhbCBzdXBwb3J0cyBsaWdodHMgLSBvciBsYXRlciwgd2hlblxuXHRcdFx0XHQvLyB0aGUgbmV4dCBtYXRlcmlhbCB0aGF0IGRvZXMgZ2V0cyBhY3RpdmF0ZWQ6XG5cblx0XHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcdFx0Ly8gc2V0IHRvIHRydWUgb24gbWF0ZXJpYWwgY2hhbmdlXG5cdFx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1x0XHQvLyByZW1haW5zIHNldCB1bnRpbCB1cGRhdGUgZG9uZVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGxvYWQgbWF0ZXJpYWwgc3BlY2lmaWMgdW5pZm9ybXNcblx0XHRcdC8vIChzaGFkZXIgbWF0ZXJpYWwgYWxzbyBnZXRzIHRoZW0gZm9yIHRoZSBzYWtlIG9mIGdlbmVyaWNpdHkpXG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuZW52TWFwICkge1xuXG5cdFx0XHRcdHZhciB1Q2FtUG9zID0gcF91bmlmb3Jtcy5tYXAuY2FtZXJhUG9zaXRpb247XG5cblx0XHRcdFx0aWYgKCB1Q2FtUG9zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR1Q2FtUG9zLnNldFZhbHVlKCBfZ2wsXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuc2tpbm5pbmcgKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndmlld01hdHJpeCcsIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbm5pbmcgdW5pZm9ybXMgbXVzdCBiZSBzZXQgZXZlbiBpZiBtYXRlcmlhbCBkaWRuJ3QgY2hhbmdlXG5cdFx0Ly8gYXV0by1zZXR0aW5nIG9mIHRleHR1cmUgdW5pdCBmb3IgYm9uZSB0ZXh0dXJlIG11c3QgZ28gYmVmb3JlIG90aGVyIHRleHR1cmVzXG5cdFx0Ly8gbm90IHN1cmUgd2h5LCBidXQgb3RoZXJ3aXNlIHdlaXJkIHRoaW5ncyBoYXBwZW5cblxuXHRcdGlmICggbWF0ZXJpYWwuc2tpbm5pbmcgKSB7XG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeCcgKTtcblx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeEludmVyc2UnICk7XG5cblx0XHRcdHZhciBza2VsZXRvbiA9IG9iamVjdC5za2VsZXRvbjtcblxuXHRcdFx0aWYgKCBza2VsZXRvbiApIHtcblxuXHRcdFx0XHR2YXIgYm9uZXMgPSBza2VsZXRvbi5ib25lcztcblxuXHRcdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5mbG9hdFZlcnRleFRleHR1cmVzICkge1xuXG5cdFx0XHRcdFx0aWYgKCBza2VsZXRvbi5ib25lVGV4dHVyZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHQvLyBsYXlvdXQgKDEgbWF0cml4ID0gNCBwaXhlbHMpXG5cdFx0XHRcdFx0XHQvLyAgICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgKD0+IGNvbHVtbjEsIGNvbHVtbjIsIGNvbHVtbjMsIGNvbHVtbjQpXG5cdFx0XHRcdFx0XHQvLyAgd2l0aCAgOHg4ICBwaXhlbCB0ZXh0dXJlIG1heCAgIDE2IGJvbmVzICogNCBwaXhlbHMgPSAgKDggKiA4KVxuXHRcdFx0XHRcdFx0Ly8gICAgICAgMTZ4MTYgcGl4ZWwgdGV4dHVyZSBtYXggICA2NCBib25lcyAqIDQgcGl4ZWxzID0gKDE2ICogMTYpXG5cdFx0XHRcdFx0XHQvLyAgICAgICAzMngzMiBwaXhlbCB0ZXh0dXJlIG1heCAgMjU2IGJvbmVzICogNCBwaXhlbHMgPSAoMzIgKiAzMilcblx0XHRcdFx0XHRcdC8vICAgICAgIDY0eDY0IHBpeGVsIHRleHR1cmUgbWF4IDEwMjQgYm9uZXMgKiA0IHBpeGVscyA9ICg2NCAqIDY0KVxuXG5cblx0XHRcdFx0XHRcdHZhciBzaXplID0gTWF0aC5zcXJ0KCBib25lcy5sZW5ndGggKiA0ICk7IC8vIDQgcGl4ZWxzIG5lZWRlZCBmb3IgMSBtYXRyaXhcblx0XHRcdFx0XHRcdHNpemUgPSBfTWF0aC5jZWlsUG93ZXJPZlR3byggc2l6ZSApO1xuXHRcdFx0XHRcdFx0c2l6ZSA9IE1hdGgubWF4KCBzaXplLCA0ICk7XG5cblx0XHRcdFx0XHRcdHZhciBib25lTWF0cmljZXMgPSBuZXcgRmxvYXQzMkFycmF5KCBzaXplICogc2l6ZSAqIDQgKTsgLy8gNCBmbG9hdHMgcGVyIFJHQkEgcGl4ZWxcblx0XHRcdFx0XHRcdGJvbmVNYXRyaWNlcy5zZXQoIHNrZWxldG9uLmJvbmVNYXRyaWNlcyApOyAvLyBjb3B5IGN1cnJlbnQgdmFsdWVzXG5cblx0XHRcdFx0XHRcdHZhciBib25lVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggYm9uZU1hdHJpY2VzLCBzaXplLCBzaXplLCBSR0JBRm9ybWF0LCBGbG9hdFR5cGUgKTtcblx0XHRcdFx0XHRcdGJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0c2tlbGV0b24uYm9uZU1hdHJpY2VzID0gYm9uZU1hdHJpY2VzO1xuXHRcdFx0XHRcdFx0c2tlbGV0b24uYm9uZVRleHR1cmUgPSBib25lVGV4dHVyZTtcblx0XHRcdFx0XHRcdHNrZWxldG9uLmJvbmVUZXh0dXJlU2l6ZSA9IHNpemU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlICk7XG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnYm9uZVRleHR1cmVTaXplJywgc2tlbGV0b24uYm9uZVRleHR1cmVTaXplICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgc2tlbGV0b24sICdib25lTWF0cmljZXMnICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlZnJlc2hNYXRlcmlhbCApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndG9uZU1hcHBpbmdFeHBvc3VyZScsIF90aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgKTtcblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3RvbmVNYXBwaW5nV2hpdGVQb2ludCcsIF90aGlzLnRvbmVNYXBwaW5nV2hpdGVQb2ludCApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmxpZ2h0cyApIHtcblxuXHRcdFx0XHQvLyB0aGUgY3VycmVudCBtYXRlcmlhbCByZXF1aXJlcyBsaWdodGluZyBpbmZvXG5cblx0XHRcdFx0Ly8gbm90ZTogYWxsIGxpZ2h0aW5nIHVuaWZvcm1zIGFyZSBhbHdheXMgc2V0IGNvcnJlY3RseVxuXHRcdFx0XHQvLyB0aGV5IHNpbXBseSByZWZlcmVuY2UgdGhlIHJlbmRlcmVyJ3Mgc3RhdGUgZm9yIHRoZWlyXG5cdFx0XHRcdC8vIHZhbHVlc1xuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyB1c2UgdGhlIGN1cnJlbnQgbWF0ZXJpYWwncyAubmVlZHNVcGRhdGUgZmxhZ3MgdG8gc2V0XG5cdFx0XHRcdC8vIHRoZSBHTCBzdGF0ZSB3aGVuIHJlcXVpcmVkXG5cblx0XHRcdFx0bWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUoIG1fdW5pZm9ybXMsIHJlZnJlc2hMaWdodHMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZWZyZXNoIHVuaWZvcm1zIGNvbW1vbiB0byBzZXZlcmFsIG1hdGVyaWFsc1xuXG5cdFx0XHRpZiAoIGZvZyAmJiBtYXRlcmlhbC5mb2cgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRm9nKCBtX3VuaWZvcm1zLCBmb2cgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaEJhc2ljTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNMYW1iZXJ0KCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Rvb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Bob25nKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hQaHlzaWNhbE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoRGVwdGhNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24oIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0RlcHRoKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hEaXN0YW5jZU1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRGlzdGFuY2UoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaE5vcm1hbE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zTm9ybWFsKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc0xpbmVCYXNpY01hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0xpbmUoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbC5pc0xpbmVEYXNoZWRNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0Rhc2goIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1BvaW50c01hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1BvaW50cyggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNTaGFkb3dNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRtX3VuaWZvcm1zLmNvbG9yLnZhbHVlID0gbWF0ZXJpYWwuY29sb3I7XG5cdFx0XHRcdG1fdW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVjdEFyZWFMaWdodCBUZXh0dXJlXG5cdFx0XHQvLyBUT0RPIChtcmRvb2IpOiBGaW5kIGEgbmljZXIgaW1wbGVtZW50YXRpb25cblxuXHRcdFx0aWYgKCBtX3VuaWZvcm1zLmx0Y18xICE9PSB1bmRlZmluZWQgKSBtX3VuaWZvcm1zLmx0Y18xLnZhbHVlID0gVW5pZm9ybXNMaWIuTFRDXzE7XG5cdFx0XHRpZiAoIG1fdW5pZm9ybXMubHRjXzIgIT09IHVuZGVmaW5lZCApIG1fdW5pZm9ybXMubHRjXzIudmFsdWUgPSBVbmlmb3Jtc0xpYi5MVENfMjtcblxuXHRcdFx0V2ViR0xVbmlmb3Jtcy51cGxvYWQoIF9nbCwgbWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCwgbV91bmlmb3JtcywgX3RoaXMgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJiBtYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QsIG1fdW5pZm9ybXMsIF90aGlzICk7XG5cdFx0XHRtYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdC8vIGNvbW1vbiBtYXRyaWNlc1xuXG5cdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbW9kZWxWaWV3TWF0cml4Jywgb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ25vcm1hbE1hdHJpeCcsIG9iamVjdC5ub3JtYWxNYXRyaXggKTtcblx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdtb2RlbE1hdHJpeCcsIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fVxuXG5cdC8vIFVuaWZvcm1zIChyZWZyZXNoIHVuaWZvcm1zIG9iamVjdHMpXG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdGlmICggbWF0ZXJpYWwuY29sb3IgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUgPSBtYXRlcmlhbC5jb2xvcjtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmUgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmVtaXNzaXZlICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyTWFwLnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVudk1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW52TWFwLnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwO1xuXG5cdFx0XHQvLyBkb24ndCBmbGlwIEN1YmVUZXh0dXJlIGVudk1hcHMsIGZsaXAgZXZlcnl0aGluZyBlbHNlOlxuXHRcdFx0Ly8gIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSB3aWxsIGJlIGZsaXBwZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHQvLyAgV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnRleHR1cmUgd2lsbCBiZSBmbGlwcGVkIGJlY2F1c2UgaXQncyBhIFRleHR1cmUgYW5kIE5PVCBhIEN1YmVUZXh0dXJlXG5cdFx0XHQvLyB0aGlzIGNoZWNrIG11c3QgYmUgaGFuZGxlZCBkaWZmZXJlbnRseSwgb3IgcmVtb3ZlZCBlbnRpcmVseSwgaWYgV2ViR0xSZW5kZXJUYXJnZXRDdWJlIHVzZXMgYSBDdWJlVGV4dHVyZSBpbiB0aGUgZnV0dXJlXG5cdFx0XHR1bmlmb3Jtcy5mbGlwRW52TWFwLnZhbHVlID0gKCAhICggbWF0ZXJpYWwuZW52TWFwICYmIG1hdGVyaWFsLmVudk1hcC5pc0N1YmVUZXh0dXJlICkgKSA/IDEgOiAtIDE7XG5cblx0XHRcdHVuaWZvcm1zLnJlZmxlY3Rpdml0eS52YWx1ZSA9IG1hdGVyaWFsLnJlZmxlY3Rpdml0eTtcblx0XHRcdHVuaWZvcm1zLnJlZnJhY3Rpb25SYXRpby52YWx1ZSA9IG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdFx0dW5pZm9ybXMubWF4TWlwTGV2ZWwudmFsdWUgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwuZW52TWFwICkuX19tYXhNaXBMZXZlbDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubGlnaHRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmxpZ2h0TWFwLnZhbHVlID0gbWF0ZXJpYWwubGlnaHRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5saWdodE1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hb01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYW9NYXAudmFsdWUgPSBtYXRlcmlhbC5hb01hcDtcblx0XHRcdHVuaWZvcm1zLmFvTWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHQvLyB1diByZXBlYXQgYW5kIG9mZnNldCBzZXR0aW5nIHByaW9yaXRpZXNcblx0XHQvLyAxLiBjb2xvciBtYXBcblx0XHQvLyAyLiBzcGVjdWxhciBtYXBcblx0XHQvLyAzLiBub3JtYWwgbWFwXG5cdFx0Ly8gNC4gYnVtcCBtYXBcblx0XHQvLyA1LiBhbHBoYSBtYXBcblx0XHQvLyA2LiBlbWlzc2l2ZSBtYXBcblxuXHRcdHZhciB1dlNjYWxlTWFwO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5zcGVjdWxhck1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tZXRhbG5lc3NNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggdXZTY2FsZU1hcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0aWYgKCB1dlNjYWxlTWFwLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0dXZTY2FsZU1hcCA9IHV2U2NhbGVNYXAudGV4dHVyZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHV2U2NhbGVNYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR1dlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIHV2U2NhbGVNYXAubWF0cml4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0xpbmUoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUgPSBtYXRlcmlhbC5jb2xvcjtcblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRGFzaCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGFzaFNpemUudmFsdWUgPSBtYXRlcmlhbC5kYXNoU2l6ZTtcblx0XHR1bmlmb3Jtcy50b3RhbFNpemUudmFsdWUgPSBtYXRlcmlhbC5kYXNoU2l6ZSArIG1hdGVyaWFsLmdhcFNpemU7XG5cdFx0dW5pZm9ybXMuc2NhbGUudmFsdWUgPSBtYXRlcmlhbC5zY2FsZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUG9pbnRzKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlID0gbWF0ZXJpYWwuY29sb3I7XG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cdFx0dW5pZm9ybXMuc2l6ZS52YWx1ZSA9IG1hdGVyaWFsLnNpemUgKiBfcGl4ZWxSYXRpbztcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IF9oZWlnaHQgKiAwLjU7XG5cblx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5tYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5tYXAudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggbWF0ZXJpYWwubWFwLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNGb2coIHVuaWZvcm1zLCBmb2cgKSB7XG5cblx0XHR1bmlmb3Jtcy5mb2dDb2xvci52YWx1ZSA9IGZvZy5jb2xvcjtcblxuXHRcdGlmICggZm9nLmlzRm9nICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5mb2dOZWFyLnZhbHVlID0gZm9nLm5lYXI7XG5cdFx0XHR1bmlmb3Jtcy5mb2dGYXIudmFsdWUgPSBmb2cuZmFyO1xuXG5cdFx0fSBlbHNlIGlmICggZm9nLmlzRm9nRXhwMiApIHtcblxuXHRcdFx0dW5pZm9ybXMuZm9nRGVuc2l0eS52YWx1ZSA9IGZvZy5kZW5zaXR5O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNMYW1iZXJ0KCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQaG9uZyggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuc3BlY3VsYXIudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhcjtcblx0XHR1bmlmb3Jtcy5zaGluaW5lc3MudmFsdWUgPSBNYXRoLm1heCggbWF0ZXJpYWwuc2hpbmluZXNzLCAxZS00ICk7IC8vIHRvIHByZXZlbnQgcG93KCAwLjAsIDAuMCApXG5cblx0XHRpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICk7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNUb29uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRyZWZyZXNoVW5pZm9ybXNQaG9uZyggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmdyYWRpZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ncmFkaWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmdyYWRpZW50TWFwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMucm91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwucm91Z2huZXNzO1xuXHRcdHVuaWZvcm1zLm1ldGFsbmVzcy52YWx1ZSA9IG1hdGVyaWFsLm1ldGFsbmVzcztcblxuXHRcdGlmICggbWF0ZXJpYWwucm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5yb3VnaG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1ldGFsbmVzc01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWV0YWxuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cdFx0XHR1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgPSBtYXRlcmlhbC5idW1wU2NhbGU7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW52TWFwICkge1xuXG5cdFx0XHQvL3VuaWZvcm1zLmVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcDsgLy8gcGFydCBvZiB1bmlmb3JtcyBjb21tb25cblx0XHRcdHVuaWZvcm1zLmVudk1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdHVuaWZvcm1zLnJlZmxlY3Rpdml0eS52YWx1ZSA9IG1hdGVyaWFsLnJlZmxlY3Rpdml0eTsgLy8gYWxzbyBwYXJ0IG9mIHVuaWZvcm1zIGNvbW1vblxuXG5cdFx0dW5pZm9ybXMuY2xlYXJDb2F0LnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJDb2F0O1xuXHRcdHVuaWZvcm1zLmNsZWFyQ29hdFJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcztcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRGVwdGgoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdFx0dW5pZm9ybXMucmVmZXJlbmNlUG9zaXRpb24udmFsdWUuY29weSggbWF0ZXJpYWwucmVmZXJlbmNlUG9zaXRpb24gKTtcblx0XHR1bmlmb3Jtcy5uZWFyRGlzdGFuY2UudmFsdWUgPSBtYXRlcmlhbC5uZWFyRGlzdGFuY2U7XG5cdFx0dW5pZm9ybXMuZmFyRGlzdGFuY2UudmFsdWUgPSBtYXRlcmlhbC5mYXJEaXN0YW5jZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zTm9ybWFsKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIElmIHVuaWZvcm1zIGFyZSBtYXJrZWQgYXMgY2xlYW4sIHRoZXkgZG9uJ3QgbmVlZCB0byBiZSBsb2FkZWQgdG8gdGhlIEdQVS5cblxuXHRmdW5jdGlvbiBtYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSggdW5pZm9ybXMsIHZhbHVlICkge1xuXG5cdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblxuXHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMucG9pbnRMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5zcG90TGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMucmVjdEFyZWFMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5oZW1pc3BoZXJlTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cblx0fVxuXG5cdC8vIFRleHR1cmVzXG5cblx0ZnVuY3Rpb24gYWxsb2NUZXh0dXJlVW5pdCgpIHtcblxuXHRcdHZhciB0ZXh0dXJlVW5pdCA9IF91c2VkVGV4dHVyZVVuaXRzO1xuXG5cdFx0aWYgKCB0ZXh0dXJlVW5pdCA+PSBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZXMgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRyeWluZyB0byB1c2UgJyArIHRleHR1cmVVbml0ICsgJyB0ZXh0dXJlIHVuaXRzIHdoaWxlIHRoaXMgR1BVIHN1cHBvcnRzIG9ubHkgJyArIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlcyApO1xuXG5cdFx0fVxuXG5cdFx0X3VzZWRUZXh0dXJlVW5pdHMgKz0gMTtcblxuXHRcdHJldHVybiB0ZXh0dXJlVW5pdDtcblxuXHR9XG5cblx0dGhpcy5hbGxvY1RleHR1cmVVbml0ID0gYWxsb2NUZXh0dXJlVW5pdDtcblxuXHQvLyB0aGlzLnNldFRleHR1cmUyRCA9IHNldFRleHR1cmUyRDtcblx0dGhpcy5zZXRUZXh0dXJlMkQgPSAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB3YXJuZWQgPSBmYWxzZTtcblxuXHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5OiBwZWVsIHRleHR1cmUudGV4dHVyZVxuXHRcdHJldHVybiBmdW5jdGlvbiBzZXRUZXh0dXJlMkQoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRcdGlmICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0aWYgKCAhIHdhcm5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnNldFRleHR1cmUyRDogZG9uJ3QgdXNlIHJlbmRlciB0YXJnZXRzIGFzIHRleHR1cmVzLiBVc2UgdGhlaXIgLnRleHR1cmUgcHJvcGVydHkgaW5zdGVhZC5cIiApO1xuXHRcdFx0XHRcdHdhcm5lZCA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUgPSB0ZXh0dXJlLnRleHR1cmU7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEKCB0ZXh0dXJlLCBzbG90ICk7XG5cblx0XHR9O1xuXG5cdH0oKSApO1xuXG5cdHRoaXMuc2V0VGV4dHVyZSA9ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHdhcm5lZCA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHNldFRleHR1cmUoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRcdGlmICggISB3YXJuZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRUZXh0dXJlIGlzIGRlcHJlY2F0ZWQsIHVzZSBzZXRUZXh0dXJlMkQgaW5zdGVhZC5cIiApO1xuXHRcdFx0XHR3YXJuZWQgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApO1xuXG5cdFx0fTtcblxuXHR9KCkgKTtcblxuXHR0aGlzLnNldFRleHR1cmVDdWJlID0gKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgd2FybmVkID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0VGV4dHVyZUN1YmUoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5OiBwZWVsIHRleHR1cmUudGV4dHVyZVxuXHRcdFx0aWYgKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgKSB7XG5cblx0XHRcdFx0aWYgKCAhIHdhcm5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnNldFRleHR1cmVDdWJlOiBkb24ndCB1c2UgY3ViZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuXCIgKTtcblx0XHRcdFx0XHR3YXJuZWQgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlID0gdGV4dHVyZS50ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGN1cnJlbnRseSByZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnRleHR1cmUgaXMgYSBUZXh0dXJlIGFuZCBOT1QgYSBDdWJlVGV4dHVyZVxuXHRcdFx0Ly8gVE9ETzogdW5pZnkgdGhlc2UgY29kZSBwYXRoc1xuXHRcdFx0aWYgKCAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc0N1YmVUZXh0dXJlICkgfHxcblx0XHRcdFx0KCBBcnJheS5pc0FycmF5KCB0ZXh0dXJlLmltYWdlICkgJiYgdGV4dHVyZS5pbWFnZS5sZW5ndGggPT09IDYgKSApIHtcblxuXHRcdFx0XHQvLyBDb21wcmVzc2VkVGV4dHVyZSBjYW4gaGF2ZSBBcnJheSBpbiBpbWFnZSA6L1xuXG5cdFx0XHRcdC8vIHRoaXMgZnVuY3Rpb24gYWxvbmUgc2hvdWxkIHRha2UgY2FyZSBvZiBjdWJlIHRleHR1cmVzXG5cdFx0XHRcdHRleHR1cmVzLnNldFRleHR1cmVDdWJlKCB0ZXh0dXJlLCBzbG90ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gYXNzdW1lZDogdGV4dHVyZSBwcm9wZXJ0eSBvZiBUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmVcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZUR5bmFtaWMoIHRleHR1cmUsIHNsb3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9KCkgKTtcblxuXHQvL1xuXG5cdHRoaXMuc2V0RnJhbWVidWZmZXIgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0X2ZyYW1lYnVmZmVyID0gdmFsdWU7XG5cblx0fTtcblxuXHR0aGlzLmdldFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfY3VycmVudFJlbmRlclRhcmdldDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRfY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICYmIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGV4dHVyZXMuc2V0dXBSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGZyYW1lYnVmZmVyID0gX2ZyYW1lYnVmZmVyO1xuXHRcdHZhciBpc0N1YmUgPSBmYWxzZTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHR2YXIgX193ZWJnbEZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtcblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgKSB7XG5cblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXJbIHJlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZSBdO1xuXHRcdFx0XHRpc0N1YmUgPSB0cnVlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9jdXJyZW50Vmlld3BvcnQuY29weSggcmVuZGVyVGFyZ2V0LnZpZXdwb3J0ICk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggcmVuZGVyVGFyZ2V0LnNjaXNzb3IgKTtcblx0XHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSByZW5kZXJUYXJnZXQuc2Npc3NvclRlc3Q7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApO1xuXHRcdFx0X2N1cnJlbnRTY2lzc29yLmNvcHkoIF9zY2lzc29yICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3JUZXN0ID0gX3NjaXNzb3JUZXN0O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBfY3VycmVudEZyYW1lYnVmZmVyICE9PSBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApO1xuXHRcdFx0X2N1cnJlbnRGcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQgKTtcblx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IgKTtcblx0XHRzdGF0ZS5zZXRTY2lzc29yVGVzdCggX2N1cnJlbnRTY2lzc29yVGVzdCApO1xuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIHJlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIHJlbmRlclRhcmdldC5hY3RpdmVNaXBNYXBMZXZlbCApO1xuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJ1ZmZlciApIHtcblxuXHRcdGlmICggISAoIHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHZhciBmcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7XG5cblx0XHRpZiAoIGZyYW1lYnVmZmVyICkge1xuXG5cdFx0XHR2YXIgcmVzdG9yZSA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoIGZyYW1lYnVmZmVyICE9PSBfY3VycmVudEZyYW1lYnVmZmVyICkge1xuXG5cdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHRyZXN0b3JlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdHZhciB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cdFx0XHRcdHZhciB0ZXh0dXJlRm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7XG5cdFx0XHRcdHZhciB0ZXh0dXJlVHlwZSA9IHRleHR1cmUudHlwZTtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmVGb3JtYXQgIT09IFJHQkFGb3JtYXQgJiYgdXRpbHMuY29udmVydCggdGV4dHVyZUZvcm1hdCApICE9PSBfZ2wuZ2V0UGFyYW1ldGVyKCBfZ2wuSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9GT1JNQVQgKSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gUkdCQSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIGZvcm1hdC4nICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRleHR1cmVUeXBlICE9PSBVbnNpZ25lZEJ5dGVUeXBlICYmIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVUeXBlICkgIT09IF9nbC5nZXRQYXJhbWV0ZXIoIF9nbC5JTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX1RZUEUgKSAmJiAvLyBJRTExLCBFZGdlIGFuZCBDaHJvbWUgTWFjIDwgNTIgKCM5NTEzKVxuXHRcdFx0XHRcdCEgKCB0ZXh0dXJlVHlwZSA9PT0gRmxvYXRUeXBlICYmICggZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdCcgKSB8fCBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbG9yX2J1ZmZlcl9mbG9hdCcgKSApICkgJiYgLy8gQ2hyb21lIE1hYyA+PSA1MiBhbmQgRmlyZWZveFxuXHRcdFx0XHRcdCEgKCB0ZXh0dXJlVHlwZSA9PT0gSGFsZkZsb2F0VHlwZSAmJiBleHRlbnNpb25zLmdldCggJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcgKSApICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIF9nbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKCBfZ2wuRlJBTUVCVUZGRVIgKSA9PT0gX2dsLkZSQU1FQlVGRkVSX0NPTVBMRVRFICkge1xuXG5cdFx0XHRcdFx0Ly8gdGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnQgZW5zdXJlcyB2YWxpZCByZWFkIHJlcXVlc3RzIChubyBvdXQtb2YtYm91bmRzIHBpeGVscywgc2VlICM4NjA0KVxuXG5cdFx0XHRcdFx0aWYgKCAoIHggPj0gMCAmJiB4IDw9ICggcmVuZGVyVGFyZ2V0LndpZHRoIC0gd2lkdGggKSApICYmICggeSA+PSAwICYmIHkgPD0gKCByZW5kZXJUYXJnZXQuaGVpZ2h0IC0gaGVpZ2h0ICkgKSApIHtcblxuXHRcdFx0XHRcdFx0X2dsLnJlYWRQaXhlbHMoIHgsIHksIHdpZHRoLCBoZWlnaHQsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVGb3JtYXQgKSwgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSwgYnVmZmVyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlYWRQaXhlbHMgZnJvbSByZW5kZXJUYXJnZXQgZmFpbGVkLiBGcmFtZWJ1ZmZlciBub3QgY29tcGxldGUuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBmaW5hbGx5IHtcblxuXHRcdFx0XHRpZiAoIHJlc3RvcmUgKSB7XG5cblx0XHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIF9jdXJyZW50RnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMuY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlID0gZnVuY3Rpb24gKCBwb3NpdGlvbiwgdGV4dHVyZSwgbGV2ZWwgKSB7XG5cblx0XHR2YXIgd2lkdGggPSB0ZXh0dXJlLmltYWdlLndpZHRoO1xuXHRcdHZhciBoZWlnaHQgPSB0ZXh0dXJlLmltYWdlLmhlaWdodDtcblx0XHR2YXIgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCApO1xuXG5cdFx0dGhpcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTtcblxuXHRcdF9nbC5jb3B5VGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGxldmVsIHx8IDAsIGdsRm9ybWF0LCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB3aWR0aCwgaGVpZ2h0LCAwICk7XG5cblx0fTtcblxuXHR0aGlzLmNvcHlUZXh0dXJlVG9UZXh0dXJlID0gZnVuY3Rpb24gKCBwb3NpdGlvbiwgc3JjVGV4dHVyZSwgZHN0VGV4dHVyZSwgbGV2ZWwgKSB7XG5cblx0XHR2YXIgd2lkdGggPSBzcmNUZXh0dXJlLmltYWdlLndpZHRoO1xuXHRcdHZhciBoZWlnaHQgPSBzcmNUZXh0dXJlLmltYWdlLmhlaWdodDtcblx0XHR2YXIgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCBkc3RUZXh0dXJlLmZvcm1hdCApO1xuXHRcdHZhciBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCBkc3RUZXh0dXJlLnR5cGUgKTtcblxuXHRcdHRoaXMuc2V0VGV4dHVyZTJEKCBkc3RUZXh0dXJlLCAwICk7XG5cblx0XHRpZiAoIHNyY1RleHR1cmUuaXNEYXRhVGV4dHVyZSApIHtcblxuXHRcdFx0X2dsLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbCB8fCAwLCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB3aWR0aCwgaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBzcmNUZXh0dXJlLmltYWdlLmRhdGEgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWwgfHwgMCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgZ2xGb3JtYXQsIGdsVHlwZSwgc3JjVGV4dHVyZS5pbWFnZSApO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBGb2dFeHAyKCBjb2xvciwgZGVuc2l0eSApIHtcblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xuXHR0aGlzLmRlbnNpdHkgPSAoIGRlbnNpdHkgIT09IHVuZGVmaW5lZCApID8gZGVuc2l0eSA6IDAuMDAwMjU7XG5cbn1cblxuRm9nRXhwMi5wcm90b3R5cGUuaXNGb2dFeHAyID0gdHJ1ZTtcblxuRm9nRXhwMi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyBGb2dFeHAyKCB0aGlzLmNvbG9yLCB0aGlzLmRlbnNpdHkgKTtcblxufTtcblxuRm9nRXhwMi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCAvKiBtZXRhICovICkge1xuXG5cdHJldHVybiB7XG5cdFx0dHlwZTogJ0ZvZ0V4cDInLFxuXHRcdGNvbG9yOiB0aGlzLmNvbG9yLmdldEhleCgpLFxuXHRcdGRlbnNpdHk6IHRoaXMuZGVuc2l0eVxuXHR9O1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIEZvZyggY29sb3IsIG5lYXIsIGZhciApIHtcblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xuXG5cdHRoaXMubmVhciA9ICggbmVhciAhPT0gdW5kZWZpbmVkICkgPyBuZWFyIDogMTtcblx0dGhpcy5mYXIgPSAoIGZhciAhPT0gdW5kZWZpbmVkICkgPyBmYXIgOiAxMDAwO1xuXG59XG5cbkZvZy5wcm90b3R5cGUuaXNGb2cgPSB0cnVlO1xuXG5Gb2cucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXG5cdHJldHVybiBuZXcgRm9nKCB0aGlzLmNvbG9yLCB0aGlzLm5lYXIsIHRoaXMuZmFyICk7XG5cbn07XG5cbkZvZy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCAvKiBtZXRhICovICkge1xuXG5cdHJldHVybiB7XG5cdFx0dHlwZTogJ0ZvZycsXG5cdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXG5cdFx0bmVhcjogdGhpcy5uZWFyLFxuXHRcdGZhcjogdGhpcy5mYXJcblx0fTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFNjZW5lKCkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2NlbmUnO1xuXG5cdHRoaXMuYmFja2dyb3VuZCA9IG51bGw7XG5cdHRoaXMuZm9nID0gbnVsbDtcblx0dGhpcy5vdmVycmlkZU1hdGVyaWFsID0gbnVsbDtcblxuXHR0aGlzLmF1dG9VcGRhdGUgPSB0cnVlOyAvLyBjaGVja2VkIGJ5IHRoZSByZW5kZXJlclxuXG59XG5cblNjZW5lLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNjZW5lLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UuYmFja2dyb3VuZCAhPT0gbnVsbCApIHRoaXMuYmFja2dyb3VuZCA9IHNvdXJjZS5iYWNrZ3JvdW5kLmNsb25lKCk7XG5cdFx0aWYgKCBzb3VyY2UuZm9nICE9PSBudWxsICkgdGhpcy5mb2cgPSBzb3VyY2UuZm9nLmNsb25lKCk7XG5cdFx0aWYgKCBzb3VyY2Uub3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IHNvdXJjZS5vdmVycmlkZU1hdGVyaWFsLmNsb25lKCk7XG5cblx0XHR0aGlzLmF1dG9VcGRhdGUgPSBzb3VyY2UuYXV0b1VwZGF0ZTtcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgZGF0YSA9IE9iamVjdDNELnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdFx0aWYgKCB0aGlzLmJhY2tncm91bmQgIT09IG51bGwgKSBkYXRhLm9iamVjdC5iYWNrZ3JvdW5kID0gdGhpcy5iYWNrZ3JvdW5kLnRvSlNPTiggbWV0YSApO1xuXHRcdGlmICggdGhpcy5mb2cgIT09IG51bGwgKSBkYXRhLm9iamVjdC5mb2cgPSB0aGlzLmZvZy50b0pTT04oKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICpcdHV2T2Zmc2V0OiBuZXcgVEhSRUUuVmVjdG9yMigpLFxuICpcdHV2U2NhbGU6IG5ldyBUSFJFRS5WZWN0b3IyKClcbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBTcHJpdGVNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1Nwcml0ZU1hdGVyaWFsJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5yb3RhdGlvbiA9IDA7XG5cblx0dGhpcy5mb2cgPSBmYWxzZTtcblx0dGhpcy5saWdodHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cblNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ByaXRlTWF0ZXJpYWw7XG5TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUuaXNTcHJpdGVNYXRlcmlhbCA9IHRydWU7XG5cblNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMucm90YXRpb24gPSBzb3VyY2Uucm90YXRpb247XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gU3ByaXRlKCBtYXRlcmlhbCApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1Nwcml0ZSc7XG5cblx0dGhpcy5tYXRlcmlhbCA9ICggbWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApID8gbWF0ZXJpYWwgOiBuZXcgU3ByaXRlTWF0ZXJpYWwoKTtcblxuXHR0aGlzLmNlbnRlciA9IG5ldyBWZWN0b3IyKCAwLjUsIDAuNSApO1xuXG59XG5cblNwcml0ZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBTcHJpdGUsXG5cblx0aXNTcHJpdGU6IHRydWUsXG5cblx0cmF5Y2FzdDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaW50ZXJzZWN0UG9pbnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciB3b3JsZFNjYWxlID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgbXZQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgYWxpZ25lZFBvc2l0aW9uID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgcm90YXRlZFBvc2l0aW9uID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdmlld1dvcmxkTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdHZhciB2QSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZCID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdkMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gdHJhbnNmb3JtVmVydGV4KCB2ZXJ0ZXhQb3NpdGlvbiwgbXZQb3NpdGlvbiwgY2VudGVyLCBzY2FsZSwgc2luLCBjb3MgKSB7XG5cblx0XHRcdC8vIGNvbXB1dGUgcG9zaXRpb24gaW4gY2FtZXJhIHNwYWNlXG5cdFx0XHRhbGlnbmVkUG9zaXRpb24uc3ViVmVjdG9ycyggdmVydGV4UG9zaXRpb24sIGNlbnRlciApLmFkZFNjYWxhciggMC41ICkubXVsdGlwbHkoIHNjYWxlICk7XG5cblx0XHRcdC8vIHRvIGNoZWNrIGlmIHJvdGF0aW9uIGlzIG5vdCB6ZXJvXG5cdFx0XHRpZiAoIHNpbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJvdGF0ZWRQb3NpdGlvbi54ID0gKCBjb3MgKiBhbGlnbmVkUG9zaXRpb24ueCApIC0gKCBzaW4gKiBhbGlnbmVkUG9zaXRpb24ueSApO1xuXHRcdFx0XHRyb3RhdGVkUG9zaXRpb24ueSA9ICggc2luICogYWxpZ25lZFBvc2l0aW9uLnggKSArICggY29zICogYWxpZ25lZFBvc2l0aW9uLnkgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyb3RhdGVkUG9zaXRpb24uY29weSggYWxpZ25lZFBvc2l0aW9uICk7XG5cblx0XHRcdH1cblxuXG5cdFx0XHR2ZXJ0ZXhQb3NpdGlvbi5jb3B5KCBtdlBvc2l0aW9uICk7XG5cdFx0XHR2ZXJ0ZXhQb3NpdGlvbi54ICs9IHJvdGF0ZWRQb3NpdGlvbi54O1xuXHRcdFx0dmVydGV4UG9zaXRpb24ueSArPSByb3RhdGVkUG9zaXRpb24ueTtcblxuXHRcdFx0Ly8gdHJhbnNmb3JtIHRvIHdvcmxkIHNwYWNlXG5cdFx0XHR2ZXJ0ZXhQb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdXb3JsZE1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdFx0d29ybGRTY2FsZS5zZXRGcm9tTWF0cml4U2NhbGUoIHRoaXMubWF0cml4V29ybGQgKTtcblx0XHRcdHZpZXdXb3JsZE1hdHJpeC5nZXRJbnZlcnNlKCB0aGlzLm1vZGVsVmlld01hdHJpeCApLnByZW11bHRpcGx5KCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cdFx0XHRtdlBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tb2RlbFZpZXdNYXRyaXggKTtcblxuXHRcdFx0dmFyIHJvdGF0aW9uID0gdGhpcy5tYXRlcmlhbC5yb3RhdGlvbjtcblx0XHRcdHZhciBzaW4sIGNvcztcblx0XHRcdGlmICggcm90YXRpb24gIT09IDAgKSB7XG5cblx0XHRcdFx0Y29zID0gTWF0aC5jb3MoIHJvdGF0aW9uICk7XG5cdFx0XHRcdHNpbiA9IE1hdGguc2luKCByb3RhdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcblxuXHRcdFx0dHJhbnNmb3JtVmVydGV4KCB2QS5zZXQoIC0gMC41LCAtIDAuNSwgMCApLCBtdlBvc2l0aW9uLCBjZW50ZXIsIHdvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cdFx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIHZCLnNldCggMC41LCAtIDAuNSwgMCApLCBtdlBvc2l0aW9uLCBjZW50ZXIsIHdvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cdFx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIHZDLnNldCggMC41LCAwLjUsIDAgKSwgbXZQb3NpdGlvbiwgY2VudGVyLCB3b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xuXG5cdFx0XHQvLyBjaGVjayBmaXJzdCB0cmlhbmdsZVxuXHRcdFx0dmFyIGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHZBLCB2QiwgdkMsIGZhbHNlLCBpbnRlcnNlY3RQb2ludCApO1xuXG5cdFx0XHRpZiAoIGludGVyc2VjdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyBjaGVjayBzZWNvbmQgdHJpYW5nbGVcblx0XHRcdFx0dHJhbnNmb3JtVmVydGV4KCB2Qi5zZXQoIC0gMC41LCAwLjUsIDAgKSwgbXZQb3NpdGlvbiwgY2VudGVyLCB3b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xuXHRcdFx0XHRpbnRlcnNlY3QgPSByYXljYXN0ZXIucmF5LmludGVyc2VjdFRyaWFuZ2xlKCB2QSwgdkMsIHZCLCBmYWxzZSwgaW50ZXJzZWN0UG9pbnQgKTtcblx0XHRcdFx0aWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyc2VjdFBvaW50ICk7XG5cblx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XG5cblx0XHRcdGludGVyc2VjdHMucHVzaCgge1xuXG5cdFx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcblx0XHRcdFx0cG9pbnQ6IGludGVyc2VjdFBvaW50LmNsb25lKCksXG5cdFx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRcdG9iamVjdDogdGhpc1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UuY2VudGVyICE9PSB1bmRlZmluZWQgKSB0aGlzLmNlbnRlci5jb3B5KCBzb3VyY2UuY2VudGVyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMT0QoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMT0QnO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cdFx0bGV2ZWxzOiB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IFtdXG5cdFx0fVxuXHR9ICk7XG5cbn1cblxuTE9ELnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IExPRCxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgZmFsc2UgKTtcblxuXHRcdHZhciBsZXZlbHMgPSBzb3VyY2UubGV2ZWxzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmFkZExldmVsKCBsZXZlbC5vYmplY3QuY2xvbmUoKSwgbGV2ZWwuZGlzdGFuY2UgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkTGV2ZWw6IGZ1bmN0aW9uICggb2JqZWN0LCBkaXN0YW5jZSApIHtcblxuXHRcdGlmICggZGlzdGFuY2UgPT09IHVuZGVmaW5lZCApIGRpc3RhbmNlID0gMDtcblxuXHRcdGRpc3RhbmNlID0gTWF0aC5hYnMoIGRpc3RhbmNlICk7XG5cblx0XHR2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRmb3IgKCB2YXIgbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsICsrICkge1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBsIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGxldmVscy5zcGxpY2UoIGwsIDAsIHsgZGlzdGFuY2U6IGRpc3RhbmNlLCBvYmplY3Q6IG9iamVjdCB9ICk7XG5cblx0XHR0aGlzLmFkZCggb2JqZWN0ICk7XG5cblx0fSxcblxuXHRnZXRPYmplY3RGb3JEaXN0YW5jZTogZnVuY3Rpb24gKCBkaXN0YW5jZSApIHtcblxuXHRcdHZhciBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGZvciAoIHZhciBpID0gMSwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBpIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBsZXZlbHNbIGkgLSAxIF0ub2JqZWN0O1xuXG5cdH0sXG5cblx0cmF5Y2FzdDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbWF0cml4UG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdFx0bWF0cml4UG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIG1hdHJpeFBvc2l0aW9uICk7XG5cblx0XHRcdHRoaXMuZ2V0T2JqZWN0Rm9yRGlzdGFuY2UoIGRpc3RhbmNlICkucmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICk7XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdjIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSggY2FtZXJhICkge1xuXG5cdFx0XHR2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRcdGlmICggbGV2ZWxzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdFx0djEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblx0XHRcdFx0djIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0dmFyIGRpc3RhbmNlID0gdjEuZGlzdGFuY2VUbyggdjIgKTtcblxuXHRcdFx0XHRsZXZlbHNbIDAgXS5vYmplY3QudmlzaWJsZSA9IHRydWU7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAxLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RhbmNlID49IGxldmVsc1sgaSBdLmRpc3RhbmNlICkge1xuXG5cdFx0XHRcdFx0XHRsZXZlbHNbIGkgLSAxIF0ub2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGxldmVsc1sgaSBdLm9iamVjdC52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bGV2ZWxzWyBpIF0ub2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSgpLFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LmxldmVscyA9IFtdO1xuXG5cdFx0dmFyIGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG5cdFx0XHRkYXRhLm9iamVjdC5sZXZlbHMucHVzaCgge1xuXHRcdFx0XHRvYmplY3Q6IGxldmVsLm9iamVjdC51dWlkLFxuXHRcdFx0XHRkaXN0YW5jZTogbGV2ZWwuZGlzdGFuY2Vcblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWNoYWVsIGd1ZXJyZXJvIC8gaHR0cDovL3JlYWxpdHltZWx0ZG93bi5jb21cbiAqIEBhdXRob3IgaWtlcnIgLyBodHRwOi8vdmVyb2xkLmNvbVxuICovXG5cbmZ1bmN0aW9uIFNrZWxldG9uKCBib25lcywgYm9uZUludmVyc2VzICkge1xuXG5cdC8vIGNvcHkgdGhlIGJvbmUgYXJyYXlcblxuXHRib25lcyA9IGJvbmVzIHx8IFtdO1xuXG5cdHRoaXMuYm9uZXMgPSBib25lcy5zbGljZSggMCApO1xuXHR0aGlzLmJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIHRoaXMuYm9uZXMubGVuZ3RoICogMTYgKTtcblxuXHQvLyB1c2UgdGhlIHN1cHBsaWVkIGJvbmUgaW52ZXJzZXMgb3IgY2FsY3VsYXRlIHRoZSBpbnZlcnNlc1xuXG5cdGlmICggYm9uZUludmVyc2VzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aGlzLmNhbGN1bGF0ZUludmVyc2VzKCk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggdGhpcy5ib25lcy5sZW5ndGggPT09IGJvbmVJbnZlcnNlcy5sZW5ndGggKSB7XG5cblx0XHRcdHRoaXMuYm9uZUludmVyc2VzID0gYm9uZUludmVyc2VzLnNsaWNlKCAwICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbiBib25lSW52ZXJzZXMgaXMgdGhlIHdyb25nIGxlbmd0aC4nICk7XG5cblx0XHRcdHRoaXMuYm9uZUludmVyc2VzID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIG5ldyBNYXRyaXg0KCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5PYmplY3QuYXNzaWduKCBTa2VsZXRvbi5wcm90b3R5cGUsIHtcblxuXHRjYWxjdWxhdGVJbnZlcnNlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRcdGlmICggdGhpcy5ib25lc1sgaSBdICkge1xuXG5cdFx0XHRcdGludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5ib25lc1sgaSBdLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ib25lSW52ZXJzZXMucHVzaCggaW52ZXJzZSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0cG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJvbmUsIGksIGlsO1xuXG5cdFx0Ly8gcmVjb3ZlciB0aGUgYmluZC10aW1lIHdvcmxkIG1hdHJpY2VzXG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUgKSB7XG5cblx0XHRcdFx0Ym9uZS5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKCB0aGlzLmJvbmVJbnZlcnNlc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGNvbXB1dGUgdGhlIGxvY2FsIG1hdHJpY2VzLCBwb3NpdGlvbnMsIHJvdGF0aW9ucyBhbmQgc2NhbGVzXG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUgKSB7XG5cblx0XHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0XHRib25lLm1hdHJpeC5nZXRJbnZlcnNlKCBib25lLnBhcmVudC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHRcdGJvbmUubWF0cml4Lm11bHRpcGx5KCBib25lLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGJvbmUubWF0cml4LmNvcHkoIGJvbmUubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ym9uZS5tYXRyaXguZGVjb21wb3NlKCBib25lLnBvc2l0aW9uLCBib25lLnF1YXRlcm5pb24sIGJvbmUuc2NhbGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0sXG5cblx0dXBkYXRlOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXRNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciBpZGVudGl0eU1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0XHR2YXIgYm9uZXMgPSB0aGlzLmJvbmVzO1xuXHRcdFx0dmFyIGJvbmVJbnZlcnNlcyA9IHRoaXMuYm9uZUludmVyc2VzO1xuXHRcdFx0dmFyIGJvbmVNYXRyaWNlcyA9IHRoaXMuYm9uZU1hdHJpY2VzO1xuXHRcdFx0dmFyIGJvbmVUZXh0dXJlID0gdGhpcy5ib25lVGV4dHVyZTtcblxuXHRcdFx0Ly8gZmxhdHRlbiBib25lIG1hdHJpY2VzIHRvIGFycmF5XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHQvLyBjb21wdXRlIHRoZSBvZmZzZXQgYmV0d2VlbiB0aGUgY3VycmVudCBhbmQgdGhlIG9yaWdpbmFsIHRyYW5zZm9ybVxuXG5cdFx0XHRcdHZhciBtYXRyaXggPSBib25lc1sgaSBdID8gYm9uZXNbIGkgXS5tYXRyaXhXb3JsZCA6IGlkZW50aXR5TWF0cml4O1xuXG5cdFx0XHRcdG9mZnNldE1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBtYXRyaXgsIGJvbmVJbnZlcnNlc1sgaSBdICk7XG5cdFx0XHRcdG9mZnNldE1hdHJpeC50b0FycmF5KCBib25lTWF0cmljZXMsIGkgKiAxNiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYm9uZVRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRib25lVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSApKCksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgU2tlbGV0b24oIHRoaXMuYm9uZXMsIHRoaXMuYm9uZUludmVyc2VzICk7XG5cblx0fSxcblxuXHRnZXRCb25lQnlOYW1lOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGJvbmUgPSB0aGlzLmJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZS5uYW1lID09PSBuYW1lICkge1xuXG5cdFx0XHRcdHJldHVybiBib25lO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tXG4gKi9cblxuZnVuY3Rpb24gQm9uZSgpIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0JvbmUnO1xuXG59XG5cbkJvbmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQm9uZSxcblxuXHRpc0JvbmU6IHRydWVcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tXG4gKi9cblxuZnVuY3Rpb24gU2tpbm5lZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRNZXNoLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMudHlwZSA9ICdTa2lubmVkTWVzaCc7XG5cblx0dGhpcy5iaW5kTW9kZSA9ICdhdHRhY2hlZCc7XG5cdHRoaXMuYmluZE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdHRoaXMuYmluZE1hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdHZhciBib25lcyA9IHRoaXMuaW5pdEJvbmVzKCk7XG5cdHZhciBza2VsZXRvbiA9IG5ldyBTa2VsZXRvbiggYm9uZXMgKTtcblxuXHR0aGlzLmJpbmQoIHNrZWxldG9uLCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0dGhpcy5ub3JtYWxpemVTa2luV2VpZ2h0cygpO1xuXG59XG5cblNraW5uZWRNZXNoLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE1lc2gucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU2tpbm5lZE1lc2gsXG5cblx0aXNTa2lubmVkTWVzaDogdHJ1ZSxcblxuXHRpbml0Qm9uZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBib25lcyA9IFtdLCBib25lLCBnYm9uZTtcblx0XHR2YXIgaSwgaWw7XG5cblx0XHRpZiAoIHRoaXMuZ2VvbWV0cnkgJiYgdGhpcy5nZW9tZXRyeS5ib25lcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBmaXJzdCwgY3JlYXRlIGFycmF5IG9mICdCb25lJyBvYmplY3RzIGZyb20gZ2VvbWV0cnkgZGF0YVxuXG5cdFx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLmdlb21ldHJ5LmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGdib25lID0gdGhpcy5nZW9tZXRyeS5ib25lc1sgaSBdO1xuXG5cdFx0XHRcdC8vIGNyZWF0ZSBuZXcgJ0JvbmUnIG9iamVjdFxuXG5cdFx0XHRcdGJvbmUgPSBuZXcgQm9uZSgpO1xuXHRcdFx0XHRib25lcy5wdXNoKCBib25lICk7XG5cblx0XHRcdFx0Ly8gYXBwbHkgdmFsdWVzXG5cblx0XHRcdFx0Ym9uZS5uYW1lID0gZ2JvbmUubmFtZTtcblx0XHRcdFx0Ym9uZS5wb3NpdGlvbi5mcm9tQXJyYXkoIGdib25lLnBvcyApO1xuXHRcdFx0XHRib25lLnF1YXRlcm5pb24uZnJvbUFycmF5KCBnYm9uZS5yb3RxICk7XG5cdFx0XHRcdGlmICggZ2JvbmUuc2NsICE9PSB1bmRlZmluZWQgKSBib25lLnNjYWxlLmZyb21BcnJheSggZ2JvbmUuc2NsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gc2Vjb25kLCBjcmVhdGUgYm9uZSBoaWVyYXJjaHlcblxuXHRcdFx0Zm9yICggaSA9IDAsIGlsID0gdGhpcy5nZW9tZXRyeS5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRnYm9uZSA9IHRoaXMuZ2VvbWV0cnkuYm9uZXNbIGkgXTtcblxuXHRcdFx0XHRpZiAoICggZ2JvbmUucGFyZW50ICE9PSAtIDEgKSAmJiAoIGdib25lLnBhcmVudCAhPT0gbnVsbCApICYmICggYm9uZXNbIGdib25lLnBhcmVudCBdICE9PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgYm9uZXMgaW4gdGhlIGhpZXJhcmNoeVxuXG5cdFx0XHRcdFx0Ym9uZXNbIGdib25lLnBhcmVudCBdLmFkZCggYm9uZXNbIGkgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyB0b3Btb3N0IGJvbmUsIGltbWVkaWF0ZSBjaGlsZCBvZiB0aGUgc2tpbm5lZCBtZXNoXG5cblx0XHRcdFx0XHR0aGlzLmFkZCggYm9uZXNbIGkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gbm93IHRoZSBib25lcyBhcmUgcGFydCBvZiB0aGUgc2NlbmUgZ3JhcGggYW5kIGNoaWxkcmVuIG9mIHRoZSBza2lubmVkIG1lc2guXG5cdFx0Ly8gbGV0J3MgdXBkYXRlIHRoZSBjb3JyZXNwb25kaW5nIG1hdHJpY2VzXG5cblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRyZXR1cm4gYm9uZXM7XG5cblx0fSxcblxuXHRiaW5kOiBmdW5jdGlvbiAoIHNrZWxldG9uLCBiaW5kTWF0cml4ICkge1xuXG5cdFx0dGhpcy5za2VsZXRvbiA9IHNrZWxldG9uO1xuXG5cdFx0aWYgKCBiaW5kTWF0cml4ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdFx0dGhpcy5za2VsZXRvbi5jYWxjdWxhdGVJbnZlcnNlcygpO1xuXG5cdFx0XHRiaW5kTWF0cml4ID0gdGhpcy5tYXRyaXhXb3JsZDtcblxuXHRcdH1cblxuXHRcdHRoaXMuYmluZE1hdHJpeC5jb3B5KCBiaW5kTWF0cml4ICk7XG5cdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCBiaW5kTWF0cml4ICk7XG5cblx0fSxcblxuXHRwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnNrZWxldG9uLnBvc2UoKTtcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZVNraW5XZWlnaHRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc2NhbGUsIGk7XG5cblx0XHRpZiAoIHRoaXMuZ2VvbWV0cnkgJiYgdGhpcy5nZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IHRoaXMuZ2VvbWV0cnkuc2tpbldlaWdodHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBzdyA9IHRoaXMuZ2VvbWV0cnkuc2tpbldlaWdodHNbIGkgXTtcblxuXHRcdFx0XHRzY2FsZSA9IDEuMCAvIHN3Lm1hbmhhdHRhbkxlbmd0aCgpO1xuXG5cdFx0XHRcdGlmICggc2NhbGUgIT09IEluZmluaXR5ICkge1xuXG5cdFx0XHRcdFx0c3cubXVsdGlwbHlTY2FsYXIoIHNjYWxlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN3LnNldCggMSwgMCwgMCwgMCApOyAvLyBkbyBzb21ldGhpbmcgcmVhc29uYWJsZVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5nZW9tZXRyeSAmJiB0aGlzLmdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciB2ZWMgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0XHR2YXIgc2tpbldlaWdodCA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0O1xuXG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IHNraW5XZWlnaHQuY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0dmVjLnggPSBza2luV2VpZ2h0LmdldFgoIGkgKTtcblx0XHRcdFx0dmVjLnkgPSBza2luV2VpZ2h0LmdldFkoIGkgKTtcblx0XHRcdFx0dmVjLnogPSBza2luV2VpZ2h0LmdldFooIGkgKTtcblx0XHRcdFx0dmVjLncgPSBza2luV2VpZ2h0LmdldFcoIGkgKTtcblxuXHRcdFx0XHRzY2FsZSA9IDEuMCAvIHZlYy5tYW5oYXR0YW5MZW5ndGgoKTtcblxuXHRcdFx0XHRpZiAoIHNjYWxlICE9PSBJbmZpbml0eSApIHtcblxuXHRcdFx0XHRcdHZlYy5tdWx0aXBseVNjYWxhciggc2NhbGUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dmVjLnNldCggMSwgMCwgMCwgMCApOyAvLyBkbyBzb21ldGhpbmcgcmVhc29uYWJsZVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRza2luV2VpZ2h0LnNldFhZWlcoIGksIHZlYy54LCB2ZWMueSwgdmVjLnosIHZlYy53ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkOiBmdW5jdGlvbiAoIGZvcmNlICkge1xuXG5cdFx0TWVzaC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxuXHRcdGlmICggdGhpcy5iaW5kTW9kZSA9PT0gJ2F0dGFjaGVkJyApIHtcblxuXHRcdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0aGlzLmJpbmRNb2RlID09PSAnZGV0YWNoZWQnICkge1xuXG5cdFx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmdldEludmVyc2UoIHRoaXMuYmluZE1hdHJpeCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tpbm5lZE1lc2g6IFVucmVjb2duaXplZCBiaW5kTW9kZTogJyArIHRoaXMuYmluZE1vZGUgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqXG4gKiAgbGluZXdpZHRoOiA8ZmxvYXQ+LFxuICogIGxpbmVjYXA6IFwicm91bmRcIixcbiAqICBsaW5lam9pbjogXCJyb3VuZFwiXG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTGluZUJhc2ljTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lQmFzaWNNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHR0aGlzLmxpbmV3aWR0aCA9IDE7XG5cdHRoaXMubGluZWNhcCA9ICdyb3VuZCc7XG5cdHRoaXMubGluZWpvaW4gPSAncm91bmQnO1xuXG5cdHRoaXMubGlnaHRzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVCYXNpY01hdGVyaWFsO1xuXG5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuaXNMaW5lQmFzaWNNYXRlcmlhbCA9IHRydWU7XG5cbkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHR0aGlzLmxpbmV3aWR0aCA9IHNvdXJjZS5saW5ld2lkdGg7XG5cdHRoaXMubGluZWNhcCA9IHNvdXJjZS5saW5lY2FwO1xuXHR0aGlzLmxpbmVqb2luID0gc291cmNlLmxpbmVqb2luO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsLCBtb2RlICkge1xuXG5cdGlmICggbW9kZSA9PT0gMSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmU6IHBhcmFtZXRlciBUSFJFRS5MaW5lUGllY2VzIG5vIGxvbmdlciBzdXBwb3J0ZWQuIENyZWF0ZWQgVEhSRUUuTGluZVNlZ21lbnRzIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBuZXcgTGluZVNlZ21lbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lJztcblxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZiB9ICk7XG5cbn1cblxuTGluZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMaW5lLFxuXG5cdGlzTGluZTogdHJ1ZSxcblxuXHRjb21wdXRlTGluZURpc3RhbmNlczogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgc3RhcnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBlbmQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xuXG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0Ly8gd2UgYXNzdW1lIG5vbi1pbmRleGVkIGdlb21ldHJ5XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBbIDAgXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0c3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgLSAxICk7XG5cdFx0XHRcdFx0XHRlbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKTtcblxuXHRcdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcblx0XHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSArPSBzdGFydC5kaXN0YW5jZVRvKCBlbmQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBsaW5lRGlzdGFuY2VzLCAxICkgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZS5jb21wdXRlTGluZURpc3RhbmNlcygpOiBDb21wdXRhdGlvbiBvbmx5IHBvc3NpYmxlIHdpdGggbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnkuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBnZW9tZXRyeS5saW5lRGlzdGFuY2VzO1xuXG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIDAgXSA9IDA7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAxLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdICs9IHZlcnRpY2VzWyBpIC0gMSBdLmRpc3RhbmNlVG8oIHZlcnRpY2VzWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdHJheWNhc3Q6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdHZhciByYXkgPSBuZXcgUmF5KCk7XG5cdFx0dmFyIHNwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiByYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRcdHZhciBwcmVjaXNpb24gPSByYXljYXN0ZXIubGluZVByZWNpc2lvbjtcblx0XHRcdHZhciBwcmVjaXNpb25TcSA9IHByZWNpc2lvbiAqIHByZWNpc2lvbjtcblxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRcdHZhciBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cblx0XHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdHNwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdFx0c3BoZXJlLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdFx0aWYgKCByYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0Ly9cblxuXHRcdFx0aW52ZXJzZU1hdHJpeC5nZXRJbnZlcnNlKCBtYXRyaXhXb3JsZCApO1xuXHRcdFx0cmF5LmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIGludmVyc2VNYXRyaXggKTtcblxuXHRcdFx0dmFyIHZTdGFydCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR2YXIgdkVuZCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR2YXIgaW50ZXJTZWdtZW50ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdHZhciBpbnRlclJheSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR2YXIgc3RlcCA9ICggdGhpcyAmJiB0aGlzLmlzTGluZVNlZ21lbnRzICkgPyAyIDogMTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0XHR2YXIgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cdFx0XHRcdHZhciBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuXG5cdFx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR2YXIgaW5kaWNlcyA9IGluZGV4LmFycmF5O1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaW5kaWNlcy5sZW5ndGggLSAxOyBpIDwgbDsgaSArPSBzdGVwICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgYSA9IGluZGljZXNbIGkgXTtcblx0XHRcdFx0XHRcdHZhciBiID0gaW5kaWNlc1sgaSArIDEgXTtcblxuXHRcdFx0XHRcdFx0dlN0YXJ0LmZyb21BcnJheSggcG9zaXRpb25zLCBhICogMyApO1xuXHRcdFx0XHRcdFx0dkVuZC5mcm9tQXJyYXkoIHBvc2l0aW9ucywgYiAqIDMgKTtcblxuXHRcdFx0XHRcdFx0dmFyIGRpc3RTcSA9IHJheS5kaXN0YW5jZVNxVG9TZWdtZW50KCB2U3RhcnQsIHZFbmQsIGludGVyUmF5LCBpbnRlclNlZ21lbnQgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBkaXN0U3EgPiBwcmVjaXNpb25TcSApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0XHRpbnRlclJheS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uXG5cblx0XHRcdFx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cblx0XHRcdFx0XHRcdFx0Ly8gcG9pbnQ6IHJheWNhc3Rlci5yYXkuYXQoIGRpc3RhbmNlICksXG5cdFx0XHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSxcblx0XHRcdFx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdFx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRcdFx0XHRcdGZhY2VJbmRleDogbnVsbCxcblx0XHRcdFx0XHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9zaXRpb25zLmxlbmd0aCAvIDMgLSAxOyBpIDwgbDsgaSArPSBzdGVwICkge1xuXG5cdFx0XHRcdFx0XHR2U3RhcnQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIDMgKiBpICk7XG5cdFx0XHRcdFx0XHR2RW5kLmZyb21BcnJheSggcG9zaXRpb25zLCAzICogaSArIDMgKTtcblxuXHRcdFx0XHRcdFx0dmFyIGRpc3RTcSA9IHJheS5kaXN0YW5jZVNxVG9TZWdtZW50KCB2U3RhcnQsIHZFbmQsIGludGVyUmF5LCBpbnRlclNlZ21lbnQgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBkaXN0U3EgPiBwcmVjaXNpb25TcSApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0XHRpbnRlclJheS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uXG5cblx0XHRcdFx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cblx0XHRcdFx0XHRcdFx0Ly8gcG9pbnQ6IHJheWNhc3Rlci5yYXkuYXQoIGRpc3RhbmNlICksXG5cdFx0XHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSxcblx0XHRcdFx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdFx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRcdFx0XHRcdGZhY2VJbmRleDogbnVsbCxcblx0XHRcdFx0XHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XG5cdFx0XHRcdHZhciBuYlZlcnRpY2VzID0gdmVydGljZXMubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG5iVmVydGljZXMgLSAxOyBpICs9IHN0ZXAgKSB7XG5cblx0XHRcdFx0XHR2YXIgZGlzdFNxID0gcmF5LmRpc3RhbmNlU3FUb1NlZ21lbnQoIHZlcnRpY2VzWyBpIF0sIHZlcnRpY2VzWyBpICsgMSBdLCBpbnRlclJheSwgaW50ZXJTZWdtZW50ICk7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RTcSA+IHByZWNpc2lvblNxICkgY29udGludWU7XG5cblx0XHRcdFx0XHRpbnRlclJheS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uXG5cblx0XHRcdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBpbnRlclJheSApO1xuXG5cdFx0XHRcdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdFx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcblx0XHRcdFx0XHRcdC8vIFdoYXQgZG8gd2Ugd2FudD8gaW50ZXJzZWN0aW9uIHBvaW50IG9uIHRoZSByYXkgb3Igb24gdGhlIHNlZ21lbnQ/P1xuXHRcdFx0XHRcdFx0Ly8gcG9pbnQ6IHJheWNhc3Rlci5yYXkuYXQoIGRpc3RhbmNlICksXG5cdFx0XHRcdFx0XHRwb2ludDogaW50ZXJTZWdtZW50LmNsb25lKCkuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICksXG5cdFx0XHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRcdFx0XHRmYWNlSW5kZXg6IG51bGwsXG5cdFx0XHRcdFx0XHRvYmplY3Q6IHRoaXNcblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSgpICksXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIExpbmVTZWdtZW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdExpbmUuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0dGhpcy50eXBlID0gJ0xpbmVTZWdtZW50cyc7XG5cbn1cblxuTGluZVNlZ21lbnRzLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpbmUucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTGluZVNlZ21lbnRzLFxuXG5cdGlzTGluZVNlZ21lbnRzOiB0cnVlLFxuXG5cdGNvbXB1dGVMaW5lRGlzdGFuY2VzOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBzdGFydCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGVuZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gY29tcHV0ZUxpbmVEaXN0YW5jZXMoKSB7XG5cblx0XHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHQvLyB3ZSBhc3N1bWUgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0dmFyIHBvc2l0aW9uQXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdFx0XHR2YXIgbGluZURpc3RhbmNlcyA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICs9IDIgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICk7XG5cdFx0XHRcdFx0XHRlbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgKyAxICk7XG5cblx0XHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9ICggaSA9PT0gMCApID8gMCA6IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpICsgMSBdID0gbGluZURpc3RhbmNlc1sgaSBdICsgc3RhcnQuZGlzdGFuY2VUbyggZW5kICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdsaW5lRGlzdGFuY2UnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbGluZURpc3RhbmNlcywgMSApICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmVTZWdtZW50cy5jb21wdXRlTGluZURpc3RhbmNlcygpOiBDb21wdXRhdGlvbiBvbmx5IHBvc3NpYmxlIHdpdGggbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnkuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBnZW9tZXRyeS5saW5lRGlzdGFuY2VzO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMiApIHtcblxuXHRcdFx0XHRcdHN0YXJ0LmNvcHkoIHZlcnRpY2VzWyBpIF0gKTtcblx0XHRcdFx0XHRlbmQuY29weSggdmVydGljZXNbIGkgKyAxIF0gKTtcblxuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9ICggaSA9PT0gMCApID8gMCA6IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSArIDEgXSA9IGxpbmVEaXN0YW5jZXNbIGkgXSArIHN0YXJ0LmRpc3RhbmNlVG8oIGVuZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH07XG5cblx0fSgpIClcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWdyZXRlciAvIGh0dHA6Ly9naXRodWIuY29tL21ncmV0ZXJcbiAqL1xuXG5mdW5jdGlvbiBMaW5lTG9vcCggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdExpbmUuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0dGhpcy50eXBlID0gJ0xpbmVMb29wJztcblxufVxuXG5MaW5lTG9vcC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaW5lLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IExpbmVMb29wLFxuXG5cdGlzTGluZUxvb3A6IHRydWUsXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgc2l6ZTogPGZsb2F0PixcbiAqICBzaXplQXR0ZW51YXRpb246IDxib29sPlxuICpcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIFBvaW50c01hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUG9pbnRzTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMuc2l6ZSA9IDE7XG5cdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gdHJ1ZTtcblxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXG5cdHRoaXMubGlnaHRzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcblBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvaW50c01hdGVyaWFsO1xuXG5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGUuaXNQb2ludHNNYXRlcmlhbCA9IHRydWU7XG5cblBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5zaXplID0gc291cmNlLnNpemU7XG5cdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gc291cmNlLnNpemVBdHRlbnVhdGlvbjtcblxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBQb2ludHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BvaW50cyc7XG5cblx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5ICE9PSB1bmRlZmluZWQgPyBnZW9tZXRyeSA6IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWwgIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsIDogbmV3IFBvaW50c01hdGVyaWFsKCB7IGNvbG9yOiBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmYgfSApO1xuXG59XG5cblBvaW50cy5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBQb2ludHMsXG5cblx0aXNQb2ludHM6IHRydWUsXG5cblx0cmF5Y2FzdDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaW52ZXJzZU1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dmFyIHJheSA9IG5ldyBSYXkoKTtcblx0XHR2YXIgc3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdFx0dmFyIG9iamVjdCA9IHRoaXM7XG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdFx0dmFyIG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcblx0XHRcdHZhciB0aHJlc2hvbGQgPSByYXljYXN0ZXIucGFyYW1zLlBvaW50cy50aHJlc2hvbGQ7XG5cblx0XHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRcdHNwaGVyZS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdFx0c3BoZXJlLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblx0XHRcdHNwaGVyZS5yYWRpdXMgKz0gdGhyZXNob2xkO1xuXG5cdFx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRpbnZlcnNlTWF0cml4LmdldEludmVyc2UoIG1hdHJpeFdvcmxkICk7XG5cdFx0XHRyYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggaW52ZXJzZU1hdHJpeCApO1xuXG5cdFx0XHR2YXIgbG9jYWxUaHJlc2hvbGQgPSB0aHJlc2hvbGQgLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7XG5cdFx0XHR2YXIgbG9jYWxUaHJlc2hvbGRTcSA9IGxvY2FsVGhyZXNob2xkICogbG9jYWxUaHJlc2hvbGQ7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIGludGVyc2VjdFBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0ZnVuY3Rpb24gdGVzdFBvaW50KCBwb2ludCwgaW5kZXggKSB7XG5cblx0XHRcdFx0dmFyIHJheVBvaW50RGlzdGFuY2VTcSA9IHJheS5kaXN0YW5jZVNxVG9Qb2ludCggcG9pbnQgKTtcblxuXHRcdFx0XHRpZiAoIHJheVBvaW50RGlzdGFuY2VTcSA8IGxvY2FsVGhyZXNob2xkU3EgKSB7XG5cblx0XHRcdFx0XHRyYXkuY2xvc2VzdFBvaW50VG9Qb2ludCggcG9pbnQsIGludGVyc2VjdFBvaW50ICk7XG5cdFx0XHRcdFx0aW50ZXJzZWN0UG9pbnQuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2VUb1JheTogTWF0aC5zcXJ0KCByYXlQb2ludERpc3RhbmNlU3EgKSxcblx0XHRcdFx0XHRcdHBvaW50OiBpbnRlcnNlY3RQb2ludC5jbG9uZSgpLFxuXHRcdFx0XHRcdFx0aW5kZXg6IGluZGV4LFxuXHRcdFx0XHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdFx0XHRcdG9iamVjdDogb2JqZWN0XG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXHRcdFx0XHR2YXIgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcblxuXHRcdFx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0dmFyIGluZGljZXMgPSBpbmRleC5hcnJheTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgYSA9IGluZGljZXNbIGkgXTtcblxuXHRcdFx0XHRcdFx0cG9zaXRpb24uZnJvbUFycmF5KCBwb3NpdGlvbnMsIGEgKiAzICk7XG5cblx0XHRcdFx0XHRcdHRlc3RQb2ludCggcG9zaXRpb24sIGEgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRwb3NpdGlvbi5mcm9tQXJyYXkoIHBvc2l0aW9ucywgaSAqIDMgKTtcblxuXHRcdFx0XHRcdFx0dGVzdFBvaW50KCBwb3NpdGlvbiwgaSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dGVzdFBvaW50KCB2ZXJ0aWNlc1sgaSBdLCBpICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBWaWRlb1RleHR1cmUoIHZpZGVvLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKSB7XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCB2aWRlbywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxufVxuXG5WaWRlb1RleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggVGV4dHVyZS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBWaWRlb1RleHR1cmUsXG5cblx0aXNWaWRlb1RleHR1cmU6IHRydWUsXG5cblx0dXBkYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmlkZW8gPSB0aGlzLmltYWdlO1xuXG5cdFx0aWYgKCB2aWRlby5yZWFkeVN0YXRlID49IHZpZGVvLkhBVkVfQ1VSUkVOVF9EQVRBICkge1xuXG5cdFx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIENvbXByZXNzZWRUZXh0dXJlKCBtaXBtYXBzLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApO1xuXG5cdHRoaXMuaW1hZ2UgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblx0dGhpcy5taXBtYXBzID0gbWlwbWFwcztcblxuXHQvLyBubyBmbGlwcGluZyBmb3IgY3ViZSB0ZXh0dXJlc1xuXHQvLyAoYWxzbyBmbGlwcGluZyBkb2Vzbid0IHdvcmsgZm9yIGNvbXByZXNzZWQgdGV4dHVyZXMgKVxuXG5cdHRoaXMuZmxpcFkgPSBmYWxzZTtcblxuXHQvLyBjYW4ndCBnZW5lcmF0ZSBtaXBtYXBzIGZvciBjb21wcmVzc2VkIHRleHR1cmVzXG5cdC8vIG1pcHMgbXVzdCBiZSBlbWJlZGRlZCBpbiBERFMgZmlsZXNcblxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG59XG5cbkNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICk7XG5Db21wcmVzc2VkVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb21wcmVzc2VkVGV4dHVyZTtcblxuQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlLmlzQ29tcHJlc3NlZFRleHR1cmUgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3IgTWF0dCBEZXNMYXVyaWVycyAvIEBtYXR0ZGVzbFxuICogQGF1dGhvciBhdGl4IC8gYXJ0aHVyc2lsYmVyLmRlXG4gKi9cblxuZnVuY3Rpb24gRGVwdGhUZXh0dXJlKCB3aWR0aCwgaGVpZ2h0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBhbmlzb3Ryb3B5LCBmb3JtYXQgKSB7XG5cblx0Zm9ybWF0ID0gZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBmb3JtYXQgOiBEZXB0aEZvcm1hdDtcblxuXHRpZiAoIGZvcm1hdCAhPT0gRGVwdGhGb3JtYXQgJiYgZm9ybWF0ICE9PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdEZXB0aFRleHR1cmUgZm9ybWF0IG11c3QgYmUgZWl0aGVyIFRIUkVFLkRlcHRoRm9ybWF0IG9yIFRIUkVFLkRlcHRoU3RlbmNpbEZvcm1hdCcgKTtcblxuXHR9XG5cblx0aWYgKCB0eXBlID09PSB1bmRlZmluZWQgJiYgZm9ybWF0ID09PSBEZXB0aEZvcm1hdCApIHR5cGUgPSBVbnNpZ25lZFNob3J0VHlwZTtcblx0aWYgKCB0eXBlID09PSB1bmRlZmluZWQgJiYgZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB0eXBlID0gVW5zaWduZWRJbnQyNDhUeXBlO1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XG5cblx0dGhpcy5pbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXG5cdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBOZWFyZXN0RmlsdGVyO1xuXHR0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWluRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcblxuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdHRoaXMuZ2VuZXJhdGVNaXBtYXBzXHQ9IGZhbHNlO1xuXG59XG5cbkRlcHRoVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuRGVwdGhUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERlcHRoVGV4dHVyZTtcbkRlcHRoVGV4dHVyZS5wcm90b3R5cGUuaXNEZXB0aFRleHR1cmUgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbmZ1bmN0aW9uIFdpcmVmcmFtZUdlb21ldHJ5KCBnZW9tZXRyeSApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1dpcmVmcmFtZUdlb21ldHJ5JztcblxuXHQvLyBidWZmZXJcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGksIGosIGwsIG8sIG9sO1xuXHR2YXIgZWRnZSA9IFsgMCwgMCBdLCBlZGdlcyA9IHt9LCBlLCBlZGdlMSwgZWRnZTI7XG5cdHZhciBrZXksIGtleXMgPSBbICdhJywgJ2InLCAnYycgXTtcblx0dmFyIHZlcnRleDtcblxuXHQvLyBkaWZmZXJlbnQgbG9naWMgZm9yIEdlb21ldHJ5IGFuZCBCdWZmZXJHZW9tZXRyeVxuXG5cdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdC8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVkZ2VzIHdpdGhvdXQgZHVwbGljYXRlc1xuXG5cdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0Zm9yICggaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRcdGVkZ2UxID0gZmFjZVsga2V5c1sgaiBdIF07XG5cdFx0XHRcdGVkZ2UyID0gZmFjZVsga2V5c1sgKCBqICsgMSApICUgMyBdIF07XG5cdFx0XHRcdGVkZ2VbIDAgXSA9IE1hdGgubWluKCBlZGdlMSwgZWRnZTIgKTsgLy8gc29ydGluZyBwcmV2ZW50cyBkdXBsaWNhdGVzXG5cdFx0XHRcdGVkZ2VbIDEgXSA9IE1hdGgubWF4KCBlZGdlMSwgZWRnZTIgKTtcblxuXHRcdFx0XHRrZXkgPSBlZGdlWyAwIF0gKyAnLCcgKyBlZGdlWyAxIF07XG5cblx0XHRcdFx0aWYgKCBlZGdlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGVkZ2VzWyBrZXkgXSA9IHsgaW5kZXgxOiBlZGdlWyAwIF0sIGluZGV4MjogZWRnZVsgMSBdIH07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlc1xuXG5cdFx0Zm9yICgga2V5IGluIGVkZ2VzICkge1xuXG5cdFx0XHRlID0gZWRnZXNbIGtleSBdO1xuXG5cdFx0XHR2ZXJ0ZXggPSBnZW9tZXRyeS52ZXJ0aWNlc1sgZS5pbmRleDEgXTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0dmVydGV4ID0gZ2VvbWV0cnkudmVydGljZXNbIGUuaW5kZXgyIF07XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0fSBlbHNlIGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdHZhciBwb3NpdGlvbiwgaW5kaWNlcywgZ3JvdXBzO1xuXHRcdHZhciBncm91cCwgc3RhcnQsIGNvdW50O1xuXHRcdHZhciBpbmRleDEsIGluZGV4MjtcblxuXHRcdHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHQvLyBpbmRleGVkIEJ1ZmZlckdlb21ldHJ5XG5cblx0XHRcdHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdGluZGljZXMgPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0aWYgKCBncm91cHMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRcdGdyb3VwcyA9IFsgeyBzdGFydDogMCwgY291bnQ6IGluZGljZXMuY291bnQsIG1hdGVyaWFsSW5kZXg6IDAgfSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVnZXMgd2l0aG91dCBkdXBsaWNhdGVzXG5cblx0XHRcdGZvciAoIG8gPSAwLCBvbCA9IGdyb3Vwcy5sZW5ndGg7IG8gPCBvbDsgKysgbyApIHtcblxuXHRcdFx0XHRncm91cCA9IGdyb3Vwc1sgbyBdO1xuXG5cdFx0XHRcdHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRcdGNvdW50ID0gZ3JvdXAuY291bnQ7XG5cblx0XHRcdFx0Zm9yICggaSA9IHN0YXJ0LCBsID0gKCBzdGFydCArIGNvdW50ICk7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGVkZ2UxID0gaW5kaWNlcy5nZXRYKCBpICsgaiApO1xuXHRcdFx0XHRcdFx0ZWRnZTIgPSBpbmRpY2VzLmdldFgoIGkgKyAoIGogKyAxICkgJSAzICk7XG5cdFx0XHRcdFx0XHRlZGdlWyAwIF0gPSBNYXRoLm1pbiggZWRnZTEsIGVkZ2UyICk7IC8vIHNvcnRpbmcgcHJldmVudHMgZHVwbGljYXRlc1xuXHRcdFx0XHRcdFx0ZWRnZVsgMSBdID0gTWF0aC5tYXgoIGVkZ2UxLCBlZGdlMiApO1xuXG5cdFx0XHRcdFx0XHRrZXkgPSBlZGdlWyAwIF0gKyAnLCcgKyBlZGdlWyAxIF07XG5cblx0XHRcdFx0XHRcdGlmICggZWRnZXNbIGtleSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0ZWRnZXNbIGtleSBdID0geyBpbmRleDE6IGVkZ2VbIDAgXSwgaW5kZXgyOiBlZGdlWyAxIF0gfTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlc1xuXG5cdFx0XHRmb3IgKCBrZXkgaW4gZWRnZXMgKSB7XG5cblx0XHRcdFx0ZSA9IGVkZ2VzWyBrZXkgXTtcblxuXHRcdFx0XHR2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGUuaW5kZXgxICk7XG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHR2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGUuaW5kZXgyICk7XG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnlcblxuXHRcdFx0cG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9ICggcG9zaXRpb24uY291bnQgLyAzICk7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGogPSAwOyBqIDwgMzsgaiArKyApIHtcblxuXHRcdFx0XHRcdC8vIHRocmVlIGVkZ2VzIHBlciB0cmlhbmdsZSwgYW4gZWRnZSBpcyByZXByZXNlbnRlZCBhcyAoaW5kZXgxLCBpbmRleDIpXG5cdFx0XHRcdFx0Ly8gZS5nLiB0aGUgZmlyc3QgdHJpYW5nbGUgaGFzIHRoZSBmb2xsb3dpbmcgZWRnZXM6ICgwLDEpLCgxLDIpLCgyLDApXG5cblx0XHRcdFx0XHRpbmRleDEgPSAzICogaSArIGo7XG5cdFx0XHRcdFx0dmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDEgKTtcblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0XHRpbmRleDIgPSAzICogaSArICggKCBqICsgMSApICUgMyApO1xuXHRcdFx0XHRcdHZlcnRleC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaW5kZXgyICk7XG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXG59XG5cbldpcmVmcmFtZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuV2lyZWZyYW1lR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2lyZWZyYW1lR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKlxuICogUGFyYW1ldHJpYyBTdXJmYWNlcyBHZW9tZXRyeVxuICogYmFzZWQgb24gdGhlIGJyaWxsaWFudCBhcnRpY2xlIGJ5IEBwcmlkZW91dCBodHRwOi8vcHJpZGVvdXQubmV0L2Jsb2cvP3A9NDRcbiAqL1xuXG4vLyBQYXJhbWV0cmljR2VvbWV0cnlcblxuZnVuY3Rpb24gUGFyYW1ldHJpY0dlb21ldHJ5KCBmdW5jLCBzbGljZXMsIHN0YWNrcyApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BhcmFtZXRyaWNHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdGZ1bmM6IGZ1bmMsXG5cdFx0c2xpY2VzOiBzbGljZXMsXG5cdFx0c3RhY2tzOiBzdGFja3Ncblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSggZnVuYywgc2xpY2VzLCBzdGFja3MgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5QYXJhbWV0cmljR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5QYXJhbWV0cmljR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGFyYW1ldHJpY0dlb21ldHJ5O1xuXG4vLyBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5KCBmdW5jLCBzbGljZXMsIHN0YWNrcyApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdGZ1bmM6IGZ1bmMsXG5cdFx0c2xpY2VzOiBzbGljZXMsXG5cdFx0c3RhY2tzOiBzdGFja3Ncblx0fTtcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHR2YXIgRVBTID0gMC4wMDAwMTtcblxuXHR2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgcDAgPSBuZXcgVmVjdG9yMygpLCBwMSA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBwdSA9IG5ldyBWZWN0b3IzKCksIHB2ID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgaSwgajtcblxuXHRpZiAoIGZ1bmMubGVuZ3RoIDwgMyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5QYXJhbWV0cmljR2VvbWV0cnk6IEZ1bmN0aW9uIG11c3Qgbm93IG1vZGlmeSBhIFZlY3RvcjMgYXMgdGhpcmQgcGFyYW1ldGVyLicgKTtcblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdHZhciBzbGljZUNvdW50ID0gc2xpY2VzICsgMTtcblxuXHRmb3IgKCBpID0gMDsgaSA8PSBzdGFja3M7IGkgKysgKSB7XG5cblx0XHR2YXIgdiA9IGkgLyBzdGFja3M7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8PSBzbGljZXM7IGogKysgKSB7XG5cblx0XHRcdHZhciB1ID0gaiAvIHNsaWNlcztcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdGZ1bmMoIHUsIHYsIHAwICk7XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCBwMC54LCBwMC55LCBwMC56ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHQvLyBhcHByb3hpbWF0ZSB0YW5nZW50IHZlY3RvcnMgdmlhIGZpbml0ZSBkaWZmZXJlbmNlc1xuXG5cdFx0XHRpZiAoIHUgLSBFUFMgPj0gMCApIHtcblxuXHRcdFx0XHRmdW5jKCB1IC0gRVBTLCB2LCBwMSApO1xuXHRcdFx0XHRwdS5zdWJWZWN0b3JzKCBwMCwgcDEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRmdW5jKCB1ICsgRVBTLCB2LCBwMSApO1xuXHRcdFx0XHRwdS5zdWJWZWN0b3JzKCBwMSwgcDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHYgLSBFUFMgPj0gMCApIHtcblxuXHRcdFx0XHRmdW5jKCB1LCB2IC0gRVBTLCBwMSApO1xuXHRcdFx0XHRwdi5zdWJWZWN0b3JzKCBwMCwgcDEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRmdW5jKCB1LCB2ICsgRVBTLCBwMSApO1xuXHRcdFx0XHRwdi5zdWJWZWN0b3JzKCBwMSwgcDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjcm9zcyBwcm9kdWN0IG9mIHRhbmdlbnQgdmVjdG9ycyByZXR1cm5zIHN1cmZhY2Ugbm9ybWFsXG5cblx0XHRcdG5vcm1hbC5jcm9zc1ZlY3RvcnMoIHB1LCBwdiApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdC8vIHV2XG5cblx0XHRcdHV2cy5wdXNoKCB1LCB2ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRmb3IgKCBpID0gMDsgaSA8IHN0YWNrczsgaSArKyApIHtcblxuXHRcdGZvciAoIGogPSAwOyBqIDwgc2xpY2VzOyBqICsrICkge1xuXG5cdFx0XHR2YXIgYSA9IGkgKiBzbGljZUNvdW50ICsgajtcblx0XHRcdHZhciBiID0gaSAqIHNsaWNlQ291bnQgKyBqICsgMTtcblx0XHRcdHZhciBjID0gKCBpICsgMSApICogc2xpY2VDb3VudCArIGogKyAxO1xuXHRcdFx0dmFyIGQgPSAoIGkgKyAxICkgKiBzbGljZUNvdW50ICsgajtcblxuXHRcdFx0Ly8gZmFjZXMgb25lIGFuZCB0d29cblxuXHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG59XG5cblBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBjbG9ja3dvcmtnZWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL2Nsb2Nrd29ya2dlZWtcbiAqIEBhdXRob3IgdGltb3RoeXByYXRsZXkgLyBodHRwczovL2dpdGh1Yi5jb20vdGltb3RoeXByYXRsZXlcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBQb2x5aGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gUG9seWhlZHJvbkdlb21ldHJ5KCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2x5aGVkcm9uR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR2ZXJ0aWNlczogdmVydGljZXMsXG5cdFx0aW5kaWNlczogaW5kaWNlcyxcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5Qb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5Qb2x5aGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9seWhlZHJvbkdlb21ldHJ5O1xuXG4vLyBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR2ZXJ0aWNlczogdmVydGljZXMsXG5cdFx0aW5kaWNlczogaW5kaWNlcyxcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHRkZXRhaWwgPSBkZXRhaWwgfHwgMDtcblxuXHQvLyBkZWZhdWx0IGJ1ZmZlciBkYXRhXG5cblx0dmFyIHZlcnRleEJ1ZmZlciA9IFtdO1xuXHR2YXIgdXZCdWZmZXIgPSBbXTtcblxuXHQvLyB0aGUgc3ViZGl2aXNpb24gY3JlYXRlcyB0aGUgdmVydGV4IGJ1ZmZlciBkYXRhXG5cblx0c3ViZGl2aWRlKCBkZXRhaWwgKTtcblxuXHQvLyBhbGwgdmVydGljZXMgc2hvdWxkIGxpZSBvbiBhIGNvbmNlcHR1YWwgc3BoZXJlIHdpdGggYSBnaXZlbiByYWRpdXNcblxuXHRhcHBwbHlSYWRpdXMoIHJhZGl1cyApO1xuXG5cdC8vIGZpbmFsbHksIGNyZWF0ZSB0aGUgdXYgZGF0YVxuXG5cdGdlbmVyYXRlVVZzKCk7XG5cblx0Ly8gYnVpbGQgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlciwgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlci5zbGljZSgpLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dkJ1ZmZlciwgMiApICk7XG5cblx0aWYgKCBkZXRhaWwgPT09IDAgKSB7XG5cblx0XHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7IC8vIGZsYXQgbm9ybWFsc1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTsgLy8gc21vb3RoIG5vcm1hbHNcblxuXHR9XG5cblx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdGZ1bmN0aW9uIHN1YmRpdmlkZSggZGV0YWlsICkge1xuXG5cdFx0dmFyIGEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBiID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgYyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIGZhY2VzIGFuZCBhcHBseSBhIHN1YmRpdmlzb24gd2l0aCB0aGUgZ2l2ZW4gZGV0YWlsIHZhbHVlXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHQvLyBnZXQgdGhlIHZlcnRpY2VzIG9mIHRoZSBmYWNlXG5cblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAwIF0sIGEgKTtcblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAxIF0sIGIgKTtcblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAyIF0sIGMgKTtcblxuXHRcdFx0Ly8gcGVyZm9ybSBzdWJkaXZpc2lvblxuXG5cdFx0XHRzdWJkaXZpZGVGYWNlKCBhLCBiLCBjLCBkZXRhaWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc3ViZGl2aWRlRmFjZSggYSwgYiwgYywgZGV0YWlsICkge1xuXG5cdFx0dmFyIGNvbHMgPSBNYXRoLnBvdyggMiwgZGV0YWlsICk7XG5cblx0XHQvLyB3ZSB1c2UgdGhpcyBtdWx0aWRpbWVuc2lvbmFsIGFycmF5IGFzIGEgZGF0YSBzdHJ1Y3R1cmUgZm9yIGNyZWF0aW5nIHRoZSBzdWJkaXZpc2lvblxuXG5cdFx0dmFyIHYgPSBbXTtcblxuXHRcdHZhciBpLCBqO1xuXG5cdFx0Ly8gY29uc3RydWN0IGFsbCBvZiB0aGUgdmVydGljZXMgZm9yIHRoaXMgc3ViZGl2aXNpb25cblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IGNvbHM7IGkgKysgKSB7XG5cblx0XHRcdHZbIGkgXSA9IFtdO1xuXG5cdFx0XHR2YXIgYWogPSBhLmNsb25lKCkubGVycCggYywgaSAvIGNvbHMgKTtcblx0XHRcdHZhciBiaiA9IGIuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXG5cdFx0XHR2YXIgcm93cyA9IGNvbHMgLSBpO1xuXG5cdFx0XHRmb3IgKCBqID0gMDsgaiA8PSByb3dzOyBqICsrICkge1xuXG5cdFx0XHRcdGlmICggaiA9PT0gMCAmJiBpID09PSBjb2xzICkge1xuXG5cdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhajtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhai5jbG9uZSgpLmxlcnAoIGJqLCBqIC8gcm93cyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY29uc3RydWN0IGFsbCBvZiB0aGUgZmFjZXNcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgY29sczsgaSArKyApIHtcblxuXHRcdFx0Zm9yICggaiA9IDA7IGogPCAyICogKCBjb2xzIC0gaSApIC0gMTsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgayA9IE1hdGguZmxvb3IoIGogLyAyICk7XG5cblx0XHRcdFx0aWYgKCBqICUgMiA9PT0gMCApIHtcblxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayBdICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgKyAxIF0gKTtcblx0XHRcdFx0XHRwdXNoVmVydGV4KCB2WyBpICsgMSBdWyBrIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gYXBwcGx5UmFkaXVzKCByYWRpdXMgKSB7XG5cblx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIGl0ZXJhdGUgb3ZlciB0aGUgZW50aXJlIGJ1ZmZlciBhbmQgYXBwbHkgdGhlIHJhZGl1cyB0byBlYWNoIHZlcnRleFxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHR2ZXJ0ZXgueCA9IHZlcnRleEJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdHZlcnRleC55ID0gdmVydGV4QnVmZmVyWyBpICsgMSBdO1xuXHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdHZlcnRleC5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggcmFkaXVzICk7XG5cblx0XHRcdHZlcnRleEJ1ZmZlclsgaSArIDAgXSA9IHZlcnRleC54O1xuXHRcdFx0dmVydGV4QnVmZmVyWyBpICsgMSBdID0gdmVydGV4Lnk7XG5cdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF0gPSB2ZXJ0ZXguejtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVVVnMoKSB7XG5cblx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0dmVydGV4LnggPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF07XG5cdFx0XHR2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTtcblx0XHRcdHZlcnRleC56ID0gdmVydGV4QnVmZmVyWyBpICsgMiBdO1xuXG5cdFx0XHR2YXIgdSA9IGF6aW11dGgoIHZlcnRleCApIC8gMiAvIE1hdGguUEkgKyAwLjU7XG5cdFx0XHR2YXIgdiA9IGluY2xpbmF0aW9uKCB2ZXJ0ZXggKSAvIE1hdGguUEkgKyAwLjU7XG5cdFx0XHR1dkJ1ZmZlci5wdXNoKCB1LCAxIC0gdiApO1xuXG5cdFx0fVxuXG5cdFx0Y29ycmVjdFVWcygpO1xuXG5cdFx0Y29ycmVjdFNlYW0oKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gY29ycmVjdFNlYW0oKSB7XG5cblx0XHQvLyBoYW5kbGUgY2FzZSB3aGVuIGZhY2Ugc3RyYWRkbGVzIHRoZSBzZWFtLCBzZWUgIzMyNjlcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHV2QnVmZmVyLmxlbmd0aDsgaSArPSA2ICkge1xuXG5cdFx0XHQvLyB1diBkYXRhIG9mIGEgc2luZ2xlIGZhY2VcblxuXHRcdFx0dmFyIHgwID0gdXZCdWZmZXJbIGkgKyAwIF07XG5cdFx0XHR2YXIgeDEgPSB1dkJ1ZmZlclsgaSArIDIgXTtcblx0XHRcdHZhciB4MiA9IHV2QnVmZmVyWyBpICsgNCBdO1xuXG5cdFx0XHR2YXIgbWF4ID0gTWF0aC5tYXgoIHgwLCB4MSwgeDIgKTtcblx0XHRcdHZhciBtaW4gPSBNYXRoLm1pbiggeDAsIHgxLCB4MiApO1xuXG5cdFx0XHQvLyAwLjkgaXMgc29tZXdoYXQgYXJiaXRyYXJ5XG5cblx0XHRcdGlmICggbWF4ID4gMC45ICYmIG1pbiA8IDAuMSApIHtcblxuXHRcdFx0XHRpZiAoIHgwIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAwIF0gKz0gMTtcblx0XHRcdFx0aWYgKCB4MSA8IDAuMiApIHV2QnVmZmVyWyBpICsgMiBdICs9IDE7XG5cdFx0XHRcdGlmICggeDIgPCAwLjIgKSB1dkJ1ZmZlclsgaSArIDQgXSArPSAxO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2hWZXJ0ZXgoIHZlcnRleCApIHtcblxuXHRcdHZlcnRleEJ1ZmZlci5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFZlcnRleEJ5SW5kZXgoIGluZGV4LCB2ZXJ0ZXggKSB7XG5cblx0XHR2YXIgc3RyaWRlID0gaW5kZXggKiAzO1xuXG5cdFx0dmVydGV4LnggPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMCBdO1xuXHRcdHZlcnRleC55ID0gdmVydGljZXNbIHN0cmlkZSArIDEgXTtcblx0XHR2ZXJ0ZXgueiA9IHZlcnRpY2VzWyBzdHJpZGUgKyAyIF07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvcnJlY3RVVnMoKSB7XG5cblx0XHR2YXIgYSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBjID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciBjZW50cm9pZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdXZBID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZCID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdXZDID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaiA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIubGVuZ3RoOyBpICs9IDksIGogKz0gNiApIHtcblxuXHRcdFx0YS5zZXQoIHZlcnRleEJ1ZmZlclsgaSArIDAgXSwgdmVydGV4QnVmZmVyWyBpICsgMSBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF0gKTtcblx0XHRcdGIuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyAzIF0sIHZlcnRleEJ1ZmZlclsgaSArIDQgXSwgdmVydGV4QnVmZmVyWyBpICsgNSBdICk7XG5cdFx0XHRjLnNldCggdmVydGV4QnVmZmVyWyBpICsgNiBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyA3IF0sIHZlcnRleEJ1ZmZlclsgaSArIDggXSApO1xuXG5cdFx0XHR1dkEuc2V0KCB1dkJ1ZmZlclsgaiArIDAgXSwgdXZCdWZmZXJbIGogKyAxIF0gKTtcblx0XHRcdHV2Qi5zZXQoIHV2QnVmZmVyWyBqICsgMiBdLCB1dkJ1ZmZlclsgaiArIDMgXSApO1xuXHRcdFx0dXZDLnNldCggdXZCdWZmZXJbIGogKyA0IF0sIHV2QnVmZmVyWyBqICsgNSBdICk7XG5cblx0XHRcdGNlbnRyb2lkLmNvcHkoIGEgKS5hZGQoIGIgKS5hZGQoIGMgKS5kaXZpZGVTY2FsYXIoIDMgKTtcblxuXHRcdFx0dmFyIGF6aSA9IGF6aW11dGgoIGNlbnRyb2lkICk7XG5cblx0XHRcdGNvcnJlY3RVViggdXZBLCBqICsgMCwgYSwgYXppICk7XG5cdFx0XHRjb3JyZWN0VVYoIHV2QiwgaiArIDIsIGIsIGF6aSApO1xuXHRcdFx0Y29ycmVjdFVWKCB1dkMsIGogKyA0LCBjLCBhemkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY29ycmVjdFVWKCB1diwgc3RyaWRlLCB2ZWN0b3IsIGF6aW11dGggKSB7XG5cblx0XHRpZiAoICggYXppbXV0aCA8IDAgKSAmJiAoIHV2LnggPT09IDEgKSApIHtcblxuXHRcdFx0dXZCdWZmZXJbIHN0cmlkZSBdID0gdXYueCAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoICggdmVjdG9yLnggPT09IDAgKSAmJiAoIHZlY3Rvci56ID09PSAwICkgKSB7XG5cblx0XHRcdHV2QnVmZmVyWyBzdHJpZGUgXSA9IGF6aW11dGggLyAyIC8gTWF0aC5QSSArIDAuNTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gQW5nbGUgYXJvdW5kIHRoZSBZIGF4aXMsIGNvdW50ZXItY2xvY2t3aXNlIHdoZW4gbG9va2luZyBmcm9tIGFib3ZlLlxuXG5cdGZ1bmN0aW9uIGF6aW11dGgoIHZlY3RvciApIHtcblxuXHRcdHJldHVybiBNYXRoLmF0YW4yKCB2ZWN0b3IueiwgLSB2ZWN0b3IueCApO1xuXG5cdH1cblxuXG5cdC8vIEFuZ2xlIGFib3ZlIHRoZSBYWiBwbGFuZS5cblxuXHRmdW5jdGlvbiBpbmNsaW5hdGlvbiggdmVjdG9yICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYXRhbjIoIC0gdmVjdG9yLnksIE1hdGguc3FydCggKCB2ZWN0b3IueCAqIHZlY3Rvci54ICkgKyAoIHZlY3Rvci56ICogdmVjdG9yLnogKSApICk7XG5cblx0fVxuXG59XG5cblBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciB0aW1vdGh5cHJhdGxleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1vdGh5cHJhdGxleVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBUZXRyYWhlZHJvbkdlb21ldHJ5XG5cbmZ1bmN0aW9uIFRldHJhaGVkcm9uR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVGV0cmFoZWRyb25HZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblRldHJhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5UZXRyYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRldHJhaGVkcm9uR2VvbWV0cnk7XG5cbi8vIFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0dmFyIHZlcnRpY2VzID0gW1xuXHRcdDEsIDEsIDEsIFx0LSAxLCAtIDEsIDEsIFx0LSAxLCAxLCAtIDEsIFx0MSwgLSAxLCAtIDFcblx0XTtcblxuXHR2YXIgaW5kaWNlcyA9IFtcblx0XHQyLCAxLCAwLCBcdDAsIDMsIDIsXHQxLCAzLCAwLFx0MiwgMywgMVxuXHRdO1xuXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cbn1cblxuVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5UZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciB0aW1vdGh5cHJhdGxleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1vdGh5cHJhdGxleVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBPY3RhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gT2N0YWhlZHJvbkdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ09jdGFoZWRyb25HZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuT2N0YWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuT2N0YWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE9jdGFoZWRyb25HZW9tZXRyeTtcblxuLy8gT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0dmFyIHZlcnRpY2VzID0gW1xuXHRcdDEsIDAsIDAsIFx0LSAxLCAwLCAwLFx0MCwgMSwgMCxcblx0XHQwLCAtIDEsIDAsIFx0MCwgMCwgMSxcdDAsIDAsIC0gMVxuXHRdO1xuXG5cdHZhciBpbmRpY2VzID0gW1xuXHRcdDAsIDIsIDQsXHQwLCA0LCAzLFx0MCwgMywgNSxcblx0XHQwLCA1LCAyLFx0MSwgMiwgNSxcdDEsIDUsIDMsXG5cdFx0MSwgMywgNCxcdDEsIDQsIDJcblx0XTtcblxuXHRQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcywgdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7XG5cblx0dGhpcy50eXBlID0gJ09jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cbn1cblxuT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbk9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciB0aW1vdGh5cHJhdGxleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1vdGh5cHJhdGxleVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBJY29zYWhlZHJvbkdlb21ldHJ5XG5cbmZ1bmN0aW9uIEljb3NhaGVkcm9uR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnSWNvc2FoZWRyb25HZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkljb3NhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5JY29zYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEljb3NhaGVkcm9uR2VvbWV0cnk7XG5cbi8vIEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0dmFyIHQgPSAoIDEgKyBNYXRoLnNxcnQoIDUgKSApIC8gMjtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0LSAxLCB0LCAwLCBcdDEsIHQsIDAsIFx0LSAxLCAtIHQsIDAsIFx0MSwgLSB0LCAwLFxuXHRcdCAwLCAtIDEsIHQsIFx0MCwgMSwgdCxcdDAsIC0gMSwgLSB0LCBcdDAsIDEsIC0gdCxcblx0XHQgdCwgMCwgLSAxLCBcdHQsIDAsIDEsIFx0LSB0LCAwLCAtIDEsIFx0LSB0LCAwLCAxXG5cdF07XG5cblx0dmFyIGluZGljZXMgPSBbXG5cdFx0IDAsIDExLCA1LCBcdDAsIDUsIDEsIFx0MCwgMSwgNywgXHQwLCA3LCAxMCwgXHQwLCAxMCwgMTEsXG5cdFx0IDEsIDUsIDksIFx0NSwgMTEsIDQsXHQxMSwgMTAsIDIsXHQxMCwgNywgNixcdDcsIDEsIDgsXG5cdFx0IDMsIDksIDQsIFx0MywgNCwgMixcdDMsIDIsIDYsXHQzLCA2LCA4LFx0MywgOCwgOSxcblx0XHQgNCwgOSwgNSwgXHQyLCA0LCAxMSxcdDYsIDIsIDEwLFx0OCwgNiwgNyxcdDksIDgsIDFcblx0XTtcblxuXHRQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcywgdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICk7XG5cblx0dGhpcy50eXBlID0gJ0ljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG59XG5cbkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgQWJlIFBhem9zIC8gaHR0cHM6Ly9oYW1vaWQuY29tXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIERvZGVjYWhlZHJvbkdlb21ldHJ5XG5cbmZ1bmN0aW9uIERvZGVjYWhlZHJvbkdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0RvZGVjYWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkRvZGVjYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuRG9kZWNhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG9kZWNhaGVkcm9uR2VvbWV0cnk7XG5cbi8vIERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdCA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuXHR2YXIgciA9IDEgLyB0O1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtcblxuXHRcdC8vICjCsTEsIMKxMSwgwrExKVxuXHRcdC0gMSwgLSAxLCAtIDEsXHQtIDEsIC0gMSwgMSxcblx0XHQtIDEsIDEsIC0gMSwgLSAxLCAxLCAxLFxuXHRcdDEsIC0gMSwgLSAxLCAxLCAtIDEsIDEsXG5cdFx0MSwgMSwgLSAxLCAxLCAxLCAxLFxuXG5cdFx0Ly8gKDAsIMKxMS/PhiwgwrHPhilcblx0XHQgMCwgLSByLCAtIHQsIDAsIC0gciwgdCxcblx0XHQgMCwgciwgLSB0LCAwLCByLCB0LFxuXG5cdFx0Ly8gKMKxMS/PhiwgwrHPhiwgMClcblx0XHQtIHIsIC0gdCwgMCwgLSByLCB0LCAwLFxuXHRcdCByLCAtIHQsIDAsIHIsIHQsIDAsXG5cblx0XHQvLyAowrHPhiwgMCwgwrExL8+GKVxuXHRcdC0gdCwgMCwgLSByLCB0LCAwLCAtIHIsXG5cdFx0LSB0LCAwLCByLCB0LCAwLCByXG5cdF07XG5cblx0dmFyIGluZGljZXMgPSBbXG5cdFx0MywgMTEsIDcsIFx0MywgNywgMTUsIFx0MywgMTUsIDEzLFxuXHRcdDcsIDE5LCAxNywgXHQ3LCAxNywgNiwgXHQ3LCA2LCAxNSxcblx0XHQxNywgNCwgOCwgXHQxNywgOCwgMTAsIFx0MTcsIDEwLCA2LFxuXHRcdDgsIDAsIDE2LCBcdDgsIDE2LCAyLCBcdDgsIDIsIDEwLFxuXHRcdDAsIDEyLCAxLCBcdDAsIDEsIDE4LCBcdDAsIDE4LCAxNixcblx0XHQ2LCAxMCwgMiwgXHQ2LCAyLCAxMywgXHQ2LCAxMywgMTUsXG5cdFx0MiwgMTYsIDE4LCBcdDIsIDE4LCAzLCBcdDIsIDMsIDEzLFxuXHRcdDE4LCAxLCA5LCBcdDE4LCA5LCAxMSwgXHQxOCwgMTEsIDMsXG5cdFx0NCwgMTQsIDEyLCBcdDQsIDEyLCAwLCBcdDQsIDAsIDgsXG5cdFx0MTEsIDksIDUsIFx0MTEsIDUsIDE5LCBcdDExLCAxOSwgNyxcblx0XHQxOSwgNSwgMTQsIFx0MTksIDE0LCA0LCBcdDE5LCA0LCAxNyxcblx0XHQxLCAxMiwgMTQsIFx0MSwgMTQsIDUsIFx0MSwgNSwgOVxuXHRdO1xuXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG59XG5cbkRvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkRvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3Igb29zbW94aWVjb2RlIC8gaHR0cHM6Ly9naXRodWIuY29tL29vc21veGllY29kZVxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICogQGF1dGhvciB6ejg1IC8gaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcbiAqIEBhdXRob3IgbWluaW5nb2xkIC8gaHR0cHM6Ly9naXRodWIuY29tL21pbmluZ29sZFxuICogQGF1dGhvciBqb25vYnIxIC8gaHR0cHM6Ly9naXRodWIuY29tL2pvbm9icjFcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKlxuICovXG5cbi8vIFR1YmVHZW9tZXRyeVxuXG5mdW5jdGlvbiBUdWJlR2VvbWV0cnkoIHBhdGgsIHR1YnVsYXJTZWdtZW50cywgcmFkaXVzLCByYWRpYWxTZWdtZW50cywgY2xvc2VkLCB0YXBlciApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1R1YmVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHBhdGg6IHBhdGgsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdGNsb3NlZDogY2xvc2VkXG5cdH07XG5cblx0aWYgKCB0YXBlciAhPT0gdW5kZWZpbmVkICkgY29uc29sZS53YXJuKCAnVEhSRUUuVHViZUdlb21ldHJ5OiB0YXBlciBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR2YXIgYnVmZmVyR2VvbWV0cnkgPSBuZXcgVHViZUJ1ZmZlckdlb21ldHJ5KCBwYXRoLCB0dWJ1bGFyU2VnbWVudHMsIHJhZGl1cywgcmFkaWFsU2VnbWVudHMsIGNsb3NlZCApO1xuXG5cdC8vIGV4cG9zZSBpbnRlcm5hbHNcblxuXHR0aGlzLnRhbmdlbnRzID0gYnVmZmVyR2VvbWV0cnkudGFuZ2VudHM7XG5cdHRoaXMubm9ybWFscyA9IGJ1ZmZlckdlb21ldHJ5Lm5vcm1hbHM7XG5cdHRoaXMuYmlub3JtYWxzID0gYnVmZmVyR2VvbWV0cnkuYmlub3JtYWxzO1xuXG5cdC8vIGNyZWF0ZSBnZW9tZXRyeVxuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBidWZmZXJHZW9tZXRyeSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5UdWJlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5UdWJlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHViZUdlb21ldHJ5O1xuXG4vLyBUdWJlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gVHViZUJ1ZmZlckdlb21ldHJ5KCBwYXRoLCB0dWJ1bGFyU2VnbWVudHMsIHJhZGl1cywgcmFkaWFsU2VnbWVudHMsIGNsb3NlZCApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1R1YmVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHBhdGg6IHBhdGgsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdGNsb3NlZDogY2xvc2VkXG5cdH07XG5cblx0dHVidWxhclNlZ21lbnRzID0gdHVidWxhclNlZ21lbnRzIHx8IDY0O1xuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0cmFkaWFsU2VnbWVudHMgPSByYWRpYWxTZWdtZW50cyB8fCA4O1xuXHRjbG9zZWQgPSBjbG9zZWQgfHwgZmFsc2U7XG5cblx0dmFyIGZyYW1lcyA9IHBhdGguY29tcHV0ZUZyZW5ldEZyYW1lcyggdHVidWxhclNlZ21lbnRzLCBjbG9zZWQgKTtcblxuXHQvLyBleHBvc2UgaW50ZXJuYWxzXG5cblx0dGhpcy50YW5nZW50cyA9IGZyYW1lcy50YW5nZW50cztcblx0dGhpcy5ub3JtYWxzID0gZnJhbWVzLm5vcm1hbHM7XG5cdHRoaXMuYmlub3JtYWxzID0gZnJhbWVzLmJpbm9ybWFscztcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHR2YXIgUCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGksIGo7XG5cblx0Ly8gYnVmZmVyXG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblx0dmFyIGluZGljZXMgPSBbXTtcblxuXHQvLyBjcmVhdGUgYnVmZmVyIGRhdGFcblxuXHRnZW5lcmF0ZUJ1ZmZlckRhdGEoKTtcblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0Ly8gZnVuY3Rpb25zXG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVCdWZmZXJEYXRhKCkge1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdGdlbmVyYXRlU2VnbWVudCggaSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIG5vdCBjbG9zZWQsIGdlbmVyYXRlIHRoZSBsYXN0IHJvdyBvZiB2ZXJ0aWNlcyBhbmQgbm9ybWFsc1xuXHRcdC8vIGF0IHRoZSByZWd1bGFyIHBvc2l0aW9uIG9uIHRoZSBnaXZlbiBwYXRoXG5cdFx0Ly9cblx0XHQvLyBpZiB0aGUgZ2VvbWV0cnkgaXMgY2xvc2VkLCBkdXBsaWNhdGUgdGhlIGZpcnN0IHJvdyBvZiB2ZXJ0aWNlcyBhbmQgbm9ybWFscyAodXZzIHdpbGwgZGlmZmVyKVxuXG5cdFx0Z2VuZXJhdGVTZWdtZW50KCAoIGNsb3NlZCA9PT0gZmFsc2UgKSA/IHR1YnVsYXJTZWdtZW50cyA6IDAgKTtcblxuXHRcdC8vIHV2cyBhcmUgZ2VuZXJhdGVkIGluIGEgc2VwYXJhdGUgZnVuY3Rpb24uXG5cdFx0Ly8gdGhpcyBtYWtlcyBpdCBlYXN5IGNvbXB1dGUgY29ycmVjdCB2YWx1ZXMgZm9yIGNsb3NlZCBnZW9tZXRyaWVzXG5cblx0XHRnZW5lcmF0ZVVWcygpO1xuXG5cdFx0Ly8gZmluYWxseSBjcmVhdGUgZmFjZXNcblxuXHRcdGdlbmVyYXRlSW5kaWNlcygpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVNlZ21lbnQoIGkgKSB7XG5cblx0XHQvLyB3ZSB1c2UgZ2V0UG9pbnRBdCB0byBzYW1wbGUgZXZlbmx5IGRpc3RyaWJ1dGVkIHBvaW50cyBmcm9tIHRoZSBnaXZlbiBwYXRoXG5cblx0XHRQID0gcGF0aC5nZXRQb2ludEF0KCBpIC8gdHVidWxhclNlZ21lbnRzLCBQICk7XG5cblx0XHQvLyByZXRyaWV2ZSBjb3JyZXNwb25kaW5nIG5vcm1hbCBhbmQgYmlub3JtYWxcblxuXHRcdHZhciBOID0gZnJhbWVzLm5vcm1hbHNbIGkgXTtcblx0XHR2YXIgQiA9IGZyYW1lcy5iaW5vcm1hbHNbIGkgXTtcblxuXHRcdC8vIGdlbmVyYXRlIG5vcm1hbHMgYW5kIHZlcnRpY2VzIGZvciB0aGUgY3VycmVudCBzZWdtZW50XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0dmFyIHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjtcblxuXHRcdFx0dmFyIHNpbiA9IE1hdGguc2luKCB2ICk7XG5cdFx0XHR2YXIgY29zID0gLSBNYXRoLmNvcyggdiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0bm9ybWFsLnggPSAoIGNvcyAqIE4ueCArIHNpbiAqIEIueCApO1xuXHRcdFx0bm9ybWFsLnkgPSAoIGNvcyAqIE4ueSArIHNpbiAqIEIueSApO1xuXHRcdFx0bm9ybWFsLnogPSAoIGNvcyAqIE4ueiArIHNpbiAqIEIueiApO1xuXHRcdFx0bm9ybWFsLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gUC54ICsgcmFkaXVzICogbm9ybWFsLng7XG5cdFx0XHR2ZXJ0ZXgueSA9IFAueSArIHJhZGl1cyAqIG5vcm1hbC55O1xuXHRcdFx0dmVydGV4LnogPSBQLnogKyByYWRpdXMgKiBub3JtYWwuejtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZUluZGljZXMoKSB7XG5cblx0XHRmb3IgKCBqID0gMTsgaiA8PSB0dWJ1bGFyU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdGZvciAoIGkgPSAxOyBpIDw9IHJhZGlhbFNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBhID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArICggaSAtIDEgKTtcblx0XHRcdFx0dmFyIGIgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArICggaSAtIDEgKTtcblx0XHRcdFx0dmFyIGMgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArIGk7XG5cdFx0XHRcdHZhciBkID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7XG5cblx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVVVnMoKSB7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRcdHV2LnggPSBpIC8gdHVidWxhclNlZ21lbnRzO1xuXHRcdFx0XHR1di55ID0gaiAvIHJhZGlhbFNlZ21lbnRzO1xuXG5cdFx0XHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cbn1cblxuVHViZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuVHViZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR1YmVCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIG9vc21veGllY29kZVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqXG4gKiBiYXNlZCBvbiBodHRwOi8vd3d3LmJsYWNrcGF3bi5jb20vdGV4dHMvcHF0b3J1cy9cbiAqL1xuXG4vLyBUb3J1c0tub3RHZW9tZXRyeVxuXG5mdW5jdGlvbiBUb3J1c0tub3RHZW9tZXRyeSggcmFkaXVzLCB0dWJlLCB0dWJ1bGFyU2VnbWVudHMsIHJhZGlhbFNlZ21lbnRzLCBwLCBxLCBoZWlnaHRTY2FsZSApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1RvcnVzS25vdEdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0dHViZTogdHViZSxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0cDogcCxcblx0XHRxOiBxXG5cdH07XG5cblx0aWYgKCBoZWlnaHRTY2FsZSAhPT0gdW5kZWZpbmVkICkgY29uc29sZS53YXJuKCAnVEhSRUUuVG9ydXNLbm90R2VvbWV0cnk6IGhlaWdodFNjYWxlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2NhbGUoIHgsIHksIHogKSBpbnN0ZWFkLicgKTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHR1YnVsYXJTZWdtZW50cywgcmFkaWFsU2VnbWVudHMsIHAsIHEgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5Ub3J1c0tub3RHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRvcnVzS25vdEdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzS25vdEdlb21ldHJ5O1xuXG4vLyBUb3J1c0tub3RCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCB0dWJlLCB0dWJ1bGFyU2VnbWVudHMsIHJhZGlhbFNlZ21lbnRzLCBwLCBxICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVG9ydXNLbm90QnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHR0dWJlOiB0dWJlLFxuXHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRwOiBwLFxuXHRcdHE6IHFcblx0fTtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0dHViZSA9IHR1YmUgfHwgMC40O1xuXHR0dWJ1bGFyU2VnbWVudHMgPSBNYXRoLmZsb29yKCB0dWJ1bGFyU2VnbWVudHMgKSB8fCA2NDtcblx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApIHx8IDg7XG5cdHAgPSBwIHx8IDI7XG5cdHEgPSBxIHx8IDM7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBpLCBqO1xuXG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgUDEgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgUDIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBCID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIFQgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgTiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdGZvciAoIGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgKysgaSApIHtcblxuXHRcdC8vIHRoZSByYWRpYW4gXCJ1XCIgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9uIHRoZSB0b3J1cyBjdXJ2ZSBvZiB0aGUgY3VycmVudCB0dWJ1bGFyIHNlZ2VtZW50XG5cblx0XHR2YXIgdSA9IGkgLyB0dWJ1bGFyU2VnbWVudHMgKiBwICogTWF0aC5QSSAqIDI7XG5cblx0XHQvLyBub3cgd2UgY2FsY3VsYXRlIHR3byBwb2ludHMuIFAxIGlzIG91ciBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZSwgUDIgaXMgYSBsaXR0bGUgZmFydGhlciBhaGVhZC5cblx0XHQvLyB0aGVzZSBwb2ludHMgYXJlIHVzZWQgdG8gY3JlYXRlIGEgc3BlY2lhbCBcImNvb3JkaW5hdGUgc3BhY2VcIiwgd2hpY2ggaXMgbmVjZXNzYXJ5IHRvIGNhbGN1bGF0ZSB0aGUgY29ycmVjdCB2ZXJ0ZXggcG9zaXRpb25zXG5cblx0XHRjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUoIHUsIHAsIHEsIHJhZGl1cywgUDEgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUoIHUgKyAwLjAxLCBwLCBxLCByYWRpdXMsIFAyICk7XG5cblx0XHQvLyBjYWxjdWxhdGUgb3J0aG9ub3JtYWwgYmFzaXNcblxuXHRcdFQuc3ViVmVjdG9ycyggUDIsIFAxICk7XG5cdFx0Ti5hZGRWZWN0b3JzKCBQMiwgUDEgKTtcblx0XHRCLmNyb3NzVmVjdG9ycyggVCwgTiApO1xuXHRcdE4uY3Jvc3NWZWN0b3JzKCBCLCBUICk7XG5cblx0XHQvLyBub3JtYWxpemUgQiwgTi4gVCBjYW4gYmUgaWdub3JlZCwgd2UgZG9uJ3QgdXNlIGl0XG5cblx0XHRCLm5vcm1hbGl6ZSgpO1xuXHRcdE4ubm9ybWFsaXplKCk7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgKysgaiApIHtcblxuXHRcdFx0Ly8gbm93IGNhbGN1bGF0ZSB0aGUgdmVydGljZXMuIHRoZXkgYXJlIG5vdGhpbmcgbW9yZSB0aGFuIGFuIGV4dHJ1c2lvbiBvZiB0aGUgdG9ydXMgY3VydmUuXG5cdFx0XHQvLyBiZWNhdXNlIHdlIGV4dHJ1ZGUgYSBzaGFwZSBpbiB0aGUgeHktcGxhbmUsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsY3VsYXRlIGEgei12YWx1ZS5cblxuXHRcdFx0dmFyIHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjtcblx0XHRcdHZhciBjeCA9IC0gdHViZSAqIE1hdGguY29zKCB2ICk7XG5cdFx0XHR2YXIgY3kgPSB0dWJlICogTWF0aC5zaW4oIHYgKTtcblxuXHRcdFx0Ly8gbm93IGNhbGN1bGF0ZSB0aGUgZmluYWwgdmVydGV4IHBvc2l0aW9uLlxuXHRcdFx0Ly8gZmlyc3Qgd2Ugb3JpZW50IHRoZSBleHRydXNpb24gd2l0aCBvdXIgYmFzaXMgdmVjdG9zLCB0aGVuIHdlIGFkZCBpdCB0byB0aGUgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgY3VydmVcblxuXHRcdFx0dmVydGV4LnggPSBQMS54ICsgKCBjeCAqIE4ueCArIGN5ICogQi54ICk7XG5cdFx0XHR2ZXJ0ZXgueSA9IFAxLnkgKyAoIGN4ICogTi55ICsgY3kgKiBCLnkgKTtcblx0XHRcdHZlcnRleC56ID0gUDEueiArICggY3ggKiBOLnogKyBjeSAqIEIueiApO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdC8vIG5vcm1hbCAoUDEgaXMgYWx3YXlzIHRoZSBjZW50ZXIvb3JpZ2luIG9mIHRoZSBleHRydXNpb24sIHRodXMgd2UgY2FuIHVzZSBpdCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbClcblxuXHRcdFx0bm9ybWFsLnN1YlZlY3RvcnMoIHZlcnRleCwgUDEgKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdC8vIHV2XG5cblx0XHRcdHV2cy5wdXNoKCBpIC8gdHVidWxhclNlZ21lbnRzICk7XG5cdFx0XHR1dnMucHVzaCggaiAvIHJhZGlhbFNlZ21lbnRzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRmb3IgKCBqID0gMTsgaiA8PSB0dWJ1bGFyU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8PSByYWRpYWxTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Ly8gaW5kaWNlc1xuXG5cdFx0XHR2YXIgYSA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyAoIGkgLSAxICk7XG5cdFx0XHR2YXIgYiA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgKCBpIC0gMSApO1xuXHRcdFx0dmFyIGMgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArIGk7XG5cdFx0XHR2YXIgZCA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpO1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0Ly8gdGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSB0b3J1cyBjdXJ2ZVxuXG5cdGZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBwb3NpdGlvbiApIHtcblxuXHRcdHZhciBjdSA9IE1hdGguY29zKCB1ICk7XG5cdFx0dmFyIHN1ID0gTWF0aC5zaW4oIHUgKTtcblx0XHR2YXIgcXVPdmVyUCA9IHEgLyBwICogdTtcblx0XHR2YXIgY3MgPSBNYXRoLmNvcyggcXVPdmVyUCApO1xuXG5cdFx0cG9zaXRpb24ueCA9IHJhZGl1cyAqICggMiArIGNzICkgKiAwLjUgKiBjdTtcblx0XHRwb3NpdGlvbi55ID0gcmFkaXVzICogKCAyICsgY3MgKSAqIHN1ICogMC41O1xuXHRcdHBvc2l0aW9uLnogPSByYWRpdXMgKiBNYXRoLnNpbiggcXVPdmVyUCApICogMC41O1xuXG5cdH1cblxufVxuXG5Ub3J1c0tub3RCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3Igb29zbW94aWVjb2RlXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBUb3J1c0dlb21ldHJ5XG5cbmZ1bmN0aW9uIFRvcnVzR2VvbWV0cnkoIHJhZGl1cywgdHViZSwgcmFkaWFsU2VnbWVudHMsIHR1YnVsYXJTZWdtZW50cywgYXJjICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVG9ydXNHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHR1YmU6IHR1YmUsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdGFyYzogYXJjXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBUb3J1c0J1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHJhZGlhbFNlZ21lbnRzLCB0dWJ1bGFyU2VnbWVudHMsIGFyYyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblRvcnVzR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5Ub3J1c0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzR2VvbWV0cnk7XG5cbi8vIFRvcnVzQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gVG9ydXNCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCB0dWJlLCByYWRpYWxTZWdtZW50cywgdHVidWxhclNlZ21lbnRzLCBhcmMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUb3J1c0J1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0dHViZTogdHViZSxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0YXJjOiBhcmNcblx0fTtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0dHViZSA9IHR1YmUgfHwgMC40O1xuXHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICkgfHwgODtcblx0dHVidWxhclNlZ21lbnRzID0gTWF0aC5mbG9vciggdHVidWxhclNlZ21lbnRzICkgfHwgNjtcblx0YXJjID0gYXJjIHx8IE1hdGguUEkgKiAyO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBqLCBpO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRmb3IgKCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0dmFyIHUgPSBpIC8gdHVidWxhclNlZ21lbnRzICogYXJjO1xuXHRcdFx0dmFyIHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gKCByYWRpdXMgKyB0dWJlICogTWF0aC5jb3MoIHYgKSApICogTWF0aC5jb3MoIHUgKTtcblx0XHRcdHZlcnRleC55ID0gKCByYWRpdXMgKyB0dWJlICogTWF0aC5jb3MoIHYgKSApICogTWF0aC5zaW4oIHUgKTtcblx0XHRcdHZlcnRleC56ID0gdHViZSAqIE1hdGguc2luKCB2ICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdGNlbnRlci54ID0gcmFkaXVzICogTWF0aC5jb3MoIHUgKTtcblx0XHRcdGNlbnRlci55ID0gcmFkaXVzICogTWF0aC5zaW4oIHUgKTtcblx0XHRcdG5vcm1hbC5zdWJWZWN0b3JzKCB2ZXJ0ZXgsIGNlbnRlciApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXZzLnB1c2goIGkgLyB0dWJ1bGFyU2VnbWVudHMgKTtcblx0XHRcdHV2cy5wdXNoKCBqIC8gcmFkaWFsU2VnbWVudHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdGZvciAoIGogPSAxOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHQvLyBpbmRpY2VzXG5cblx0XHRcdHZhciBhID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiBqICsgaSAtIDE7XG5cdFx0XHR2YXIgYiA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaSAtIDE7XG5cdFx0XHR2YXIgYyA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblx0XHRcdHZhciBkID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblxuXHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG59XG5cblRvcnVzQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5Ub3J1c0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqIFBvcnQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L2VhcmN1dCAodjIuMS4yKVxuICovXG5cbnZhciBFYXJjdXQgPSB7XG5cblx0dHJpYW5ndWxhdGU6IGZ1bmN0aW9uICggZGF0YSwgaG9sZUluZGljZXMsIGRpbSApIHtcblxuXHRcdGRpbSA9IGRpbSB8fCAyO1xuXG5cdFx0dmFyIGhhc0hvbGVzID0gaG9sZUluZGljZXMgJiYgaG9sZUluZGljZXMubGVuZ3RoLFxuXHRcdFx0b3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWyAwIF0gKiBkaW0gOiBkYXRhLmxlbmd0aCxcblx0XHRcdG91dGVyTm9kZSA9IGxpbmtlZExpc3QoIGRhdGEsIDAsIG91dGVyTGVuLCBkaW0sIHRydWUgKSxcblx0XHRcdHRyaWFuZ2xlcyA9IFtdO1xuXG5cdFx0aWYgKCAhIG91dGVyTm9kZSApIHJldHVybiB0cmlhbmdsZXM7XG5cblx0XHR2YXIgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgaW52U2l6ZTtcblxuXHRcdGlmICggaGFzSG9sZXMgKSBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICk7XG5cblx0XHQvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcblxuXHRcdGlmICggZGF0YS5sZW5ndGggPiA4MCAqIGRpbSApIHtcblxuXHRcdFx0bWluWCA9IG1heFggPSBkYXRhWyAwIF07XG5cdFx0XHRtaW5ZID0gbWF4WSA9IGRhdGFbIDEgXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSBkaW07IGkgPCBvdXRlckxlbjsgaSArPSBkaW0gKSB7XG5cblx0XHRcdFx0eCA9IGRhdGFbIGkgXTtcblx0XHRcdFx0eSA9IGRhdGFbIGkgKyAxIF07XG5cdFx0XHRcdGlmICggeCA8IG1pblggKSBtaW5YID0geDtcblx0XHRcdFx0aWYgKCB5IDwgbWluWSApIG1pblkgPSB5O1xuXHRcdFx0XHRpZiAoIHggPiBtYXhYICkgbWF4WCA9IHg7XG5cdFx0XHRcdGlmICggeSA+IG1heFkgKSBtYXhZID0geTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBtaW5YLCBtaW5ZIGFuZCBpbnZTaXplIGFyZSBsYXRlciB1c2VkIHRvIHRyYW5zZm9ybSBjb29yZHMgaW50byBpbnRlZ2VycyBmb3Igei1vcmRlciBjYWxjdWxhdGlvblxuXG5cdFx0XHRpbnZTaXplID0gTWF0aC5tYXgoIG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSApO1xuXHRcdFx0aW52U2l6ZSA9IGludlNpemUgIT09IDAgPyAxIC8gaW52U2l6ZSA6IDA7XG5cblx0XHR9XG5cblx0XHRlYXJjdXRMaW5rZWQoIG91dGVyTm9kZSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHRcdHJldHVybiB0cmlhbmdsZXM7XG5cblx0fVxuXG59O1xuXG4vLyBjcmVhdGUgYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QgZnJvbSBwb2x5Z29uIHBvaW50cyBpbiB0aGUgc3BlY2lmaWVkIHdpbmRpbmcgb3JkZXJcblxuZnVuY3Rpb24gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UgKSB7XG5cblx0dmFyIGksIGxhc3Q7XG5cblx0aWYgKCBjbG9ja3dpc2UgPT09ICggc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkgPiAwICkgKSB7XG5cblx0XHRmb3IgKCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gZGltICkgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRmb3IgKCBpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSApIGxhc3QgPSBpbnNlcnROb2RlKCBpLCBkYXRhWyBpIF0sIGRhdGFbIGkgKyAxIF0sIGxhc3QgKTtcblxuXHR9XG5cblx0aWYgKCBsYXN0ICYmIGVxdWFscyggbGFzdCwgbGFzdC5uZXh0ICkgKSB7XG5cblx0XHRyZW1vdmVOb2RlKCBsYXN0ICk7XG5cdFx0bGFzdCA9IGxhc3QubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIGxhc3Q7XG5cbn1cblxuLy8gZWxpbWluYXRlIGNvbGluZWFyIG9yIGR1cGxpY2F0ZSBwb2ludHNcblxuZnVuY3Rpb24gZmlsdGVyUG9pbnRzKCBzdGFydCwgZW5kICkge1xuXG5cdGlmICggISBzdGFydCApIHJldHVybiBzdGFydDtcblx0aWYgKCAhIGVuZCApIGVuZCA9IHN0YXJ0O1xuXG5cdHZhciBwID0gc3RhcnQsIGFnYWluO1xuXG5cdGRvIHtcblxuXHRcdGFnYWluID0gZmFsc2U7XG5cblx0XHRpZiAoICEgcC5zdGVpbmVyICYmICggZXF1YWxzKCBwLCBwLm5leHQgKSB8fCBhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID09PSAwICkgKSB7XG5cblx0XHRcdHJlbW92ZU5vZGUoIHAgKTtcblx0XHRcdHAgPSBlbmQgPSBwLnByZXY7XG5cdFx0XHRpZiAoIHAgPT09IHAubmV4dCApIGJyZWFrO1xuXHRcdFx0YWdhaW4gPSB0cnVlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cCA9IHAubmV4dDtcblxuXHRcdH1cblxuXHR9IHdoaWxlICggYWdhaW4gfHwgcCAhPT0gZW5kICk7XG5cblx0cmV0dXJuIGVuZDtcblxufVxuXG4vLyBtYWluIGVhciBzbGljaW5nIGxvb3Agd2hpY2ggdHJpYW5ndWxhdGVzIGEgcG9seWdvbiAoZ2l2ZW4gYXMgYSBsaW5rZWQgbGlzdClcblxuZnVuY3Rpb24gZWFyY3V0TGlua2VkKCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCBwYXNzICkge1xuXG5cdGlmICggISBlYXIgKSByZXR1cm47XG5cblx0Ly8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuXG5cdGlmICggISBwYXNzICYmIGludlNpemUgKSBpbmRleEN1cnZlKCBlYXIsIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHR2YXIgc3RvcCA9IGVhciwgcHJldiwgbmV4dDtcblxuXHQvLyBpdGVyYXRlIHRocm91Z2ggZWFycywgc2xpY2luZyB0aGVtIG9uZSBieSBvbmVcblxuXHR3aGlsZSAoIGVhci5wcmV2ICE9PSBlYXIubmV4dCApIHtcblxuXHRcdHByZXYgPSBlYXIucHJldjtcblx0XHRuZXh0ID0gZWFyLm5leHQ7XG5cblx0XHRpZiAoIGludlNpemUgPyBpc0Vhckhhc2hlZCggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkgOiBpc0VhciggZWFyICkgKSB7XG5cblx0XHRcdC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXG5cdFx0XHR0cmlhbmdsZXMucHVzaCggcHJldi5pIC8gZGltICk7XG5cdFx0XHR0cmlhbmdsZXMucHVzaCggZWFyLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBuZXh0LmkgLyBkaW0gKTtcblxuXHRcdFx0cmVtb3ZlTm9kZSggZWFyICk7XG5cblx0XHRcdC8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRpY2UgbGVhZHMgdG8gbGVzcyBzbGl2ZXIgdHJpYW5nbGVzXG5cdFx0XHRlYXIgPSBuZXh0Lm5leHQ7XG5cdFx0XHRzdG9wID0gbmV4dC5uZXh0O1xuXG5cdFx0XHRjb250aW51ZTtcblxuXHRcdH1cblxuXHRcdGVhciA9IG5leHQ7XG5cblx0XHQvLyBpZiB3ZSBsb29wZWQgdGhyb3VnaCB0aGUgd2hvbGUgcmVtYWluaW5nIHBvbHlnb24gYW5kIGNhbid0IGZpbmQgYW55IG1vcmUgZWFyc1xuXG5cdFx0aWYgKCBlYXIgPT09IHN0b3AgKSB7XG5cblx0XHRcdC8vIHRyeSBmaWx0ZXJpbmcgcG9pbnRzIGFuZCBzbGljaW5nIGFnYWluXG5cblx0XHRcdGlmICggISBwYXNzICkge1xuXG5cdFx0XHRcdGVhcmN1dExpbmtlZCggZmlsdGVyUG9pbnRzKCBlYXIgKSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDEgKTtcblxuXHRcdFx0XHQvLyBpZiB0aGlzIGRpZG4ndCB3b3JrLCB0cnkgY3VyaW5nIGFsbCBzbWFsbCBzZWxmLWludGVyc2VjdGlvbnMgbG9jYWxseVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBwYXNzID09PSAxICkge1xuXG5cdFx0XHRcdGVhciA9IGN1cmVMb2NhbEludGVyc2VjdGlvbnMoIGVhciwgdHJpYW5nbGVzLCBkaW0gKTtcblx0XHRcdFx0ZWFyY3V0TGlua2VkKCBlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAyICk7XG5cblx0XHRcdC8vIGFzIGEgbGFzdCByZXNvcnQsIHRyeSBzcGxpdHRpbmcgdGhlIHJlbWFpbmluZyBwb2x5Z29uIGludG8gdHdvXG5cblx0XHRcdH0gZWxzZSBpZiAoIHBhc3MgPT09IDIgKSB7XG5cblx0XHRcdFx0c3BsaXRFYXJjdXQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLy8gY2hlY2sgd2hldGhlciBhIHBvbHlnb24gbm9kZSBmb3JtcyBhIHZhbGlkIGVhciB3aXRoIGFkamFjZW50IG5vZGVzXG5cbmZ1bmN0aW9uIGlzRWFyKCBlYXIgKSB7XG5cblx0dmFyIGEgPSBlYXIucHJldixcblx0XHRiID0gZWFyLFxuXHRcdGMgPSBlYXIubmV4dDtcblxuXHRpZiAoIGFyZWEoIGEsIGIsIGMgKSA+PSAwICkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxuXG5cdC8vIG5vdyBtYWtlIHN1cmUgd2UgZG9uJ3QgaGF2ZSBvdGhlciBwb2ludHMgaW5zaWRlIHRoZSBwb3RlbnRpYWwgZWFyXG5cdHZhciBwID0gZWFyLm5leHQubmV4dDtcblxuXHR3aGlsZSAoIHAgIT09IGVhci5wcmV2ICkge1xuXG5cdFx0aWYgKCBwb2ludEluVHJpYW5nbGUoIGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIHAueCwgcC55ICkgJiYgYXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA+PSAwICkge1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG5mdW5jdGlvbiBpc0Vhckhhc2hlZCggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdHZhciBhID0gZWFyLnByZXYsXG5cdFx0YiA9IGVhcixcblx0XHRjID0gZWFyLm5leHQ7XG5cblx0aWYgKCBhcmVhKCBhLCBiLCBjICkgPj0gMCApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuXHQvLyB0cmlhbmdsZSBiYm94OyBtaW4gJiBtYXggYXJlIGNhbGN1bGF0ZWQgbGlrZSB0aGlzIGZvciBzcGVlZFxuXG5cdHZhciBtaW5UWCA9IGEueCA8IGIueCA/ICggYS54IDwgYy54ID8gYS54IDogYy54ICkgOiAoIGIueCA8IGMueCA/IGIueCA6IGMueCApLFxuXHRcdG1pblRZID0gYS55IDwgYi55ID8gKCBhLnkgPCBjLnkgPyBhLnkgOiBjLnkgKSA6ICggYi55IDwgYy55ID8gYi55IDogYy55ICksXG5cdFx0bWF4VFggPSBhLnggPiBiLnggPyAoIGEueCA+IGMueCA/IGEueCA6IGMueCApIDogKCBiLnggPiBjLnggPyBiLnggOiBjLnggKSxcblx0XHRtYXhUWSA9IGEueSA+IGIueSA/ICggYS55ID4gYy55ID8gYS55IDogYy55ICkgOiAoIGIueSA+IGMueSA/IGIueSA6IGMueSApO1xuXG5cdC8vIHotb3JkZXIgcmFuZ2UgZm9yIHRoZSBjdXJyZW50IHRyaWFuZ2xlIGJib3g7XG5cblx0dmFyIG1pblogPSB6T3JkZXIoIG1pblRYLCBtaW5UWSwgbWluWCwgbWluWSwgaW52U2l6ZSApLFxuXHRcdG1heFogPSB6T3JkZXIoIG1heFRYLCBtYXhUWSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdC8vIGZpcnN0IGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIGluIGluY3JlYXNpbmcgei1vcmRlclxuXG5cdHZhciBwID0gZWFyLm5leHRaO1xuXG5cdHdoaWxlICggcCAmJiBwLnogPD0gbWF4WiApIHtcblxuXHRcdGlmICggcCAhPT0gZWFyLnByZXYgJiYgcCAhPT0gZWFyLm5leHQgJiZcblx0XHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRcdGFyZWEoIHAucHJldiwgcCwgcC5uZXh0ICkgPj0gMCApIHJldHVybiBmYWxzZTtcblx0XHRwID0gcC5uZXh0WjtcblxuXHR9XG5cblx0Ly8gdGhlbiBsb29rIGZvciBwb2ludHMgaW4gZGVjcmVhc2luZyB6LW9yZGVyXG5cblx0cCA9IGVhci5wcmV2WjtcblxuXHR3aGlsZSAoIHAgJiYgcC56ID49IG1pblogKSB7XG5cblx0XHRpZiAoIHAgIT09IGVhci5wcmV2ICYmIHAgIT09IGVhci5uZXh0ICYmXG5cdFx0XHRcdHBvaW50SW5UcmlhbmdsZSggYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkgKSAmJlxuXHRcdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRwID0gcC5wcmV2WjtcblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn1cblxuLy8gZ28gdGhyb3VnaCBhbGwgcG9seWdvbiBub2RlcyBhbmQgY3VyZSBzbWFsbCBsb2NhbCBzZWxmLWludGVyc2VjdGlvbnNcblxuZnVuY3Rpb24gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyggc3RhcnQsIHRyaWFuZ2xlcywgZGltICkge1xuXG5cdHZhciBwID0gc3RhcnQ7XG5cblx0ZG8ge1xuXG5cdFx0dmFyIGEgPSBwLnByZXYsIGIgPSBwLm5leHQubmV4dDtcblxuXHRcdGlmICggISBlcXVhbHMoIGEsIGIgKSAmJiBpbnRlcnNlY3RzKCBhLCBwLCBwLm5leHQsIGIgKSAmJiBsb2NhbGx5SW5zaWRlKCBhLCBiICkgJiYgbG9jYWxseUluc2lkZSggYiwgYSApICkge1xuXG5cdFx0XHR0cmlhbmdsZXMucHVzaCggYS5pIC8gZGltICk7XG5cdFx0XHR0cmlhbmdsZXMucHVzaCggcC5pIC8gZGltICk7XG5cdFx0XHR0cmlhbmdsZXMucHVzaCggYi5pIC8gZGltICk7XG5cblx0XHRcdC8vIHJlbW92ZSB0d28gbm9kZXMgaW52b2x2ZWRcblxuXHRcdFx0cmVtb3ZlTm9kZSggcCApO1xuXHRcdFx0cmVtb3ZlTm9kZSggcC5uZXh0ICk7XG5cblx0XHRcdHAgPSBzdGFydCA9IGI7XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xuXG5cdHJldHVybiBwO1xuXG59XG5cbi8vIHRyeSBzcGxpdHRpbmcgcG9seWdvbiBpbnRvIHR3byBhbmQgdHJpYW5ndWxhdGUgdGhlbSBpbmRlcGVuZGVudGx5XG5cbmZ1bmN0aW9uIHNwbGl0RWFyY3V0KCBzdGFydCwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKSB7XG5cblx0Ly8gbG9vayBmb3IgYSB2YWxpZCBkaWFnb25hbCB0aGF0IGRpdmlkZXMgdGhlIHBvbHlnb24gaW50byB0d29cblxuXHR2YXIgYSA9IHN0YXJ0O1xuXG5cdGRvIHtcblxuXHRcdHZhciBiID0gYS5uZXh0Lm5leHQ7XG5cblx0XHR3aGlsZSAoIGIgIT09IGEucHJldiApIHtcblxuXHRcdFx0aWYgKCBhLmkgIT09IGIuaSAmJiBpc1ZhbGlkRGlhZ29uYWwoIGEsIGIgKSApIHtcblxuXHRcdFx0XHQvLyBzcGxpdCB0aGUgcG9seWdvbiBpbiB0d28gYnkgdGhlIGRpYWdvbmFsXG5cblx0XHRcdFx0dmFyIGMgPSBzcGxpdFBvbHlnb24oIGEsIGIgKTtcblxuXHRcdFx0XHQvLyBmaWx0ZXIgY29saW5lYXIgcG9pbnRzIGFyb3VuZCB0aGUgY3V0c1xuXG5cdFx0XHRcdGEgPSBmaWx0ZXJQb2ludHMoIGEsIGEubmV4dCApO1xuXHRcdFx0XHRjID0gZmlsdGVyUG9pbnRzKCBjLCBjLm5leHQgKTtcblxuXHRcdFx0XHQvLyBydW4gZWFyY3V0IG9uIGVhY2ggaGFsZlxuXG5cdFx0XHRcdGVhcmN1dExpbmtlZCggYSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblx0XHRcdFx0ZWFyY3V0TGlua2VkKCBjLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0YiA9IGIubmV4dDtcblxuXHRcdH1cblxuXHRcdGEgPSBhLm5leHQ7XG5cblx0fSB3aGlsZSAoIGEgIT09IHN0YXJ0ICk7XG5cbn1cblxuLy8gbGluayBldmVyeSBob2xlIGludG8gdGhlIG91dGVyIGxvb3AsIHByb2R1Y2luZyBhIHNpbmdsZS1yaW5nIHBvbHlnb24gd2l0aG91dCBob2xlc1xuXG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICkge1xuXG5cdHZhciBxdWV1ZSA9IFtdLCBpLCBsZW4sIHN0YXJ0LCBlbmQsIGxpc3Q7XG5cblx0Zm9yICggaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSArKyApIHtcblxuXHRcdHN0YXJ0ID0gaG9sZUluZGljZXNbIGkgXSAqIGRpbTtcblx0XHRlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzWyBpICsgMSBdICogZGltIDogZGF0YS5sZW5ndGg7XG5cdFx0bGlzdCA9IGxpbmtlZExpc3QoIGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSwgZmFsc2UgKTtcblx0XHRpZiAoIGxpc3QgPT09IGxpc3QubmV4dCApIGxpc3Quc3RlaW5lciA9IHRydWU7XG5cdFx0cXVldWUucHVzaCggZ2V0TGVmdG1vc3QoIGxpc3QgKSApO1xuXG5cdH1cblxuXHRxdWV1ZS5zb3J0KCBjb21wYXJlWCApO1xuXG5cdC8vIHByb2Nlc3MgaG9sZXMgZnJvbSBsZWZ0IHRvIHJpZ2h0XG5cblx0Zm9yICggaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRlbGltaW5hdGVIb2xlKCBxdWV1ZVsgaSBdLCBvdXRlck5vZGUgKTtcblx0XHRvdXRlck5vZGUgPSBmaWx0ZXJQb2ludHMoIG91dGVyTm9kZSwgb3V0ZXJOb2RlLm5leHQgKTtcblxuXHR9XG5cblx0cmV0dXJuIG91dGVyTm9kZTtcblxufVxuXG5mdW5jdGlvbiBjb21wYXJlWCggYSwgYiApIHtcblxuXHRyZXR1cm4gYS54IC0gYi54O1xuXG59XG5cbi8vIGZpbmQgYSBicmlkZ2UgYmV0d2VlbiB2ZXJ0aWNlcyB0aGF0IGNvbm5lY3RzIGhvbGUgd2l0aCBhbiBvdXRlciByaW5nIGFuZCBhbmQgbGluayBpdFxuXG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlKCBob2xlLCBvdXRlck5vZGUgKSB7XG5cblx0b3V0ZXJOb2RlID0gZmluZEhvbGVCcmlkZ2UoIGhvbGUsIG91dGVyTm9kZSApO1xuXG5cdGlmICggb3V0ZXJOb2RlICkge1xuXG5cdFx0dmFyIGIgPSBzcGxpdFBvbHlnb24oIG91dGVyTm9kZSwgaG9sZSApO1xuXG5cdFx0ZmlsdGVyUG9pbnRzKCBiLCBiLm5leHQgKTtcblxuXHR9XG5cbn1cblxuLy8gRGF2aWQgRWJlcmx5J3MgYWxnb3JpdGhtIGZvciBmaW5kaW5nIGEgYnJpZGdlIGJldHdlZW4gaG9sZSBhbmQgb3V0ZXIgcG9seWdvblxuXG5mdW5jdGlvbiBmaW5kSG9sZUJyaWRnZSggaG9sZSwgb3V0ZXJOb2RlICkge1xuXG5cdHZhciBwID0gb3V0ZXJOb2RlLFxuXHRcdGh4ID0gaG9sZS54LFxuXHRcdGh5ID0gaG9sZS55LFxuXHRcdHF4ID0gLSBJbmZpbml0eSxcblx0XHRtO1xuXG5cdC8vIGZpbmQgYSBzZWdtZW50IGludGVyc2VjdGVkIGJ5IGEgcmF5IGZyb20gdGhlIGhvbGUncyBsZWZ0bW9zdCBwb2ludCB0byB0aGUgbGVmdDtcblx0Ly8gc2VnbWVudCdzIGVuZHBvaW50IHdpdGggbGVzc2VyIHggd2lsbCBiZSBwb3RlbnRpYWwgY29ubmVjdGlvbiBwb2ludFxuXG5cdGRvIHtcblxuXHRcdGlmICggaHkgPD0gcC55ICYmIGh5ID49IHAubmV4dC55ICYmIHAubmV4dC55ICE9PSBwLnkgKSB7XG5cblx0XHRcdHZhciB4ID0gcC54ICsgKCBoeSAtIHAueSApICogKCBwLm5leHQueCAtIHAueCApIC8gKCBwLm5leHQueSAtIHAueSApO1xuXG5cdFx0XHRpZiAoIHggPD0gaHggJiYgeCA+IHF4ICkge1xuXG5cdFx0XHRcdHF4ID0geDtcblxuXHRcdFx0XHRpZiAoIHggPT09IGh4ICkge1xuXG5cdFx0XHRcdFx0aWYgKCBoeSA9PT0gcC55ICkgcmV0dXJuIHA7XG5cdFx0XHRcdFx0aWYgKCBoeSA9PT0gcC5uZXh0LnkgKSByZXR1cm4gcC5uZXh0O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtID0gcC54IDwgcC5uZXh0LnggPyBwIDogcC5uZXh0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBvdXRlck5vZGUgKTtcblxuXHRpZiAoICEgbSApIHJldHVybiBudWxsO1xuXG5cdGlmICggaHggPT09IHF4ICkgcmV0dXJuIG0ucHJldjsgLy8gaG9sZSB0b3VjaGVzIG91dGVyIHNlZ21lbnQ7IHBpY2sgbG93ZXIgZW5kcG9pbnRcblxuXHQvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBvZiBob2xlIHBvaW50LCBzZWdtZW50IGludGVyc2VjdGlvbiBhbmQgZW5kcG9pbnQ7XG5cdC8vIGlmIHRoZXJlIGFyZSBubyBwb2ludHMgZm91bmQsIHdlIGhhdmUgYSB2YWxpZCBjb25uZWN0aW9uO1xuXHQvLyBvdGhlcndpc2UgY2hvb3NlIHRoZSBwb2ludCBvZiB0aGUgbWluaW11bSBhbmdsZSB3aXRoIHRoZSByYXkgYXMgY29ubmVjdGlvbiBwb2ludFxuXG5cdHZhciBzdG9wID0gbSxcblx0XHRteCA9IG0ueCxcblx0XHRteSA9IG0ueSxcblx0XHR0YW5NaW4gPSBJbmZpbml0eSxcblx0XHR0YW47XG5cblx0cCA9IG0ubmV4dDtcblxuXHR3aGlsZSAoIHAgIT09IHN0b3AgKSB7XG5cblx0XHRpZiAoIGh4ID49IHAueCAmJiBwLnggPj0gbXggJiYgaHggIT09IHAueCAmJlxuXHRcdFx0XHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBoeSA8IG15ID8gaHggOiBxeCwgaHksIG14LCBteSwgaHkgPCBteSA/IHF4IDogaHgsIGh5LCBwLngsIHAueSApICkge1xuXG5cdFx0XHR0YW4gPSBNYXRoLmFicyggaHkgLSBwLnkgKSAvICggaHggLSBwLnggKTsgLy8gdGFuZ2VudGlhbFxuXG5cdFx0XHRpZiAoICggdGFuIDwgdGFuTWluIHx8ICggdGFuID09PSB0YW5NaW4gJiYgcC54ID4gbS54ICkgKSAmJiBsb2NhbGx5SW5zaWRlKCBwLCBob2xlICkgKSB7XG5cblx0XHRcdFx0bSA9IHA7XG5cdFx0XHRcdHRhbk1pbiA9IHRhbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cCA9IHAubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIG07XG5cbn1cblxuLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuXG5mdW5jdGlvbiBpbmRleEN1cnZlKCBzdGFydCwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHR2YXIgcCA9IHN0YXJ0O1xuXG5cdGRvIHtcblxuXHRcdGlmICggcC56ID09PSBudWxsICkgcC56ID0gek9yZGVyKCBwLngsIHAueSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXHRcdHAucHJldlogPSBwLnByZXY7XG5cdFx0cC5uZXh0WiA9IHAubmV4dDtcblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xuXG5cdHAucHJldloubmV4dFogPSBudWxsO1xuXHRwLnByZXZaID0gbnVsbDtcblxuXHRzb3J0TGlua2VkKCBwICk7XG5cbn1cblxuLy8gU2ltb24gVGF0aGFtJ3MgbGlua2VkIGxpc3QgbWVyZ2Ugc29ydCBhbGdvcml0aG1cbi8vIGh0dHA6Ly93d3cuY2hpYXJrLmdyZWVuZW5kLm9yZy51ay9+c2d0YXRoYW0vYWxnb3JpdGhtcy9saXN0c29ydC5odG1sXG5cbmZ1bmN0aW9uIHNvcnRMaW5rZWQoIGxpc3QgKSB7XG5cblx0dmFyIGksIHAsIHEsIGUsIHRhaWwsIG51bU1lcmdlcywgcFNpemUsIHFTaXplLCBpblNpemUgPSAxO1xuXG5cdGRvIHtcblxuXHRcdHAgPSBsaXN0O1xuXHRcdGxpc3QgPSBudWxsO1xuXHRcdHRhaWwgPSBudWxsO1xuXHRcdG51bU1lcmdlcyA9IDA7XG5cblx0XHR3aGlsZSAoIHAgKSB7XG5cblx0XHRcdG51bU1lcmdlcyArKztcblx0XHRcdHEgPSBwO1xuXHRcdFx0cFNpemUgPSAwO1xuXG5cdFx0XHRmb3IgKCBpID0gMDsgaSA8IGluU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRwU2l6ZSArKztcblx0XHRcdFx0cSA9IHEubmV4dFo7XG5cdFx0XHRcdGlmICggISBxICkgYnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0cVNpemUgPSBpblNpemU7XG5cblx0XHRcdHdoaWxlICggcFNpemUgPiAwIHx8ICggcVNpemUgPiAwICYmIHEgKSApIHtcblxuXHRcdFx0XHRpZiAoIHBTaXplICE9PSAwICYmICggcVNpemUgPT09IDAgfHwgISBxIHx8IHAueiA8PSBxLnogKSApIHtcblxuXHRcdFx0XHRcdGUgPSBwO1xuXHRcdFx0XHRcdHAgPSBwLm5leHRaO1xuXHRcdFx0XHRcdHBTaXplIC0tO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRlID0gcTtcblx0XHRcdFx0XHRxID0gcS5uZXh0Wjtcblx0XHRcdFx0XHRxU2l6ZSAtLTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB0YWlsICkgdGFpbC5uZXh0WiA9IGU7XG5cdFx0XHRcdGVsc2UgbGlzdCA9IGU7XG5cblx0XHRcdFx0ZS5wcmV2WiA9IHRhaWw7XG5cdFx0XHRcdHRhaWwgPSBlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHAgPSBxO1xuXG5cdFx0fVxuXG5cdFx0dGFpbC5uZXh0WiA9IG51bGw7XG5cdFx0aW5TaXplICo9IDI7XG5cblx0fSB3aGlsZSAoIG51bU1lcmdlcyA+IDEgKTtcblxuXHRyZXR1cm4gbGlzdDtcblxufVxuXG4vLyB6LW9yZGVyIG9mIGEgcG9pbnQgZ2l2ZW4gY29vcmRzIGFuZCBpbnZlcnNlIG9mIHRoZSBsb25nZXIgc2lkZSBvZiBkYXRhIGJib3hcblxuZnVuY3Rpb24gek9yZGVyKCB4LCB5LCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdC8vIGNvb3JkcyBhcmUgdHJhbnNmb3JtZWQgaW50byBub24tbmVnYXRpdmUgMTUtYml0IGludGVnZXIgcmFuZ2VcblxuXHR4ID0gMzI3NjcgKiAoIHggLSBtaW5YICkgKiBpbnZTaXplO1xuXHR5ID0gMzI3NjcgKiAoIHkgLSBtaW5ZICkgKiBpbnZTaXplO1xuXG5cdHggPSAoIHggfCAoIHggPDwgOCApICkgJiAweDAwRkYwMEZGO1xuXHR4ID0gKCB4IHwgKCB4IDw8IDQgKSApICYgMHgwRjBGMEYwRjtcblx0eCA9ICggeCB8ICggeCA8PCAyICkgKSAmIDB4MzMzMzMzMzM7XG5cdHggPSAoIHggfCAoIHggPDwgMSApICkgJiAweDU1NTU1NTU1O1xuXG5cdHkgPSAoIHkgfCAoIHkgPDwgOCApICkgJiAweDAwRkYwMEZGO1xuXHR5ID0gKCB5IHwgKCB5IDw8IDQgKSApICYgMHgwRjBGMEYwRjtcblx0eSA9ICggeSB8ICggeSA8PCAyICkgKSAmIDB4MzMzMzMzMzM7XG5cdHkgPSAoIHkgfCAoIHkgPDwgMSApICkgJiAweDU1NTU1NTU1O1xuXG5cdHJldHVybiB4IHwgKCB5IDw8IDEgKTtcblxufVxuXG4vLyBmaW5kIHRoZSBsZWZ0bW9zdCBub2RlIG9mIGEgcG9seWdvbiByaW5nXG5cbmZ1bmN0aW9uIGdldExlZnRtb3N0KCBzdGFydCApIHtcblxuXHR2YXIgcCA9IHN0YXJ0LCBsZWZ0bW9zdCA9IHN0YXJ0O1xuXG5cdGRvIHtcblxuXHRcdGlmICggcC54IDwgbGVmdG1vc3QueCApIGxlZnRtb3N0ID0gcDtcblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xuXG5cdHJldHVybiBsZWZ0bW9zdDtcblxufVxuXG4vLyBjaGVjayBpZiBhIHBvaW50IGxpZXMgd2l0aGluIGEgY29udmV4IHRyaWFuZ2xlXG5cbmZ1bmN0aW9uIHBvaW50SW5UcmlhbmdsZSggYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcHgsIHB5ICkge1xuXG5cdHJldHVybiAoIGN4IC0gcHggKSAqICggYXkgLSBweSApIC0gKCBheCAtIHB4ICkgKiAoIGN5IC0gcHkgKSA+PSAwICYmXG5cdCAoIGF4IC0gcHggKSAqICggYnkgLSBweSApIC0gKCBieCAtIHB4ICkgKiAoIGF5IC0gcHkgKSA+PSAwICYmXG5cdCAoIGJ4IC0gcHggKSAqICggY3kgLSBweSApIC0gKCBjeCAtIHB4ICkgKiAoIGJ5IC0gcHkgKSA+PSAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgZGlhZ29uYWwgYmV0d2VlbiB0d28gcG9seWdvbiBub2RlcyBpcyB2YWxpZCAobGllcyBpbiBwb2x5Z29uIGludGVyaW9yKVxuXG5mdW5jdGlvbiBpc1ZhbGlkRGlhZ29uYWwoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGEubmV4dC5pICE9PSBiLmkgJiYgYS5wcmV2LmkgIT09IGIuaSAmJiAhIGludGVyc2VjdHNQb2x5Z29uKCBhLCBiICkgJiZcblx0XHRsb2NhbGx5SW5zaWRlKCBhLCBiICkgJiYgbG9jYWxseUluc2lkZSggYiwgYSApICYmIG1pZGRsZUluc2lkZSggYSwgYiApO1xuXG59XG5cbi8vIHNpZ25lZCBhcmVhIG9mIGEgdHJpYW5nbGVcblxuZnVuY3Rpb24gYXJlYSggcCwgcSwgciApIHtcblxuXHRyZXR1cm4gKCBxLnkgLSBwLnkgKSAqICggci54IC0gcS54ICkgLSAoIHEueCAtIHAueCApICogKCByLnkgLSBxLnkgKTtcblxufVxuXG4vLyBjaGVjayBpZiB0d28gcG9pbnRzIGFyZSBlcXVhbFxuXG5mdW5jdGlvbiBlcXVhbHMoIHAxLCBwMiApIHtcblxuXHRyZXR1cm4gcDEueCA9PT0gcDIueCAmJiBwMS55ID09PSBwMi55O1xuXG59XG5cbi8vIGNoZWNrIGlmIHR3byBzZWdtZW50cyBpbnRlcnNlY3RcblxuZnVuY3Rpb24gaW50ZXJzZWN0cyggcDEsIHExLCBwMiwgcTIgKSB7XG5cblx0aWYgKCAoIGVxdWFscyggcDEsIHExICkgJiYgZXF1YWxzKCBwMiwgcTIgKSApIHx8XG5cdFx0XHQoIGVxdWFscyggcDEsIHEyICkgJiYgZXF1YWxzKCBwMiwgcTEgKSApICkgcmV0dXJuIHRydWU7XG5cblx0cmV0dXJuIGFyZWEoIHAxLCBxMSwgcDIgKSA+IDAgIT09IGFyZWEoIHAxLCBxMSwgcTIgKSA+IDAgJiZcblx0XHRcdFx0IGFyZWEoIHAyLCBxMiwgcDEgKSA+IDAgIT09IGFyZWEoIHAyLCBxMiwgcTEgKSA+IDA7XG5cbn1cblxuLy8gY2hlY2sgaWYgYSBwb2x5Z29uIGRpYWdvbmFsIGludGVyc2VjdHMgYW55IHBvbHlnb24gc2VnbWVudHNcblxuZnVuY3Rpb24gaW50ZXJzZWN0c1BvbHlnb24oIGEsIGIgKSB7XG5cblx0dmFyIHAgPSBhO1xuXG5cdGRvIHtcblxuXHRcdGlmICggcC5pICE9PSBhLmkgJiYgcC5uZXh0LmkgIT09IGEuaSAmJiBwLmkgIT09IGIuaSAmJiBwLm5leHQuaSAhPT0gYi5pICYmXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3RzKCBwLCBwLm5leHQsIGEsIGIgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBhICk7XG5cblx0cmV0dXJuIGZhbHNlO1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpcyBsb2NhbGx5IGluc2lkZSB0aGUgcG9seWdvblxuXG5mdW5jdGlvbiBsb2NhbGx5SW5zaWRlKCBhLCBiICkge1xuXG5cdHJldHVybiBhcmVhKCBhLnByZXYsIGEsIGEubmV4dCApIDwgMCA/XG5cdFx0YXJlYSggYSwgYiwgYS5uZXh0ICkgPj0gMCAmJiBhcmVhKCBhLCBhLnByZXYsIGIgKSA+PSAwIDpcblx0XHRhcmVhKCBhLCBiLCBhLnByZXYgKSA8IDAgfHwgYXJlYSggYSwgYS5uZXh0LCBiICkgPCAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIHRoZSBtaWRkbGUgcG9pbnQgb2YgYSBwb2x5Z29uIGRpYWdvbmFsIGlzIGluc2lkZSB0aGUgcG9seWdvblxuXG5mdW5jdGlvbiBtaWRkbGVJbnNpZGUoIGEsIGIgKSB7XG5cblx0dmFyIHAgPSBhLFxuXHRcdGluc2lkZSA9IGZhbHNlLFxuXHRcdHB4ID0gKCBhLnggKyBiLnggKSAvIDIsXG5cdFx0cHkgPSAoIGEueSArIGIueSApIC8gMjtcblxuXHRkbyB7XG5cblx0XHRpZiAoICggKCBwLnkgPiBweSApICE9PSAoIHAubmV4dC55ID4gcHkgKSApICYmIHAubmV4dC55ICE9PSBwLnkgJiZcblx0XHRcdFx0XHRcdCggcHggPCAoIHAubmV4dC54IC0gcC54ICkgKiAoIHB5IC0gcC55ICkgLyAoIHAubmV4dC55IC0gcC55ICkgKyBwLnggKSApIHtcblxuXHRcdFx0aW5zaWRlID0gISBpbnNpZGU7XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBhICk7XG5cblx0cmV0dXJuIGluc2lkZTtcblxufVxuXG4vLyBsaW5rIHR3byBwb2x5Z29uIHZlcnRpY2VzIHdpdGggYSBicmlkZ2U7IGlmIHRoZSB2ZXJ0aWNlcyBiZWxvbmcgdG8gdGhlIHNhbWUgcmluZywgaXQgc3BsaXRzIHBvbHlnb24gaW50byB0d287XG4vLyBpZiBvbmUgYmVsb25ncyB0byB0aGUgb3V0ZXIgcmluZyBhbmQgYW5vdGhlciB0byBhIGhvbGUsIGl0IG1lcmdlcyBpdCBpbnRvIGEgc2luZ2xlIHJpbmdcblxuZnVuY3Rpb24gc3BsaXRQb2x5Z29uKCBhLCBiICkge1xuXG5cdHZhciBhMiA9IG5ldyBOb2RlKCBhLmksIGEueCwgYS55ICksXG5cdFx0YjIgPSBuZXcgTm9kZSggYi5pLCBiLngsIGIueSApLFxuXHRcdGFuID0gYS5uZXh0LFxuXHRcdGJwID0gYi5wcmV2O1xuXG5cdGEubmV4dCA9IGI7XG5cdGIucHJldiA9IGE7XG5cblx0YTIubmV4dCA9IGFuO1xuXHRhbi5wcmV2ID0gYTI7XG5cblx0YjIubmV4dCA9IGEyO1xuXHRhMi5wcmV2ID0gYjI7XG5cblx0YnAubmV4dCA9IGIyO1xuXHRiMi5wcmV2ID0gYnA7XG5cblx0cmV0dXJuIGIyO1xuXG59XG5cbi8vIGNyZWF0ZSBhIG5vZGUgYW5kIG9wdGlvbmFsbHkgbGluayBpdCB3aXRoIHByZXZpb3VzIG9uZSAoaW4gYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QpXG5cbmZ1bmN0aW9uIGluc2VydE5vZGUoIGksIHgsIHksIGxhc3QgKSB7XG5cblx0dmFyIHAgPSBuZXcgTm9kZSggaSwgeCwgeSApO1xuXG5cdGlmICggISBsYXN0ICkge1xuXG5cdFx0cC5wcmV2ID0gcDtcblx0XHRwLm5leHQgPSBwO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRwLm5leHQgPSBsYXN0Lm5leHQ7XG5cdFx0cC5wcmV2ID0gbGFzdDtcblx0XHRsYXN0Lm5leHQucHJldiA9IHA7XG5cdFx0bGFzdC5uZXh0ID0gcDtcblxuXHR9XG5cblx0cmV0dXJuIHA7XG5cbn1cblxuZnVuY3Rpb24gcmVtb3ZlTm9kZSggcCApIHtcblxuXHRwLm5leHQucHJldiA9IHAucHJldjtcblx0cC5wcmV2Lm5leHQgPSBwLm5leHQ7XG5cblx0aWYgKCBwLnByZXZaICkgcC5wcmV2Wi5uZXh0WiA9IHAubmV4dFo7XG5cdGlmICggcC5uZXh0WiApIHAubmV4dFoucHJldlogPSBwLnByZXZaO1xuXG59XG5cbmZ1bmN0aW9uIE5vZGUoIGksIHgsIHkgKSB7XG5cblx0Ly8gdmVydGljZSBpbmRleCBpbiBjb29yZGluYXRlcyBhcnJheVxuXHR0aGlzLmkgPSBpO1xuXG5cdC8vIHZlcnRleCBjb29yZGluYXRlc1xuXHR0aGlzLnggPSB4O1xuXHR0aGlzLnkgPSB5O1xuXG5cdC8vIHByZXZpb3VzIGFuZCBuZXh0IHZlcnRpY2Ugbm9kZXMgaW4gYSBwb2x5Z29uIHJpbmdcblx0dGhpcy5wcmV2ID0gbnVsbDtcblx0dGhpcy5uZXh0ID0gbnVsbDtcblxuXHQvLyB6LW9yZGVyIGN1cnZlIHZhbHVlXG5cdHRoaXMueiA9IG51bGw7XG5cblx0Ly8gcHJldmlvdXMgYW5kIG5leHQgbm9kZXMgaW4gei1vcmRlclxuXHR0aGlzLnByZXZaID0gbnVsbDtcblx0dGhpcy5uZXh0WiA9IG51bGw7XG5cblx0Ly8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhIHN0ZWluZXIgcG9pbnRcblx0dGhpcy5zdGVpbmVyID0gZmFsc2U7XG5cbn1cblxuZnVuY3Rpb24gc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkge1xuXG5cdHZhciBzdW0gPSAwO1xuXG5cdGZvciAoIHZhciBpID0gc3RhcnQsIGogPSBlbmQgLSBkaW07IGkgPCBlbmQ7IGkgKz0gZGltICkge1xuXG5cdFx0c3VtICs9ICggZGF0YVsgaiBdIC0gZGF0YVsgaSBdICkgKiAoIGRhdGFbIGkgKyAxIF0gKyBkYXRhWyBqICsgMSBdICk7XG5cdFx0aiA9IGk7XG5cblx0fVxuXG5cdHJldHVybiBzdW07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKi9cblxudmFyIFNoYXBlVXRpbHMgPSB7XG5cblx0Ly8gY2FsY3VsYXRlIGFyZWEgb2YgdGhlIGNvbnRvdXIgcG9seWdvblxuXG5cdGFyZWE6IGZ1bmN0aW9uICggY29udG91ciApIHtcblxuXHRcdHZhciBuID0gY29udG91ci5sZW5ndGg7XG5cdFx0dmFyIGEgPSAwLjA7XG5cblx0XHRmb3IgKCB2YXIgcCA9IG4gLSAxLCBxID0gMDsgcSA8IG47IHAgPSBxICsrICkge1xuXG5cdFx0XHRhICs9IGNvbnRvdXJbIHAgXS54ICogY29udG91clsgcSBdLnkgLSBjb250b3VyWyBxIF0ueCAqIGNvbnRvdXJbIHAgXS55O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGEgKiAwLjU7XG5cblx0fSxcblxuXHRpc0Nsb2NrV2lzZTogZnVuY3Rpb24gKCBwdHMgKSB7XG5cblx0XHRyZXR1cm4gU2hhcGVVdGlscy5hcmVhKCBwdHMgKSA8IDA7XG5cblx0fSxcblxuXHR0cmlhbmd1bGF0ZVNoYXBlOiBmdW5jdGlvbiAoIGNvbnRvdXIsIGhvbGVzICkge1xuXG5cdFx0dmFyIHZlcnRpY2VzID0gW107IC8vIGZsYXQgYXJyYXkgb2YgdmVydGljZXMgbGlrZSBbIHgwLHkwLCB4MSx5MSwgeDIseTIsIC4uLiBdXG5cdFx0dmFyIGhvbGVJbmRpY2VzID0gW107IC8vIGFycmF5IG9mIGhvbGUgaW5kaWNlc1xuXHRcdHZhciBmYWNlcyA9IFtdOyAvLyBmaW5hbCBhcnJheSBvZiB2ZXJ0ZXggaW5kaWNlcyBsaWtlIFsgWyBhLGIsZCBdLCBbIGIsYyxkIF0gXVxuXG5cdFx0cmVtb3ZlRHVwRW5kUHRzKCBjb250b3VyICk7XG5cdFx0YWRkQ29udG91ciggdmVydGljZXMsIGNvbnRvdXIgKTtcblxuXHRcdC8vXG5cblx0XHR2YXIgaG9sZUluZGV4ID0gY29udG91ci5sZW5ndGg7XG5cblx0XHRob2xlcy5mb3JFYWNoKCByZW1vdmVEdXBFbmRQdHMgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGhvbGVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aG9sZUluZGljZXMucHVzaCggaG9sZUluZGV4ICk7XG5cdFx0XHRob2xlSW5kZXggKz0gaG9sZXNbIGkgXS5sZW5ndGg7XG5cdFx0XHRhZGRDb250b3VyKCB2ZXJ0aWNlcywgaG9sZXNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHZhciB0cmlhbmdsZXMgPSBFYXJjdXQudHJpYW5ndWxhdGUoIHZlcnRpY2VzLCBob2xlSW5kaWNlcyApO1xuXG5cdFx0Ly9cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0ZmFjZXMucHVzaCggdHJpYW5nbGVzLnNsaWNlKCBpLCBpICsgMyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFjZXM7XG5cblx0fVxuXG59O1xuXG5mdW5jdGlvbiByZW1vdmVEdXBFbmRQdHMoIHBvaW50cyApIHtcblxuXHR2YXIgbCA9IHBvaW50cy5sZW5ndGg7XG5cblx0aWYgKCBsID4gMiAmJiBwb2ludHNbIGwgLSAxIF0uZXF1YWxzKCBwb2ludHNbIDAgXSApICkge1xuXG5cdFx0cG9pbnRzLnBvcCgpO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBhZGRDb250b3VyKCB2ZXJ0aWNlcywgY29udG91ciApIHtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb250b3VyLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdHZlcnRpY2VzLnB1c2goIGNvbnRvdXJbIGkgXS54ICk7XG5cdFx0dmVydGljZXMucHVzaCggY29udG91clsgaSBdLnkgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKlxuICogQ3JlYXRlcyBleHRydWRlZCBnZW9tZXRyeSBmcm9tIGEgcGF0aCBzaGFwZS5cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICpcbiAqICBjdXJ2ZVNlZ21lbnRzOiA8aW50PiwgLy8gbnVtYmVyIG9mIHBvaW50cyBvbiB0aGUgY3VydmVzXG4gKiAgc3RlcHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgcG9pbnRzIGZvciB6LXNpZGUgZXh0cnVzaW9ucyAvIHVzZWQgZm9yIHN1YmRpdmlkaW5nIHNlZ21lbnRzIG9mIGV4dHJ1ZGUgc3BsaW5lIHRvb1xuICogIGRlcHRoOiA8ZmxvYXQ+LCAvLyBEZXB0aCB0byBleHRydWRlIHRoZSBzaGFwZVxuICpcbiAqICBiZXZlbEVuYWJsZWQ6IDxib29sPiwgLy8gdHVybiBvbiBiZXZlbFxuICogIGJldmVsVGhpY2tuZXNzOiA8ZmxvYXQ+LCAvLyBob3cgZGVlcCBpbnRvIHRoZSBvcmlnaW5hbCBzaGFwZSBiZXZlbCBnb2VzXG4gKiAgYmV2ZWxTaXplOiA8ZmxvYXQ+LCAvLyBob3cgZmFyIGZyb20gc2hhcGUgb3V0bGluZSBpcyBiZXZlbFxuICogIGJldmVsU2VnbWVudHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgYmV2ZWwgbGF5ZXJzXG4gKlxuICogIGV4dHJ1ZGVQYXRoOiA8VEhSRUUuQ3VydmU+IC8vIGN1cnZlIHRvIGV4dHJ1ZGUgc2hhcGUgYWxvbmdcbiAqXG4gKiAgVVZHZW5lcmF0b3I6IDxPYmplY3Q+IC8vIG9iamVjdCB0aGF0IHByb3ZpZGVzIFVWIGdlbmVyYXRvciBmdW5jdGlvbnNcbiAqXG4gKiB9XG4gKi9cblxuLy8gRXh0cnVkZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIEV4dHJ1ZGVHZW9tZXRyeSggc2hhcGVzLCBvcHRpb25zICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRXh0cnVkZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0c2hhcGVzOiBzaGFwZXMsXG5cdFx0b3B0aW9uczogb3B0aW9uc1xuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgRXh0cnVkZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIG9wdGlvbnMgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRXh0cnVkZUdlb21ldHJ5O1xuXG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdHZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xuXHR2YXIgb3B0aW9ucyA9IHRoaXMucGFyYW1ldGVycy5vcHRpb25zO1xuXG5cdHJldHVybiB0b0pTT04oIHNoYXBlcywgb3B0aW9ucywgZGF0YSApO1xuXG59O1xuXG4vLyBFeHRydWRlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gRXh0cnVkZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIG9wdGlvbnMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdFeHRydWRlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRvcHRpb25zOiBvcHRpb25zXG5cdH07XG5cblx0c2hhcGVzID0gQXJyYXkuaXNBcnJheSggc2hhcGVzICkgPyBzaGFwZXMgOiBbIHNoYXBlcyBdO1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0dmFyIHZlcnRpY2VzQXJyYXkgPSBbXTtcblx0dmFyIHV2QXJyYXkgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXHRcdGFkZFNoYXBlKCBzaGFwZSApO1xuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXNBcnJheSwgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZBcnJheSwgMiApICk7XG5cblx0dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuXG5cdC8vIGZ1bmN0aW9uc1xuXG5cdGZ1bmN0aW9uIGFkZFNoYXBlKCBzaGFwZSApIHtcblxuXHRcdHZhciBwbGFjZWhvbGRlciA9IFtdO1xuXG5cdFx0Ly8gb3B0aW9uc1xuXG5cdFx0dmFyIGN1cnZlU2VnbWVudHMgPSBvcHRpb25zLmN1cnZlU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuY3VydmVTZWdtZW50cyA6IDEyO1xuXHRcdHZhciBzdGVwcyA9IG9wdGlvbnMuc3RlcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlcHMgOiAxO1xuXHRcdHZhciBkZXB0aCA9IG9wdGlvbnMuZGVwdGggIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGggOiAxMDA7XG5cblx0XHR2YXIgYmV2ZWxFbmFibGVkID0gb3B0aW9ucy5iZXZlbEVuYWJsZWQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxFbmFibGVkIDogdHJ1ZTtcblx0XHR2YXIgYmV2ZWxUaGlja25lc3MgPSBvcHRpb25zLmJldmVsVGhpY2tuZXNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsVGhpY2tuZXNzIDogNjtcblx0XHR2YXIgYmV2ZWxTaXplID0gb3B0aW9ucy5iZXZlbFNpemUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxTaXplIDogYmV2ZWxUaGlja25lc3MgLSAyO1xuXHRcdHZhciBiZXZlbFNlZ21lbnRzID0gb3B0aW9ucy5iZXZlbFNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsU2VnbWVudHMgOiAzO1xuXG5cdFx0dmFyIGV4dHJ1ZGVQYXRoID0gb3B0aW9ucy5leHRydWRlUGF0aDtcblxuXHRcdHZhciB1dmdlbiA9IG9wdGlvbnMuVVZHZW5lcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuVVZHZW5lcmF0b3IgOiBXb3JsZFVWR2VuZXJhdG9yO1xuXG5cdFx0Ly8gZGVwcmVjYXRlZCBvcHRpb25zXG5cblx0XHRpZiAoIG9wdGlvbnMuYW1vdW50ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogYW1vdW50IGhhcyBiZWVuIHJlbmFtZWQgdG8gZGVwdGguJyApO1xuXHRcdFx0ZGVwdGggPSBvcHRpb25zLmFtb3VudDtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgZXh0cnVkZVB0cywgZXh0cnVkZUJ5UGF0aCA9IGZhbHNlO1xuXHRcdHZhciBzcGxpbmVUdWJlLCBiaW5vcm1hbCwgbm9ybWFsLCBwb3NpdGlvbjI7XG5cblx0XHRpZiAoIGV4dHJ1ZGVQYXRoICkge1xuXG5cdFx0XHRleHRydWRlUHRzID0gZXh0cnVkZVBhdGguZ2V0U3BhY2VkUG9pbnRzKCBzdGVwcyApO1xuXG5cdFx0XHRleHRydWRlQnlQYXRoID0gdHJ1ZTtcblx0XHRcdGJldmVsRW5hYmxlZCA9IGZhbHNlOyAvLyBiZXZlbHMgbm90IHN1cHBvcnRlZCBmb3IgcGF0aCBleHRydXNpb25cblxuXHRcdFx0Ly8gU0VUVVAgVE5CIHZhcmlhYmxlc1xuXG5cdFx0XHQvLyBUT0RPMSAtIGhhdmUgYSAuaXNDbG9zZWQgaW4gc3BsaW5lP1xuXG5cdFx0XHRzcGxpbmVUdWJlID0gZXh0cnVkZVBhdGguY29tcHV0ZUZyZW5ldEZyYW1lcyggc3RlcHMsIGZhbHNlICk7XG5cblx0XHRcdC8vIGNvbnNvbGUubG9nKHNwbGluZVR1YmUsICdzcGxpbmVUdWJlJywgc3BsaW5lVHViZS5ub3JtYWxzLmxlbmd0aCwgJ3N0ZXBzJywgc3RlcHMsICdleHRydWRlUHRzJywgZXh0cnVkZVB0cy5sZW5ndGgpO1xuXG5cdFx0XHRiaW5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0cG9zaXRpb24yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdC8vIFNhZmVndWFyZHMgaWYgYmV2ZWxzIGFyZSBub3QgZW5hYmxlZFxuXG5cdFx0aWYgKCAhIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0YmV2ZWxTZWdtZW50cyA9IDA7XG5cdFx0XHRiZXZlbFRoaWNrbmVzcyA9IDA7XG5cdFx0XHRiZXZlbFNpemUgPSAwO1xuXG5cdFx0fVxuXG5cdFx0Ly8gVmFyaWFibGVzIGluaXRpYWxpemF0aW9uXG5cblx0XHR2YXIgYWhvbGUsIGgsIGhsOyAvLyBsb29waW5nIG9mIGhvbGVzXG5cblx0XHR2YXIgc2hhcGVQb2ludHMgPSBzaGFwZS5leHRyYWN0UG9pbnRzKCBjdXJ2ZVNlZ21lbnRzICk7XG5cblx0XHR2YXIgdmVydGljZXMgPSBzaGFwZVBvaW50cy5zaGFwZTtcblx0XHR2YXIgaG9sZXMgPSBzaGFwZVBvaW50cy5ob2xlcztcblxuXHRcdHZhciByZXZlcnNlID0gISBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCB2ZXJ0aWNlcyApO1xuXG5cdFx0aWYgKCByZXZlcnNlICkge1xuXG5cdFx0XHR2ZXJ0aWNlcyA9IHZlcnRpY2VzLnJldmVyc2UoKTtcblxuXHRcdFx0Ly8gTWF5YmUgd2Ugc2hvdWxkIGFsc28gY2hlY2sgaWYgaG9sZXMgYXJlIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24sIGp1c3QgdG8gYmUgc2FmZSAuLi5cblxuXHRcdFx0Zm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0YWhvbGUgPSBob2xlc1sgaCBdO1xuXG5cdFx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggYWhvbGUgKSApIHtcblxuXHRcdFx0XHRcdGhvbGVzWyBoIF0gPSBhaG9sZS5yZXZlcnNlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblxuXHRcdHZhciBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggdmVydGljZXMsIGhvbGVzICk7XG5cblx0XHQvKiBWZXJ0aWNlcyAqL1xuXG5cdFx0dmFyIGNvbnRvdXIgPSB2ZXJ0aWNlczsgLy8gdmVydGljZXMgaGFzIGFsbCBwb2ludHMgYnV0IGNvbnRvdXIgaGFzIG9ubHkgcG9pbnRzIG9mIGNpcmN1bWZlcmVuY2VcblxuXHRcdGZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cblx0XHRcdHZlcnRpY2VzID0gdmVydGljZXMuY29uY2F0KCBhaG9sZSApO1xuXG5cdFx0fVxuXG5cblx0XHRmdW5jdGlvbiBzY2FsZVB0MiggcHQsIHZlYywgc2l6ZSApIHtcblxuXHRcdFx0aWYgKCAhIHZlYyApIGNvbnNvbGUuZXJyb3IoIFwiVEhSRUUuRXh0cnVkZUdlb21ldHJ5OiB2ZWMgZG9lcyBub3QgZXhpc3RcIiApO1xuXG5cdFx0XHRyZXR1cm4gdmVjLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoIHNpemUgKS5hZGQoIHB0ICk7XG5cblx0XHR9XG5cblx0XHR2YXIgYiwgYnMsIHQsIHosXG5cdFx0XHR2ZXJ0LCB2bGVuID0gdmVydGljZXMubGVuZ3RoLFxuXHRcdFx0ZmFjZSwgZmxlbiA9IGZhY2VzLmxlbmd0aDtcblxuXG5cdFx0Ly8gRmluZCBkaXJlY3Rpb25zIGZvciBwb2ludCBtb3ZlbWVudFxuXG5cblx0XHRmdW5jdGlvbiBnZXRCZXZlbFZlYyggaW5QdCwgaW5QcmV2LCBpbk5leHQgKSB7XG5cblx0XHRcdC8vIGNvbXB1dGVzIGZvciBpblB0IHRoZSBjb3JyZXNwb25kaW5nIHBvaW50IGluUHQnIG9uIGEgbmV3IGNvbnRvdXJcblx0XHRcdC8vICAgc2hpZnRlZCBieSAxIHVuaXQgKGxlbmd0aCBvZiBub3JtYWxpemVkIHZlY3RvcikgdG8gdGhlIGxlZnRcblx0XHRcdC8vIGlmIHdlIHdhbGsgYWxvbmcgY29udG91ciBjbG9ja3dpc2UsIHRoaXMgbmV3IGNvbnRvdXIgaXMgb3V0c2lkZSB0aGUgb2xkIG9uZVxuXHRcdFx0Ly9cblx0XHRcdC8vIGluUHQnIGlzIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3byBsaW5lcyBwYXJhbGxlbCB0byB0aGUgdHdvXG5cdFx0XHQvLyAgYWRqYWNlbnQgZWRnZXMgb2YgaW5QdCBhdCBhIGRpc3RhbmNlIG9mIDEgdW5pdCBvbiB0aGUgbGVmdCBzaWRlLlxuXG5cdFx0XHR2YXIgdl90cmFuc194LCB2X3RyYW5zX3ksIHNocmlua19ieTsgLy8gcmVzdWx0aW5nIHRyYW5zbGF0aW9uIHZlY3RvciBmb3IgaW5QdFxuXG5cdFx0XHQvLyBnb29kIHJlYWRpbmcgZm9yIGdlb21ldHJ5IGFsZ29yaXRobXMgKGhlcmU6IGxpbmUtbGluZSBpbnRlcnNlY3Rpb24pXG5cdFx0XHQvLyBodHRwOi8vZ2VvbWFsZ29yaXRobXMuY29tL2EwNS1faW50ZXJzZWN0LTEuaHRtbFxuXG5cdFx0XHR2YXIgdl9wcmV2X3ggPSBpblB0LnggLSBpblByZXYueCxcblx0XHRcdFx0dl9wcmV2X3kgPSBpblB0LnkgLSBpblByZXYueTtcblx0XHRcdHZhciB2X25leHRfeCA9IGluTmV4dC54IC0gaW5QdC54LFxuXHRcdFx0XHR2X25leHRfeSA9IGluTmV4dC55IC0gaW5QdC55O1xuXG5cdFx0XHR2YXIgdl9wcmV2X2xlbnNxID0gKCB2X3ByZXZfeCAqIHZfcHJldl94ICsgdl9wcmV2X3kgKiB2X3ByZXZfeSApO1xuXG5cdFx0XHQvLyBjaGVjayBmb3IgY29sbGluZWFyIGVkZ2VzXG5cdFx0XHR2YXIgY29sbGluZWFyMCA9ICggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggY29sbGluZWFyMCApID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0Ly8gbm90IGNvbGxpbmVhclxuXG5cdFx0XHRcdC8vIGxlbmd0aCBvZiB2ZWN0b3JzIGZvciBub3JtYWxpemluZ1xuXG5cdFx0XHRcdHZhciB2X3ByZXZfbGVuID0gTWF0aC5zcXJ0KCB2X3ByZXZfbGVuc3EgKTtcblx0XHRcdFx0dmFyIHZfbmV4dF9sZW4gPSBNYXRoLnNxcnQoIHZfbmV4dF94ICogdl9uZXh0X3ggKyB2X25leHRfeSAqIHZfbmV4dF95ICk7XG5cblx0XHRcdFx0Ly8gc2hpZnQgYWRqYWNlbnQgcG9pbnRzIGJ5IHVuaXQgdmVjdG9ycyB0byB0aGUgbGVmdFxuXG5cdFx0XHRcdHZhciBwdFByZXZTaGlmdF94ID0gKCBpblByZXYueCAtIHZfcHJldl95IC8gdl9wcmV2X2xlbiApO1xuXHRcdFx0XHR2YXIgcHRQcmV2U2hpZnRfeSA9ICggaW5QcmV2LnkgKyB2X3ByZXZfeCAvIHZfcHJldl9sZW4gKTtcblxuXHRcdFx0XHR2YXIgcHROZXh0U2hpZnRfeCA9ICggaW5OZXh0LnggLSB2X25leHRfeSAvIHZfbmV4dF9sZW4gKTtcblx0XHRcdFx0dmFyIHB0TmV4dFNoaWZ0X3kgPSAoIGluTmV4dC55ICsgdl9uZXh0X3ggLyB2X25leHRfbGVuICk7XG5cblx0XHRcdFx0Ly8gc2NhbGluZyBmYWN0b3IgZm9yIHZfcHJldiB0byBpbnRlcnNlY3Rpb24gcG9pbnRcblxuXHRcdFx0XHR2YXIgc2YgPSAoICggcHROZXh0U2hpZnRfeCAtIHB0UHJldlNoaWZ0X3ggKSAqIHZfbmV4dF95IC1cblx0XHRcdFx0XHRcdCggcHROZXh0U2hpZnRfeSAtIHB0UHJldlNoaWZ0X3kgKSAqIHZfbmV4dF94ICkgL1xuXHRcdFx0XHRcdCggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTtcblxuXHRcdFx0XHQvLyB2ZWN0b3IgZnJvbSBpblB0IHRvIGludGVyc2VjdGlvbiBwb2ludFxuXG5cdFx0XHRcdHZfdHJhbnNfeCA9ICggcHRQcmV2U2hpZnRfeCArIHZfcHJldl94ICogc2YgLSBpblB0LnggKTtcblx0XHRcdFx0dl90cmFuc195ID0gKCBwdFByZXZTaGlmdF95ICsgdl9wcmV2X3kgKiBzZiAtIGluUHQueSApO1xuXG5cdFx0XHRcdC8vIERvbid0IG5vcm1hbGl6ZSEsIG90aGVyd2lzZSBzaGFycCBjb3JuZXJzIGJlY29tZSB1Z2x5XG5cdFx0XHRcdC8vICBidXQgcHJldmVudCBjcmF6eSBzcGlrZXNcblx0XHRcdFx0dmFyIHZfdHJhbnNfbGVuc3EgPSAoIHZfdHJhbnNfeCAqIHZfdHJhbnNfeCArIHZfdHJhbnNfeSAqIHZfdHJhbnNfeSApO1xuXHRcdFx0XHRpZiAoIHZfdHJhbnNfbGVuc3EgPD0gMiApIHtcblxuXHRcdFx0XHRcdHJldHVybiBuZXcgVmVjdG9yMiggdl90cmFuc194LCB2X3RyYW5zX3kgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c2hyaW5rX2J5ID0gTWF0aC5zcXJ0KCB2X3RyYW5zX2xlbnNxIC8gMiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBoYW5kbGUgc3BlY2lhbCBjYXNlIG9mIGNvbGxpbmVhciBlZGdlc1xuXG5cdFx0XHRcdHZhciBkaXJlY3Rpb25fZXEgPSBmYWxzZTsgLy8gYXNzdW1lczogb3Bwb3NpdGVcblx0XHRcdFx0aWYgKCB2X3ByZXZfeCA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0aWYgKCB2X25leHRfeCA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHZfcHJldl94IDwgLSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB2X25leHRfeCA8IC0gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uX2VxID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBNYXRoLnNpZ24oIHZfcHJldl95ICkgPT09IE1hdGguc2lnbiggdl9uZXh0X3kgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGlyZWN0aW9uX2VxICkge1xuXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJXYXJuaW5nOiBsaW5lcyBhcmUgYSBzdHJhaWdodCBzZXF1ZW5jZVwiKTtcblx0XHRcdFx0XHR2X3RyYW5zX3ggPSAtIHZfcHJldl95O1xuXHRcdFx0XHRcdHZfdHJhbnNfeSA9IHZfcHJldl94O1xuXHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiV2FybmluZzogbGluZXMgYXJlIGEgc3RyYWlnaHQgc3Bpa2VcIik7XG5cdFx0XHRcdFx0dl90cmFuc194ID0gdl9wcmV2X3g7XG5cdFx0XHRcdFx0dl90cmFuc195ID0gdl9wcmV2X3k7XG5cdFx0XHRcdFx0c2hyaW5rX2J5ID0gTWF0aC5zcXJ0KCB2X3ByZXZfbGVuc3EgLyAyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBuZXcgVmVjdG9yMiggdl90cmFuc194IC8gc2hyaW5rX2J5LCB2X3RyYW5zX3kgLyBzaHJpbmtfYnkgKTtcblxuXHRcdH1cblxuXG5cdFx0dmFyIGNvbnRvdXJNb3ZlbWVudHMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aCwgaiA9IGlsIC0gMSwgayA9IGkgKyAxOyBpIDwgaWw7IGkgKyssIGogKyssIGsgKysgKSB7XG5cblx0XHRcdGlmICggaiA9PT0gaWwgKSBqID0gMDtcblx0XHRcdGlmICggayA9PT0gaWwgKSBrID0gMDtcblxuXHRcdFx0Ly8gIChqKS0tLShpKS0tLShrKVxuXHRcdFx0Ly8gY29uc29sZS5sb2coJ2ksaixrJywgaSwgaiAsIGspXG5cblx0XHRcdGNvbnRvdXJNb3ZlbWVudHNbIGkgXSA9IGdldEJldmVsVmVjKCBjb250b3VyWyBpIF0sIGNvbnRvdXJbIGogXSwgY29udG91clsgayBdICk7XG5cblx0XHR9XG5cblx0XHR2YXIgaG9sZXNNb3ZlbWVudHMgPSBbXSxcblx0XHRcdG9uZUhvbGVNb3ZlbWVudHMsIHZlcnRpY2VzTW92ZW1lbnRzID0gY29udG91ck1vdmVtZW50cy5jb25jYXQoKTtcblxuXHRcdGZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cblx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBbXTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoLCBqID0gaWwgLSAxLCBrID0gaSArIDE7IGkgPCBpbDsgaSArKywgaiArKywgayArKyApIHtcblxuXHRcdFx0XHRpZiAoIGogPT09IGlsICkgaiA9IDA7XG5cdFx0XHRcdGlmICggayA9PT0gaWwgKSBrID0gMDtcblxuXHRcdFx0XHQvLyAgKGopLS0tKGkpLS0tKGspXG5cdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHNbIGkgXSA9IGdldEJldmVsVmVjKCBhaG9sZVsgaSBdLCBhaG9sZVsgaiBdLCBhaG9sZVsgayBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aG9sZXNNb3ZlbWVudHMucHVzaCggb25lSG9sZU1vdmVtZW50cyApO1xuXHRcdFx0dmVydGljZXNNb3ZlbWVudHMgPSB2ZXJ0aWNlc01vdmVtZW50cy5jb25jYXQoIG9uZUhvbGVNb3ZlbWVudHMgKTtcblxuXHRcdH1cblxuXG5cdFx0Ly8gTG9vcCBiZXZlbFNlZ21lbnRzLCAxIGZvciB0aGUgZnJvbnQsIDEgZm9yIHRoZSBiYWNrXG5cblx0XHRmb3IgKCBiID0gMDsgYiA8IGJldmVsU2VnbWVudHM7IGIgKysgKSB7XG5cblx0XHRcdC8vZm9yICggYiA9IGJldmVsU2VnbWVudHM7IGIgPiAwOyBiIC0tICkge1xuXG5cdFx0XHR0ID0gYiAvIGJldmVsU2VnbWVudHM7XG5cdFx0XHR6ID0gYmV2ZWxUaGlja25lc3MgKiBNYXRoLmNvcyggdCAqIE1hdGguUEkgLyAyICk7XG5cdFx0XHRicyA9IGJldmVsU2l6ZSAqIE1hdGguc2luKCB0ICogTWF0aC5QSSAvIDIgKTtcblxuXHRcdFx0Ly8gY29udHJhY3Qgc2hhcGVcblxuXHRcdFx0Zm9yICggaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR2ZXJ0ID0gc2NhbGVQdDIoIGNvbnRvdXJbIGkgXSwgY29udG91ck1vdmVtZW50c1sgaSBdLCBicyApO1xuXG5cdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCAtIHogKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBleHBhbmQgaG9sZXNcblxuXHRcdFx0Zm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0YWhvbGUgPSBob2xlc1sgaCBdO1xuXHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gaG9sZXNNb3ZlbWVudHNbIGggXTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBhaG9sZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZlcnQgPSBzY2FsZVB0MiggYWhvbGVbIGkgXSwgb25lSG9sZU1vdmVtZW50c1sgaSBdLCBicyApO1xuXG5cdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIC0geiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0YnMgPSBiZXZlbFNpemU7XG5cblx0XHQvLyBCYWNrIGZhY2luZyB2ZXJ0aWNlc1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCB2bGVuOyBpICsrICkge1xuXG5cdFx0XHR2ZXJ0ID0gYmV2ZWxFbmFibGVkID8gc2NhbGVQdDIoIHZlcnRpY2VzWyBpIF0sIHZlcnRpY2VzTW92ZW1lbnRzWyBpIF0sIGJzICkgOiB2ZXJ0aWNlc1sgaSBdO1xuXG5cdFx0XHRpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHtcblxuXHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgMCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIHYoIHZlcnQueCwgdmVydC55ICsgZXh0cnVkZVB0c1sgMCBdLnksIGV4dHJ1ZGVQdHNbIDAgXS54ICk7XG5cblx0XHRcdFx0bm9ybWFsLmNvcHkoIHNwbGluZVR1YmUubm9ybWFsc1sgMCBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueCApO1xuXHRcdFx0XHRiaW5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLmJpbm9ybWFsc1sgMCBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueSApO1xuXG5cdFx0XHRcdHBvc2l0aW9uMi5jb3B5KCBleHRydWRlUHRzWyAwIF0gKS5hZGQoIG5vcm1hbCApLmFkZCggYmlub3JtYWwgKTtcblxuXHRcdFx0XHR2KCBwb3NpdGlvbjIueCwgcG9zaXRpb24yLnksIHBvc2l0aW9uMi56ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIEFkZCBzdGVwcGVkIHZlcnRpY2VzLi4uXG5cdFx0Ly8gSW5jbHVkaW5nIGZyb250IGZhY2luZyB2ZXJ0aWNlc1xuXG5cdFx0dmFyIHM7XG5cblx0XHRmb3IgKCBzID0gMTsgcyA8PSBzdGVwczsgcyArKyApIHtcblxuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCB2bGVuOyBpICsrICkge1xuXG5cdFx0XHRcdHZlcnQgPSBiZXZlbEVuYWJsZWQgPyBzY2FsZVB0MiggdmVydGljZXNbIGkgXSwgdmVydGljZXNNb3ZlbWVudHNbIGkgXSwgYnMgKSA6IHZlcnRpY2VzWyBpIF07XG5cblx0XHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XG5cblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggLyBzdGVwcyAqIHMgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gdiggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHMgLSAxIF0ueCApO1xuXG5cdFx0XHRcdFx0bm9ybWFsLmNvcHkoIHNwbGluZVR1YmUubm9ybWFsc1sgcyBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueCApO1xuXHRcdFx0XHRcdGJpbm9ybWFsLmNvcHkoIHNwbGluZVR1YmUuYmlub3JtYWxzWyBzIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC55ICk7XG5cblx0XHRcdFx0XHRwb3NpdGlvbjIuY29weSggZXh0cnVkZVB0c1sgcyBdICkuYWRkKCBub3JtYWwgKS5hZGQoIGJpbm9ybWFsICk7XG5cblx0XHRcdFx0XHR2KCBwb3NpdGlvbjIueCwgcG9zaXRpb24yLnksIHBvc2l0aW9uMi56ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblxuXHRcdC8vIEFkZCBiZXZlbCBzZWdtZW50cyBwbGFuZXNcblxuXHRcdC8vZm9yICggYiA9IDE7IGIgPD0gYmV2ZWxTZWdtZW50czsgYiArKyApIHtcblx0XHRmb3IgKCBiID0gYmV2ZWxTZWdtZW50cyAtIDE7IGIgPj0gMDsgYiAtLSApIHtcblxuXHRcdFx0dCA9IGIgLyBiZXZlbFNlZ21lbnRzO1xuXHRcdFx0eiA9IGJldmVsVGhpY2tuZXNzICogTWF0aC5jb3MoIHQgKiBNYXRoLlBJIC8gMiApO1xuXHRcdFx0YnMgPSBiZXZlbFNpemUgKiBNYXRoLnNpbiggdCAqIE1hdGguUEkgLyAyICk7XG5cblx0XHRcdC8vIGNvbnRyYWN0IHNoYXBlXG5cblx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmVydCA9IHNjYWxlUHQyKCBjb250b3VyWyBpIF0sIGNvbnRvdXJNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoICsgeiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGV4cGFuZCBob2xlc1xuXG5cdFx0XHRmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBob2xlc01vdmVtZW50c1sgaCBdO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHRpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHtcblxuXHRcdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoICsgeiApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyBzdGVwcyAtIDEgXS55LCBleHRydWRlUHRzWyBzdGVwcyAtIDEgXS54ICsgeiApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0LyogRmFjZXMgKi9cblxuXHRcdC8vIFRvcCBhbmQgYm90dG9tIGZhY2VzXG5cblx0XHRidWlsZExpZEZhY2VzKCk7XG5cblx0XHQvLyBTaWRlcyBmYWNlc1xuXG5cdFx0YnVpbGRTaWRlRmFjZXMoKTtcblxuXG5cdFx0Ly8vLy8gIEludGVybmFsIGZ1bmN0aW9uc1xuXG5cdFx0ZnVuY3Rpb24gYnVpbGRMaWRGYWNlcygpIHtcblxuXHRcdFx0dmFyIHN0YXJ0ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xuXG5cdFx0XHRpZiAoIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0XHR2YXIgbGF5ZXIgPSAwOyAvLyBzdGVwcyArIDFcblx0XHRcdFx0dmFyIG9mZnNldCA9IHZsZW4gKiBsYXllcjtcblxuXHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMiBdICsgb2Zmc2V0LCBmYWNlWyAxIF0gKyBvZmZzZXQsIGZhY2VbIDAgXSArIG9mZnNldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsYXllciA9IHN0ZXBzICsgYmV2ZWxTZWdtZW50cyAqIDI7XG5cdFx0XHRcdG9mZnNldCA9IHZsZW4gKiBsYXllcjtcblxuXHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMCBdICsgb2Zmc2V0LCBmYWNlWyAxIF0gKyBvZmZzZXQsIGZhY2VbIDIgXSArIG9mZnNldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMiBdLCBmYWNlWyAxIF0sIGZhY2VbIDAgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMCBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWyAxIF0gKyB2bGVuICogc3RlcHMsIGZhY2VbIDIgXSArIHZsZW4gKiBzdGVwcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRzY29wZS5hZGRHcm91cCggc3RhcnQsIHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMyAtIHN0YXJ0LCAwICk7XG5cblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgZmFjZXMgZm9yIHRoZSB6LXNpZGVzIG9mIHRoZSBzaGFwZVxuXG5cdFx0ZnVuY3Rpb24gYnVpbGRTaWRlRmFjZXMoKSB7XG5cblx0XHRcdHZhciBzdGFydCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdHZhciBsYXllcm9mZnNldCA9IDA7XG5cdFx0XHRzaWRld2FsbHMoIGNvbnRvdXIsIGxheWVyb2Zmc2V0ICk7XG5cdFx0XHRsYXllcm9mZnNldCArPSBjb250b3VyLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0YWhvbGUgPSBob2xlc1sgaCBdO1xuXHRcdFx0XHRzaWRld2FsbHMoIGFob2xlLCBsYXllcm9mZnNldCApO1xuXG5cdFx0XHRcdC8vLCB0cnVlXG5cdFx0XHRcdGxheWVyb2Zmc2V0ICs9IGFob2xlLmxlbmd0aDtcblxuXHRcdFx0fVxuXG5cblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBzdGFydCwgdmVydGljZXNBcnJheS5sZW5ndGggLyAzIC0gc3RhcnQsIDEgKTtcblxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2lkZXdhbGxzKCBjb250b3VyLCBsYXllcm9mZnNldCApIHtcblxuXHRcdFx0dmFyIGosIGs7XG5cdFx0XHRpID0gY29udG91ci5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggLS0gaSA+PSAwICkge1xuXG5cdFx0XHRcdGogPSBpO1xuXHRcdFx0XHRrID0gaSAtIDE7XG5cdFx0XHRcdGlmICggayA8IDAgKSBrID0gY29udG91ci5sZW5ndGggLSAxO1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2InLCBpLGosIGktMSwgayx2ZXJ0aWNlcy5sZW5ndGgpO1xuXG5cdFx0XHRcdHZhciBzID0gMCxcblx0XHRcdFx0XHRzbCA9IHN0ZXBzICsgYmV2ZWxTZWdtZW50cyAqIDI7XG5cblx0XHRcdFx0Zm9yICggcyA9IDA7IHMgPCBzbDsgcyArKyApIHtcblxuXHRcdFx0XHRcdHZhciBzbGVuMSA9IHZsZW4gKiBzO1xuXHRcdFx0XHRcdHZhciBzbGVuMiA9IHZsZW4gKiAoIHMgKyAxICk7XG5cblx0XHRcdFx0XHR2YXIgYSA9IGxheWVyb2Zmc2V0ICsgaiArIHNsZW4xLFxuXHRcdFx0XHRcdFx0YiA9IGxheWVyb2Zmc2V0ICsgayArIHNsZW4xLFxuXHRcdFx0XHRcdFx0YyA9IGxheWVyb2Zmc2V0ICsgayArIHNsZW4yLFxuXHRcdFx0XHRcdFx0ZCA9IGxheWVyb2Zmc2V0ICsgaiArIHNsZW4yO1xuXG5cdFx0XHRcdFx0ZjQoIGEsIGIsIGMsIGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHYoIHgsIHksIHogKSB7XG5cblx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHggKTtcblx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHkgKTtcblx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHogKTtcblxuXHRcdH1cblxuXG5cdFx0ZnVuY3Rpb24gZjMoIGEsIGIsIGMgKSB7XG5cblx0XHRcdGFkZFZlcnRleCggYSApO1xuXHRcdFx0YWRkVmVydGV4KCBiICk7XG5cdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcblxuXHRcdFx0dmFyIG5leHRJbmRleCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdHZhciB1dnMgPSB1dmdlbi5nZW5lcmF0ZVRvcFVWKCBzY29wZSwgdmVydGljZXNBcnJheSwgbmV4dEluZGV4IC0gMywgbmV4dEluZGV4IC0gMiwgbmV4dEluZGV4IC0gMSApO1xuXG5cdFx0XHRhZGRVViggdXZzWyAwIF0gKTtcblx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0YWRkVVYoIHV2c1sgMiBdICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBmNCggYSwgYiwgYywgZCApIHtcblxuXHRcdFx0YWRkVmVydGV4KCBhICk7XG5cdFx0XHRhZGRWZXJ0ZXgoIGIgKTtcblx0XHRcdGFkZFZlcnRleCggZCApO1xuXG5cdFx0XHRhZGRWZXJ0ZXgoIGIgKTtcblx0XHRcdGFkZFZlcnRleCggYyApO1xuXHRcdFx0YWRkVmVydGV4KCBkICk7XG5cblxuXHRcdFx0dmFyIG5leHRJbmRleCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdHZhciB1dnMgPSB1dmdlbi5nZW5lcmF0ZVNpZGVXYWxsVVYoIHNjb3BlLCB2ZXJ0aWNlc0FycmF5LCBuZXh0SW5kZXggLSA2LCBuZXh0SW5kZXggLSAzLCBuZXh0SW5kZXggLSAyLCBuZXh0SW5kZXggLSAxICk7XG5cblx0XHRcdGFkZFVWKCB1dnNbIDAgXSApO1xuXHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRhZGRVViggdXZzWyAzIF0gKTtcblxuXHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcblx0XHRcdGFkZFVWKCB1dnNbIDMgXSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gYWRkVmVydGV4KCBpbmRleCApIHtcblxuXHRcdFx0dmVydGljZXNBcnJheS5wdXNoKCBwbGFjZWhvbGRlclsgaW5kZXggKiAzICsgMCBdICk7XG5cdFx0XHR2ZXJ0aWNlc0FycmF5LnB1c2goIHBsYWNlaG9sZGVyWyBpbmRleCAqIDMgKyAxIF0gKTtcblx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDIgXSApO1xuXG5cdFx0fVxuXG5cblx0XHRmdW5jdGlvbiBhZGRVViggdmVjdG9yMiApIHtcblxuXHRcdFx0dXZBcnJheS5wdXNoKCB2ZWN0b3IyLnggKTtcblx0XHRcdHV2QXJyYXkucHVzaCggdmVjdG9yMi55ICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFeHRydWRlQnVmZmVyR2VvbWV0cnk7XG5cbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0dmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cdHZhciBvcHRpb25zID0gdGhpcy5wYXJhbWV0ZXJzLm9wdGlvbnM7XG5cblx0cmV0dXJuIHRvSlNPTiggc2hhcGVzLCBvcHRpb25zLCBkYXRhICk7XG5cbn07XG5cbi8vXG5cbnZhciBXb3JsZFVWR2VuZXJhdG9yID0ge1xuXG5cdGdlbmVyYXRlVG9wVVY6IGZ1bmN0aW9uICggZ2VvbWV0cnksIHZlcnRpY2VzLCBpbmRleEEsIGluZGV4QiwgaW5kZXhDICkge1xuXG5cdFx0dmFyIGFfeCA9IHZlcnRpY2VzWyBpbmRleEEgKiAzIF07XG5cdFx0dmFyIGFfeSA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMSBdO1xuXHRcdHZhciBiX3ggPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyBdO1xuXHRcdHZhciBiX3kgPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDEgXTtcblx0XHR2YXIgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTtcblx0XHR2YXIgY195ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAxIF07XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0bmV3IFZlY3RvcjIoIGFfeCwgYV95ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYl94LCBiX3kgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBjX3gsIGNfeSApXG5cdFx0XTtcblxuXHR9LFxuXG5cdGdlbmVyYXRlU2lkZVdhbGxVVjogZnVuY3Rpb24gKCBnZW9tZXRyeSwgdmVydGljZXMsIGluZGV4QSwgaW5kZXhCLCBpbmRleEMsIGluZGV4RCApIHtcblxuXHRcdHZhciBhX3ggPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyBdO1xuXHRcdHZhciBhX3kgPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDEgXTtcblx0XHR2YXIgYV96ID0gdmVydGljZXNbIGluZGV4QSAqIDMgKyAyIF07XG5cdFx0dmFyIGJfeCA9IHZlcnRpY2VzWyBpbmRleEIgKiAzIF07XG5cdFx0dmFyIGJfeSA9IHZlcnRpY2VzWyBpbmRleEIgKiAzICsgMSBdO1xuXHRcdHZhciBiX3ogPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDIgXTtcblx0XHR2YXIgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTtcblx0XHR2YXIgY195ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAxIF07XG5cdFx0dmFyIGNfeiA9IHZlcnRpY2VzWyBpbmRleEMgKiAzICsgMiBdO1xuXHRcdHZhciBkX3ggPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyBdO1xuXHRcdHZhciBkX3kgPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyArIDEgXTtcblx0XHR2YXIgZF96ID0gdmVydGljZXNbIGluZGV4RCAqIDMgKyAyIF07XG5cblx0XHRpZiAoIE1hdGguYWJzKCBhX3kgLSBiX3kgKSA8IDAuMDEgKSB7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3gsIDEgLSBhX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGJfeCwgMSAtIGJfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggY194LCAxIC0gY196ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3gsIDEgLSBkX3ogKVxuXHRcdFx0XTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3ksIDEgLSBhX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGJfeSwgMSAtIGJfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggY195LCAxIC0gY196ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3ksIDEgLSBkX3ogKVxuXHRcdFx0XTtcblxuXHRcdH1cblxuXHR9XG59O1xuXG5mdW5jdGlvbiB0b0pTT04oIHNoYXBlcywgb3B0aW9ucywgZGF0YSApIHtcblxuXHQvL1xuXG5cdGRhdGEuc2hhcGVzID0gW107XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgc2hhcGUgPSBzaGFwZXNbIGkgXTtcblxuXHRcdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGUudXVpZCApO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZXMudXVpZCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGlmICggb3B0aW9ucy5leHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkgZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoID0gb3B0aW9ucy5leHRydWRlUGF0aC50b0pTT04oKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufVxuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogVGV4dCA9IDNEIFRleHRcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGZvbnQ6IDxUSFJFRS5Gb250PiwgLy8gZm9udFxuICpcbiAqICBzaXplOiA8ZmxvYXQ+LCAvLyBzaXplIG9mIHRoZSB0ZXh0XG4gKiAgaGVpZ2h0OiA8ZmxvYXQ+LCAvLyB0aGlja25lc3MgdG8gZXh0cnVkZSB0ZXh0XG4gKiAgY3VydmVTZWdtZW50czogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgb24gdGhlIGN1cnZlc1xuICpcbiAqICBiZXZlbEVuYWJsZWQ6IDxib29sPiwgLy8gdHVybiBvbiBiZXZlbFxuICogIGJldmVsVGhpY2tuZXNzOiA8ZmxvYXQ+LCAvLyBob3cgZGVlcCBpbnRvIHRleHQgYmV2ZWwgZ29lc1xuICogIGJldmVsU2l6ZTogPGZsb2F0PiAvLyBob3cgZmFyIGZyb20gdGV4dCBvdXRsaW5lIGlzIGJldmVsXG4gKiB9XG4gKi9cblxuLy8gVGV4dEdlb21ldHJ5XG5cbmZ1bmN0aW9uIFRleHRHZW9tZXRyeSggdGV4dCwgcGFyYW1ldGVycyApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1RleHRHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHRleHQ6IHRleHQsXG5cdFx0cGFyYW1ldGVyczogcGFyYW1ldGVyc1xuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgVGV4dEJ1ZmZlckdlb21ldHJ5KCB0ZXh0LCBwYXJhbWV0ZXJzICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuVGV4dEdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuVGV4dEdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHRHZW9tZXRyeTtcblxuLy8gVGV4dEJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFRleHRCdWZmZXJHZW9tZXRyeSggdGV4dCwgcGFyYW1ldGVycyApIHtcblxuXHRwYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCB7fTtcblxuXHR2YXIgZm9udCA9IHBhcmFtZXRlcnMuZm9udDtcblxuXHRpZiAoICEgKCBmb250ICYmIGZvbnQuaXNGb250ICkgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuVGV4dEdlb21ldHJ5OiBmb250IHBhcmFtZXRlciBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuRm9udC4nICk7XG5cdFx0cmV0dXJuIG5ldyBHZW9tZXRyeSgpO1xuXG5cdH1cblxuXHR2YXIgc2hhcGVzID0gZm9udC5nZW5lcmF0ZVNoYXBlcyggdGV4dCwgcGFyYW1ldGVycy5zaXplICk7XG5cblx0Ly8gdHJhbnNsYXRlIHBhcmFtZXRlcnMgdG8gRXh0cnVkZUdlb21ldHJ5IEFQSVxuXG5cdHBhcmFtZXRlcnMuZGVwdGggPSBwYXJhbWV0ZXJzLmhlaWdodCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5oZWlnaHQgOiA1MDtcblxuXHQvLyBkZWZhdWx0c1xuXG5cdGlmICggcGFyYW1ldGVycy5iZXZlbFRoaWNrbmVzcyA9PT0gdW5kZWZpbmVkICkgcGFyYW1ldGVycy5iZXZlbFRoaWNrbmVzcyA9IDEwO1xuXHRpZiAoIHBhcmFtZXRlcnMuYmV2ZWxTaXplID09PSB1bmRlZmluZWQgKSBwYXJhbWV0ZXJzLmJldmVsU2l6ZSA9IDg7XG5cdGlmICggcGFyYW1ldGVycy5iZXZlbEVuYWJsZWQgPT09IHVuZGVmaW5lZCApIHBhcmFtZXRlcnMuYmV2ZWxFbmFibGVkID0gZmFsc2U7XG5cblx0RXh0cnVkZUJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIHNoYXBlcywgcGFyYW1ldGVycyApO1xuXG5cdHRoaXMudHlwZSA9ICdUZXh0QnVmZmVyR2VvbWV0cnknO1xuXG59XG5cblRleHRCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5UZXh0QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV4dEJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gU3BoZXJlR2VvbWV0cnlcblxuZnVuY3Rpb24gU3BoZXJlR2VvbWV0cnkoIHJhZGl1cywgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGgsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU3BoZXJlR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxuXHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRwaGlTdGFydDogcGhpU3RhcnQsXG5cdFx0cGhpTGVuZ3RoOiBwaGlMZW5ndGgsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFNwaGVyZUJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblNwaGVyZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuU3BoZXJlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3BoZXJlR2VvbWV0cnk7XG5cbi8vIFNwaGVyZUJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFNwaGVyZUJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NwaGVyZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxuXHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cblx0cmFkaXVzID0gcmFkaXVzIHx8IDE7XG5cblx0d2lkdGhTZWdtZW50cyA9IE1hdGgubWF4KCAzLCBNYXRoLmZsb29yKCB3aWR0aFNlZ21lbnRzICkgfHwgOCApO1xuXHRoZWlnaHRTZWdtZW50cyA9IE1hdGgubWF4KCAyLCBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApIHx8IDYgKTtcblxuXHRwaGlTdGFydCA9IHBoaVN0YXJ0ICE9PSB1bmRlZmluZWQgPyBwaGlTdGFydCA6IDA7XG5cdHBoaUxlbmd0aCA9IHBoaUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gcGhpTGVuZ3RoIDogTWF0aC5QSSAqIDI7XG5cblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwO1xuXHR0aGV0YUxlbmd0aCA9IHRoZXRhTGVuZ3RoICE9PSB1bmRlZmluZWQgPyB0aGV0YUxlbmd0aCA6IE1hdGguUEk7XG5cblx0dmFyIHRoZXRhRW5kID0gdGhldGFTdGFydCArIHRoZXRhTGVuZ3RoO1xuXG5cdHZhciBpeCwgaXk7XG5cblx0dmFyIGluZGV4ID0gMDtcblx0dmFyIGdyaWQgPSBbXTtcblxuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdGZvciAoIGl5ID0gMDsgaXkgPD0gaGVpZ2h0U2VnbWVudHM7IGl5ICsrICkge1xuXG5cdFx0dmFyIHZlcnRpY2VzUm93ID0gW107XG5cblx0XHR2YXIgdiA9IGl5IC8gaGVpZ2h0U2VnbWVudHM7XG5cblx0XHRmb3IgKCBpeCA9IDA7IGl4IDw9IHdpZHRoU2VnbWVudHM7IGl4ICsrICkge1xuXG5cdFx0XHR2YXIgdSA9IGl4IC8gd2lkdGhTZWdtZW50cztcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gLSByYWRpdXMgKiBNYXRoLmNvcyggcGhpU3RhcnQgKyB1ICogcGhpTGVuZ3RoICkgKiBNYXRoLnNpbiggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApO1xuXHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLmNvcyggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApO1xuXHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBNYXRoLnNpbiggcGhpU3RhcnQgKyB1ICogcGhpTGVuZ3RoICkgKiBNYXRoLnNpbiggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWwuc2V0KCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICkubm9ybWFsaXplKCk7XG5cdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXZzLnB1c2goIHUsIDEgLSB2ICk7XG5cblx0XHRcdHZlcnRpY2VzUm93LnB1c2goIGluZGV4ICsrICk7XG5cblx0XHR9XG5cblx0XHRncmlkLnB1c2goIHZlcnRpY2VzUm93ICk7XG5cblx0fVxuXG5cdC8vIGluZGljZXNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDwgaGVpZ2h0U2VnbWVudHM7IGl5ICsrICkge1xuXG5cdFx0Zm9yICggaXggPSAwOyBpeCA8IHdpZHRoU2VnbWVudHM7IGl4ICsrICkge1xuXG5cdFx0XHR2YXIgYSA9IGdyaWRbIGl5IF1bIGl4ICsgMSBdO1xuXHRcdFx0dmFyIGIgPSBncmlkWyBpeSBdWyBpeCBdO1xuXHRcdFx0dmFyIGMgPSBncmlkWyBpeSArIDEgXVsgaXggXTtcblx0XHRcdHZhciBkID0gZ3JpZFsgaXkgKyAxIF1bIGl4ICsgMSBdO1xuXG5cdFx0XHRpZiAoIGl5ICE9PSAwIHx8IHRoZXRhU3RhcnQgPiAwICkgaW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRpZiAoIGl5ICE9PSBoZWlnaHRTZWdtZW50cyAtIDEgfHwgdGhldGFFbmQgPCBNYXRoLlBJICkgaW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxufVxuXG5TcGhlcmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblNwaGVyZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwaGVyZUJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgS2FsZWIgTXVycGh5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFJpbmdHZW9tZXRyeVxuXG5mdW5jdGlvbiBSaW5nR2VvbWV0cnkoIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgdGhldGFTZWdtZW50cywgcGhpU2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUmluZ0dlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0aW5uZXJSYWRpdXM6IGlubmVyUmFkaXVzLFxuXHRcdG91dGVyUmFkaXVzOiBvdXRlclJhZGl1cyxcblx0XHR0aGV0YVNlZ21lbnRzOiB0aGV0YVNlZ21lbnRzLFxuXHRcdHBoaVNlZ21lbnRzOiBwaGlTZWdtZW50cyxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgUmluZ0J1ZmZlckdlb21ldHJ5KCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIHRoZXRhU2VnbWVudHMsIHBoaVNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblJpbmdHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblJpbmdHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSaW5nR2VvbWV0cnk7XG5cbi8vIFJpbmdCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBSaW5nQnVmZmVyR2VvbWV0cnkoIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgdGhldGFTZWdtZW50cywgcGhpU2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUmluZ0J1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0aW5uZXJSYWRpdXM6IGlubmVyUmFkaXVzLFxuXHRcdG91dGVyUmFkaXVzOiBvdXRlclJhZGl1cyxcblx0XHR0aGV0YVNlZ21lbnRzOiB0aGV0YVNlZ21lbnRzLFxuXHRcdHBoaVNlZ21lbnRzOiBwaGlTZWdtZW50cyxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdGlubmVyUmFkaXVzID0gaW5uZXJSYWRpdXMgfHwgMC41O1xuXHRvdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIHx8IDE7XG5cblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwO1xuXHR0aGV0YUxlbmd0aCA9IHRoZXRhTGVuZ3RoICE9PSB1bmRlZmluZWQgPyB0aGV0YUxlbmd0aCA6IE1hdGguUEkgKiAyO1xuXG5cdHRoZXRhU2VnbWVudHMgPSB0aGV0YVNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBNYXRoLm1heCggMywgdGhldGFTZWdtZW50cyApIDogODtcblx0cGhpU2VnbWVudHMgPSBwaGlTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gTWF0aC5tYXgoIDEsIHBoaVNlZ21lbnRzICkgOiAxO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIHNvbWUgaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBzZWdtZW50O1xuXHR2YXIgcmFkaXVzID0gaW5uZXJSYWRpdXM7XG5cdHZhciByYWRpdXNTdGVwID0gKCAoIG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMgKSAvIHBoaVNlZ21lbnRzICk7XG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHR2YXIgaiwgaTtcblxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0Zm9yICggaiA9IDA7IGogPD0gcGhpU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8PSB0aGV0YVNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHQvLyB2YWx1ZXMgYXJlIGdlbmVyYXRlIGZyb20gdGhlIGluc2lkZSBvZiB0aGUgcmluZyB0byB0aGUgb3V0c2lkZVxuXG5cdFx0XHRzZWdtZW50ID0gdGhldGFTdGFydCArIGkgLyB0aGV0YVNlZ21lbnRzICogdGhldGFMZW5ndGg7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIE1hdGguY29zKCBzZWdtZW50ICk7XG5cdFx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguc2luKCBzZWdtZW50ICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1di54ID0gKCB2ZXJ0ZXgueCAvIG91dGVyUmFkaXVzICsgMSApIC8gMjtcblx0XHRcdHV2LnkgPSAoIHZlcnRleC55IC8gb3V0ZXJSYWRpdXMgKyAxICkgLyAyO1xuXG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5jcmVhc2UgdGhlIHJhZGl1cyBmb3IgbmV4dCByb3cgb2YgdmVydGljZXNcblxuXHRcdHJhZGl1cyArPSByYWRpdXNTdGVwO1xuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaiA9IDA7IGogPCBwaGlTZWdtZW50czsgaiArKyApIHtcblxuXHRcdHZhciB0aGV0YVNlZ21lbnRMZXZlbCA9IGogKiAoIHRoZXRhU2VnbWVudHMgKyAxICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IHRoZXRhU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdHNlZ21lbnQgPSBpICsgdGhldGFTZWdtZW50TGV2ZWw7XG5cblx0XHRcdHZhciBhID0gc2VnbWVudDtcblx0XHRcdHZhciBiID0gc2VnbWVudCArIHRoZXRhU2VnbWVudHMgKyAxO1xuXHRcdFx0dmFyIGMgPSBzZWdtZW50ICsgdGhldGFTZWdtZW50cyArIDI7XG5cdFx0XHR2YXIgZCA9IHNlZ21lbnQgKyAxO1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuUmluZ0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuUmluZ0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJpbmdCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIGFzdHJvZHVkIC8gaHR0cDovL2FzdHJvZHVkLmlzZ3JlYXQub3JnL1xuICogQGF1dGhvciB6ejg1IC8gaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gTGF0aGVHZW9tZXRyeVxuXG5mdW5jdGlvbiBMYXRoZUdlb21ldHJ5KCBwb2ludHMsIHNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGF0aGVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHBvaW50czogcG9pbnRzLFxuXHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcblx0XHRwaGlTdGFydDogcGhpU3RhcnQsXG5cdFx0cGhpTGVuZ3RoOiBwaGlMZW5ndGhcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IExhdGhlQnVmZmVyR2VvbWV0cnkoIHBvaW50cywgc2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGggKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5MYXRoZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuTGF0aGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXRoZUdlb21ldHJ5O1xuXG4vLyBMYXRoZUJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIExhdGhlQnVmZmVyR2VvbWV0cnkoIHBvaW50cywgc2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGggKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMYXRoZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cG9pbnRzOiBwb2ludHMsXG5cdFx0c2VnbWVudHM6IHNlZ21lbnRzLFxuXHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aFxuXHR9O1xuXG5cdHNlZ21lbnRzID0gTWF0aC5mbG9vciggc2VnbWVudHMgKSB8fCAxMjtcblx0cGhpU3RhcnQgPSBwaGlTdGFydCB8fCAwO1xuXHRwaGlMZW5ndGggPSBwaGlMZW5ndGggfHwgTWF0aC5QSSAqIDI7XG5cblx0Ly8gY2xhbXAgcGhpTGVuZ3RoIHNvIGl0J3MgaW4gcmFuZ2Ugb2YgWyAwLCAyUEkgXVxuXG5cdHBoaUxlbmd0aCA9IF9NYXRoLmNsYW1wKCBwaGlMZW5ndGgsIDAsIE1hdGguUEkgKiAyICk7XG5cblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGJhc2U7XG5cdHZhciBpbnZlcnNlU2VnbWVudHMgPSAxLjAgLyBzZWdtZW50cztcblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdHZhciBpLCBqO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzIGFuZCB1dnNcblxuXHRmb3IgKCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdHZhciBwaGkgPSBwaGlTdGFydCArIGkgKiBpbnZlcnNlU2VnbWVudHMgKiBwaGlMZW5ndGg7XG5cblx0XHR2YXIgc2luID0gTWF0aC5zaW4oIHBoaSApO1xuXHRcdHZhciBjb3MgPSBNYXRoLmNvcyggcGhpICk7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8PSAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHR2ZXJ0ZXgueCA9IHBvaW50c1sgaiBdLnggKiBzaW47XG5cdFx0XHR2ZXJ0ZXgueSA9IHBvaW50c1sgaiBdLnk7XG5cdFx0XHR2ZXJ0ZXgueiA9IHBvaW50c1sgaiBdLnggKiBjb3M7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXYueCA9IGkgLyBzZWdtZW50cztcblx0XHRcdHV2LnkgPSBqIC8gKCBwb2ludHMubGVuZ3RoIC0gMSApO1xuXG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGluZGljZXNcblxuXHRmb3IgKCBpID0gMDsgaSA8IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0Zm9yICggaiA9IDA7IGogPCAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdGJhc2UgPSBqICsgaSAqIHBvaW50cy5sZW5ndGg7XG5cblx0XHRcdHZhciBhID0gYmFzZTtcblx0XHRcdHZhciBiID0gYmFzZSArIHBvaW50cy5sZW5ndGg7XG5cdFx0XHR2YXIgYyA9IGJhc2UgKyBwb2ludHMubGVuZ3RoICsgMTtcblx0XHRcdHZhciBkID0gYmFzZSArIDE7XG5cblx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdC8vIGdlbmVyYXRlIG5vcm1hbHNcblxuXHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG5cblx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIGNsb3NlZCwgd2UgbmVlZCB0byBhdmVyYWdlIHRoZSBub3JtYWxzIGFsb25nIHRoZSBzZWFtLlxuXHQvLyBiZWNhdXNlIHRoZSBjb3JyZXNwb25kaW5nIHZlcnRpY2VzIGFyZSBpZGVudGljYWwgKGJ1dCBzdGlsbCBoYXZlIGRpZmZlcmVudCBVVnMpLlxuXG5cdGlmICggcGhpTGVuZ3RoID09PSBNYXRoLlBJICogMiApIHtcblxuXHRcdHZhciBub3JtYWxzID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbC5hcnJheTtcblx0XHR2YXIgbjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBuMiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG4gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gdGhpcyBpcyB0aGUgYnVmZmVyIG9mZnNldCBmb3IgdGhlIGxhc3QgbGluZSBvZiB2ZXJ0aWNlc1xuXG5cdFx0YmFzZSA9IHNlZ21lbnRzICogcG9pbnRzLmxlbmd0aCAqIDM7XG5cblx0XHRmb3IgKCBpID0gMCwgaiA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICsrLCBqICs9IDMgKSB7XG5cblx0XHRcdC8vIHNlbGVjdCB0aGUgbm9ybWFsIG9mIHRoZSB2ZXJ0ZXggaW4gdGhlIGZpcnN0IGxpbmVcblxuXHRcdFx0bjEueCA9IG5vcm1hbHNbIGogKyAwIF07XG5cdFx0XHRuMS55ID0gbm9ybWFsc1sgaiArIDEgXTtcblx0XHRcdG4xLnogPSBub3JtYWxzWyBqICsgMiBdO1xuXG5cdFx0XHQvLyBzZWxlY3QgdGhlIG5vcm1hbCBvZiB0aGUgdmVydGV4IGluIHRoZSBsYXN0IGxpbmVcblxuXHRcdFx0bjIueCA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMCBdO1xuXHRcdFx0bjIueSA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMSBdO1xuXHRcdFx0bjIueiA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMiBdO1xuXG5cdFx0XHQvLyBhdmVyYWdlIG5vcm1hbHNcblxuXHRcdFx0bi5hZGRWZWN0b3JzKCBuMSwgbjIgKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0Ly8gYXNzaWduIHRoZSBuZXcgdmFsdWVzIHRvIGJvdGggbm9ybWFsc1xuXG5cdFx0XHRub3JtYWxzWyBqICsgMCBdID0gbm9ybWFsc1sgYmFzZSArIGogKyAwIF0gPSBuLng7XG5cdFx0XHRub3JtYWxzWyBqICsgMSBdID0gbm9ybWFsc1sgYmFzZSArIGogKyAxIF0gPSBuLnk7XG5cdFx0XHRub3JtYWxzWyBqICsgMiBdID0gbm9ybWFsc1sgYmFzZSArIGogKyAyIF0gPSBuLno7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbkxhdGhlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5MYXRoZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhdGhlQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBqb25vYnIxIC8gaHR0cDovL2pvbm9icjEuY29tXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFNoYXBlR2VvbWV0cnlcblxuZnVuY3Rpb24gU2hhcGVHZW9tZXRyeSggc2hhcGVzLCBjdXJ2ZVNlZ21lbnRzICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2hhcGVHZW9tZXRyeSc7XG5cblx0aWYgKCB0eXBlb2YgY3VydmVTZWdtZW50cyA9PT0gJ29iamVjdCcgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZUdlb21ldHJ5OiBPcHRpb25zIHBhcmFtZXRlciBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdGN1cnZlU2VnbWVudHMgPSBjdXJ2ZVNlZ21lbnRzLmN1cnZlU2VnbWVudHM7XG5cblx0fVxuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRjdXJ2ZVNlZ21lbnRzOiBjdXJ2ZVNlZ21lbnRzXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBTaGFwZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIGN1cnZlU2VnbWVudHMgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5TaGFwZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFwZUdlb21ldHJ5O1xuXG5TaGFwZUdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHR2YXIgc2hhcGVzID0gdGhpcy5wYXJhbWV0ZXJzLnNoYXBlcztcblxuXHRyZXR1cm4gdG9KU09OJDEoIHNoYXBlcywgZGF0YSApO1xuXG59O1xuXG4vLyBTaGFwZUJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFNoYXBlQnVmZmVyR2VvbWV0cnkoIHNoYXBlcywgY3VydmVTZWdtZW50cyApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NoYXBlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRjdXJ2ZVNlZ21lbnRzOiBjdXJ2ZVNlZ21lbnRzXG5cdH07XG5cblx0Y3VydmVTZWdtZW50cyA9IGN1cnZlU2VnbWVudHMgfHwgMTI7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBncm91cFN0YXJ0ID0gMDtcblx0dmFyIGdyb3VwQ291bnQgPSAwO1xuXG5cdC8vIGFsbG93IHNpbmdsZSBhbmQgYXJyYXkgdmFsdWVzIGZvciBcInNoYXBlc1wiIHBhcmFtZXRlclxuXG5cdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgPT09IGZhbHNlICkge1xuXG5cdFx0YWRkU2hhcGUoIHNoYXBlcyApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBzaGFwZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRhZGRTaGFwZSggc2hhcGVzWyBpIF0gKTtcblxuXHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgaSApOyAvLyBlbmFibGVzIE11bHRpTWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cdFx0XHRncm91cENvdW50ID0gMDtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cblx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdGZ1bmN0aW9uIGFkZFNoYXBlKCBzaGFwZSApIHtcblxuXHRcdHZhciBpLCBsLCBzaGFwZUhvbGU7XG5cblx0XHR2YXIgaW5kZXhPZmZzZXQgPSB2ZXJ0aWNlcy5sZW5ndGggLyAzO1xuXHRcdHZhciBwb2ludHMgPSBzaGFwZS5leHRyYWN0UG9pbnRzKCBjdXJ2ZVNlZ21lbnRzICk7XG5cblx0XHR2YXIgc2hhcGVWZXJ0aWNlcyA9IHBvaW50cy5zaGFwZTtcblx0XHR2YXIgc2hhcGVIb2xlcyA9IHBvaW50cy5ob2xlcztcblxuXHRcdC8vIGNoZWNrIGRpcmVjdGlvbiBvZiB2ZXJ0aWNlc1xuXG5cdFx0aWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBzaGFwZVZlcnRpY2VzICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRzaGFwZVZlcnRpY2VzID0gc2hhcGVWZXJ0aWNlcy5yZXZlcnNlKCk7XG5cblx0XHRcdC8vIGFsc28gY2hlY2sgaWYgaG9sZXMgYXJlIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb25cblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzaGFwZUhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0c2hhcGVIb2xlID0gc2hhcGVIb2xlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggc2hhcGVIb2xlICkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRzaGFwZUhvbGVzWyBpIF0gPSBzaGFwZUhvbGUucmV2ZXJzZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGZhY2VzID0gU2hhcGVVdGlscy50cmlhbmd1bGF0ZVNoYXBlKCBzaGFwZVZlcnRpY2VzLCBzaGFwZUhvbGVzICk7XG5cblx0XHQvLyBqb2luIHZlcnRpY2VzIG9mIGlubmVyIGFuZCBvdXRlciBwYXRocyB0byBhIHNpbmdsZSBhcnJheVxuXG5cdFx0Zm9yICggaSA9IDAsIGwgPSBzaGFwZUhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbIGkgXTtcblx0XHRcdHNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLmNvbmNhdCggc2hhcGVIb2xlICk7XG5cblx0XHR9XG5cblx0XHQvLyB2ZXJ0aWNlcywgbm9ybWFscywgdXZzXG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IHNoYXBlVmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlcnRleCA9IHNoYXBlVmVydGljZXNbIGkgXTtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCAwICk7XG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblx0XHRcdHV2cy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnkgKTsgLy8gd29ybGQgdXZzXG5cblx0XHR9XG5cblx0XHQvLyBpbmNpZGVzXG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0dmFyIGEgPSBmYWNlWyAwIF0gKyBpbmRleE9mZnNldDtcblx0XHRcdHZhciBiID0gZmFjZVsgMSBdICsgaW5kZXhPZmZzZXQ7XG5cdFx0XHR2YXIgYyA9IGZhY2VbIDIgXSArIGluZGV4T2Zmc2V0O1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGMgKTtcblx0XHRcdGdyb3VwQ291bnQgKz0gMztcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuU2hhcGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblNoYXBlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhcGVCdWZmZXJHZW9tZXRyeTtcblxuU2hhcGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0dmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cblx0cmV0dXJuIHRvSlNPTiQxKCBzaGFwZXMsIGRhdGEgKTtcblxufTtcblxuLy9cblxuZnVuY3Rpb24gdG9KU09OJDEoIHNoYXBlcywgZGF0YSApIHtcblxuXHRkYXRhLnNoYXBlcyA9IFtdO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlLnV1aWQgKTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGVzLnV1aWQgKTtcblxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gRWRnZXNHZW9tZXRyeSggZ2VvbWV0cnksIHRocmVzaG9sZEFuZ2xlICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRWRnZXNHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHRocmVzaG9sZEFuZ2xlOiB0aHJlc2hvbGRBbmdsZVxuXHR9O1xuXG5cdHRocmVzaG9sZEFuZ2xlID0gKCB0aHJlc2hvbGRBbmdsZSAhPT0gdW5kZWZpbmVkICkgPyB0aHJlc2hvbGRBbmdsZSA6IDE7XG5cblx0Ly8gYnVmZmVyXG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciB0aHJlc2hvbGREb3QgPSBNYXRoLmNvcyggX01hdGguREVHMlJBRCAqIHRocmVzaG9sZEFuZ2xlICk7XG5cdHZhciBlZGdlID0gWyAwLCAwIF0sIGVkZ2VzID0ge30sIGVkZ2UxLCBlZGdlMjtcblx0dmFyIGtleSwga2V5cyA9IFsgJ2EnLCAnYicsICdjJyBdO1xuXG5cdC8vIHByZXBhcmUgc291cmNlIGdlb21ldHJ5XG5cblx0dmFyIGdlb21ldHJ5MjtcblxuXHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRnZW9tZXRyeTIgPSBuZXcgR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeTIuZnJvbUJ1ZmZlckdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRnZW9tZXRyeTIgPSBnZW9tZXRyeS5jbG9uZSgpO1xuXG5cdH1cblxuXHRnZW9tZXRyeTIubWVyZ2VWZXJ0aWNlcygpO1xuXHRnZW9tZXRyeTIuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cblx0dmFyIHNvdXJjZVZlcnRpY2VzID0gZ2VvbWV0cnkyLnZlcnRpY2VzO1xuXHR2YXIgZmFjZXMgPSBnZW9tZXRyeTIuZmFjZXM7XG5cblx0Ly8gbm93IGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHdoZXJlIGVhY2ggZW50cnkgcmVwcmVzZW50cyBhbiBlZGdlIHdpdGggaXRzIGFkam9pbmluZyBmYWNlc1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgZmFjZSA9IGZhY2VzWyBpIF07XG5cblx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRlZGdlMSA9IGZhY2VbIGtleXNbIGogXSBdO1xuXHRcdFx0ZWRnZTIgPSBmYWNlWyBrZXlzWyAoIGogKyAxICkgJSAzIF0gXTtcblx0XHRcdGVkZ2VbIDAgXSA9IE1hdGgubWluKCBlZGdlMSwgZWRnZTIgKTtcblx0XHRcdGVkZ2VbIDEgXSA9IE1hdGgubWF4KCBlZGdlMSwgZWRnZTIgKTtcblxuXHRcdFx0a2V5ID0gZWRnZVsgMCBdICsgJywnICsgZWRnZVsgMSBdO1xuXG5cdFx0XHRpZiAoIGVkZ2VzWyBrZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGVkZ2VzWyBrZXkgXSA9IHsgaW5kZXgxOiBlZGdlWyAwIF0sIGluZGV4MjogZWRnZVsgMSBdLCBmYWNlMTogaSwgZmFjZTI6IHVuZGVmaW5lZCB9O1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGVkZ2VzWyBrZXkgXS5mYWNlMiA9IGk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXNcblxuXHRmb3IgKCBrZXkgaW4gZWRnZXMgKSB7XG5cblx0XHR2YXIgZSA9IGVkZ2VzWyBrZXkgXTtcblxuXHRcdC8vIGFuIGVkZ2UgaXMgb25seSByZW5kZXJlZCBpZiB0aGUgYW5nbGUgKGluIGRlZ3JlZXMpIGJldHdlZW4gdGhlIGZhY2Ugbm9ybWFscyBvZiB0aGUgYWRqb2luaW5nIGZhY2VzIGV4Y2VlZHMgdGhpcyB2YWx1ZS4gZGVmYXVsdCA9IDEgZGVncmVlLlxuXG5cdFx0aWYgKCBlLmZhY2UyID09PSB1bmRlZmluZWQgfHwgZmFjZXNbIGUuZmFjZTEgXS5ub3JtYWwuZG90KCBmYWNlc1sgZS5mYWNlMiBdLm5vcm1hbCApIDw9IHRocmVzaG9sZERvdCApIHtcblxuXHRcdFx0dmFyIHZlcnRleCA9IHNvdXJjZVZlcnRpY2VzWyBlLmluZGV4MSBdO1xuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHR2ZXJ0ZXggPSBzb3VyY2VWZXJ0aWNlc1sgZS5pbmRleDIgXTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblxufVxuXG5FZGdlc0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuRWRnZXNHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFZGdlc0dlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIEN5bGluZGVyR2VvbWV0cnlcblxuZnVuY3Rpb24gQ3lsaW5kZXJHZW9tZXRyeSggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1c1RvcDogcmFkaXVzVG9wLFxuXHRcdHJhZGl1c0JvdHRvbTogcmFkaXVzQm90dG9tLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IEN5bGluZGVyQnVmZmVyR2VvbWV0cnkoIHJhZGl1c1RvcCwgcmFkaXVzQm90dG9tLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkN5bGluZGVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5DeWxpbmRlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN5bGluZGVyR2VvbWV0cnk7XG5cbi8vIEN5bGluZGVyQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1c1RvcDogcmFkaXVzVG9wLFxuXHRcdHJhZGl1c0JvdHRvbTogcmFkaXVzQm90dG9tLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHJhZGl1c1RvcCA9IHJhZGl1c1RvcCAhPT0gdW5kZWZpbmVkID8gcmFkaXVzVG9wIDogMTtcblx0cmFkaXVzQm90dG9tID0gcmFkaXVzQm90dG9tICE9PSB1bmRlZmluZWQgPyByYWRpdXNCb3R0b20gOiAxO1xuXHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcblxuXHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICkgfHwgODtcblx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApIHx8IDE7XG5cblx0b3BlbkVuZGVkID0gb3BlbkVuZGVkICE9PSB1bmRlZmluZWQgPyBvcGVuRW5kZWQgOiBmYWxzZTtcblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwLjA7XG5cdHRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSSAqIDI7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBpbmRleCA9IDA7XG5cdHZhciBpbmRleEFycmF5ID0gW107XG5cdHZhciBoYWxmSGVpZ2h0ID0gaGVpZ2h0IC8gMjtcblx0dmFyIGdyb3VwU3RhcnQgPSAwO1xuXG5cdC8vIGdlbmVyYXRlIGdlb21ldHJ5XG5cblx0Z2VuZXJhdGVUb3JzbygpO1xuXG5cdGlmICggb3BlbkVuZGVkID09PSBmYWxzZSApIHtcblxuXHRcdGlmICggcmFkaXVzVG9wID4gMCApIGdlbmVyYXRlQ2FwKCB0cnVlICk7XG5cdFx0aWYgKCByYWRpdXNCb3R0b20gPiAwICkgZ2VuZXJhdGVDYXAoIGZhbHNlICk7XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVRvcnNvKCkge1xuXG5cdFx0dmFyIHgsIHk7XG5cdFx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHQvLyB0aGlzIHdpbGwgYmUgdXNlZCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbFxuXHRcdHZhciBzbG9wZSA9ICggcmFkaXVzQm90dG9tIC0gcmFkaXVzVG9wICkgLyBoZWlnaHQ7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCB5ID0gMDsgeSA8PSBoZWlnaHRTZWdtZW50czsgeSArKyApIHtcblxuXHRcdFx0dmFyIGluZGV4Um93ID0gW107XG5cblx0XHRcdHZhciB2ID0geSAvIGhlaWdodFNlZ21lbnRzO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgdGhlIHJhZGl1cyBvZiB0aGUgY3VycmVudCByb3dcblxuXHRcdFx0dmFyIHJhZGl1cyA9IHYgKiAoIHJhZGl1c0JvdHRvbSAtIHJhZGl1c1RvcCApICsgcmFkaXVzVG9wO1xuXG5cdFx0XHRmb3IgKCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHR2YXIgdSA9IHggLyByYWRpYWxTZWdtZW50cztcblxuXHRcdFx0XHR2YXIgdGhldGEgPSB1ICogdGhldGFMZW5ndGggKyB0aGV0YVN0YXJ0O1xuXG5cdFx0XHRcdHZhciBzaW5UaGV0YSA9IE1hdGguc2luKCB0aGV0YSApO1xuXHRcdFx0XHR2YXIgY29zVGhldGEgPSBNYXRoLmNvcyggdGhldGEgKTtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIHNpblRoZXRhO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IC0gdiAqIGhlaWdodCArIGhhbGZIZWlnaHQ7XG5cdFx0XHRcdHZlcnRleC56ID0gcmFkaXVzICogY29zVGhldGE7XG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRub3JtYWwuc2V0KCBzaW5UaGV0YSwgc2xvcGUsIGNvc1RoZXRhICkubm9ybWFsaXplKCk7XG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXZzLnB1c2goIHUsIDEgLSB2ICk7XG5cblx0XHRcdFx0Ly8gc2F2ZSBpbmRleCBvZiB2ZXJ0ZXggaW4gcmVzcGVjdGl2ZSByb3dcblxuXHRcdFx0XHRpbmRleFJvdy5wdXNoKCBpbmRleCArKyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIG5vdyBzYXZlIHZlcnRpY2VzIG9mIHRoZSByb3cgaW4gb3VyIGluZGV4IGFycmF5XG5cblx0XHRcdGluZGV4QXJyYXkucHVzaCggaW5kZXhSb3cgKTtcblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdGZvciAoIHggPSAwOyB4IDwgcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdGZvciAoIHkgPSAwOyB5IDwgaGVpZ2h0U2VnbWVudHM7IHkgKysgKSB7XG5cblx0XHRcdFx0Ly8gd2UgdXNlIHRoZSBpbmRleCBhcnJheSB0byBhY2Nlc3MgdGhlIGNvcnJlY3QgaW5kaWNlc1xuXG5cdFx0XHRcdHZhciBhID0gaW5kZXhBcnJheVsgeSBdWyB4IF07XG5cdFx0XHRcdHZhciBiID0gaW5kZXhBcnJheVsgeSArIDEgXVsgeCBdO1xuXHRcdFx0XHR2YXIgYyA9IGluZGV4QXJyYXlbIHkgKyAxIF1bIHggKyAxIF07XG5cdFx0XHRcdHZhciBkID0gaW5kZXhBcnJheVsgeSBdWyB4ICsgMSBdO1xuXG5cdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHRcdC8vIHVwZGF0ZSBncm91cCBjb3VudGVyXG5cblx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0c2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIDAgKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZUNhcCggdG9wICkge1xuXG5cdFx0dmFyIHgsIGNlbnRlckluZGV4U3RhcnQsIGNlbnRlckluZGV4RW5kO1xuXG5cdFx0dmFyIHV2ID0gbmV3IFZlY3RvcjIoKTtcblx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciBncm91cENvdW50ID0gMDtcblxuXHRcdHZhciByYWRpdXMgPSAoIHRvcCA9PT0gdHJ1ZSApID8gcmFkaXVzVG9wIDogcmFkaXVzQm90dG9tO1xuXHRcdHZhciBzaWduID0gKCB0b3AgPT09IHRydWUgKSA/IDEgOiAtIDE7XG5cblx0XHQvLyBzYXZlIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2VudGVyIHZlcnRleFxuXHRcdGNlbnRlckluZGV4U3RhcnQgPSBpbmRleDtcblxuXHRcdC8vIGZpcnN0IHdlIGdlbmVyYXRlIHRoZSBjZW50ZXIgdmVydGV4IGRhdGEgb2YgdGhlIGNhcC5cblx0XHQvLyBiZWNhdXNlIHRoZSBnZW9tZXRyeSBuZWVkcyBvbmUgc2V0IG9mIHV2cyBwZXIgZmFjZSxcblx0XHQvLyB3ZSBtdXN0IGdlbmVyYXRlIGEgY2VudGVyIHZlcnRleCBwZXIgZmFjZS9zZWdtZW50XG5cblx0XHRmb3IgKCB4ID0gMTsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIGhhbGZIZWlnaHQgKiBzaWduLCAwICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIHNpZ24sIDAgKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXZzLnB1c2goIDAuNSwgMC41ICk7XG5cblx0XHRcdC8vIGluY3JlYXNlIGluZGV4XG5cblx0XHRcdGluZGV4ICsrO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2F2ZSB0aGUgaW5kZXggb2YgdGhlIGxhc3QgY2VudGVyIHZlcnRleFxuXG5cdFx0Y2VudGVySW5kZXhFbmQgPSBpbmRleDtcblxuXHRcdC8vIG5vdyB3ZSBnZW5lcmF0ZSB0aGUgc3Vycm91bmRpbmcgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0Zm9yICggeCA9IDA7IHggPD0gcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdHZhciB1ID0geCAvIHJhZGlhbFNlZ21lbnRzO1xuXHRcdFx0dmFyIHRoZXRhID0gdSAqIHRoZXRhTGVuZ3RoICsgdGhldGFTdGFydDtcblxuXHRcdFx0dmFyIGNvc1RoZXRhID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cdFx0XHR2YXIgc2luVGhldGEgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogc2luVGhldGE7XG5cdFx0XHR2ZXJ0ZXgueSA9IGhhbGZIZWlnaHQgKiBzaWduO1xuXHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgc2lnbiwgMCApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1di54ID0gKCBjb3NUaGV0YSAqIDAuNSApICsgMC41O1xuXHRcdFx0dXYueSA9ICggc2luVGhldGEgKiAwLjUgKiBzaWduICkgKyAwLjU7XG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHQvLyBpbmNyZWFzZSBpbmRleFxuXG5cdFx0XHRpbmRleCArKztcblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdGZvciAoIHggPSAwOyB4IDwgcmFkaWFsU2VnbWVudHM7IHggKysgKSB7XG5cblx0XHRcdHZhciBjID0gY2VudGVySW5kZXhTdGFydCArIHg7XG5cdFx0XHR2YXIgaSA9IGNlbnRlckluZGV4RW5kICsgeDtcblxuXHRcdFx0aWYgKCB0b3AgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Ly8gZmFjZSB0b3BcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCBjICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gZmFjZSBib3R0b21cblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGkgKyAxLCBpLCBjICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z3JvdXBDb3VudCArPSAzO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYWRkIGEgZ3JvdXAgdG8gdGhlIGdlb21ldHJ5LiB0aGlzIHdpbGwgZW5zdXJlIG11bHRpIG1hdGVyaWFsIHN1cHBvcnRcblxuXHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCB0b3AgPT09IHRydWUgPyAxIDogMiApO1xuXG5cdFx0Ly8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzXG5cblx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cblx0fVxuXG59XG5cbkN5bGluZGVyQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5DeWxpbmRlckJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN5bGluZGVyQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvblxuICovXG5cbi8vIENvbmVHZW9tZXRyeVxuXG5mdW5jdGlvbiBDb25lR2VvbWV0cnkoIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0Q3lsaW5kZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCAwLCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICk7XG5cblx0dGhpcy50eXBlID0gJ0NvbmVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxufVxuXG5Db25lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3lsaW5kZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkNvbmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25lR2VvbWV0cnk7XG5cbi8vIENvbmVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBDb25lQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0Q3lsaW5kZXJCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCAwLCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICk7XG5cblx0dGhpcy50eXBlID0gJ0NvbmVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxufVxuXG5Db25lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkNvbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25lQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBodWdoZXNcbiAqL1xuXG4vLyBDaXJjbGVHZW9tZXRyeVxuXG5mdW5jdGlvbiBDaXJjbGVHZW9tZXRyeSggcmFkaXVzLCBzZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDaXJjbGVHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQ2lyY2xlQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgc2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuQ2lyY2xlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5DaXJjbGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaXJjbGVHZW9tZXRyeTtcblxuLy8gQ2lyY2xlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gQ2lyY2xlQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgc2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ2lyY2xlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0fTtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0c2VnbWVudHMgPSBzZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gTWF0aC5tYXgoIDMsIHNlZ21lbnRzICkgOiA4O1xuXG5cdHRoZXRhU3RhcnQgPSB0aGV0YVN0YXJ0ICE9PSB1bmRlZmluZWQgPyB0aGV0YVN0YXJ0IDogMDtcblx0dGhldGFMZW5ndGggPSB0aGV0YUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gdGhldGFMZW5ndGggOiBNYXRoLlBJICogMjtcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGksIHM7XG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xuXG5cdC8vIGNlbnRlciBwb2ludFxuXG5cdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cdHV2cy5wdXNoKCAwLjUsIDAuNSApO1xuXG5cdGZvciAoIHMgPSAwLCBpID0gMzsgcyA8PSBzZWdtZW50czsgcyArKywgaSArPSAzICkge1xuXG5cdFx0dmFyIHNlZ21lbnQgPSB0aGV0YVN0YXJ0ICsgcyAvIHNlZ21lbnRzICogdGhldGFMZW5ndGg7XG5cblx0XHQvLyB2ZXJ0ZXhcblxuXHRcdHZlcnRleC54ID0gcmFkaXVzICogTWF0aC5jb3MoIHNlZ21lbnQgKTtcblx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguc2luKCBzZWdtZW50ICk7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHQvLyBub3JtYWxcblxuXHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0Ly8gdXZzXG5cblx0XHR1di54ID0gKCB2ZXJ0aWNlc1sgaSBdIC8gcmFkaXVzICsgMSApIC8gMjtcblx0XHR1di55ID0gKCB2ZXJ0aWNlc1sgaSArIDEgXSAvIHJhZGl1cyArIDEgKSAvIDI7XG5cblx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCAwICk7XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxufVxuXG5DaXJjbGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkNpcmNsZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENpcmNsZUJ1ZmZlckdlb21ldHJ5O1xuXG5cblxudmFyIEdlb21ldHJpZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdFdpcmVmcmFtZUdlb21ldHJ5OiBXaXJlZnJhbWVHZW9tZXRyeSxcblx0UGFyYW1ldHJpY0dlb21ldHJ5OiBQYXJhbWV0cmljR2VvbWV0cnksXG5cdFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeTogUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LFxuXHRUZXRyYWhlZHJvbkdlb21ldHJ5OiBUZXRyYWhlZHJvbkdlb21ldHJ5LFxuXHRUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHRPY3RhaGVkcm9uR2VvbWV0cnk6IE9jdGFoZWRyb25HZW9tZXRyeSxcblx0T2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnksXG5cdEljb3NhaGVkcm9uR2VvbWV0cnk6IEljb3NhaGVkcm9uR2VvbWV0cnksXG5cdEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnksXG5cdERvZGVjYWhlZHJvbkdlb21ldHJ5OiBEb2RlY2FoZWRyb25HZW9tZXRyeSxcblx0RG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHRQb2x5aGVkcm9uR2VvbWV0cnk6IFBvbHloZWRyb25HZW9tZXRyeSxcblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnksXG5cdFR1YmVHZW9tZXRyeTogVHViZUdlb21ldHJ5LFxuXHRUdWJlQnVmZmVyR2VvbWV0cnk6IFR1YmVCdWZmZXJHZW9tZXRyeSxcblx0VG9ydXNLbm90R2VvbWV0cnk6IFRvcnVzS25vdEdlb21ldHJ5LFxuXHRUb3J1c0tub3RCdWZmZXJHZW9tZXRyeTogVG9ydXNLbm90QnVmZmVyR2VvbWV0cnksXG5cdFRvcnVzR2VvbWV0cnk6IFRvcnVzR2VvbWV0cnksXG5cdFRvcnVzQnVmZmVyR2VvbWV0cnk6IFRvcnVzQnVmZmVyR2VvbWV0cnksXG5cdFRleHRHZW9tZXRyeTogVGV4dEdlb21ldHJ5LFxuXHRUZXh0QnVmZmVyR2VvbWV0cnk6IFRleHRCdWZmZXJHZW9tZXRyeSxcblx0U3BoZXJlR2VvbWV0cnk6IFNwaGVyZUdlb21ldHJ5LFxuXHRTcGhlcmVCdWZmZXJHZW9tZXRyeTogU3BoZXJlQnVmZmVyR2VvbWV0cnksXG5cdFJpbmdHZW9tZXRyeTogUmluZ0dlb21ldHJ5LFxuXHRSaW5nQnVmZmVyR2VvbWV0cnk6IFJpbmdCdWZmZXJHZW9tZXRyeSxcblx0UGxhbmVHZW9tZXRyeTogUGxhbmVHZW9tZXRyeSxcblx0UGxhbmVCdWZmZXJHZW9tZXRyeTogUGxhbmVCdWZmZXJHZW9tZXRyeSxcblx0TGF0aGVHZW9tZXRyeTogTGF0aGVHZW9tZXRyeSxcblx0TGF0aGVCdWZmZXJHZW9tZXRyeTogTGF0aGVCdWZmZXJHZW9tZXRyeSxcblx0U2hhcGVHZW9tZXRyeTogU2hhcGVHZW9tZXRyeSxcblx0U2hhcGVCdWZmZXJHZW9tZXRyeTogU2hhcGVCdWZmZXJHZW9tZXRyeSxcblx0RXh0cnVkZUdlb21ldHJ5OiBFeHRydWRlR2VvbWV0cnksXG5cdEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LFxuXHRFZGdlc0dlb21ldHJ5OiBFZGdlc0dlb21ldHJ5LFxuXHRDb25lR2VvbWV0cnk6IENvbmVHZW9tZXRyeSxcblx0Q29uZUJ1ZmZlckdlb21ldHJ5OiBDb25lQnVmZmVyR2VvbWV0cnksXG5cdEN5bGluZGVyR2VvbWV0cnk6IEN5bGluZGVyR2VvbWV0cnksXG5cdEN5bGluZGVyQnVmZmVyR2VvbWV0cnk6IEN5bGluZGVyQnVmZmVyR2VvbWV0cnksXG5cdENpcmNsZUdlb21ldHJ5OiBDaXJjbGVHZW9tZXRyeSxcblx0Q2lyY2xlQnVmZmVyR2VvbWV0cnk6IENpcmNsZUJ1ZmZlckdlb21ldHJ5LFxuXHRCb3hHZW9tZXRyeTogQm94R2VvbWV0cnksXG5cdEJveEJ1ZmZlckdlb21ldHJ5OiBCb3hCdWZmZXJHZW9tZXRyeVxufSk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8VEhSRUUuQ29sb3I+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gU2hhZG93TWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTaGFkb3dNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcblNoYWRvd01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNoYWRvd01hdGVyaWFsO1xuXG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuaXNTaGFkb3dNYXRlcmlhbCA9IHRydWU7XG5cblNoYWRvd01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFJhd1NoYWRlck1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdFNoYWRlck1hdGVyaWFsLmNhbGwoIHRoaXMsIHBhcmFtZXRlcnMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUmF3U2hhZGVyTWF0ZXJpYWwnO1xuXG59XG5cblJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSApO1xuUmF3U2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmF3U2hhZGVyTWF0ZXJpYWw7XG5cblJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5pc1Jhd1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICByb3VnaG5lc3M6IDxmbG9hdD4sXG4gKiAgbWV0YWxuZXNzOiA8ZmxvYXQ+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgZW1pc3NpdmU6IDxoZXg+LFxuICogIGVtaXNzaXZlSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKiAgZW1pc3NpdmVNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LFxuICpcbiAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICByb3VnaG5lc3NNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIG1ldGFsbmVzc01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSxcbiAqICBlbnZNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoU3RhbmRhcmRNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoU3RhbmRhcmRNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXHR0aGlzLnJvdWdobmVzcyA9IDAuNTtcblx0dGhpcy5tZXRhbG5lc3MgPSAwLjU7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMuYW9NYXAgPSBudWxsO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSAxLjA7XG5cdHRoaXMuZW1pc3NpdmVNYXAgPSBudWxsO1xuXG5cdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHR0aGlzLnJvdWdobmVzc01hcCA9IG51bGw7XG5cblx0dGhpcy5tZXRhbG5lc3NNYXAgPSBudWxsO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuZW52TWFwID0gbnVsbDtcblx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoU3RhbmRhcmRNYXRlcmlhbDtcblxuTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHR0aGlzLnJvdWdobmVzcyA9IHNvdXJjZS5yb3VnaG5lc3M7XG5cdHRoaXMubWV0YWxuZXNzID0gc291cmNlLm1ldGFsbmVzcztcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IHNvdXJjZS5saWdodE1hcEludGVuc2l0eTtcblxuXHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuZW1pc3NpdmUuY29weSggc291cmNlLmVtaXNzaXZlICk7XG5cdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0dGhpcy5yb3VnaG5lc3NNYXAgPSBzb3VyY2Uucm91Z2huZXNzTWFwO1xuXG5cdHRoaXMubWV0YWxuZXNzTWFwID0gc291cmNlLm1ldGFsbmVzc01hcDtcblxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcblx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSBzb3VyY2UuZW52TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gc291cmNlLnJlZnJhY3Rpb25SYXRpbztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoUGh5c2ljYWxNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNZXNoU3RhbmRhcmRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5kZWZpbmVzID0geyAnUEhZU0lDQUwnOiAnJyB9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoUGh5c2ljYWxNYXRlcmlhbCc7XG5cblx0dGhpcy5yZWZsZWN0aXZpdHkgPSAwLjU7IC8vIG1hcHMgdG8gRjAgPSAwLjA0XG5cblx0dGhpcy5jbGVhckNvYXQgPSAwLjA7XG5cdHRoaXMuY2xlYXJDb2F0Um91Z2huZXNzID0gMC4wO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoUGh5c2ljYWxNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoUGh5c2ljYWxNYXRlcmlhbDtcblxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoUGh5c2ljYWxNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1BIWVNJQ0FMJzogJycgfTtcblxuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cblx0dGhpcy5jbGVhckNvYXQgPSBzb3VyY2UuY2xlYXJDb2F0O1xuXHR0aGlzLmNsZWFyQ29hdFJvdWdobmVzcyA9IHNvdXJjZS5jbGVhckNvYXRSb3VnaG5lc3M7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgc3BlY3VsYXI6IDxoZXg+LFxuICogIHNoaW5pbmVzczogPGZsb2F0PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGVtaXNzaXZlOiA8aGV4PixcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxuICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHksXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaFBob25nTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoUGhvbmdNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXHR0aGlzLnNwZWN1bGFyID0gbmV3IENvbG9yKCAweDExMTExMSApO1xuXHR0aGlzLnNoaW5pbmVzcyA9IDMwO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0dGhpcy5lbnZNYXAgPSBudWxsO1xuXHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hQaG9uZ01hdGVyaWFsO1xuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoUGhvbmdNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0dGhpcy5zcGVjdWxhci5jb3B5KCBzb3VyY2Uuc3BlY3VsYXIgKTtcblx0dGhpcy5zaGluaW5lc3MgPSBzb3VyY2Uuc2hpbmluZXNzO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgdGFrYWhpcm94IC8gaHR0cDovL2dpdGh1Yi5jb20vdGFrYWhpcm94XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBncmFkaWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKVxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hUb29uTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWVzaFBob25nTWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1RPT04nOiAnJyB9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoVG9vbk1hdGVyaWFsJztcblxuXHR0aGlzLmdyYWRpZW50TWFwID0gbnVsbDtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hUb29uTWF0ZXJpYWw7XG5cbk1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFRvb25NYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmdyYWRpZW50TWFwID0gc291cmNlLmdyYWRpZW50TWFwO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LFxuICpcbiAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD5cbiAqXG4gKiAgc2tpbm5pbmc6IDxib29sPixcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPixcbiAqICBtb3JwaE5vcm1hbHM6IDxib29sPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hOb3JtYWxNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ01lc2hOb3JtYWxNYXRlcmlhbCc7XG5cblx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHR0aGlzLmZvZyA9IGZhbHNlO1xuXHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoTm9ybWFsTWF0ZXJpYWw7XG5cbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGVtaXNzaXZlOiA8aGV4PixcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxuICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBzcGVjdWxhck1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSxcbiAqICBjb21iaW5lOiBUSFJFRS5NdWx0aXBseSxcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD4sXG4gKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoTGFtYmVydE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaExhbWJlcnRNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hMYW1iZXJ0TWF0ZXJpYWw7XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaExhbWJlcnRNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqXG4gKiAgbGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBzY2FsZTogPGZsb2F0PixcbiAqICBkYXNoU2l6ZTogPGZsb2F0PixcbiAqICBnYXBTaXplOiA8ZmxvYXQ+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTGluZURhc2hlZE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdExpbmVCYXNpY01hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZURhc2hlZE1hdGVyaWFsJztcblxuXHR0aGlzLnNjYWxlID0gMTtcblx0dGhpcy5kYXNoU2l6ZSA9IDM7XG5cdHRoaXMuZ2FwU2l6ZSA9IDE7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlICk7XG5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGluZURhc2hlZE1hdGVyaWFsO1xuXG5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmlzTGluZURhc2hlZE1hdGVyaWFsID0gdHJ1ZTtcblxuTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5zY2FsZSA9IHNvdXJjZS5zY2FsZTtcblx0dGhpcy5kYXNoU2l6ZSA9IHNvdXJjZS5kYXNoU2l6ZTtcblx0dGhpcy5nYXBTaXplID0gc291cmNlLmdhcFNpemU7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblxuXG52YXIgTWF0ZXJpYWxzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRTaGFkb3dNYXRlcmlhbDogU2hhZG93TWF0ZXJpYWwsXG5cdFNwcml0ZU1hdGVyaWFsOiBTcHJpdGVNYXRlcmlhbCxcblx0UmF3U2hhZGVyTWF0ZXJpYWw6IFJhd1NoYWRlck1hdGVyaWFsLFxuXHRTaGFkZXJNYXRlcmlhbDogU2hhZGVyTWF0ZXJpYWwsXG5cdFBvaW50c01hdGVyaWFsOiBQb2ludHNNYXRlcmlhbCxcblx0TWVzaFBoeXNpY2FsTWF0ZXJpYWw6IE1lc2hQaHlzaWNhbE1hdGVyaWFsLFxuXHRNZXNoU3RhbmRhcmRNYXRlcmlhbDogTWVzaFN0YW5kYXJkTWF0ZXJpYWwsXG5cdE1lc2hQaG9uZ01hdGVyaWFsOiBNZXNoUGhvbmdNYXRlcmlhbCxcblx0TWVzaFRvb25NYXRlcmlhbDogTWVzaFRvb25NYXRlcmlhbCxcblx0TWVzaE5vcm1hbE1hdGVyaWFsOiBNZXNoTm9ybWFsTWF0ZXJpYWwsXG5cdE1lc2hMYW1iZXJ0TWF0ZXJpYWw6IE1lc2hMYW1iZXJ0TWF0ZXJpYWwsXG5cdE1lc2hEZXB0aE1hdGVyaWFsOiBNZXNoRGVwdGhNYXRlcmlhbCxcblx0TWVzaERpc3RhbmNlTWF0ZXJpYWw6IE1lc2hEaXN0YW5jZU1hdGVyaWFsLFxuXHRNZXNoQmFzaWNNYXRlcmlhbDogTWVzaEJhc2ljTWF0ZXJpYWwsXG5cdExpbmVEYXNoZWRNYXRlcmlhbDogTGluZURhc2hlZE1hdGVyaWFsLFxuXHRMaW5lQmFzaWNNYXRlcmlhbDogTGluZUJhc2ljTWF0ZXJpYWwsXG5cdE1hdGVyaWFsOiBNYXRlcmlhbFxufSk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgQ2FjaGUgPSB7XG5cblx0ZW5hYmxlZDogZmFsc2UsXG5cblx0ZmlsZXM6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCBrZXksIGZpbGUgKSB7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ1RIUkVFLkNhY2hlJywgJ0FkZGluZyBrZXk6Jywga2V5ICk7XG5cblx0XHR0aGlzLmZpbGVzWyBrZXkgXSA9IGZpbGU7XG5cblx0fSxcblxuXHRnZXQ6IGZ1bmN0aW9uICgga2V5ICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5DYWNoZScsICdDaGVja2luZyBrZXk6Jywga2V5ICk7XG5cblx0XHRyZXR1cm4gdGhpcy5maWxlc1sga2V5IF07XG5cblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uICgga2V5ICkge1xuXG5cdFx0ZGVsZXRlIHRoaXMuZmlsZXNbIGtleSBdO1xuXG5cdH0sXG5cblx0Y2xlYXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuZmlsZXMgPSB7fTtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMb2FkaW5nTWFuYWdlciggb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0dmFyIGlzTG9hZGluZyA9IGZhbHNlO1xuXHR2YXIgaXRlbXNMb2FkZWQgPSAwO1xuXHR2YXIgaXRlbXNUb3RhbCA9IDA7XG5cdHZhciB1cmxNb2RpZmllciA9IHVuZGVmaW5lZDtcblxuXHR0aGlzLm9uU3RhcnQgPSB1bmRlZmluZWQ7XG5cdHRoaXMub25Mb2FkID0gb25Mb2FkO1xuXHR0aGlzLm9uUHJvZ3Jlc3MgPSBvblByb2dyZXNzO1xuXHR0aGlzLm9uRXJyb3IgPSBvbkVycm9yO1xuXG5cdHRoaXMuaXRlbVN0YXJ0ID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRpdGVtc1RvdGFsICsrO1xuXG5cdFx0aWYgKCBpc0xvYWRpbmcgPT09IGZhbHNlICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9uU3RhcnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5vblN0YXJ0KCB1cmwsIGl0ZW1zTG9hZGVkLCBpdGVtc1RvdGFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlzTG9hZGluZyA9IHRydWU7XG5cblx0fTtcblxuXHR0aGlzLml0ZW1FbmQgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdGl0ZW1zTG9hZGVkICsrO1xuXG5cdFx0aWYgKCBzY29wZS5vblByb2dyZXNzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm9uUHJvZ3Jlc3MoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTtcblxuXHRcdH1cblxuXHRcdGlmICggaXRlbXNMb2FkZWQgPT09IGl0ZW1zVG90YWwgKSB7XG5cblx0XHRcdGlzTG9hZGluZyA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9uTG9hZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLm9uTG9hZCgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fTtcblxuXHR0aGlzLml0ZW1FcnJvciA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0aWYgKCBzY29wZS5vbkVycm9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm9uRXJyb3IoIHVybCApO1xuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5yZXNvbHZlVVJMID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRpZiAoIHVybE1vZGlmaWVyICkge1xuXG5cdFx0XHRyZXR1cm4gdXJsTW9kaWZpZXIoIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVybDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0VVJMTW9kaWZpZXIgPSBmdW5jdGlvbiAoIHRyYW5zZm9ybSApIHtcblxuXHRcdHVybE1vZGlmaWVyID0gdHJhbnNmb3JtO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cbn1cblxudmFyIERlZmF1bHRMb2FkaW5nTWFuYWdlciA9IG5ldyBMb2FkaW5nTWFuYWdlcigpO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIGxvYWRpbmcgPSB7fTtcblxuZnVuY3Rpb24gRmlsZUxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxufVxuXG5PYmplY3QuYXNzaWduKCBGaWxlTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApO1xuXG5cdFx0aWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGNhY2hlZCApO1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIDAgKTtcblxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblxuXHRcdH1cblxuXHRcdC8vIENoZWNrIGlmIHJlcXVlc3QgaXMgZHVwbGljYXRlXG5cblx0XHRpZiAoIGxvYWRpbmdbIHVybCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxvYWRpbmdbIHVybCBdLnB1c2goIHtcblxuXHRcdFx0XHRvbkxvYWQ6IG9uTG9hZCxcblx0XHRcdFx0b25Qcm9ncmVzczogb25Qcm9ncmVzcyxcblx0XHRcdFx0b25FcnJvcjogb25FcnJvclxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBkYXRhOiBVUklcblx0XHR2YXIgZGF0YVVyaVJlZ2V4ID0gL15kYXRhOiguKj8pKDtiYXNlNjQpPywoLiopJC87XG5cdFx0dmFyIGRhdGFVcmlSZWdleFJlc3VsdCA9IHVybC5tYXRjaCggZGF0YVVyaVJlZ2V4ICk7XG5cblx0XHQvLyBTYWZhcmkgY2FuIG5vdCBoYW5kbGUgRGF0YSBVUklzIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Qgc28gcHJvY2VzcyBtYW51YWxseVxuXHRcdGlmICggZGF0YVVyaVJlZ2V4UmVzdWx0ICkge1xuXG5cdFx0XHR2YXIgbWltZVR5cGUgPSBkYXRhVXJpUmVnZXhSZXN1bHRbIDEgXTtcblx0XHRcdHZhciBpc0Jhc2U2NCA9ICEhIGRhdGFVcmlSZWdleFJlc3VsdFsgMiBdO1xuXHRcdFx0dmFyIGRhdGEgPSBkYXRhVXJpUmVnZXhSZXN1bHRbIDMgXTtcblxuXHRcdFx0ZGF0YSA9IHdpbmRvdy5kZWNvZGVVUklDb21wb25lbnQoIGRhdGEgKTtcblxuXHRcdFx0aWYgKCBpc0Jhc2U2NCApIGRhdGEgPSB3aW5kb3cuYXRvYiggZGF0YSApO1xuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdHZhciByZXNwb25zZTtcblx0XHRcdFx0dmFyIHJlc3BvbnNlVHlwZSA9ICggdGhpcy5yZXNwb25zZVR5cGUgfHwgJycgKS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRcdHN3aXRjaCAoIHJlc3BvbnNlVHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ2FycmF5YnVmZmVyJzpcblx0XHRcdFx0XHRjYXNlICdibG9iJzpcblxuXHRcdFx0XHRcdFx0dmFyIHZpZXcgPSBuZXcgVWludDhBcnJheSggZGF0YS5sZW5ndGggKTtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmlld1sgaSBdID0gZGF0YS5jaGFyQ29kZUF0KCBpICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCByZXNwb25zZVR5cGUgPT09ICdibG9iJyApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IG5ldyBCbG9iKCBbIHZpZXcuYnVmZmVyIF0sIHsgdHlwZTogbWltZVR5cGUgfSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gdmlldy5idWZmZXI7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdkb2N1bWVudCc6XG5cblx0XHRcdFx0XHRcdHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIG1pbWVUeXBlICk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnanNvbic6XG5cblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gSlNPTi5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6IC8vICd0ZXh0JyBvciBvdGhlclxuXG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGRhdGE7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXYWl0IGZvciBuZXh0IGJyb3dzZXIgdGljayBsaWtlIHN0YW5kYXJkIFhNTEh0dHBSZXF1ZXN0IGV2ZW50IGRpc3BhdGNoaW5nIGRvZXNcblx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCByZXNwb25zZSApO1xuXG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0XHR9LCAwICk7XG5cblx0XHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0XHQvLyBXYWl0IGZvciBuZXh0IGJyb3dzZXIgdGljayBsaWtlIHN0YW5kYXJkIFhNTEh0dHBSZXF1ZXN0IGV2ZW50IGRpc3BhdGNoaW5nIGRvZXNcblx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoIGVycm9yICk7XG5cblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdFx0XHR9LCAwICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEluaXRpYWxpc2UgYXJyYXkgZm9yIGR1cGxpY2F0ZSByZXF1ZXN0c1xuXG5cdFx0XHRsb2FkaW5nWyB1cmwgXSA9IFtdO1xuXG5cdFx0XHRsb2FkaW5nWyB1cmwgXS5wdXNoKCB7XG5cblx0XHRcdFx0b25Mb2FkOiBvbkxvYWQsXG5cdFx0XHRcdG9uUHJvZ3Jlc3M6IG9uUHJvZ3Jlc3MsXG5cdFx0XHRcdG9uRXJyb3I6IG9uRXJyb3JcblxuXHRcdFx0fSApO1xuXG5cdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG5cdFx0XHRyZXF1ZXN0Lm9wZW4oICdHRVQnLCB1cmwsIHRydWUgKTtcblxuXHRcdFx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cblx0XHRcdFx0dmFyIHJlc3BvbnNlID0gdGhpcy5yZXNwb25zZTtcblxuXHRcdFx0XHRDYWNoZS5hZGQoIHVybCwgcmVzcG9uc2UgKTtcblxuXHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0ZGVsZXRlIGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGlmICggdGhpcy5zdGF0dXMgPT09IDIwMCB8fCB0aGlzLnN0YXR1cyA9PT0gMCApIHtcblxuXHRcdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgcmV0dXJuIEhUVFAgU3RhdHVzIDAgd2hlbiB1c2luZyBub24taHR0cCBwcm90b2NvbFxuXHRcdFx0XHRcdC8vIGUuZy4gJ2ZpbGU6Ly8nIG9yICdkYXRhOi8vJy4gSGFuZGxlIGFzIHN1Y2Nlc3MuXG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuc3RhdHVzID09PSAwICkgY29uc29sZS53YXJuKCAnVEhSRUUuRmlsZUxvYWRlcjogSFRUUCBTdGF0dXMgMCByZWNlaXZlZC4nICk7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25Mb2FkICkgY2FsbGJhY2sub25Mb2FkKCByZXNwb25zZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uRXJyb3IgKSBjYWxsYmFjay5vbkVycm9yKCBldmVudCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBmYWxzZSApO1xuXG5cdFx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoICdwcm9ncmVzcycsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cblx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uUHJvZ3Jlc3MgKSBjYWxsYmFjay5vblByb2dyZXNzKCBldmVudCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgZmFsc2UgKTtcblxuXHRcdFx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0XHRcdHZhciBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25FcnJvciApIGNhbGxiYWNrLm9uRXJyb3IoIGV2ZW50ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdFx0fSwgZmFsc2UgKTtcblxuXHRcdFx0aWYgKCB0aGlzLnJlc3BvbnNlVHlwZSAhPT0gdW5kZWZpbmVkICkgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSB0aGlzLnJlc3BvbnNlVHlwZTtcblx0XHRcdGlmICggdGhpcy53aXRoQ3JlZGVudGlhbHMgIT09IHVuZGVmaW5lZCApIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdGhpcy53aXRoQ3JlZGVudGlhbHM7XG5cblx0XHRcdGlmICggcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlICkgcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlKCB0aGlzLm1pbWVUeXBlICE9PSB1bmRlZmluZWQgPyB0aGlzLm1pbWVUeXBlIDogJ3RleHQvcGxhaW4nICk7XG5cblx0XHRcdGZvciAoIHZhciBoZWFkZXIgaW4gdGhpcy5yZXF1ZXN0SGVhZGVyICkge1xuXG5cdFx0XHRcdHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlciggaGVhZGVyLCB0aGlzLnJlcXVlc3RIZWFkZXJbIGhlYWRlciBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmVxdWVzdC5zZW5kKCBudWxsICk7XG5cblx0XHR9XG5cblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRyZXR1cm4gcmVxdWVzdDtcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFJlc3BvbnNlVHlwZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucmVzcG9uc2VUeXBlID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRXaXRoQ3JlZGVudGlhbHM6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLndpdGhDcmVkZW50aWFscyA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0TWltZVR5cGU6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLm1pbWVUeXBlID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5yZXF1ZXN0SGVhZGVyID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqXG4gKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGJsb2NrIGJhc2VkIHRleHR1cmVzIGxvYWRlciAoZGRzLCBwdnIsIC4uLilcbiAqL1xuXG5mdW5jdGlvbiBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblxuXHQvLyBvdmVycmlkZSBpbiBzdWIgY2xhc3Nlc1xuXHR0aGlzLl9wYXJzZXIgPSBudWxsO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENvbXByZXNzZWRUZXh0dXJlTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGltYWdlcyA9IFtdO1xuXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgQ29tcHJlc3NlZFRleHR1cmUoKTtcblx0XHR0ZXh0dXJlLmltYWdlID0gaW1hZ2VzO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuXG5cdFx0ZnVuY3Rpb24gbG9hZFRleHR1cmUoIGkgKSB7XG5cblx0XHRcdGxvYWRlci5sb2FkKCB1cmxbIGkgXSwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRcdFx0dmFyIHRleERhdGFzID0gc2NvcGUuX3BhcnNlciggYnVmZmVyLCB0cnVlICk7XG5cblx0XHRcdFx0aW1hZ2VzWyBpIF0gPSB7XG5cdFx0XHRcdFx0d2lkdGg6IHRleERhdGFzLndpZHRoLFxuXHRcdFx0XHRcdGhlaWdodDogdGV4RGF0YXMuaGVpZ2h0LFxuXHRcdFx0XHRcdGZvcm1hdDogdGV4RGF0YXMuZm9ybWF0LFxuXHRcdFx0XHRcdG1pcG1hcHM6IHRleERhdGFzLm1pcG1hcHNcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRsb2FkZWQgKz0gMTtcblxuXHRcdFx0XHRpZiAoIGxvYWRlZCA9PT0gNiApIHtcblxuXHRcdFx0XHRcdGlmICggdGV4RGF0YXMubWlwbWFwQ291bnQgPT09IDEgKVxuXHRcdFx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcblx0XHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHVybCApICkge1xuXG5cdFx0XHR2YXIgbG9hZGVkID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHVybC5sZW5ndGg7IGkgPCBpbDsgKysgaSApIHtcblxuXHRcdFx0XHRsb2FkVGV4dHVyZSggaSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBjb21wcmVzc2VkIGN1YmVtYXAgdGV4dHVyZSBzdG9yZWQgaW4gYSBzaW5nbGUgRERTIGZpbGVcblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRcdFx0dmFyIHRleERhdGFzID0gc2NvcGUuX3BhcnNlciggYnVmZmVyLCB0cnVlICk7XG5cblx0XHRcdFx0aWYgKCB0ZXhEYXRhcy5pc0N1YmVtYXAgKSB7XG5cblx0XHRcdFx0XHR2YXIgZmFjZXMgPSB0ZXhEYXRhcy5taXBtYXBzLmxlbmd0aCAvIHRleERhdGFzLm1pcG1hcENvdW50O1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGYgPSAwOyBmIDwgZmFjZXM7IGYgKysgKSB7XG5cblx0XHRcdFx0XHRcdGltYWdlc1sgZiBdID0geyBtaXBtYXBzOiBbXSB9O1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0ZXhEYXRhcy5taXBtYXBDb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS5taXBtYXBzLnB1c2goIHRleERhdGFzLm1pcG1hcHNbIGYgKiB0ZXhEYXRhcy5taXBtYXBDb3VudCArIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS5mb3JtYXQgPSB0ZXhEYXRhcy5mb3JtYXQ7XG5cdFx0XHRcdFx0XHRcdGltYWdlc1sgZiBdLndpZHRoID0gdGV4RGF0YXMud2lkdGg7XG5cdFx0XHRcdFx0XHRcdGltYWdlc1sgZiBdLmhlaWdodCA9IHRleERhdGFzLmhlaWdodDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlLndpZHRoID0gdGV4RGF0YXMud2lkdGg7XG5cdFx0XHRcdFx0dGV4dHVyZS5pbWFnZS5oZWlnaHQgPSB0ZXhEYXRhcy5oZWlnaHQ7XG5cdFx0XHRcdFx0dGV4dHVyZS5taXBtYXBzID0gdGV4RGF0YXMubWlwbWFwcztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB0ZXhEYXRhcy5taXBtYXBDb3VudCA9PT0gMSApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcblx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUgKTtcblxuXHRcdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBOaWtvcyBNLiAvIGh0dHBzOi8vZ2l0aHViLmNvbS9mb28xMjMvXG4gKlxuICogQWJzdHJhY3QgQmFzZSBjbGFzcyB0byBsb2FkIGdlbmVyaWMgYmluYXJ5IHRleHR1cmVzIGZvcm1hdHMgKHJnYmUsIGhkciwgLi4uKVxuICovXG5cbmZ1bmN0aW9uIERhdGFUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG5cdC8vIG92ZXJyaWRlIGluIHN1YiBjbGFzc2VzXG5cdHRoaXMuX3BhcnNlciA9IG51bGw7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggRGF0YVRleHR1cmVMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSgpO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0dmFyIHRleERhdGEgPSBzY29wZS5fcGFyc2VyKCBidWZmZXIgKTtcblxuXHRcdFx0aWYgKCAhIHRleERhdGEgKSByZXR1cm47XG5cblx0XHRcdGlmICggdW5kZWZpbmVkICE9PSB0ZXhEYXRhLmltYWdlICkge1xuXG5cdFx0XHRcdHRleHR1cmUuaW1hZ2UgPSB0ZXhEYXRhLmltYWdlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB1bmRlZmluZWQgIT09IHRleERhdGEuZGF0YSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLndpZHRoID0gdGV4RGF0YS53aWR0aDtcblx0XHRcdFx0dGV4dHVyZS5pbWFnZS5oZWlnaHQgPSB0ZXhEYXRhLmhlaWdodDtcblx0XHRcdFx0dGV4dHVyZS5pbWFnZS5kYXRhID0gdGV4RGF0YS5kYXRhO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmUud3JhcFMgPSB1bmRlZmluZWQgIT09IHRleERhdGEud3JhcFMgPyB0ZXhEYXRhLndyYXBTIDogQ2xhbXBUb0VkZ2VXcmFwcGluZztcblx0XHRcdHRleHR1cmUud3JhcFQgPSB1bmRlZmluZWQgIT09IHRleERhdGEud3JhcFQgPyB0ZXhEYXRhLndyYXBUIDogQ2xhbXBUb0VkZ2VXcmFwcGluZztcblxuXHRcdFx0dGV4dHVyZS5tYWdGaWx0ZXIgPSB1bmRlZmluZWQgIT09IHRleERhdGEubWFnRmlsdGVyID8gdGV4RGF0YS5tYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IHVuZGVmaW5lZCAhPT0gdGV4RGF0YS5taW5GaWx0ZXIgPyB0ZXhEYXRhLm1pbkZpbHRlciA6IExpbmVhck1pcE1hcExpbmVhckZpbHRlcjtcblxuXHRcdFx0dGV4dHVyZS5hbmlzb3Ryb3B5ID0gdW5kZWZpbmVkICE9PSB0ZXhEYXRhLmFuaXNvdHJvcHkgPyB0ZXhEYXRhLmFuaXNvdHJvcHkgOiAxO1xuXG5cdFx0XHRpZiAoIHVuZGVmaW5lZCAhPT0gdGV4RGF0YS5mb3JtYXQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSB0ZXhEYXRhLmZvcm1hdDtcblxuXHRcdFx0fVxuXHRcdFx0aWYgKCB1bmRlZmluZWQgIT09IHRleERhdGEudHlwZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSB0ZXhEYXRhLnR5cGU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1bmRlZmluZWQgIT09IHRleERhdGEubWlwbWFwcyApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhLm1pcG1hcHM7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAxID09PSB0ZXhEYXRhLm1pcG1hcENvdW50ICkge1xuXG5cdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSwgdGV4RGF0YSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cblxuZnVuY3Rpb24gSW1hZ2VMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggSW1hZ2VMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0Y3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApO1xuXG5cdFx0aWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGNhY2hlZCApO1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIDAgKTtcblxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblxuXHRcdH1cblxuXHRcdHZhciBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnaW1nJyApO1xuXG5cdFx0ZnVuY3Rpb24gb25JbWFnZUxvYWQoKSB7XG5cblx0XHRcdGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgb25JbWFnZUxvYWQsIGZhbHNlICk7XG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7XG5cblx0XHRcdENhY2hlLmFkZCggdXJsLCB0aGlzICk7XG5cblx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0aGlzICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbkltYWdlRXJyb3IoIGV2ZW50ICkge1xuXG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApO1xuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSApO1xuXG5cdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBldmVudCApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBvbkltYWdlTG9hZCwgZmFsc2UgKTtcblx0XHRpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7XG5cblx0XHRpZiAoIHVybC5zdWJzdHIoIDAsIDUgKSAhPT0gJ2RhdGE6JyApIHtcblxuXHRcdFx0aWYgKCB0aGlzLmNyb3NzT3JpZ2luICE9PSB1bmRlZmluZWQgKSBpbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuY3Jvc3NPcmlnaW47XG5cblx0XHR9XG5cblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRpbWFnZS5zcmMgPSB1cmw7XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fSxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cblxuZnVuY3Rpb24gQ3ViZVRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQ3ViZVRleHR1cmVMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0Y3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJscywgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTtcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblxuXHRcdHZhciBsb2FkZWQgPSAwO1xuXG5cdFx0ZnVuY3Rpb24gbG9hZFRleHR1cmUoIGkgKSB7XG5cblx0XHRcdGxvYWRlci5sb2FkKCB1cmxzWyBpIF0sIGZ1bmN0aW9uICggaW1hZ2UgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5pbWFnZXNbIGkgXSA9IGltYWdlO1xuXG5cdFx0XHRcdGxvYWRlZCArKztcblxuXHRcdFx0XHRpZiAoIGxvYWRlZCA9PT0gNiApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIHVuZGVmaW5lZCwgb25FcnJvciApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdGxvYWRUZXh0dXJlKCBpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9LFxuXG5cdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0UGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFRleHR1cmVMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0Y3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGltYWdlICkge1xuXG5cdFx0XHR0ZXh0dXJlLmltYWdlID0gaW1hZ2U7XG5cblx0XHRcdC8vIEpQRUdzIGNhbid0IGhhdmUgYW4gYWxwaGEgY2hhbm5lbCwgc28gbWVtb3J5IGNhbiBiZSBzYXZlZCBieSBzdG9yaW5nIHRoZW0gYXMgUkdCLlxuXHRcdFx0dmFyIGlzSlBFRyA9IHVybC5zZWFyY2goIC9cXC4oanBnfGpwZWcpJC8gKSA+IDAgfHwgdXJsLnNlYXJjaCggL15kYXRhXFw6aW1hZ2VcXC9qcGVnLyApID09PSAwO1xuXG5cdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IGlzSlBFRyA/IFJHQkZvcm1hdCA6IFJHQkFGb3JtYXQ7XG5cdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRvbkxvYWQoIHRleHR1cmUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fSxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhdGggPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBFeHRlbnNpYmxlIGN1cnZlIG9iamVjdFxuICpcbiAqIFNvbWUgY29tbW9uIG9mIGN1cnZlIG1ldGhvZHM6XG4gKiAuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50KCB0IClcbiAqIC5nZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApLCAuZ2V0VGFuZ2VudEF0KCB1IClcbiAqIC5nZXRQb2ludHMoKSwgLmdldFNwYWNlZFBvaW50cygpXG4gKiAuZ2V0TGVuZ3RoKClcbiAqIC51cGRhdGVBcmNMZW5ndGhzKClcbiAqXG4gKiBUaGlzIGZvbGxvd2luZyBjdXJ2ZXMgaW5oZXJpdCBmcm9tIFRIUkVFLkN1cnZlOlxuICpcbiAqIC0tIDJEIGN1cnZlcyAtLVxuICogVEhSRUUuQXJjQ3VydmVcbiAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmVcbiAqIFRIUkVFLkVsbGlwc2VDdXJ2ZVxuICogVEhSRUUuTGluZUN1cnZlXG4gKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZVxuICogVEhSRUUuU3BsaW5lQ3VydmVcbiAqXG4gKiAtLSAzRCBjdXJ2ZXMgLS1cbiAqIFRIUkVFLkNhdG11bGxSb21DdXJ2ZTNcbiAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmUzXG4gKiBUSFJFRS5MaW5lQ3VydmUzXG4gKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZTNcbiAqXG4gKiBBIHNlcmllcyBvZiBjdXJ2ZXMgY2FuIGJlIHJlcHJlc2VudGVkIGFzIGEgVEhSRUUuQ3VydmVQYXRoLlxuICpcbiAqKi9cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlx0QWJzdHJhY3QgQ3VydmUgYmFzZSBjbGFzc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBDdXJ2ZSgpIHtcblxuXHR0aGlzLnR5cGUgPSAnQ3VydmUnO1xuXG5cdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0gMjAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEN1cnZlLnByb3RvdHlwZSwge1xuXG5cdC8vIFZpcnR1YWwgYmFzZSBjbGFzcyBtZXRob2QgdG8gb3ZlcndyaXRlIGFuZCBpbXBsZW1lbnQgaW4gc3ViY2xhc3Nlc1xuXHQvL1x0LSB0IFswIC4uIDFdXG5cblx0Z2V0UG9pbnQ6IGZ1bmN0aW9uICggLyogdCwgb3B0aW9uYWxUYXJnZXQgKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLmdldFBvaW50KCkgbm90IGltcGxlbWVudGVkLicgKTtcblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9LFxuXG5cdC8vIEdldCBwb2ludCBhdCByZWxhdGl2ZSBwb3NpdGlvbiBpbiBjdXJ2ZSBhY2NvcmRpbmcgdG8gYXJjIGxlbmd0aFxuXHQvLyAtIHUgWzAgLi4gMV1cblxuXHRnZXRQb2ludEF0OiBmdW5jdGlvbiAoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0dmFyIHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fSxcblxuXHQvLyBHZXQgc2VxdWVuY2Ugb2YgcG9pbnRzIHVzaW5nIGdldFBvaW50KCB0IClcblxuXHRnZXRQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IDU7XG5cblx0XHR2YXIgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgZCA9IDA7IGQgPD0gZGl2aXNpb25zOyBkICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludCggZCAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH0sXG5cblx0Ly8gR2V0IHNlcXVlbmNlIG9mIHBvaW50cyB1c2luZyBnZXRQb2ludEF0KCB1IClcblxuXHRnZXRTcGFjZWRQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IDU7XG5cblx0XHR2YXIgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgZCA9IDA7IGQgPD0gZGl2aXNpb25zOyBkICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludEF0KCBkIC8gZGl2aXNpb25zICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fSxcblxuXHQvLyBHZXQgdG90YWwgY3VydmUgYXJjIGxlbmd0aFxuXG5cdGdldExlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGxlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcblx0XHRyZXR1cm4gbGVuZ3Roc1sgbGVuZ3Rocy5sZW5ndGggLSAxIF07XG5cblx0fSxcblxuXHQvLyBHZXQgbGlzdCBvZiBjdW11bGF0aXZlIHNlZ21lbnQgbGVuZ3Roc1xuXG5cdGdldExlbmd0aHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdFx0aWYgKCB0aGlzLmNhY2hlQXJjTGVuZ3RocyAmJlxuXHRcdFx0KCB0aGlzLmNhY2hlQXJjTGVuZ3Rocy5sZW5ndGggPT09IGRpdmlzaW9ucyArIDEgKSAmJlxuXHRcdFx0ISB0aGlzLm5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZUFyY0xlbmd0aHM7XG5cblx0XHR9XG5cblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHR2YXIgY2FjaGUgPSBbXTtcblx0XHR2YXIgY3VycmVudCwgbGFzdCA9IHRoaXMuZ2V0UG9pbnQoIDAgKTtcblx0XHR2YXIgcCwgc3VtID0gMDtcblxuXHRcdGNhY2hlLnB1c2goIDAgKTtcblxuXHRcdGZvciAoIHAgPSAxOyBwIDw9IGRpdmlzaW9uczsgcCArKyApIHtcblxuXHRcdFx0Y3VycmVudCA9IHRoaXMuZ2V0UG9pbnQoIHAgLyBkaXZpc2lvbnMgKTtcblx0XHRcdHN1bSArPSBjdXJyZW50LmRpc3RhbmNlVG8oIGxhc3QgKTtcblx0XHRcdGNhY2hlLnB1c2goIHN1bSApO1xuXHRcdFx0bGFzdCA9IGN1cnJlbnQ7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNhY2hlQXJjTGVuZ3RocyA9IGNhY2hlO1xuXG5cdFx0cmV0dXJuIGNhY2hlOyAvLyB7IHN1bXM6IGNhY2hlLCBzdW06IHN1bSB9OyBTdW0gaXMgaW4gdGhlIGxhc3QgZWxlbWVudC5cblxuXHR9LFxuXG5cdHVwZGF0ZUFyY0xlbmd0aHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMuZ2V0TGVuZ3RocygpO1xuXG5cdH0sXG5cblx0Ly8gR2l2ZW4gdSAoIDAgLi4gMSApLCBnZXQgYSB0IHRvIGZpbmQgcC4gVGhpcyBnaXZlcyB5b3UgcG9pbnRzIHdoaWNoIGFyZSBlcXVpZGlzdGFudFxuXG5cdGdldFV0b1RtYXBwaW5nOiBmdW5jdGlvbiAoIHUsIGRpc3RhbmNlICkge1xuXG5cdFx0dmFyIGFyY0xlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcblxuXHRcdHZhciBpID0gMCwgaWwgPSBhcmNMZW5ndGhzLmxlbmd0aDtcblxuXHRcdHZhciB0YXJnZXRBcmNMZW5ndGg7IC8vIFRoZSB0YXJnZXRlZCB1IGRpc3RhbmNlIHZhbHVlIHRvIGdldFxuXG5cdFx0aWYgKCBkaXN0YW5jZSApIHtcblxuXHRcdFx0dGFyZ2V0QXJjTGVuZ3RoID0gZGlzdGFuY2U7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0YXJnZXRBcmNMZW5ndGggPSB1ICogYXJjTGVuZ3Roc1sgaWwgLSAxIF07XG5cblx0XHR9XG5cblx0XHQvLyBiaW5hcnkgc2VhcmNoIGZvciB0aGUgaW5kZXggd2l0aCBsYXJnZXN0IHZhbHVlIHNtYWxsZXIgdGhhbiB0YXJnZXQgdSBkaXN0YW5jZVxuXG5cdFx0dmFyIGxvdyA9IDAsIGhpZ2ggPSBpbCAtIDEsIGNvbXBhcmlzb247XG5cblx0XHR3aGlsZSAoIGxvdyA8PSBoaWdoICkge1xuXG5cdFx0XHRpID0gTWF0aC5mbG9vciggbG93ICsgKCBoaWdoIC0gbG93ICkgLyAyICk7IC8vIGxlc3MgbGlrZWx5IHRvIG92ZXJmbG93LCB0aG91Z2ggcHJvYmFibHkgbm90IGlzc3VlIGhlcmUsIEpTIGRvZXNuJ3QgcmVhbGx5IGhhdmUgaW50ZWdlcnMsIGFsbCBudW1iZXJzIGFyZSBmbG9hdHNcblxuXHRcdFx0Y29tcGFyaXNvbiA9IGFyY0xlbmd0aHNbIGkgXSAtIHRhcmdldEFyY0xlbmd0aDtcblxuXHRcdFx0aWYgKCBjb21wYXJpc29uIDwgMCApIHtcblxuXHRcdFx0XHRsb3cgPSBpICsgMTtcblxuXHRcdFx0fSBlbHNlIGlmICggY29tcGFyaXNvbiA+IDAgKSB7XG5cblx0XHRcdFx0aGlnaCA9IGkgLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGhpZ2ggPSBpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHQvLyBET05FXG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGkgPSBoaWdoO1xuXG5cdFx0aWYgKCBhcmNMZW5ndGhzWyBpIF0gPT09IHRhcmdldEFyY0xlbmd0aCApIHtcblxuXHRcdFx0cmV0dXJuIGkgLyAoIGlsIC0gMSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gd2UgY291bGQgZ2V0IGZpbmVyIGdyYWluIGF0IGxlbmd0aHMsIG9yIHVzZSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBwb2ludHNcblxuXHRcdHZhciBsZW5ndGhCZWZvcmUgPSBhcmNMZW5ndGhzWyBpIF07XG5cdFx0dmFyIGxlbmd0aEFmdGVyID0gYXJjTGVuZ3Roc1sgaSArIDEgXTtcblxuXHRcdHZhciBzZWdtZW50TGVuZ3RoID0gbGVuZ3RoQWZ0ZXIgLSBsZW5ndGhCZWZvcmU7XG5cblx0XHQvLyBkZXRlcm1pbmUgd2hlcmUgd2UgYXJlIGJldHdlZW4gdGhlICdiZWZvcmUnIGFuZCAnYWZ0ZXInIHBvaW50c1xuXG5cdFx0dmFyIHNlZ21lbnRGcmFjdGlvbiA9ICggdGFyZ2V0QXJjTGVuZ3RoIC0gbGVuZ3RoQmVmb3JlICkgLyBzZWdtZW50TGVuZ3RoO1xuXG5cdFx0Ly8gYWRkIHRoYXQgZnJhY3Rpb25hbCBhbW91bnQgdG8gdFxuXG5cdFx0dmFyIHQgPSAoIGkgKyBzZWdtZW50RnJhY3Rpb24gKSAvICggaWwgLSAxICk7XG5cblx0XHRyZXR1cm4gdDtcblxuXHR9LFxuXG5cdC8vIFJldHVybnMgYSB1bml0IHZlY3RvciB0YW5nZW50IGF0IHRcblx0Ly8gSW4gY2FzZSBhbnkgc3ViIGN1cnZlIGRvZXMgbm90IGltcGxlbWVudCBpdHMgdGFuZ2VudCBkZXJpdmF0aW9uLFxuXHQvLyAyIHBvaW50cyBhIHNtYWxsIGRlbHRhIGFwYXJ0IHdpbGwgYmUgdXNlZCB0byBmaW5kIGl0cyBncmFkaWVudFxuXHQvLyB3aGljaCBzZWVtcyB0byBnaXZlIGEgcmVhc29uYWJsZSBhcHByb3hpbWF0aW9uXG5cblx0Z2V0VGFuZ2VudDogZnVuY3Rpb24gKCB0ICkge1xuXG5cdFx0dmFyIGRlbHRhID0gMC4wMDAxO1xuXHRcdHZhciB0MSA9IHQgLSBkZWx0YTtcblx0XHR2YXIgdDIgPSB0ICsgZGVsdGE7XG5cblx0XHQvLyBDYXBwaW5nIGluIGNhc2Ugb2YgZGFuZ2VyXG5cblx0XHRpZiAoIHQxIDwgMCApIHQxID0gMDtcblx0XHRpZiAoIHQyID4gMSApIHQyID0gMTtcblxuXHRcdHZhciBwdDEgPSB0aGlzLmdldFBvaW50KCB0MSApO1xuXHRcdHZhciBwdDIgPSB0aGlzLmdldFBvaW50KCB0MiApO1xuXG5cdFx0dmFyIHZlYyA9IHB0Mi5jbG9uZSgpLnN1YiggcHQxICk7XG5cdFx0cmV0dXJuIHZlYy5ub3JtYWxpemUoKTtcblxuXHR9LFxuXG5cdGdldFRhbmdlbnRBdDogZnVuY3Rpb24gKCB1ICkge1xuXG5cdFx0dmFyIHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFuZ2VudCggdCApO1xuXG5cdH0sXG5cblx0Y29tcHV0ZUZyZW5ldEZyYW1lczogZnVuY3Rpb24gKCBzZWdtZW50cywgY2xvc2VkICkge1xuXG5cdFx0Ly8gc2VlIGh0dHA6Ly93d3cuY3MuaW5kaWFuYS5lZHUvcHViL3RlY2hyZXBvcnRzL1RSNDI1LnBkZlxuXG5cdFx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdGFuZ2VudHMgPSBbXTtcblx0XHR2YXIgbm9ybWFscyA9IFtdO1xuXHRcdHZhciBiaW5vcm1hbHMgPSBbXTtcblxuXHRcdHZhciB2ZWMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtYXQgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0dmFyIGksIHUsIHRoZXRhO1xuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgdGFuZ2VudCB2ZWN0b3JzIGZvciBlYWNoIHNlZ21lbnQgb24gdGhlIGN1cnZlXG5cblx0XHRmb3IgKCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0dSA9IGkgLyBzZWdtZW50cztcblxuXHRcdFx0dGFuZ2VudHNbIGkgXSA9IHRoaXMuZ2V0VGFuZ2VudEF0KCB1ICk7XG5cdFx0XHR0YW5nZW50c1sgaSBdLm5vcm1hbGl6ZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2VsZWN0IGFuIGluaXRpYWwgbm9ybWFsIHZlY3RvciBwZXJwZW5kaWN1bGFyIHRvIHRoZSBmaXJzdCB0YW5nZW50IHZlY3Rvcixcblx0XHQvLyBhbmQgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbWluaW11bSB0YW5nZW50IHh5eiBjb21wb25lbnRcblxuXHRcdG5vcm1hbHNbIDAgXSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Ymlub3JtYWxzWyAwIF0gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtaW4gPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXHRcdHZhciB0eCA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnggKTtcblx0XHR2YXIgdHkgPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS55ICk7XG5cdFx0dmFyIHR6ID0gTWF0aC5hYnMoIHRhbmdlbnRzWyAwIF0ueiApO1xuXG5cdFx0aWYgKCB0eCA8PSBtaW4gKSB7XG5cblx0XHRcdG1pbiA9IHR4O1xuXHRcdFx0bm9ybWFsLnNldCggMSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0eSA8PSBtaW4gKSB7XG5cblx0XHRcdG1pbiA9IHR5O1xuXHRcdFx0bm9ybWFsLnNldCggMCwgMSwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0eiA8PSBtaW4gKSB7XG5cblx0XHRcdG5vcm1hbC5zZXQoIDAsIDAsIDEgKTtcblxuXHRcdH1cblxuXHRcdHZlYy5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIG5vcm1hbCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0bm9ybWFsc1sgMCBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgdmVjICk7XG5cdFx0Ymlub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCBub3JtYWxzWyAwIF0gKTtcblxuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgc2xvd2x5LXZhcnlpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbCB2ZWN0b3JzIGZvciBlYWNoIHNlZ21lbnQgb24gdGhlIGN1cnZlXG5cblx0XHRmb3IgKCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0bm9ybWFsc1sgaSBdID0gbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHRiaW5vcm1hbHNbIGkgXSA9IGJpbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSAtIDEgXSwgdGFuZ2VudHNbIGkgXSApO1xuXG5cdFx0XHRpZiAoIHZlYy5sZW5ndGgoKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdHZlYy5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHR0aGV0YSA9IE1hdGguYWNvcyggX01hdGguY2xhbXAoIHRhbmdlbnRzWyBpIC0gMSBdLmRvdCggdGFuZ2VudHNbIGkgXSApLCAtIDEsIDEgKSApOyAvLyBjbGFtcCBmb3IgZmxvYXRpbmcgcHQgZXJyb3JzXG5cblx0XHRcdFx0bm9ybWFsc1sgaSBdLmFwcGx5TWF0cml4NCggbWF0Lm1ha2VSb3RhdGlvbkF4aXMoIHZlYywgdGhldGEgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJpbm9ybWFsc1sgaSBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgXSwgbm9ybWFsc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHQvLyBpZiB0aGUgY3VydmUgaXMgY2xvc2VkLCBwb3N0cHJvY2VzcyB0aGUgdmVjdG9ycyBzbyB0aGUgZmlyc3QgYW5kIGxhc3Qgbm9ybWFsIHZlY3RvcnMgYXJlIHRoZSBzYW1lXG5cblx0XHRpZiAoIGNsb3NlZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhldGEgPSBNYXRoLmFjb3MoIF9NYXRoLmNsYW1wKCBub3JtYWxzWyAwIF0uZG90KCBub3JtYWxzWyBzZWdtZW50cyBdICksIC0gMSwgMSApICk7XG5cdFx0XHR0aGV0YSAvPSBzZWdtZW50cztcblxuXHRcdFx0aWYgKCB0YW5nZW50c1sgMCBdLmRvdCggdmVjLmNyb3NzVmVjdG9ycyggbm9ybWFsc1sgMCBdLCBub3JtYWxzWyBzZWdtZW50cyBdICkgKSA+IDAgKSB7XG5cblx0XHRcdFx0dGhldGEgPSAtIHRoZXRhO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdC8vIHR3aXN0IGEgbGl0dGxlLi4uXG5cdFx0XHRcdG5vcm1hbHNbIGkgXS5hcHBseU1hdHJpeDQoIG1hdC5tYWtlUm90YXRpb25BeGlzKCB0YW5nZW50c1sgaSBdLCB0aGV0YSAqIGkgKSApO1xuXHRcdFx0XHRiaW5vcm1hbHNbIGkgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIF0sIG5vcm1hbHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dGFuZ2VudHM6IHRhbmdlbnRzLFxuXHRcdFx0bm9ybWFsczogbm9ybWFscyxcblx0XHRcdGJpbm9ybWFsczogYmlub3JtYWxzXG5cdFx0fTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0gc291cmNlLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ0N1cnZlJyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnQ3VydmUudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRkYXRhLmFyY0xlbmd0aERpdmlzaW9ucyA9IHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0ZnJvbUpTT046IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0ganNvbi5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuZnVuY3Rpb24gRWxsaXBzZUN1cnZlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0VsbGlwc2VDdXJ2ZSc7XG5cblx0dGhpcy5hWCA9IGFYIHx8IDA7XG5cdHRoaXMuYVkgPSBhWSB8fCAwO1xuXG5cdHRoaXMueFJhZGl1cyA9IHhSYWRpdXMgfHwgMTtcblx0dGhpcy55UmFkaXVzID0geVJhZGl1cyB8fCAxO1xuXG5cdHRoaXMuYVN0YXJ0QW5nbGUgPSBhU3RhcnRBbmdsZSB8fCAwO1xuXHR0aGlzLmFFbmRBbmdsZSA9IGFFbmRBbmdsZSB8fCAyICogTWF0aC5QSTtcblxuXHR0aGlzLmFDbG9ja3dpc2UgPSBhQ2xvY2t3aXNlIHx8IGZhbHNlO1xuXG5cdHRoaXMuYVJvdGF0aW9uID0gYVJvdGF0aW9uIHx8IDA7XG5cbn1cblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVsbGlwc2VDdXJ2ZTtcblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5pc0VsbGlwc2VDdXJ2ZSA9IHRydWU7XG5cbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7XG5cblx0dmFyIHR3b1BpID0gTWF0aC5QSSAqIDI7XG5cdHZhciBkZWx0YUFuZ2xlID0gdGhpcy5hRW5kQW5nbGUgLSB0aGlzLmFTdGFydEFuZ2xlO1xuXHR2YXIgc2FtZVBvaW50cyA9IE1hdGguYWJzKCBkZWx0YUFuZ2xlICkgPCBOdW1iZXIuRVBTSUxPTjtcblxuXHQvLyBlbnN1cmVzIHRoYXQgZGVsdGFBbmdsZSBpcyAwIC4uIDIgUElcblx0d2hpbGUgKCBkZWx0YUFuZ2xlIDwgMCApIGRlbHRhQW5nbGUgKz0gdHdvUGk7XG5cdHdoaWxlICggZGVsdGFBbmdsZSA+IHR3b1BpICkgZGVsdGFBbmdsZSAtPSB0d29QaTtcblxuXHRpZiAoIGRlbHRhQW5nbGUgPCBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdGlmICggc2FtZVBvaW50cyApIHtcblxuXHRcdFx0ZGVsdGFBbmdsZSA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkZWx0YUFuZ2xlID0gdHdvUGk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGlmICggdGhpcy5hQ2xvY2t3aXNlID09PSB0cnVlICYmICEgc2FtZVBvaW50cyApIHtcblxuXHRcdGlmICggZGVsdGFBbmdsZSA9PT0gdHdvUGkgKSB7XG5cblx0XHRcdGRlbHRhQW5nbGUgPSAtIHR3b1BpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGVsdGFBbmdsZSA9IGRlbHRhQW5nbGUgLSB0d29QaTtcblxuXHRcdH1cblxuXHR9XG5cblx0dmFyIGFuZ2xlID0gdGhpcy5hU3RhcnRBbmdsZSArIHQgKiBkZWx0YUFuZ2xlO1xuXHR2YXIgeCA9IHRoaXMuYVggKyB0aGlzLnhSYWRpdXMgKiBNYXRoLmNvcyggYW5nbGUgKTtcblx0dmFyIHkgPSB0aGlzLmFZICsgdGhpcy55UmFkaXVzICogTWF0aC5zaW4oIGFuZ2xlICk7XG5cblx0aWYgKCB0aGlzLmFSb3RhdGlvbiAhPT0gMCApIHtcblxuXHRcdHZhciBjb3MgPSBNYXRoLmNvcyggdGhpcy5hUm90YXRpb24gKTtcblx0XHR2YXIgc2luID0gTWF0aC5zaW4oIHRoaXMuYVJvdGF0aW9uICk7XG5cblx0XHR2YXIgdHggPSB4IC0gdGhpcy5hWDtcblx0XHR2YXIgdHkgPSB5IC0gdGhpcy5hWTtcblxuXHRcdC8vIFJvdGF0ZSB0aGUgcG9pbnQgYWJvdXQgdGhlIGNlbnRlciBvZiB0aGUgZWxsaXBzZS5cblx0XHR4ID0gdHggKiBjb3MgLSB0eSAqIHNpbiArIHRoaXMuYVg7XG5cdFx0eSA9IHR4ICogc2luICsgdHkgKiBjb3MgKyB0aGlzLmFZO1xuXG5cdH1cblxuXHRyZXR1cm4gcG9pbnQuc2V0KCB4LCB5ICk7XG5cbn07XG5cbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuYVggPSBzb3VyY2UuYVg7XG5cdHRoaXMuYVkgPSBzb3VyY2UuYVk7XG5cblx0dGhpcy54UmFkaXVzID0gc291cmNlLnhSYWRpdXM7XG5cdHRoaXMueVJhZGl1cyA9IHNvdXJjZS55UmFkaXVzO1xuXG5cdHRoaXMuYVN0YXJ0QW5nbGUgPSBzb3VyY2UuYVN0YXJ0QW5nbGU7XG5cdHRoaXMuYUVuZEFuZ2xlID0gc291cmNlLmFFbmRBbmdsZTtcblxuXHR0aGlzLmFDbG9ja3dpc2UgPSBzb3VyY2UuYUNsb2Nrd2lzZTtcblxuXHR0aGlzLmFSb3RhdGlvbiA9IHNvdXJjZS5hUm90YXRpb247XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLmFYID0gdGhpcy5hWDtcblx0ZGF0YS5hWSA9IHRoaXMuYVk7XG5cblx0ZGF0YS54UmFkaXVzID0gdGhpcy54UmFkaXVzO1xuXHRkYXRhLnlSYWRpdXMgPSB0aGlzLnlSYWRpdXM7XG5cblx0ZGF0YS5hU3RhcnRBbmdsZSA9IHRoaXMuYVN0YXJ0QW5nbGU7XG5cdGRhdGEuYUVuZEFuZ2xlID0gdGhpcy5hRW5kQW5nbGU7XG5cblx0ZGF0YS5hQ2xvY2t3aXNlID0gdGhpcy5hQ2xvY2t3aXNlO1xuXG5cdGRhdGEuYVJvdGF0aW9uID0gdGhpcy5hUm90YXRpb247XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLmFYID0ganNvbi5hWDtcblx0dGhpcy5hWSA9IGpzb24uYVk7XG5cblx0dGhpcy54UmFkaXVzID0ganNvbi54UmFkaXVzO1xuXHR0aGlzLnlSYWRpdXMgPSBqc29uLnlSYWRpdXM7XG5cblx0dGhpcy5hU3RhcnRBbmdsZSA9IGpzb24uYVN0YXJ0QW5nbGU7XG5cdHRoaXMuYUVuZEFuZ2xlID0ganNvbi5hRW5kQW5nbGU7XG5cblx0dGhpcy5hQ2xvY2t3aXNlID0ganNvbi5hQ2xvY2t3aXNlO1xuXG5cdHRoaXMuYVJvdGF0aW9uID0ganNvbi5hUm90YXRpb247XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIEFyY0N1cnZlKCBhWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKSB7XG5cblx0RWxsaXBzZUN1cnZlLmNhbGwoIHRoaXMsIGFYLCBhWSwgYVJhZGl1cywgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApO1xuXG5cdHRoaXMudHlwZSA9ICdBcmNDdXJ2ZSc7XG5cbn1cblxuQXJjQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRWxsaXBzZUN1cnZlLnByb3RvdHlwZSApO1xuQXJjQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXJjQ3VydmU7XG5cbkFyY0N1cnZlLnByb3RvdHlwZS5pc0FyY0N1cnZlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcbiAqXG4gKiBDZW50cmlwZXRhbCBDYXRtdWxsUm9tIEN1cnZlIC0gd2hpY2ggaXMgdXNlZnVsIGZvciBhdm9pZGluZ1xuICogY3VzcHMgYW5kIHNlbGYtaW50ZXJzZWN0aW9ucyBpbiBub24tdW5pZm9ybSBjYXRtdWxsIHJvbSBjdXJ2ZXMuXG4gKiBodHRwOi8vd3d3LmNlbXl1a3NlbC5jb20vcmVzZWFyY2gvY2F0bXVsbHJvbV9wYXJhbS9jYXRtdWxscm9tLnBkZlxuICpcbiAqIGN1cnZlLnR5cGUgYWNjZXB0cyBjZW50cmlwZXRhbChkZWZhdWx0KSwgY2hvcmRhbCBhbmQgY2F0bXVsbHJvbVxuICogY3VydmUudGVuc2lvbiBpcyB1c2VkIGZvciBjYXRtdWxscm9tIHdoaWNoIGRlZmF1bHRzIHRvIDAuNVxuICovXG5cblxuLypcbkJhc2VkIG9uIGFuIG9wdGltaXplZCBjKysgc29sdXRpb24gaW5cbiAtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTQ4OTczNi9jYXRtdWxsLXJvbS1jdXJ2ZS13aXRoLW5vLWN1c3BzLWFuZC1uby1zZWxmLWludGVyc2VjdGlvbnMvXG4gLSBodHRwOi8vaWRlb25lLmNvbS9Ob0ViVk1cblxuVGhpcyBDdWJpY1BvbHkgY2xhc3MgY291bGQgYmUgdXNlZCBmb3IgcmV1c2luZyBzb21lIHZhcmlhYmxlcyBhbmQgY2FsY3VsYXRpb25zLFxuYnV0IGZvciB0aHJlZS5qcyBjdXJ2ZSB1c2UsIGl0IGNvdWxkIGJlIHBvc3NpYmxlIGlubGluZWQgYW5kIGZsYXR0ZW4gaW50byBhIHNpbmdsZSBmdW5jdGlvbiBjYWxsXG53aGljaCBjYW4gYmUgcGxhY2VkIGluIEN1cnZlVXRpbHMuXG4qL1xuXG5mdW5jdGlvbiBDdWJpY1BvbHkoKSB7XG5cblx0dmFyIGMwID0gMCwgYzEgPSAwLCBjMiA9IDAsIGMzID0gMDtcblxuXHQvKlxuXHQgKiBDb21wdXRlIGNvZWZmaWNpZW50cyBmb3IgYSBjdWJpYyBwb2x5bm9taWFsXG5cdCAqICAgcChzKSA9IGMwICsgYzEqcyArIGMyKnNeMiArIGMzKnNeM1xuXHQgKiBzdWNoIHRoYXRcblx0ICogICBwKDApID0geDAsIHAoMSkgPSB4MVxuXHQgKiAgYW5kXG5cdCAqICAgcCcoMCkgPSB0MCwgcCcoMSkgPSB0MS5cblx0ICovXG5cdGZ1bmN0aW9uIGluaXQoIHgwLCB4MSwgdDAsIHQxICkge1xuXG5cdFx0YzAgPSB4MDtcblx0XHRjMSA9IHQwO1xuXHRcdGMyID0gLSAzICogeDAgKyAzICogeDEgLSAyICogdDAgLSB0MTtcblx0XHRjMyA9IDIgKiB4MCAtIDIgKiB4MSArIHQwICsgdDE7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRpbml0Q2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgdGVuc2lvbiApIHtcblxuXHRcdFx0aW5pdCggeDEsIHgyLCB0ZW5zaW9uICogKCB4MiAtIHgwICksIHRlbnNpb24gKiAoIHgzIC0geDEgKSApO1xuXG5cdFx0fSxcblxuXHRcdGluaXROb251bmlmb3JtQ2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgZHQwLCBkdDEsIGR0MiApIHtcblxuXHRcdFx0Ly8gY29tcHV0ZSB0YW5nZW50cyB3aGVuIHBhcmFtZXRlcml6ZWQgaW4gW3QxLHQyXVxuXHRcdFx0dmFyIHQxID0gKCB4MSAtIHgwICkgLyBkdDAgLSAoIHgyIC0geDAgKSAvICggZHQwICsgZHQxICkgKyAoIHgyIC0geDEgKSAvIGR0MTtcblx0XHRcdHZhciB0MiA9ICggeDIgLSB4MSApIC8gZHQxIC0gKCB4MyAtIHgxICkgLyAoIGR0MSArIGR0MiApICsgKCB4MyAtIHgyICkgLyBkdDI7XG5cblx0XHRcdC8vIHJlc2NhbGUgdGFuZ2VudHMgZm9yIHBhcmFtZXRyaXphdGlvbiBpbiBbMCwxXVxuXHRcdFx0dDEgKj0gZHQxO1xuXHRcdFx0dDIgKj0gZHQxO1xuXG5cdFx0XHRpbml0KCB4MSwgeDIsIHQxLCB0MiApO1xuXG5cdFx0fSxcblxuXHRcdGNhbGM6IGZ1bmN0aW9uICggdCApIHtcblxuXHRcdFx0dmFyIHQyID0gdCAqIHQ7XG5cdFx0XHR2YXIgdDMgPSB0MiAqIHQ7XG5cdFx0XHRyZXR1cm4gYzAgKyBjMSAqIHQgKyBjMiAqIHQyICsgYzMgKiB0MztcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbi8vXG5cbnZhciB0bXAgPSBuZXcgVmVjdG9yMygpO1xudmFyIHB4ID0gbmV3IEN1YmljUG9seSgpLCBweSA9IG5ldyBDdWJpY1BvbHkoKSwgcHogPSBuZXcgQ3ViaWNQb2x5KCk7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21DdXJ2ZTMoIHBvaW50cywgY2xvc2VkLCBjdXJ2ZVR5cGUsIHRlbnNpb24gKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDYXRtdWxsUm9tQ3VydmUzJztcblxuXHR0aGlzLnBvaW50cyA9IHBvaW50cyB8fCBbXTtcblx0dGhpcy5jbG9zZWQgPSBjbG9zZWQgfHwgZmFsc2U7XG5cdHRoaXMuY3VydmVUeXBlID0gY3VydmVUeXBlIHx8ICdjZW50cmlwZXRhbCc7XG5cdHRoaXMudGVuc2lvbiA9IHRlbnNpb24gfHwgMC41O1xuXG59XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENhdG11bGxSb21DdXJ2ZTM7XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmlzQ2F0bXVsbFJvbUN1cnZlMyA9IHRydWU7XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBwb2ludHMgPSB0aGlzLnBvaW50cztcblx0dmFyIGwgPSBwb2ludHMubGVuZ3RoO1xuXG5cdHZhciBwID0gKCBsIC0gKCB0aGlzLmNsb3NlZCA/IDAgOiAxICkgKSAqIHQ7XG5cdHZhciBpbnRQb2ludCA9IE1hdGguZmxvb3IoIHAgKTtcblx0dmFyIHdlaWdodCA9IHAgLSBpbnRQb2ludDtcblxuXHRpZiAoIHRoaXMuY2xvc2VkICkge1xuXG5cdFx0aW50UG9pbnQgKz0gaW50UG9pbnQgPiAwID8gMCA6ICggTWF0aC5mbG9vciggTWF0aC5hYnMoIGludFBvaW50ICkgLyBsICkgKyAxICkgKiBsO1xuXG5cdH0gZWxzZSBpZiAoIHdlaWdodCA9PT0gMCAmJiBpbnRQb2ludCA9PT0gbCAtIDEgKSB7XG5cblx0XHRpbnRQb2ludCA9IGwgLSAyO1xuXHRcdHdlaWdodCA9IDE7XG5cblx0fVxuXG5cdHZhciBwMCwgcDEsIHAyLCBwMzsgLy8gNCBwb2ludHNcblxuXHRpZiAoIHRoaXMuY2xvc2VkIHx8IGludFBvaW50ID4gMCApIHtcblxuXHRcdHAwID0gcG9pbnRzWyAoIGludFBvaW50IC0gMSApICUgbCBdO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBleHRyYXBvbGF0ZSBmaXJzdCBwb2ludFxuXHRcdHRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIDAgXSwgcG9pbnRzWyAxIF0gKS5hZGQoIHBvaW50c1sgMCBdICk7XG5cdFx0cDAgPSB0bXA7XG5cblx0fVxuXG5cdHAxID0gcG9pbnRzWyBpbnRQb2ludCAlIGwgXTtcblx0cDIgPSBwb2ludHNbICggaW50UG9pbnQgKyAxICkgJSBsIF07XG5cblx0aWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCArIDIgPCBsICkge1xuXG5cdFx0cDMgPSBwb2ludHNbICggaW50UG9pbnQgKyAyICkgJSBsIF07XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIGV4dHJhcG9sYXRlIGxhc3QgcG9pbnRcblx0XHR0bXAuc3ViVmVjdG9ycyggcG9pbnRzWyBsIC0gMSBdLCBwb2ludHNbIGwgLSAyIF0gKS5hZGQoIHBvaW50c1sgbCAtIDEgXSApO1xuXHRcdHAzID0gdG1wO1xuXG5cdH1cblxuXHRpZiAoIHRoaXMuY3VydmVUeXBlID09PSAnY2VudHJpcGV0YWwnIHx8IHRoaXMuY3VydmVUeXBlID09PSAnY2hvcmRhbCcgKSB7XG5cblx0XHQvLyBpbml0IENlbnRyaXBldGFsIC8gQ2hvcmRhbCBDYXRtdWxsLVJvbVxuXHRcdHZhciBwb3cgPSB0aGlzLmN1cnZlVHlwZSA9PT0gJ2Nob3JkYWwnID8gMC41IDogMC4yNTtcblx0XHR2YXIgZHQwID0gTWF0aC5wb3coIHAwLmRpc3RhbmNlVG9TcXVhcmVkKCBwMSApLCBwb3cgKTtcblx0XHR2YXIgZHQxID0gTWF0aC5wb3coIHAxLmRpc3RhbmNlVG9TcXVhcmVkKCBwMiApLCBwb3cgKTtcblx0XHR2YXIgZHQyID0gTWF0aC5wb3coIHAyLmRpc3RhbmNlVG9TcXVhcmVkKCBwMyApLCBwb3cgKTtcblxuXHRcdC8vIHNhZmV0eSBjaGVjayBmb3IgcmVwZWF0ZWQgcG9pbnRzXG5cdFx0aWYgKCBkdDEgPCAxZS00ICkgZHQxID0gMS4wO1xuXHRcdGlmICggZHQwIDwgMWUtNCApIGR0MCA9IGR0MTtcblx0XHRpZiAoIGR0MiA8IDFlLTQgKSBkdDIgPSBkdDE7XG5cblx0XHRweC5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIGR0MCwgZHQxLCBkdDIgKTtcblx0XHRweS5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLnksIHAxLnksIHAyLnksIHAzLnksIGR0MCwgZHQxLCBkdDIgKTtcblx0XHRwei5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLnosIHAxLnosIHAyLnosIHAzLnosIGR0MCwgZHQxLCBkdDIgKTtcblxuXHR9IGVsc2UgaWYgKCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2NhdG11bGxyb20nICkge1xuXG5cdFx0cHguaW5pdENhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIHRoaXMudGVuc2lvbiApO1xuXHRcdHB5LmluaXRDYXRtdWxsUm9tKCBwMC55LCBwMS55LCBwMi55LCBwMy55LCB0aGlzLnRlbnNpb24gKTtcblx0XHRwei5pbml0Q2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgdGhpcy50ZW5zaW9uICk7XG5cblx0fVxuXG5cdHBvaW50LnNldChcblx0XHRweC5jYWxjKCB3ZWlnaHQgKSxcblx0XHRweS5jYWxjKCB3ZWlnaHQgKSxcblx0XHRwei5jYWxjKCB3ZWlnaHQgKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMucG9pbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gc291cmNlLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHBvaW50ID0gc291cmNlLnBvaW50c1sgaSBdO1xuXG5cdFx0dGhpcy5wb2ludHMucHVzaCggcG9pbnQuY2xvbmUoKSApO1xuXG5cdH1cblxuXHR0aGlzLmNsb3NlZCA9IHNvdXJjZS5jbG9zZWQ7XG5cdHRoaXMuY3VydmVUeXBlID0gc291cmNlLmN1cnZlVHlwZTtcblx0dGhpcy50ZW5zaW9uID0gc291cmNlLnRlbnNpb247XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEucG9pbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBwb2ludCA9IHRoaXMucG9pbnRzWyBpIF07XG5cdFx0ZGF0YS5wb2ludHMucHVzaCggcG9pbnQudG9BcnJheSgpICk7XG5cblx0fVxuXG5cdGRhdGEuY2xvc2VkID0gdGhpcy5jbG9zZWQ7XG5cdGRhdGEuY3VydmVUeXBlID0gdGhpcy5jdXJ2ZVR5cGU7XG5cdGRhdGEudGVuc2lvbiA9IHRoaXMudGVuc2lvbjtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24ucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgcG9pbnQgPSBqc29uLnBvaW50c1sgaSBdO1xuXHRcdHRoaXMucG9pbnRzLnB1c2goIG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBwb2ludCApICk7XG5cblx0fVxuXG5cdHRoaXMuY2xvc2VkID0ganNvbi5jbG9zZWQ7XG5cdHRoaXMuY3VydmVUeXBlID0ganNvbi5jdXJ2ZVR5cGU7XG5cdHRoaXMudGVuc2lvbiA9IGpzb24udGVuc2lvbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKlxuICogQmV6aWVyIEN1cnZlcyBmb3JtdWxhcyBvYnRhaW5lZCBmcm9tXG4gKiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0LDqXppZXJfY3VydmVcbiAqL1xuXG5mdW5jdGlvbiBDYXRtdWxsUm9tKCB0LCBwMCwgcDEsIHAyLCBwMyApIHtcblxuXHR2YXIgdjAgPSAoIHAyIC0gcDAgKSAqIDAuNTtcblx0dmFyIHYxID0gKCBwMyAtIHAxICkgKiAwLjU7XG5cdHZhciB0MiA9IHQgKiB0O1xuXHR2YXIgdDMgPSB0ICogdDI7XG5cdHJldHVybiAoIDIgKiBwMSAtIDIgKiBwMiArIHYwICsgdjEgKSAqIHQzICsgKCAtIDMgKiBwMSArIDMgKiBwMiAtIDIgKiB2MCAtIHYxICkgKiB0MiArIHYwICogdCArIHAxO1xuXG59XG5cbi8vXG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAwKCB0LCBwICkge1xuXG5cdHZhciBrID0gMSAtIHQ7XG5cdHJldHVybiBrICogayAqIHA7XG5cbn1cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDEoIHQsIHAgKSB7XG5cblx0cmV0dXJuIDIgKiAoIDEgLSB0ICkgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMiggdCwgcCApIHtcblxuXHRyZXR1cm4gdCAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllciggdCwgcDAsIHAxLCBwMiApIHtcblxuXHRyZXR1cm4gUXVhZHJhdGljQmV6aWVyUDAoIHQsIHAwICkgKyBRdWFkcmF0aWNCZXppZXJQMSggdCwgcDEgKSArXG5cdFx0UXVhZHJhdGljQmV6aWVyUDIoIHQsIHAyICk7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMCggdCwgcCApIHtcblxuXHR2YXIgayA9IDEgLSB0O1xuXHRyZXR1cm4gayAqIGsgKiBrICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllclAxKCB0LCBwICkge1xuXG5cdHZhciBrID0gMSAtIHQ7XG5cdHJldHVybiAzICogayAqIGsgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllclAyKCB0LCBwICkge1xuXG5cdHJldHVybiAzICogKCAxIC0gdCApICogdCAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDMoIHQsIHAgKSB7XG5cblx0cmV0dXJuIHQgKiB0ICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXIoIHQsIHAwLCBwMSwgcDIsIHAzICkge1xuXG5cdHJldHVybiBDdWJpY0JlemllclAwKCB0LCBwMCApICsgQ3ViaWNCZXppZXJQMSggdCwgcDEgKSArIEN1YmljQmV6aWVyUDIoIHQsIHAyICkgK1xuXHRcdEN1YmljQmV6aWVyUDMoIHQsIHAzICk7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJDdXJ2ZSggdjAsIHYxLCB2MiwgdjMgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDdWJpY0JlemllckN1cnZlJztcblxuXHR0aGlzLnYwID0gdjAgfHwgbmV3IFZlY3RvcjIoKTtcblx0dGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IyKCk7XG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMigpO1xuXHR0aGlzLnYzID0gdjMgfHwgbmV3IFZlY3RvcjIoKTtcblxufVxuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJpY0JlemllckN1cnZlO1xuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5pc0N1YmljQmV6aWVyQ3VydmUgPSB0cnVlO1xuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHR2YXIgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MiwgdjMgPSB0aGlzLnYzO1xuXG5cdHBvaW50LnNldChcblx0XHRDdWJpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCwgdjMueCApLFxuXHRcdEN1YmljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55LCB2My55IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXHR0aGlzLnYzLmNvcHkoIHNvdXJjZS52MyApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXHRkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblx0dGhpcy52My5mcm9tQXJyYXkoIGpzb24udjMgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJDdXJ2ZTMoIHYwLCB2MSwgdjIsIHYzICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3ViaWNCZXppZXJDdXJ2ZTMnO1xuXG5cdHRoaXMudjAgPSB2MCB8fCBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjMgPSB2MyB8fCBuZXcgVmVjdG9yMygpO1xuXG59XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3ViaWNCZXppZXJDdXJ2ZTM7XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5pc0N1YmljQmV6aWVyQ3VydmUzID0gdHJ1ZTtcblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyLCB2MyA9IHRoaXMudjM7XG5cblx0cG9pbnQuc2V0KFxuXHRcdEN1YmljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54LCB2My54ICksXG5cdFx0Q3ViaWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnksIHYzLnkgKSxcblx0XHRDdWJpY0JlemllciggdCwgdjAueiwgdjEueiwgdjIueiwgdjMueiApXG5cdCk7XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XG5cdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cdHRoaXMudjMuY29weSggc291cmNlLnYzICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXHRkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XG5cdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cdHRoaXMudjMuZnJvbUFycmF5KCBqc29uLnYzICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIExpbmVDdXJ2ZSggdjEsIHYyICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZUN1cnZlJztcblxuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjIoKTtcblx0dGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IyKCk7XG5cbn1cblxuTGluZUN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuTGluZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVDdXJ2ZTtcblxuTGluZUN1cnZlLnByb3RvdHlwZS5pc0xpbmVDdXJ2ZSA9IHRydWU7XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7XG5cblx0aWYgKCB0ID09PSAxICkge1xuXG5cdFx0cG9pbnQuY29weSggdGhpcy52MiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICkuc3ViKCB0aGlzLnYxICk7XG5cdFx0cG9pbnQubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMudjEgKTtcblxuXHR9XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG4vLyBMaW5lIGN1cnZlIGlzIGxpbmVhciwgc28gd2UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0IGdldFBvaW50QXRcblxuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludEF0ID0gZnVuY3Rpb24gKCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRyZXR1cm4gdGhpcy5nZXRQb2ludCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcblxufTtcblxuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRUYW5nZW50ID0gZnVuY3Rpb24gKCAvKiB0ICovICkge1xuXG5cdHZhciB0YW5nZW50ID0gdGhpcy52Mi5jbG9uZSgpLnN1YiggdGhpcy52MSApO1xuXG5cdHJldHVybiB0YW5nZW50Lm5vcm1hbGl6ZSgpO1xuXG59O1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gTGluZUN1cnZlMyggdjEsIHYyICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZUN1cnZlMyc7XG5cblx0dGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMygpO1xuXG59XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5MaW5lQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVDdXJ2ZTM7XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmlzTGluZUN1cnZlMyA9IHRydWU7XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpO1xuXG5cdGlmICggdCA9PT0gMSApIHtcblxuXHRcdHBvaW50LmNvcHkoIHRoaXMudjIgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cG9pbnQuY29weSggdGhpcy52MiApLnN1YiggdGhpcy52MSApO1xuXHRcdHBvaW50Lm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCB0aGlzLnYxICk7XG5cblx0fVxuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuLy8gTGluZSBjdXJ2ZSBpcyBsaW5lYXIsIHNvIHdlIGNhbiBvdmVyd3JpdGUgZGVmYXVsdCBnZXRQb2ludEF0XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50QXQgPSBmdW5jdGlvbiAoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHJldHVybiB0aGlzLmdldFBvaW50KCB1LCBvcHRpb25hbFRhcmdldCApO1xuXG59O1xuXG5MaW5lQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuTGluZUN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyQ3VydmUoIHYwLCB2MSwgdjIgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdRdWFkcmF0aWNCZXppZXJDdXJ2ZSc7XG5cblx0dGhpcy52MCA9IHYwIHx8IG5ldyBWZWN0b3IyKCk7XG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMigpO1xuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjIoKTtcblxufVxuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFF1YWRyYXRpY0JlemllckN1cnZlO1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZSA9IHRydWU7XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHR2YXIgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MjtcblxuXHRwb2ludC5zZXQoXG5cdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54ICksXG5cdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XG5cdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllckN1cnZlMyggdjAsIHYxLCB2MiApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1F1YWRyYXRpY0JlemllckN1cnZlMyc7XG5cblx0dGhpcy52MCA9IHYwIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjMoKTtcblxufVxuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUXVhZHJhdGljQmV6aWVyQ3VydmUzO1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmlzUXVhZHJhdGljQmV6aWVyQ3VydmUzID0gdHJ1ZTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MjtcblxuXHRwb2ludC5zZXQoXG5cdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54ICksXG5cdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC55LCB2MS55LCB2Mi55ICksXG5cdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC56LCB2MS56LCB2Mi56IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XG5cdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xuXHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMudjAuZnJvbUFycmF5KCBqc29uLnYwICk7XG5cdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbmZ1bmN0aW9uIFNwbGluZUN1cnZlKCBwb2ludHMgLyogYXJyYXkgb2YgVmVjdG9yMiAqLyApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NwbGluZUN1cnZlJztcblxuXHR0aGlzLnBvaW50cyA9IHBvaW50cyB8fCBbXTtcblxufVxuXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcblNwbGluZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwbGluZUN1cnZlO1xuXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuaXNTcGxpbmVDdXJ2ZSA9IHRydWU7XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHR2YXIgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cdHZhciBwID0gKCBwb2ludHMubGVuZ3RoIC0gMSApICogdDtcblxuXHR2YXIgaW50UG9pbnQgPSBNYXRoLmZsb29yKCBwICk7XG5cdHZhciB3ZWlnaHQgPSBwIC0gaW50UG9pbnQ7XG5cblx0dmFyIHAwID0gcG9pbnRzWyBpbnRQb2ludCA9PT0gMCA/IGludFBvaW50IDogaW50UG9pbnQgLSAxIF07XG5cdHZhciBwMSA9IHBvaW50c1sgaW50UG9pbnQgXTtcblx0dmFyIHAyID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAyID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDEgXTtcblx0dmFyIHAzID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAzID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDIgXTtcblxuXHRwb2ludC5zZXQoXG5cdFx0Q2F0bXVsbFJvbSggd2VpZ2h0LCBwMC54LCBwMS54LCBwMi54LCBwMy54ICksXG5cdFx0Q2F0bXVsbFJvbSggd2VpZ2h0LCBwMC55LCBwMS55LCBwMi55LCBwMy55IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgcG9pbnQgPSBzb3VyY2UucG9pbnRzWyBpIF07XG5cblx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHBvaW50ID0gdGhpcy5wb2ludHNbIGkgXTtcblx0XHRkYXRhLnBvaW50cy5wdXNoKCBwb2ludC50b0FycmF5KCkgKTtcblxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMucG9pbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBwb2ludCA9IGpzb24ucG9pbnRzWyBpIF07XG5cdFx0dGhpcy5wb2ludHMucHVzaCggbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIHBvaW50ICkgKTtcblxuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblxuXG52YXIgQ3VydmVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRBcmNDdXJ2ZTogQXJjQ3VydmUsXG5cdENhdG11bGxSb21DdXJ2ZTM6IENhdG11bGxSb21DdXJ2ZTMsXG5cdEN1YmljQmV6aWVyQ3VydmU6IEN1YmljQmV6aWVyQ3VydmUsXG5cdEN1YmljQmV6aWVyQ3VydmUzOiBDdWJpY0JlemllckN1cnZlMyxcblx0RWxsaXBzZUN1cnZlOiBFbGxpcHNlQ3VydmUsXG5cdExpbmVDdXJ2ZTogTGluZUN1cnZlLFxuXHRMaW5lQ3VydmUzOiBMaW5lQ3VydmUzLFxuXHRRdWFkcmF0aWNCZXppZXJDdXJ2ZTogUXVhZHJhdGljQmV6aWVyQ3VydmUsXG5cdFF1YWRyYXRpY0JlemllckN1cnZlMzogUXVhZHJhdGljQmV6aWVyQ3VydmUzLFxuXHRTcGxpbmVDdXJ2ZTogU3BsaW5lQ3VydmVcbn0pO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqXG4gKiovXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICpcdEN1cnZlZCBQYXRoIC0gYSBjdXJ2ZSBwYXRoIGlzIHNpbXBseSBhIGFycmF5IG9mIGNvbm5lY3RlZFxuICogIGN1cnZlcywgYnV0IHJldGFpbnMgdGhlIGFwaSBvZiBhIGN1cnZlXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmZ1bmN0aW9uIEN1cnZlUGF0aCgpIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0N1cnZlUGF0aCc7XG5cblx0dGhpcy5jdXJ2ZXMgPSBbXTtcblx0dGhpcy5hdXRvQ2xvc2UgPSBmYWxzZTsgLy8gQXV0b21hdGljYWxseSBjbG9zZXMgdGhlIHBhdGhcblxufVxuXG5DdXJ2ZVBhdGgucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQ3VydmVQYXRoLFxuXG5cdGFkZDogZnVuY3Rpb24gKCBjdXJ2ZSApIHtcblxuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0fSxcblxuXHRjbG9zZVBhdGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIEFkZCBhIGxpbmUgY3VydmUgaWYgc3RhcnQgYW5kIGVuZCBvZiBsaW5lcyBhcmUgbm90IGNvbm5lY3RlZFxuXHRcdHZhciBzdGFydFBvaW50ID0gdGhpcy5jdXJ2ZXNbIDAgXS5nZXRQb2ludCggMCApO1xuXHRcdHZhciBlbmRQb2ludCA9IHRoaXMuY3VydmVzWyB0aGlzLmN1cnZlcy5sZW5ndGggLSAxIF0uZ2V0UG9pbnQoIDEgKTtcblxuXHRcdGlmICggISBzdGFydFBvaW50LmVxdWFscyggZW5kUG9pbnQgKSApIHtcblxuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggbmV3IExpbmVDdXJ2ZSggZW5kUG9pbnQsIHN0YXJ0UG9pbnQgKSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gVG8gZ2V0IGFjY3VyYXRlIHBvaW50IHdpdGggcmVmZXJlbmNlIHRvXG5cdC8vIGVudGlyZSBwYXRoIGRpc3RhbmNlIGF0IHRpbWUgdCxcblx0Ly8gZm9sbG93aW5nIGhhcyB0byBiZSBkb25lOlxuXG5cdC8vIDEuIExlbmd0aCBvZiBlYWNoIHN1YiBwYXRoIGhhdmUgdG8gYmUga25vd25cblx0Ly8gMi4gTG9jYXRlIGFuZCBpZGVudGlmeSB0eXBlIG9mIGN1cnZlXG5cdC8vIDMuIEdldCB0IGZvciB0aGUgY3VydmVcblx0Ly8gNC4gUmV0dXJuIGN1cnZlLmdldFBvaW50QXQodCcpXG5cblx0Z2V0UG9pbnQ6IGZ1bmN0aW9uICggdCApIHtcblxuXHRcdHZhciBkID0gdCAqIHRoaXMuZ2V0TGVuZ3RoKCk7XG5cdFx0dmFyIGN1cnZlTGVuZ3RocyA9IHRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7XG5cdFx0dmFyIGkgPSAwO1xuXG5cdFx0Ly8gVG8gdGhpbmsgYWJvdXQgYm91bmRhcmllcyBwb2ludHMuXG5cblx0XHR3aGlsZSAoIGkgPCBjdXJ2ZUxlbmd0aHMubGVuZ3RoICkge1xuXG5cdFx0XHRpZiAoIGN1cnZlTGVuZ3Roc1sgaSBdID49IGQgKSB7XG5cblx0XHRcdFx0dmFyIGRpZmYgPSBjdXJ2ZUxlbmd0aHNbIGkgXSAtIGQ7XG5cdFx0XHRcdHZhciBjdXJ2ZSA9IHRoaXMuY3VydmVzWyBpIF07XG5cblx0XHRcdFx0dmFyIHNlZ21lbnRMZW5ndGggPSBjdXJ2ZS5nZXRMZW5ndGgoKTtcblx0XHRcdFx0dmFyIHUgPSBzZWdtZW50TGVuZ3RoID09PSAwID8gMCA6IDEgLSBkaWZmIC8gc2VnbWVudExlbmd0aDtcblxuXHRcdFx0XHRyZXR1cm4gY3VydmUuZ2V0UG9pbnRBdCggdSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGkgKys7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdC8vIGxvb3Agd2hlcmUgc3VtICE9IDAsIHN1bSA+IGQgLCBzdW0rMSA8ZFxuXG5cdH0sXG5cblx0Ly8gV2UgY2Fubm90IHVzZSB0aGUgZGVmYXVsdCBUSFJFRS5DdXJ2ZSBnZXRQb2ludCgpIHdpdGggZ2V0TGVuZ3RoKCkgYmVjYXVzZSBpblxuXHQvLyBUSFJFRS5DdXJ2ZSwgZ2V0TGVuZ3RoKCkgZGVwZW5kcyBvbiBnZXRQb2ludCgpIGJ1dCBpbiBUSFJFRS5DdXJ2ZVBhdGhcblx0Ly8gZ2V0UG9pbnQoKSBkZXBlbmRzIG9uIGdldExlbmd0aFxuXG5cdGdldExlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGxlbnMgPSB0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXHRcdHJldHVybiBsZW5zWyBsZW5zLmxlbmd0aCAtIDEgXTtcblxuXHR9LFxuXG5cdC8vIGNhY2hlTGVuZ3RocyBtdXN0IGJlIHJlY2FsY3VsYXRlZC5cblx0dXBkYXRlQXJjTGVuZ3RoczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5jYWNoZUxlbmd0aHMgPSBudWxsO1xuXHRcdHRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7XG5cblx0fSxcblxuXHQvLyBDb21wdXRlIGxlbmd0aHMgYW5kIGNhY2hlIHRoZW1cblx0Ly8gV2UgY2Fubm90IG92ZXJ3cml0ZSBnZXRMZW5ndGhzKCkgYmVjYXVzZSBVdG9UIG1hcHBpbmcgdXNlcyBpdC5cblxuXHRnZXRDdXJ2ZUxlbmd0aHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIFdlIHVzZSBjYWNoZSB2YWx1ZXMgaWYgY3VydmVzIGFuZCBjYWNoZSBhcnJheSBhcmUgc2FtZSBsZW5ndGhcblxuXHRcdGlmICggdGhpcy5jYWNoZUxlbmd0aHMgJiYgdGhpcy5jYWNoZUxlbmd0aHMubGVuZ3RoID09PSB0aGlzLmN1cnZlcy5sZW5ndGggKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmNhY2hlTGVuZ3RocztcblxuXHRcdH1cblxuXHRcdC8vIEdldCBsZW5ndGggb2Ygc3ViLWN1cnZlXG5cdFx0Ly8gUHVzaCBzdW1zIGludG8gY2FjaGVkIGFycmF5XG5cblx0XHR2YXIgbGVuZ3RocyA9IFtdLCBzdW1zID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHN1bXMgKz0gdGhpcy5jdXJ2ZXNbIGkgXS5nZXRMZW5ndGgoKTtcblx0XHRcdGxlbmd0aHMucHVzaCggc3VtcyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jYWNoZUxlbmd0aHMgPSBsZW5ndGhzO1xuXG5cdFx0cmV0dXJuIGxlbmd0aHM7XG5cblx0fSxcblxuXHRnZXRTcGFjZWRQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IDQwO1xuXG5cdFx0dmFyIHBvaW50cyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDw9IGRpdmlzaW9uczsgaSArKyApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHRoaXMuZ2V0UG9pbnQoIGkgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmF1dG9DbG9zZSApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHBvaW50c1sgMCBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH0sXG5cblx0Z2V0UG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGRpdmlzaW9ucyA9IGRpdmlzaW9ucyB8fCAxMjtcblxuXHRcdHZhciBwb2ludHMgPSBbXSwgbGFzdDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgY3VydmVzID0gdGhpcy5jdXJ2ZXM7IGkgPCBjdXJ2ZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY3VydmUgPSBjdXJ2ZXNbIGkgXTtcblx0XHRcdHZhciByZXNvbHV0aW9uID0gKCBjdXJ2ZSAmJiBjdXJ2ZS5pc0VsbGlwc2VDdXJ2ZSApID8gZGl2aXNpb25zICogMlxuXHRcdFx0XHQ6ICggY3VydmUgJiYgKCBjdXJ2ZS5pc0xpbmVDdXJ2ZSB8fCBjdXJ2ZS5pc0xpbmVDdXJ2ZTMgKSApID8gMVxuXHRcdFx0XHRcdDogKCBjdXJ2ZSAmJiBjdXJ2ZS5pc1NwbGluZUN1cnZlICkgPyBkaXZpc2lvbnMgKiBjdXJ2ZS5wb2ludHMubGVuZ3RoXG5cdFx0XHRcdFx0XHQ6IGRpdmlzaW9ucztcblxuXHRcdFx0dmFyIHB0cyA9IGN1cnZlLmdldFBvaW50cyggcmVzb2x1dGlvbiApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBwdHMubGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciBwb2ludCA9IHB0c1sgaiBdO1xuXG5cdFx0XHRcdGlmICggbGFzdCAmJiBsYXN0LmVxdWFscyggcG9pbnQgKSApIGNvbnRpbnVlOyAvLyBlbnN1cmVzIG5vIGNvbnNlY3V0aXZlIHBvaW50cyBhcmUgZHVwbGljYXRlc1xuXG5cdFx0XHRcdHBvaW50cy5wdXNoKCBwb2ludCApO1xuXHRcdFx0XHRsYXN0ID0gcG9pbnQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hdXRvQ2xvc2UgJiYgcG9pbnRzLmxlbmd0aCA+IDEgJiYgISBwb2ludHNbIHBvaW50cy5sZW5ndGggLSAxIF0uZXF1YWxzKCBwb2ludHNbIDAgXSApICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggcG9pbnRzWyAwIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHNvdXJjZS5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGN1cnZlID0gc291cmNlLmN1cnZlc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmF1dG9DbG9zZSA9IHNvdXJjZS5hdXRvQ2xvc2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRcdGRhdGEuYXV0b0Nsb3NlID0gdGhpcy5hdXRvQ2xvc2U7XG5cdFx0ZGF0YS5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjdXJ2ZSA9IHRoaXMuY3VydmVzWyBpIF07XG5cdFx0XHRkYXRhLmN1cnZlcy5wdXNoKCBjdXJ2ZS50b0pTT04oKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRmcm9tSlNPTjogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHRcdHRoaXMuYXV0b0Nsb3NlID0ganNvbi5hdXRvQ2xvc2U7XG5cdFx0dGhpcy5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24uY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjdXJ2ZSA9IGpzb24uY3VydmVzWyBpIF07XG5cdFx0XHR0aGlzLmN1cnZlcy5wdXNoKCBuZXcgQ3VydmVzWyBjdXJ2ZS50eXBlIF0oKS5mcm9tSlNPTiggY3VydmUgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogQ3JlYXRlcyBmcmVlIGZvcm0gMmQgcGF0aCB1c2luZyBzZXJpZXMgb2YgcG9pbnRzLCBsaW5lcyBvciBjdXJ2ZXMuXG4gKiovXG5cbmZ1bmN0aW9uIFBhdGgoIHBvaW50cyApIHtcblxuXHRDdXJ2ZVBhdGguY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQYXRoJztcblxuXHR0aGlzLmN1cnJlbnRQb2ludCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0aWYgKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG5cdH1cblxufVxuXG5QYXRoLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEN1cnZlUGF0aC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBQYXRoLFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tb3ZlVG8oIHBvaW50c1sgMCBdLngsIHBvaW50c1sgMCBdLnkgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmxpbmVUbyggcG9pbnRzWyBpIF0ueCwgcG9pbnRzWyBpIF0ueSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0bW92ZVRvOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIHgsIHkgKTsgLy8gVE9ETyBjb25zaWRlciByZWZlcmVuY2luZyB2ZWN0b3JzIGluc3RlYWQgb2YgY29weWluZz9cblxuXHR9LFxuXG5cdGxpbmVUbzogZnVuY3Rpb24gKCB4LCB5ICkge1xuXG5cdFx0dmFyIGN1cnZlID0gbmV3IExpbmVDdXJ2ZSggdGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSwgbmV3IFZlY3RvcjIoIHgsIHkgKSApO1xuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIHgsIHkgKTtcblxuXHR9LFxuXG5cdHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uICggYUNQeCwgYUNQeSwgYVgsIGFZICkge1xuXG5cdFx0dmFyIGN1cnZlID0gbmV3IFF1YWRyYXRpY0JlemllckN1cnZlKFxuXHRcdFx0dGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhQ1B4LCBhQ1B5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYVgsIGFZIClcblx0XHQpO1xuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggYVgsIGFZICk7XG5cblx0fSxcblxuXHRiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbiAoIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKSB7XG5cblx0XHR2YXIgY3VydmUgPSBuZXcgQ3ViaWNCZXppZXJDdXJ2ZShcblx0XHRcdHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQMXgsIGFDUDF5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQMngsIGFDUDJ5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYVgsIGFZIClcblx0XHQpO1xuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggYVgsIGFZICk7XG5cblx0fSxcblxuXHRzcGxpbmVUaHJ1OiBmdW5jdGlvbiAoIHB0cyAvKkFycmF5IG9mIFZlY3RvciovICkge1xuXG5cdFx0dmFyIG5wdHMgPSBbIHRoaXMuY3VycmVudFBvaW50LmNsb25lKCkgXS5jb25jYXQoIHB0cyApO1xuXG5cdFx0dmFyIGN1cnZlID0gbmV3IFNwbGluZUN1cnZlKCBucHRzICk7XG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkoIHB0c1sgcHRzLmxlbmd0aCAtIDEgXSApO1xuXG5cdH0sXG5cblx0YXJjOiBmdW5jdGlvbiAoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRcdHZhciB4MCA9IHRoaXMuY3VycmVudFBvaW50Lng7XG5cdFx0dmFyIHkwID0gdGhpcy5jdXJyZW50UG9pbnQueTtcblxuXHRcdHRoaXMuYWJzYXJjKCBhWCArIHgwLCBhWSArIHkwLCBhUmFkaXVzLFxuXHRcdFx0YVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApO1xuXG5cdH0sXG5cblx0YWJzYXJjOiBmdW5jdGlvbiAoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRcdHRoaXMuYWJzZWxsaXBzZSggYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XG5cblx0fSxcblxuXHRlbGxpcHNlOiBmdW5jdGlvbiAoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkge1xuXG5cdFx0dmFyIHgwID0gdGhpcy5jdXJyZW50UG9pbnQueDtcblx0XHR2YXIgeTAgPSB0aGlzLmN1cnJlbnRQb2ludC55O1xuXG5cdFx0dGhpcy5hYnNlbGxpcHNlKCBhWCArIHgwLCBhWSArIHkwLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKTtcblxuXHR9LFxuXG5cdGFic2VsbGlwc2U6IGZ1bmN0aW9uICggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKSB7XG5cblx0XHR2YXIgY3VydmUgPSBuZXcgRWxsaXBzZUN1cnZlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApO1xuXG5cdFx0aWYgKCB0aGlzLmN1cnZlcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHQvLyBpZiBhIHByZXZpb3VzIGN1cnZlIGlzIHByZXNlbnQsIGF0dGVtcHQgdG8gam9pblxuXHRcdFx0dmFyIGZpcnN0UG9pbnQgPSBjdXJ2ZS5nZXRQb2ludCggMCApO1xuXG5cdFx0XHRpZiAoICEgZmlyc3RQb2ludC5lcXVhbHMoIHRoaXMuY3VycmVudFBvaW50ICkgKSB7XG5cblx0XHRcdFx0dGhpcy5saW5lVG8oIGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR2YXIgbGFzdFBvaW50ID0gY3VydmUuZ2V0UG9pbnQoIDEgKTtcblx0XHR0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBsYXN0UG9pbnQgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0Q3VydmVQYXRoLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggc291cmNlLmN1cnJlbnRQb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0gQ3VydmVQYXRoLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdFx0ZGF0YS5jdXJyZW50UG9pbnQgPSB0aGlzLmN1cnJlbnRQb2ludC50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGZyb21KU09OOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHRDdXJ2ZVBhdGgucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LmZyb21BcnJheSgganNvbi5jdXJyZW50UG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIERlZmluZXMgYSAyZCBzaGFwZSBwbGFuZSB1c2luZyBwYXRocy5cbiAqKi9cblxuLy8gU1RFUCAxIENyZWF0ZSBhIHBhdGguXG4vLyBTVEVQIDIgVHVybiBwYXRoIGludG8gc2hhcGUuXG4vLyBTVEVQIDMgRXh0cnVkZUdlb21ldHJ5IHRha2VzIGluIFNoYXBlL1NoYXBlc1xuLy8gU1RFUCAzYSAtIEV4dHJhY3QgcG9pbnRzIGZyb20gZWFjaCBzaGFwZSwgdHVybiB0byB2ZXJ0aWNlc1xuLy8gU1RFUCAzYiAtIFRyaWFuZ3VsYXRlIGVhY2ggc2hhcGUsIGFkZCBmYWNlcy5cblxuZnVuY3Rpb24gU2hhcGUoIHBvaW50cyApIHtcblxuXHRQYXRoLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMudHlwZSA9ICdTaGFwZSc7XG5cblx0dGhpcy5ob2xlcyA9IFtdO1xuXG59XG5cblNoYXBlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIFBhdGgucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU2hhcGUsXG5cblx0Z2V0UG9pbnRzSG9sZXM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0dmFyIGhvbGVzUHRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGhvbGVzUHRzWyBpIF0gPSB0aGlzLmhvbGVzWyBpIF0uZ2V0UG9pbnRzKCBkaXZpc2lvbnMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBob2xlc1B0cztcblxuXHR9LFxuXG5cdC8vIGdldCBwb2ludHMgb2Ygc2hhcGUgYW5kIGhvbGVzIChrZXlwb2ludHMgYmFzZWQgb24gc2VnbWVudHMgcGFyYW1ldGVyKVxuXG5cdGV4dHJhY3RQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2hhcGU6IHRoaXMuZ2V0UG9pbnRzKCBkaXZpc2lvbnMgKSxcblx0XHRcdGhvbGVzOiB0aGlzLmdldFBvaW50c0hvbGVzKCBkaXZpc2lvbnMgKVxuXG5cdFx0fTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0UGF0aC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuaG9sZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHNvdXJjZS5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaG9sZSA9IHNvdXJjZS5ob2xlc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmhvbGVzLnB1c2goIGhvbGUuY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0gUGF0aC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcblx0XHRkYXRhLmhvbGVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBob2xlID0gdGhpcy5ob2xlc1sgaSBdO1xuXHRcdFx0ZGF0YS5ob2xlcy5wdXNoKCBob2xlLnRvSlNPTigpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGZyb21KU09OOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHRQYXRoLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0XHR0aGlzLnV1aWQgPSBqc29uLnV1aWQ7XG5cdFx0dGhpcy5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaG9sZSA9IGpzb24uaG9sZXNbIGkgXTtcblx0XHRcdHRoaXMuaG9sZXMucHVzaCggbmV3IFBhdGgoKS5mcm9tSlNPTiggaG9sZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMaWdodCggY29sb3IsIGludGVuc2l0eSApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0xpZ2h0JztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xuXHR0aGlzLmludGVuc2l0eSA9IGludGVuc2l0eSAhPT0gdW5kZWZpbmVkID8gaW50ZW5zaXR5IDogMTtcblxuXHR0aGlzLnJlY2VpdmVTaGFkb3cgPSB1bmRlZmluZWQ7XG5cbn1cblxuTGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTGlnaHQsXG5cblx0aXNMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0XHR0aGlzLmludGVuc2l0eSA9IHNvdXJjZS5pbnRlbnNpdHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LmNvbG9yID0gdGhpcy5jb2xvci5nZXRIZXgoKTtcblx0XHRkYXRhLm9iamVjdC5pbnRlbnNpdHkgPSB0aGlzLmludGVuc2l0eTtcblxuXHRcdGlmICggdGhpcy5ncm91bmRDb2xvciAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZ3JvdW5kQ29sb3IgPSB0aGlzLmdyb3VuZENvbG9yLmdldEhleCgpO1xuXG5cdFx0aWYgKCB0aGlzLmRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5kaXN0YW5jZSA9IHRoaXMuZGlzdGFuY2U7XG5cdFx0aWYgKCB0aGlzLmFuZ2xlICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5hbmdsZSA9IHRoaXMuYW5nbGU7XG5cdFx0aWYgKCB0aGlzLmRlY2F5ICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5kZWNheSA9IHRoaXMuZGVjYXk7XG5cdFx0aWYgKCB0aGlzLnBlbnVtYnJhICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5wZW51bWJyYSA9IHRoaXMucGVudW1icmE7XG5cblx0XHRpZiAoIHRoaXMuc2hhZG93ICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5zaGFkb3cgPSB0aGlzLnNoYWRvdy50b0pTT04oKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gSGVtaXNwaGVyZUxpZ2h0KCBza3lDb2xvciwgZ3JvdW5kQ29sb3IsIGludGVuc2l0eSApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBza3lDb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ0hlbWlzcGhlcmVMaWdodCc7XG5cblx0dGhpcy5jYXN0U2hhZG93ID0gdW5kZWZpbmVkO1xuXG5cdHRoaXMucG9zaXRpb24uY29weSggT2JqZWN0M0QuRGVmYXVsdFVwICk7XG5cdHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0dGhpcy5ncm91bmRDb2xvciA9IG5ldyBDb2xvciggZ3JvdW5kQ29sb3IgKTtcblxufVxuXG5IZW1pc3BoZXJlTGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogSGVtaXNwaGVyZUxpZ2h0LFxuXG5cdGlzSGVtaXNwaGVyZUxpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmdyb3VuZENvbG9yLmNvcHkoIHNvdXJjZS5ncm91bmRDb2xvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMaWdodFNoYWRvdyggY2FtZXJhICkge1xuXG5cdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXG5cdHRoaXMuYmlhcyA9IDA7XG5cdHRoaXMucmFkaXVzID0gMTtcblxuXHR0aGlzLm1hcFNpemUgPSBuZXcgVmVjdG9yMiggNTEyLCA1MTIgKTtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBMaWdodFNoYWRvdy5wcm90b3R5cGUsIHtcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuY2FtZXJhID0gc291cmNlLmNhbWVyYS5jbG9uZSgpO1xuXG5cdFx0dGhpcy5iaWFzID0gc291cmNlLmJpYXM7XG5cdFx0dGhpcy5yYWRpdXMgPSBzb3VyY2UucmFkaXVzO1xuXG5cdFx0dGhpcy5tYXBTaXplLmNvcHkoIHNvdXJjZS5tYXBTaXplICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvYmplY3QgPSB7fTtcblxuXHRcdGlmICggdGhpcy5iaWFzICE9PSAwICkgb2JqZWN0LmJpYXMgPSB0aGlzLmJpYXM7XG5cdFx0aWYgKCB0aGlzLnJhZGl1cyAhPT0gMSApIG9iamVjdC5yYWRpdXMgPSB0aGlzLnJhZGl1cztcblx0XHRpZiAoIHRoaXMubWFwU2l6ZS54ICE9PSA1MTIgfHwgdGhpcy5tYXBTaXplLnkgIT09IDUxMiApIG9iamVjdC5tYXBTaXplID0gdGhpcy5tYXBTaXplLnRvQXJyYXkoKTtcblxuXHRcdG9iamVjdC5jYW1lcmEgPSB0aGlzLmNhbWVyYS50b0pTT04oIGZhbHNlICkub2JqZWN0O1xuXHRcdGRlbGV0ZSBvYmplY3QuY2FtZXJhLm1hdHJpeDtcblxuXHRcdHJldHVybiBvYmplY3Q7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBTcG90TGlnaHRTaGFkb3coKSB7XG5cblx0TGlnaHRTaGFkb3cuY2FsbCggdGhpcywgbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCA1MCwgMSwgMC41LCA1MDAgKSApO1xuXG59XG5cblNwb3RMaWdodFNoYWRvdy5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodFNoYWRvdy5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBTcG90TGlnaHRTaGFkb3csXG5cblx0aXNTcG90TGlnaHRTaGFkb3c6IHRydWUsXG5cblx0dXBkYXRlOiBmdW5jdGlvbiAoIGxpZ2h0ICkge1xuXG5cdFx0dmFyIGNhbWVyYSA9IHRoaXMuY2FtZXJhO1xuXG5cdFx0dmFyIGZvdiA9IF9NYXRoLlJBRDJERUcgKiAyICogbGlnaHQuYW5nbGU7XG5cdFx0dmFyIGFzcGVjdCA9IHRoaXMubWFwU2l6ZS53aWR0aCAvIHRoaXMubWFwU2l6ZS5oZWlnaHQ7XG5cdFx0dmFyIGZhciA9IGxpZ2h0LmRpc3RhbmNlIHx8IGNhbWVyYS5mYXI7XG5cblx0XHRpZiAoIGZvdiAhPT0gY2FtZXJhLmZvdiB8fCBhc3BlY3QgIT09IGNhbWVyYS5hc3BlY3QgfHwgZmFyICE9PSBjYW1lcmEuZmFyICkge1xuXG5cdFx0XHRjYW1lcmEuZm92ID0gZm92O1xuXHRcdFx0Y2FtZXJhLmFzcGVjdCA9IGFzcGVjdDtcblx0XHRcdGNhbWVyYS5mYXIgPSBmYXI7XG5cdFx0XHRjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gU3BvdExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgYW5nbGUsIHBlbnVtYnJhLCBkZWNheSApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ1Nwb3RMaWdodCc7XG5cblx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5EZWZhdWx0VXAgKTtcblx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHR0aGlzLnRhcmdldCA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ3Bvd2VyJywge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHQvLyBpbnRlbnNpdHkgPSBwb3dlciBwZXIgc29saWQgYW5nbGUuXG5cdFx0XHQvLyByZWY6IGVxdWF0aW9uICgxNykgZnJvbSBodHRwczovL3NlYmxhZ2FyZGUuZmlsZXMud29yZHByZXNzLmNvbS8yMDE1LzA3L2NvdXJzZV9ub3Rlc19tb3ZpbmdfZnJvc3RiaXRlX3RvX3Bicl92MzIucGRmXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnRlbnNpdHkgKiBNYXRoLlBJO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggcG93ZXIgKSB7XG5cblx0XHRcdC8vIGludGVuc2l0eSA9IHBvd2VyIHBlciBzb2xpZCBhbmdsZS5cblx0XHRcdC8vIHJlZjogZXF1YXRpb24gKDE3KSBmcm9tIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcblx0XHRcdHRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyBNYXRoLlBJO1xuXG5cdFx0fVxuXHR9ICk7XG5cblx0dGhpcy5kaXN0YW5jZSA9ICggZGlzdGFuY2UgIT09IHVuZGVmaW5lZCApID8gZGlzdGFuY2UgOiAwO1xuXHR0aGlzLmFuZ2xlID0gKCBhbmdsZSAhPT0gdW5kZWZpbmVkICkgPyBhbmdsZSA6IE1hdGguUEkgLyAzO1xuXHR0aGlzLnBlbnVtYnJhID0gKCBwZW51bWJyYSAhPT0gdW5kZWZpbmVkICkgPyBwZW51bWJyYSA6IDA7XG5cdHRoaXMuZGVjYXkgPSAoIGRlY2F5ICE9PSB1bmRlZmluZWQgKSA/IGRlY2F5IDogMTtcdC8vIGZvciBwaHlzaWNhbGx5IGNvcnJlY3QgbGlnaHRzLCBzaG91bGQgYmUgMi5cblxuXHR0aGlzLnNoYWRvdyA9IG5ldyBTcG90TGlnaHRTaGFkb3coKTtcblxufVxuXG5TcG90TGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU3BvdExpZ2h0LFxuXG5cdGlzU3BvdExpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlO1xuXHRcdHRoaXMuYW5nbGUgPSBzb3VyY2UuYW5nbGU7XG5cdFx0dGhpcy5wZW51bWJyYSA9IHNvdXJjZS5wZW51bWJyYTtcblx0XHR0aGlzLmRlY2F5ID0gc291cmNlLmRlY2F5O1xuXG5cdFx0dGhpcy50YXJnZXQgPSBzb3VyY2UudGFyZ2V0LmNsb25lKCk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBQb2ludExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgZGVjYXkgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgY29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2ludExpZ2h0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdwb3dlcicsIHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Ly8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLlxuXHRcdFx0Ly8gcmVmOiBlcXVhdGlvbiAoMTUpIGZyb20gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZlxuXHRcdFx0cmV0dXJuIHRoaXMuaW50ZW5zaXR5ICogNCAqIE1hdGguUEk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCBwb3dlciApIHtcblxuXHRcdFx0Ly8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLlxuXHRcdFx0Ly8gcmVmOiBlcXVhdGlvbiAoMTUpIGZyb20gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZlxuXHRcdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICggNCAqIE1hdGguUEkgKTtcblxuXHRcdH1cblx0fSApO1xuXG5cdHRoaXMuZGlzdGFuY2UgPSAoIGRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSA/IGRpc3RhbmNlIDogMDtcblx0dGhpcy5kZWNheSA9ICggZGVjYXkgIT09IHVuZGVmaW5lZCApID8gZGVjYXkgOiAxO1x0Ly8gZm9yIHBoeXNpY2FsbHkgY29ycmVjdCBsaWdodHMsIHNob3VsZCBiZSAyLlxuXG5cdHRoaXMuc2hhZG93ID0gbmV3IExpZ2h0U2hhZG93KCBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIDkwLCAxLCAwLjUsIDUwMCApICk7XG5cbn1cblxuUG9pbnRMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBQb2ludExpZ2h0LFxuXG5cdGlzUG9pbnRMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5kaXN0YW5jZSA9IHNvdXJjZS5kaXN0YW5jZTtcblx0XHR0aGlzLmRlY2F5ID0gc291cmNlLmRlY2F5O1xuXG5cdFx0dGhpcy5zaGFkb3cgPSBzb3VyY2Uuc2hhZG93LmNsb25lKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIERpcmVjdGlvbmFsTGlnaHRTaGFkb3coICkge1xuXG5cdExpZ2h0U2hhZG93LmNhbGwoIHRoaXMsIG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIC0gNSwgNSwgNSwgLSA1LCAwLjUsIDUwMCApICk7XG5cbn1cblxuRGlyZWN0aW9uYWxMaWdodFNoYWRvdy5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodFNoYWRvdy5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBEaXJlY3Rpb25hbExpZ2h0U2hhZG93XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBEaXJlY3Rpb25hbExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5ICkge1xuXG5cdExpZ2h0LmNhbGwoIHRoaXMsIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHR0aGlzLnR5cGUgPSAnRGlyZWN0aW9uYWxMaWdodCc7XG5cblx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5EZWZhdWx0VXAgKTtcblx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHR0aGlzLnRhcmdldCA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdHRoaXMuc2hhZG93ID0gbmV3IERpcmVjdGlvbmFsTGlnaHRTaGFkb3coKTtcblxufVxuXG5EaXJlY3Rpb25hbExpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IERpcmVjdGlvbmFsTGlnaHQsXG5cblx0aXNEaXJlY3Rpb25hbExpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLnRhcmdldCA9IHNvdXJjZS50YXJnZXQuY2xvbmUoKTtcblxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBbWJpZW50TGlnaHQoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgY29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdBbWJpZW50TGlnaHQnO1xuXG5cdHRoaXMuY2FzdFNoYWRvdyA9IHVuZGVmaW5lZDtcblxufVxuXG5BbWJpZW50TGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQW1iaWVudExpZ2h0LFxuXG5cdGlzQW1iaWVudExpZ2h0OiB0cnVlXG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFiZWxuYXRpb24gLyBodHRwOi8vZ2l0aHViLmNvbS9hYmVsbmF0aW9uXG4gKi9cblxuZnVuY3Rpb24gUmVjdEFyZWFMaWdodCggY29sb3IsIGludGVuc2l0eSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ1JlY3RBcmVhTGlnaHQnO1xuXG5cdHRoaXMud2lkdGggPSAoIHdpZHRoICE9PSB1bmRlZmluZWQgKSA/IHdpZHRoIDogMTA7XG5cdHRoaXMuaGVpZ2h0ID0gKCBoZWlnaHQgIT09IHVuZGVmaW5lZCApID8gaGVpZ2h0IDogMTA7XG5cbn1cblxuUmVjdEFyZWFMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBSZWN0QXJlYUxpZ2h0LFxuXG5cdGlzUmVjdEFyZWFMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy53aWR0aCA9IHNvdXJjZS53aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBMaWdodC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LndpZHRoID0gdGhpcy53aWR0aDtcblx0XHRkYXRhLm9iamVjdC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIHRoYXQgaW50ZXJwb2xhdGVzIFN0cmluZ3NcbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFN0cmluZ0tleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFN0cmluZ0tleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ3N0cmluZycsXG5cdFZhbHVlQnVmZmVyVHlwZTogQXJyYXksXG5cblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlRGlzY3JldGUsXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOiB1bmRlZmluZWQsXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOiB1bmRlZmluZWRcblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIEJvb2xlYW4ga2V5ZnJhbWUgdmFsdWVzLlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gQm9vbGVhbktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMgKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzICk7XG5cbn1cblxuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBCb29sZWFuS2V5ZnJhbWVUcmFjayxcblxuXHRWYWx1ZVR5cGVOYW1lOiAnYm9vbCcsXG5cdFZhbHVlQnVmZmVyVHlwZTogQXJyYXksXG5cblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlRGlzY3JldGUsXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOiB1bmRlZmluZWQsXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDogdW5kZWZpbmVkXG5cblx0Ly8gTm90ZTogQWN0dWFsbHkgdGhpcyB0cmFjayBjb3VsZCBoYXZlIGEgb3B0aW1pemVkIC8gY29tcHJlc3NlZFxuXHQvLyByZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSB2YWx1ZSBhbmQgYSBjdXN0b20gaW50ZXJwb2xhbnQgdGhhdFxuXHQvLyBjb21wdXRlcyBcImZpcnN0VmFsdWUgXiBpc09kZCggaW5kZXggKVwiLlxuXG59ICk7XG5cbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBvZiBpbnRlcnBvbGFudHMgb3ZlciBwYXJhbWV0cmljIHNhbXBsZXMuXG4gKlxuICogVGhlIHBhcmFtZXRlciBkb21haW4gaXMgb25lIGRpbWVuc2lvbmFsLCB0eXBpY2FsbHkgdGhlIHRpbWUgb3IgYSBwYXRoXG4gKiBhbG9uZyBhIGN1cnZlIGRlZmluZWQgYnkgdGhlIGRhdGEuXG4gKlxuICogVGhlIHNhbXBsZSB2YWx1ZXMgY2FuIGhhdmUgYW55IGRpbWVuc2lvbmFsaXR5IGFuZCBkZXJpdmVkIGNsYXNzZXMgbWF5XG4gKiBhcHBseSBzcGVjaWFsIGludGVycHJldGF0aW9ucyB0byB0aGUgZGF0YS5cbiAqXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIHRoZSBpbnRlcnZhbCBzZWVrIGluIGEgVGVtcGxhdGUgTWV0aG9kLCBkZWZlcnJpbmdcbiAqIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiB0byBkZXJpdmVkIGNsYXNzZXMuXG4gKlxuICogVGltZSBjb21wbGV4aXR5IGlzIE8oMSkgZm9yIGxpbmVhciBhY2Nlc3MgY3Jvc3NpbmcgYXQgbW9zdCB0d28gcG9pbnRzXG4gKiBhbmQgTyhsb2cgTikgZm9yIHJhbmRvbSBhY2Nlc3MsIHdoZXJlIE4gaXMgdGhlIG51bWJlciBvZiBwb3NpdGlvbnMuXG4gKlxuICogUmVmZXJlbmNlczpcbiAqXG4gKiBcdFx0aHR0cDovL3d3dy5vb2Rlc2lnbi5jb20vdGVtcGxhdGUtbWV0aG9kLXBhdHRlcm4uaHRtbFxuICpcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHR0aGlzLnBhcmFtZXRlclBvc2l0aW9ucyA9IHBhcmFtZXRlclBvc2l0aW9ucztcblx0dGhpcy5fY2FjaGVkSW5kZXggPSAwO1xuXG5cdHRoaXMucmVzdWx0QnVmZmVyID0gcmVzdWx0QnVmZmVyICE9PSB1bmRlZmluZWQgP1xuXHRcdHJlc3VsdEJ1ZmZlciA6IG5ldyBzYW1wbGVWYWx1ZXMuY29uc3RydWN0b3IoIHNhbXBsZVNpemUgKTtcblx0dGhpcy5zYW1wbGVWYWx1ZXMgPSBzYW1wbGVWYWx1ZXM7XG5cdHRoaXMudmFsdWVTaXplID0gc2FtcGxlU2l6ZTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBJbnRlcnBvbGFudC5wcm90b3R5cGUsIHtcblxuXHRldmFsdWF0ZTogZnVuY3Rpb24gKCB0ICkge1xuXG5cdFx0dmFyIHBwID0gdGhpcy5wYXJhbWV0ZXJQb3NpdGlvbnMsXG5cdFx0XHRpMSA9IHRoaXMuX2NhY2hlZEluZGV4LFxuXG5cdFx0XHR0MSA9IHBwWyBpMSBdLFxuXHRcdFx0dDAgPSBwcFsgaTEgLSAxIF07XG5cblx0XHR2YWxpZGF0ZV9pbnRlcnZhbDoge1xuXG5cdFx0XHRzZWVrOiB7XG5cblx0XHRcdFx0dmFyIHJpZ2h0O1xuXG5cdFx0XHRcdGxpbmVhcl9zY2FuOiB7XG5cblx0XHRcdFx0XHQvLy0gU2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NvbXBhcmlzb24tdG8tdW5kZWZpbmVkLzNcblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XG5cdFx0XHRcdFx0Ly8tXG5cdFx0XHRcdFx0Ly8tIFx0XHRcdFx0aWYgKCB0ID49IHQxIHx8IHQxID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0Zm9yd2FyZF9zY2FuOiBpZiAoICEgKCB0IDwgdDEgKSApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGdpdmVVcEF0ID0gaTEgKyAyOyA7ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdDEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggdCA8IHQwICkgYnJlYWsgZm9yd2FyZF9zY2FuO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYWZ0ZXIgZW5kXG5cblx0XHRcdFx0XHRcdFx0XHRpMSA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFmdGVyRW5kXyggaTEgLSAxLCB0LCB0MCApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIGkxID09PSBnaXZlVXBBdCApIGJyZWFrOyAvLyB0aGlzIGxvb3BcblxuXHRcdFx0XHRcdFx0XHR0MCA9IHQxO1xuXHRcdFx0XHRcdFx0XHR0MSA9IHBwWyArKyBpMSBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdCA8IHQxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gd2UgaGF2ZSBhcnJpdmVkIGF0IHRoZSBzb3VnaHQgaW50ZXJ2YWxcblx0XHRcdFx0XHRcdFx0XHRicmVhayBzZWVrO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBwcmVwYXJlIGJpbmFyeSBzZWFyY2ggb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGluZGV4XG5cdFx0XHRcdFx0XHRyaWdodCA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHRcdGJyZWFrIGxpbmVhcl9zY2FuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8tIHNsb3dlciBjb2RlOlxuXHRcdFx0XHRcdC8vLVx0XHRcdFx0XHRpZiAoIHQgPCB0MCB8fCB0MCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGlmICggISAoIHQgPj0gdDAgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbG9vcGluZz9cblxuXHRcdFx0XHRcdFx0dmFyIHQxZ2xvYmFsID0gcHBbIDEgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB0IDwgdDFnbG9iYWwgKSB7XG5cblx0XHRcdFx0XHRcdFx0aTEgPSAyOyAvLyArIDEsIHVzaW5nIHRoZSBzY2FuIGZvciB0aGUgZGV0YWlsc1xuXHRcdFx0XHRcdFx0XHR0MCA9IHQxZ2xvYmFsO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIGxpbmVhciByZXZlcnNlIHNjYW5cblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGdpdmVVcEF0ID0gaTEgLSAyOyA7ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdDAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIGJlZm9yZSBzdGFydFxuXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fY2FjaGVkSW5kZXggPSAwO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmJlZm9yZVN0YXJ0XyggMCwgdCwgdDEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBpMSA9PT0gZ2l2ZVVwQXQgKSBicmVhazsgLy8gdGhpcyBsb29wXG5cblx0XHRcdFx0XHRcdFx0dDEgPSB0MDtcblx0XHRcdFx0XHRcdFx0dDAgPSBwcFsgLS0gaTEgLSAxIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0ID49IHQwICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gd2UgaGF2ZSBhcnJpdmVkIGF0IHRoZSBzb3VnaHQgaW50ZXJ2YWxcblx0XHRcdFx0XHRcdFx0XHRicmVhayBzZWVrO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBwcmVwYXJlIGJpbmFyeSBzZWFyY2ggb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgaW5kZXhcblx0XHRcdFx0XHRcdHJpZ2h0ID0gaTE7XG5cdFx0XHRcdFx0XHRpMSA9IDA7XG5cdFx0XHRcdFx0XHRicmVhayBsaW5lYXJfc2NhbjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHRoZSBpbnRlcnZhbCBpcyB2YWxpZFxuXG5cdFx0XHRcdFx0YnJlYWsgdmFsaWRhdGVfaW50ZXJ2YWw7XG5cblx0XHRcdFx0fSAvLyBsaW5lYXIgc2NhblxuXG5cdFx0XHRcdC8vIGJpbmFyeSBzZWFyY2hcblxuXHRcdFx0XHR3aGlsZSAoIGkxIDwgcmlnaHQgKSB7XG5cblx0XHRcdFx0XHR2YXIgbWlkID0gKCBpMSArIHJpZ2h0ICkgPj4+IDE7XG5cblx0XHRcdFx0XHRpZiAoIHQgPCBwcFsgbWlkIF0gKSB7XG5cblx0XHRcdFx0XHRcdHJpZ2h0ID0gbWlkO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aTEgPSBtaWQgKyAxO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0MSA9IHBwWyBpMSBdO1xuXHRcdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdFx0XHQvLyBjaGVjayBib3VuZGFyeSBjYXNlcywgYWdhaW5cblxuXHRcdFx0XHRpZiAoIHQwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuYmVmb3JlU3RhcnRfKCAwLCB0LCB0MSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHQxID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpMSA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmFmdGVyRW5kXyggaTEgLSAxLCB0MCwgdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSAvLyBzZWVrXG5cblx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cblx0XHRcdHRoaXMuaW50ZXJ2YWxDaGFuZ2VkXyggaTEsIHQwLCB0MSApO1xuXG5cdFx0fSAvLyB2YWxpZGF0ZV9pbnRlcnZhbFxuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJwb2xhdGVfKCBpMSwgdDAsIHQsIHQxICk7XG5cblx0fSxcblxuXHRzZXR0aW5nczogbnVsbCwgLy8gb3B0aW9uYWwsIHN1YmNsYXNzLXNwZWNpZmljIHNldHRpbmdzIHN0cnVjdHVyZVxuXHQvLyBOb3RlOiBUaGUgaW5kaXJlY3Rpb24gYWxsb3dzIGNlbnRyYWwgY29udHJvbCBvZiBtYW55IGludGVycG9sYW50cy5cblxuXHQvLyAtLS0gUHJvdGVjdGVkIGludGVyZmFjZVxuXG5cdERlZmF1bHRTZXR0aW5nc186IHt9LFxuXG5cdGdldFNldHRpbmdzXzogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0dGluZ3MgfHwgdGhpcy5EZWZhdWx0U2V0dGluZ3NfO1xuXG5cdH0sXG5cblx0Y29weVNhbXBsZVZhbHVlXzogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdC8vIGNvcGllcyBhIHNhbXBsZSB2YWx1ZSB0byB0aGUgcmVzdWx0IGJ1ZmZlclxuXG5cdFx0dmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdG9mZnNldCA9IGluZGV4ICogc3RyaWRlO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID0gdmFsdWVzWyBvZmZzZXQgKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH0sXG5cblx0Ly8gVGVtcGxhdGUgbWV0aG9kcyBmb3IgZGVyaXZlZCBjbGFzc2VzOlxuXG5cdGludGVycG9sYXRlXzogZnVuY3Rpb24gKCAvKiBpMSwgdDAsIHQsIHQxICovICkge1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCAnY2FsbCB0byBhYnN0cmFjdCBtZXRob2QnICk7XG5cdFx0Ly8gaW1wbGVtZW50YXRpb25zIHNoYWxsIHJldHVybiB0aGlzLnJlc3VsdEJ1ZmZlclxuXG5cdH0sXG5cblx0aW50ZXJ2YWxDaGFuZ2VkXzogZnVuY3Rpb24gKCAvKiBpMSwgdDAsIHQxICovICkge1xuXG5cdFx0Ly8gZW1wdHlcblxuXHR9XG5cbn0gKTtcblxuLy8hXFwgREVDTEFSRSBBTElBUyBBRlRFUiBhc3NpZ24gcHJvdG90eXBlICFcbk9iamVjdC5hc3NpZ24oIEludGVycG9sYW50LnByb3RvdHlwZSwge1xuXG5cdC8vKCAwLCB0LCB0MCApLCByZXR1cm5zIHRoaXMucmVzdWx0QnVmZmVyXG5cdGJlZm9yZVN0YXJ0XzogSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV8sXG5cblx0Ly8oIE4tMSwgdE4tMSwgdCApLCByZXR1cm5zIHRoaXMucmVzdWx0QnVmZmVyXG5cdGFmdGVyRW5kXzogSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV8sXG5cbn0gKTtcblxuLyoqXG4gKiBTcGhlcmljYWwgbGluZWFyIHVuaXQgcXVhdGVybmlvbiBpbnRlcnBvbGFudC5cbiAqXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdEludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxufVxuXG5RdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LFxuXG5cdGludGVycG9sYXRlXzogZnVuY3Rpb24gKCBpMSwgdDAsIHQsIHQxICkge1xuXG5cdFx0dmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblxuXHRcdFx0b2Zmc2V0ID0gaTEgKiBzdHJpZGUsXG5cblx0XHRcdGFscGhhID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApO1xuXG5cdFx0Zm9yICggdmFyIGVuZCA9IG9mZnNldCArIHN0cmlkZTsgb2Zmc2V0ICE9PSBlbmQ7IG9mZnNldCArPSA0ICkge1xuXG5cdFx0XHRRdWF0ZXJuaW9uLnNsZXJwRmxhdCggcmVzdWx0LCAwLCB2YWx1ZXMsIG9mZnNldCAtIHN0cmlkZSwgdmFsdWVzLCBvZmZzZXQsIGFscGhhICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIHF1YXRlcm5pb24ga2V5ZnJhbWUgdmFsdWVzLlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHtcblxuXHRLZXlmcmFtZVRyYWNrLmNhbGwoIHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKTtcblxufVxuXG5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLFxuXG5cdFZhbHVlVHlwZU5hbWU6ICdxdWF0ZXJuaW9uJyxcblxuXHQvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXG5cblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlTGluZWFyLFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjogZnVuY3Rpb24gKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH0sXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOiB1bmRlZmluZWQgLy8gbm90IHlldCBpbXBsZW1lbnRlZFxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgVHJhY2sgb2Yga2V5ZnJhbWUgdmFsdWVzIHRoYXQgcmVwcmVzZW50IGNvbG9yLlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gQ29sb3JLZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdEtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApO1xuXG59XG5cbkNvbG9yS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IENvbG9yS2V5ZnJhbWVUcmFjayxcblxuXHRWYWx1ZVR5cGVOYW1lOiAnY29sb3InXG5cblx0Ly8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxuXG5cdC8vIERlZmF1bHRJbnRlcnBvbGF0aW9uIGlzIGluaGVyaXRlZFxuXG5cdC8vIE5vdGU6IFZlcnkgYmFzaWMgaW1wbGVtZW50YXRpb24gYW5kIG5vdGhpbmcgc3BlY2lhbCB5ZXQuXG5cdC8vIEhvd2V2ZXIsIHRoaXMgaXMgdGhlIHBsYWNlIGZvciBjb2xvciBzcGFjZSBwYXJhbWV0ZXJpemF0aW9uLlxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgVHJhY2sgb2YgbnVtZXJpYyBrZXlmcmFtZSB2YWx1ZXMuXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIE51bWJlcktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuTnVtYmVyS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IE51bWJlcktleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ251bWJlcidcblxuXHQvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXG5cblx0Ly8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXG5cbn0gKTtcblxuLyoqXG4gKiBGYXN0IGFuZCBzaW1wbGUgY3ViaWMgc3BsaW5lIGludGVycG9sYW50LlxuICpcbiAqIEl0IHdhcyBkZXJpdmVkIGZyb20gYSBIZXJtaXRpYW4gY29uc3RydWN0aW9uIHNldHRpbmcgdGhlIGZpcnN0IGRlcml2YXRpdmVcbiAqIGF0IGVhY2ggc2FtcGxlIHBvc2l0aW9uIHRvIHRoZSBsaW5lYXIgc2xvcGUgYmV0d2VlbiBuZWlnaGJvcmluZyBwb3NpdGlvbnNcbiAqIG92ZXIgdGhlaXIgcGFyYW1ldGVyIGludGVydmFsLlxuICpcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBDdWJpY0ludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdEludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxuXHR0aGlzLl93ZWlnaHRQcmV2ID0gLSAwO1xuXHR0aGlzLl9vZmZzZXRQcmV2ID0gLSAwO1xuXHR0aGlzLl93ZWlnaHROZXh0ID0gLSAwO1xuXHR0aGlzLl9vZmZzZXROZXh0ID0gLSAwO1xuXG59XG5cbkN1YmljSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQ3ViaWNJbnRlcnBvbGFudCxcblxuXHREZWZhdWx0U2V0dGluZ3NfOiB7XG5cblx0XHRlbmRpbmdTdGFydDogWmVyb0N1cnZhdHVyZUVuZGluZyxcblx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcblxuXHR9LFxuXG5cdGludGVydmFsQ2hhbmdlZF86IGZ1bmN0aW9uICggaTEsIHQwLCB0MSApIHtcblxuXHRcdHZhciBwcCA9IHRoaXMucGFyYW1ldGVyUG9zaXRpb25zLFxuXHRcdFx0aVByZXYgPSBpMSAtIDIsXG5cdFx0XHRpTmV4dCA9IGkxICsgMSxcblxuXHRcdFx0dFByZXYgPSBwcFsgaVByZXYgXSxcblx0XHRcdHROZXh0ID0gcHBbIGlOZXh0IF07XG5cblx0XHRpZiAoIHRQcmV2ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nU3RhcnQgKSB7XG5cblx0XHRcdFx0Y2FzZSBaZXJvU2xvcGVFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyBmJyh0MCkgPSAwXG5cdFx0XHRcdFx0aVByZXYgPSBpMTtcblx0XHRcdFx0XHR0UHJldiA9IDIgKiB0MCAtIHQxO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBXcmFwQXJvdW5kRW5kaW5nOlxuXG5cdFx0XHRcdFx0Ly8gdXNlIHRoZSBvdGhlciBlbmQgb2YgdGhlIGN1cnZlXG5cdFx0XHRcdFx0aVByZXYgPSBwcC5sZW5ndGggLSAyO1xuXHRcdFx0XHRcdHRQcmV2ID0gdDAgKyBwcFsgaVByZXYgXSAtIHBwWyBpUHJldiArIDEgXTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6IC8vIFplcm9DdXJ2YXR1cmVFbmRpbmdcblxuXHRcdFx0XHRcdC8vIGYnJyh0MCkgPSAwIGEuay5hLiBOYXR1cmFsIFNwbGluZVxuXHRcdFx0XHRcdGlQcmV2ID0gaTE7XG5cdFx0XHRcdFx0dFByZXYgPSB0MTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0TmV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLmdldFNldHRpbmdzXygpLmVuZGluZ0VuZCApIHtcblxuXHRcdFx0XHRjYXNlIFplcm9TbG9wZUVuZGluZzpcblxuXHRcdFx0XHRcdC8vIGYnKHROKSA9IDBcblx0XHRcdFx0XHRpTmV4dCA9IGkxO1xuXHRcdFx0XHRcdHROZXh0ID0gMiAqIHQxIC0gdDA7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFdyYXBBcm91bmRFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmVcblx0XHRcdFx0XHRpTmV4dCA9IDE7XG5cdFx0XHRcdFx0dE5leHQgPSB0MSArIHBwWyAxIF0gLSBwcFsgMCBdO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogLy8gWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdFx0XHRcdFx0Ly8gZicnKHROKSA9IDAsIGEuay5hLiBOYXR1cmFsIFNwbGluZVxuXHRcdFx0XHRcdGlOZXh0ID0gaTEgLSAxO1xuXHRcdFx0XHRcdHROZXh0ID0gdDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBoYWxmRHQgPSAoIHQxIC0gdDAgKSAqIDAuNSxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplO1xuXG5cdFx0dGhpcy5fd2VpZ2h0UHJldiA9IGhhbGZEdCAvICggdDAgLSB0UHJldiApO1xuXHRcdHRoaXMuX3dlaWdodE5leHQgPSBoYWxmRHQgLyAoIHROZXh0IC0gdDEgKTtcblx0XHR0aGlzLl9vZmZzZXRQcmV2ID0gaVByZXYgKiBzdHJpZGU7XG5cdFx0dGhpcy5fb2Zmc2V0TmV4dCA9IGlOZXh0ICogc3RyaWRlO1xuXG5cdH0sXG5cblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvMSA9IGkxICogc3RyaWRlLFx0XHRvMCA9IG8xIC0gc3RyaWRlLFxuXHRcdFx0b1AgPSB0aGlzLl9vZmZzZXRQcmV2LCBcdG9OID0gdGhpcy5fb2Zmc2V0TmV4dCxcblx0XHRcdHdQID0gdGhpcy5fd2VpZ2h0UHJldixcdHdOID0gdGhpcy5fd2VpZ2h0TmV4dCxcblxuXHRcdFx0cCA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSxcblx0XHRcdHBwID0gcCAqIHAsXG5cdFx0XHRwcHAgPSBwcCAqIHA7XG5cblx0XHQvLyBldmFsdWF0ZSBwb2x5bm9taWFsc1xuXG5cdFx0dmFyIHNQID0gLSB3UCAqIHBwcCArIDIgKiB3UCAqIHBwIC0gd1AgKiBwO1xuXHRcdHZhciBzMCA9ICggMSArIHdQICkgKiBwcHAgKyAoIC0gMS41IC0gMiAqIHdQICkgKiBwcCArICggLSAwLjUgKyB3UCApICogcCArIDE7XG5cdFx0dmFyIHMxID0gKCAtIDEgLSB3TiApICogcHBwICsgKCAxLjUgKyB3TiApICogcHAgKyAwLjUgKiBwO1xuXHRcdHZhciBzTiA9IHdOICogcHBwIC0gd04gKiBwcDtcblxuXHRcdC8vIGNvbWJpbmUgZGF0YSBsaW5lYXJseVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID1cblx0XHRcdFx0XHRzUCAqIHZhbHVlc1sgb1AgKyBpIF0gK1xuXHRcdFx0XHRcdHMwICogdmFsdWVzWyBvMCArIGkgXSArXG5cdFx0XHRcdFx0czEgKiB2YWx1ZXNbIG8xICsgaSBdICtcblx0XHRcdFx0XHRzTiAqIHZhbHVlc1sgb04gKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBMaW5lYXJJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRJbnRlcnBvbGFudC5jYWxsKCB0aGlzLCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cbn1cblxuTGluZWFySW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTGluZWFySW50ZXJwb2xhbnQsXG5cblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvZmZzZXQxID0gaTEgKiBzdHJpZGUsXG5cdFx0XHRvZmZzZXQwID0gb2Zmc2V0MSAtIHN0cmlkZSxcblxuXHRcdFx0d2VpZ2h0MSA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSxcblx0XHRcdHdlaWdodDAgPSAxIC0gd2VpZ2h0MTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRyZXN1bHRbIGkgXSA9XG5cdFx0XHRcdFx0dmFsdWVzWyBvZmZzZXQwICsgaSBdICogd2VpZ2h0MCArXG5cdFx0XHRcdFx0dmFsdWVzWyBvZmZzZXQxICsgaSBdICogd2VpZ2h0MTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEludGVycG9sYW50IHRoYXQgZXZhbHVhdGVzIHRvIHRoZSBzYW1wbGUgdmFsdWUgYXQgdGhlIHBvc2l0aW9uIHByZWNlZWRpbmdcbiAqIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIERpc2NyZXRlSW50ZXJwb2xhbnQoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0SW50ZXJwb2xhbnQuY2FsbCggdGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG59XG5cbkRpc2NyZXRlSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogRGlzY3JldGVJbnRlcnBvbGFudCxcblxuXHRpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEgLyosIHQwLCB0LCB0MSAqLyApIHtcblxuXHRcdHJldHVybiB0aGlzLmNvcHlTYW1wbGVWYWx1ZV8oIGkxIC0gMSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgdHNjaHdcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqL1xuXG52YXIgQW5pbWF0aW9uVXRpbHMgPSB7XG5cblx0Ly8gc2FtZSBhcyBBcnJheS5wcm90b3R5cGUuc2xpY2UsIGJ1dCBhbHNvIHdvcmtzIG9uIHR5cGVkIGFycmF5c1xuXHRhcnJheVNsaWNlOiBmdW5jdGlvbiAoIGFycmF5LCBmcm9tLCB0byApIHtcblxuXHRcdGlmICggQW5pbWF0aW9uVXRpbHMuaXNUeXBlZEFycmF5KCBhcnJheSApICkge1xuXG5cdFx0XHQvLyBpbiBpb3M5IGFycmF5LnN1YmFycmF5KGZyb20sIHVuZGVmaW5lZCkgd2lsbCByZXR1cm4gZW1wdHkgYXJyYXlcblx0XHRcdC8vIGJ1dCBhcnJheS5zdWJhcnJheShmcm9tKSBvciBhcnJheS5zdWJhcnJheShmcm9tLCBsZW4pIGlzIGNvcnJlY3Rcblx0XHRcdHJldHVybiBuZXcgYXJyYXkuY29uc3RydWN0b3IoIGFycmF5LnN1YmFycmF5KCBmcm9tLCB0byAhPT0gdW5kZWZpbmVkID8gdG8gOiBhcnJheS5sZW5ndGggKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFycmF5LnNsaWNlKCBmcm9tLCB0byApO1xuXG5cdH0sXG5cblx0Ly8gY29udmVydHMgYW4gYXJyYXkgdG8gYSBzcGVjaWZpYyB0eXBlXG5cdGNvbnZlcnRBcnJheTogZnVuY3Rpb24gKCBhcnJheSwgdHlwZSwgZm9yY2VDbG9uZSApIHtcblxuXHRcdGlmICggISBhcnJheSB8fCAvLyBsZXQgJ3VuZGVmaW5lZCcgYW5kICdudWxsJyBwYXNzXG5cdFx0XHRcdCEgZm9yY2VDbG9uZSAmJiBhcnJheS5jb25zdHJ1Y3RvciA9PT0gdHlwZSApIHJldHVybiBhcnJheTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUuQllURVNfUEVSX0VMRU1FTlQgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IHR5cGUoIGFycmF5ICk7IC8vIGNyZWF0ZSB0eXBlZCBhcnJheVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcnJheSApOyAvLyBjcmVhdGUgQXJyYXlcblxuXHR9LFxuXG5cdGlzVHlwZWRBcnJheTogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRyZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KCBvYmplY3QgKSAmJlxuXHRcdFx0XHQhICggb2JqZWN0IGluc3RhbmNlb2YgRGF0YVZpZXcgKTtcblxuXHR9LFxuXG5cdC8vIHJldHVybnMgYW4gYXJyYXkgYnkgd2hpY2ggdGltZXMgYW5kIHZhbHVlcyBjYW4gYmUgc29ydGVkXG5cdGdldEtleWZyYW1lT3JkZXI6IGZ1bmN0aW9uICggdGltZXMgKSB7XG5cblx0XHRmdW5jdGlvbiBjb21wYXJlVGltZSggaSwgaiApIHtcblxuXHRcdFx0cmV0dXJuIHRpbWVzWyBpIF0gLSB0aW1lc1sgaiBdO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG4gPSB0aW1lcy5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBBcnJheSggbiApO1xuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbjsgKysgaSApIHJlc3VsdFsgaSBdID0gaTtcblxuXHRcdHJlc3VsdC5zb3J0KCBjb21wYXJlVGltZSApO1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9LFxuXG5cdC8vIHVzZXMgdGhlIGFycmF5IHByZXZpb3VzbHkgcmV0dXJuZWQgYnkgJ2dldEtleWZyYW1lT3JkZXInIHRvIHNvcnQgZGF0YVxuXHRzb3J0ZWRBcnJheTogZnVuY3Rpb24gKCB2YWx1ZXMsIHN0cmlkZSwgb3JkZXIgKSB7XG5cblx0XHR2YXIgblZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyB2YWx1ZXMuY29uc3RydWN0b3IoIG5WYWx1ZXMgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgZHN0T2Zmc2V0ID0gMDsgZHN0T2Zmc2V0ICE9PSBuVmFsdWVzOyArKyBpICkge1xuXG5cdFx0XHR2YXIgc3JjT2Zmc2V0ID0gb3JkZXJbIGkgXSAqIHN0cmlkZTtcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0cmVzdWx0WyBkc3RPZmZzZXQgKysgXSA9IHZhbHVlc1sgc3JjT2Zmc2V0ICsgaiBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH0sXG5cblx0Ly8gZnVuY3Rpb24gZm9yIHBhcnNpbmcgQU9TIGtleWZyYW1lIGZvcm1hdHNcblx0ZmxhdHRlbkpTT046IGZ1bmN0aW9uICgganNvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHZhbHVlUHJvcGVydHlOYW1lICkge1xuXG5cdFx0dmFyIGkgPSAxLCBrZXkgPSBqc29uS2V5c1sgMCBdO1xuXG5cdFx0d2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCAmJiBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0a2V5ID0ganNvbktleXNbIGkgKysgXTtcblxuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSByZXR1cm47IC8vIG5vIGRhdGFcblxuXHRcdHZhciB2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSByZXR1cm47IC8vIG5vIGRhdGFcblxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRpbWVzLnB1c2goIGtleS50aW1lICk7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2guYXBwbHkoIHZhbHVlcywgdmFsdWUgKTsgLy8gcHVzaCBhbGwgZWxlbWVudHNcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0a2V5ID0ganNvbktleXNbIGkgKysgXTtcblxuXHRcdFx0fSB3aGlsZSAoIGtleSAhPT0gdW5kZWZpbmVkICk7XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS50b0FycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIC4uLmFzc3VtZSBUSFJFRS5NYXRoLWlzaFxuXG5cdFx0XHRkbyB7XG5cblx0XHRcdFx0dmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGltZXMucHVzaCgga2V5LnRpbWUgKTtcblx0XHRcdFx0XHR2YWx1ZS50b0FycmF5KCB2YWx1ZXMsIHZhbHVlcy5sZW5ndGggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0a2V5ID0ganNvbktleXNbIGkgKysgXTtcblxuXHRcdFx0fSB3aGlsZSAoIGtleSAhPT0gdW5kZWZpbmVkICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBvdGhlcndpc2UgcHVzaCBhcy1pc1xuXG5cdFx0XHRkbyB7XG5cblx0XHRcdFx0dmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGltZXMucHVzaCgga2V5LnRpbWUgKTtcblx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0a2V5ID0ganNvbktleXNbIGkgKysgXTtcblxuXHRcdFx0fSB3aGlsZSAoIGtleSAhPT0gdW5kZWZpbmVkICk7XG5cblx0XHR9XG5cblx0fVxuXG59O1xuXG4vKipcbiAqXG4gKiBBIHRpbWVkIHNlcXVlbmNlIG9mIGtleWZyYW1lcyBmb3IgYSBzcGVjaWZpYyBwcm9wZXJ0eS5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEtleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayBuYW1lIGlzIHVuZGVmaW5lZCcgKTtcblx0aWYgKCB0aW1lcyA9PT0gdW5kZWZpbmVkIHx8IHRpbWVzLmxlbmd0aCA9PT0gMCApIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IG5vIGtleWZyYW1lcyBpbiB0cmFjayBuYW1lZCAnICsgbmFtZSApO1xuXG5cdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0dGhpcy50aW1lcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdGltZXMsIHRoaXMuVGltZUJ1ZmZlclR5cGUgKTtcblx0dGhpcy52YWx1ZXMgPSBBbmltYXRpb25VdGlscy5jb252ZXJ0QXJyYXkoIHZhbHVlcywgdGhpcy5WYWx1ZUJ1ZmZlclR5cGUgKTtcblxuXHR0aGlzLnNldEludGVycG9sYXRpb24oIGludGVycG9sYXRpb24gfHwgdGhpcy5EZWZhdWx0SW50ZXJwb2xhdGlvbiApO1xuXG5cdHRoaXMudmFsaWRhdGUoKTtcblx0dGhpcy5vcHRpbWl6ZSgpO1xuXG59XG5cbi8vIFN0YXRpYyBtZXRob2RzOlxuXG5PYmplY3QuYXNzaWduKCBLZXlmcmFtZVRyYWNrLCB7XG5cblx0Ly8gU2VyaWFsaXphdGlvbiAoaW4gc3RhdGljIGNvbnRleHQsIGJlY2F1c2Ugb2YgY29uc3RydWN0b3IgaW52b2NhdGlvblxuXHQvLyBhbmQgYXV0b21hdGljIGludm9jYXRpb24gb2YgLnRvSlNPTik6XG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdGlmICgganNvbi50eXBlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIHR5cGUgdW5kZWZpbmVkLCBjYW4gbm90IHBhcnNlJyApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRyYWNrVHlwZSA9IEtleWZyYW1lVHJhY2suX2dldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUoIGpzb24udHlwZSApO1xuXG5cdFx0aWYgKCBqc29uLnRpbWVzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciB0aW1lcyA9IFtdLCB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oIGpzb24ua2V5cywgdGltZXMsIHZhbHVlcywgJ3ZhbHVlJyApO1xuXG5cdFx0XHRqc29uLnRpbWVzID0gdGltZXM7XG5cdFx0XHRqc29uLnZhbHVlcyA9IHZhbHVlcztcblxuXHRcdH1cblxuXHRcdC8vIGRlcml2ZWQgY2xhc3NlcyBjYW4gZGVmaW5lIGEgc3RhdGljIHBhcnNlIG1ldGhvZFxuXHRcdGlmICggdHJhY2tUeXBlLnBhcnNlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJldHVybiB0cmFja1R5cGUucGFyc2UoIGpzb24gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSBhIGNvbnN0cnVjdG9yIGNvbXBhdGlibGUgd2l0aCB0aGUgYmFzZVxuXHRcdFx0cmV0dXJuIG5ldyB0cmFja1R5cGUoIGpzb24ubmFtZSwganNvbi50aW1lcywganNvbi52YWx1ZXMsIGpzb24uaW50ZXJwb2xhdGlvbiApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIHRyYWNrICkge1xuXG5cdFx0dmFyIHRyYWNrVHlwZSA9IHRyYWNrLmNvbnN0cnVjdG9yO1xuXG5cdFx0dmFyIGpzb247XG5cblx0XHQvLyBkZXJpdmVkIGNsYXNzZXMgY2FuIGRlZmluZSBhIHN0YXRpYyB0b0pTT04gbWV0aG9kXG5cdFx0aWYgKCB0cmFja1R5cGUudG9KU09OICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGpzb24gPSB0cmFja1R5cGUudG9KU09OKCB0cmFjayApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYnkgZGVmYXVsdCwgd2UgYXNzdW1lIHRoZSBkYXRhIGNhbiBiZSBzZXJpYWxpemVkIGFzLWlzXG5cdFx0XHRqc29uID0ge1xuXG5cdFx0XHRcdCduYW1lJzogdHJhY2submFtZSxcblx0XHRcdFx0J3RpbWVzJzogQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0cmFjay50aW1lcywgQXJyYXkgKSxcblx0XHRcdFx0J3ZhbHVlcyc6IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdHJhY2sudmFsdWVzLCBBcnJheSApXG5cblx0XHRcdH07XG5cblx0XHRcdHZhciBpbnRlcnBvbGF0aW9uID0gdHJhY2suZ2V0SW50ZXJwb2xhdGlvbigpO1xuXG5cdFx0XHRpZiAoIGludGVycG9sYXRpb24gIT09IHRyYWNrLkRlZmF1bHRJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdGpzb24uaW50ZXJwb2xhdGlvbiA9IGludGVycG9sYXRpb247XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGpzb24udHlwZSA9IHRyYWNrLlZhbHVlVHlwZU5hbWU7IC8vIG1hbmRhdG9yeVxuXG5cdFx0cmV0dXJuIGpzb247XG5cblx0fSxcblxuXHRfZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZTogZnVuY3Rpb24gKCB0eXBlTmFtZSApIHtcblxuXHRcdHN3aXRjaCAoIHR5cGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cblx0XHRcdGNhc2UgJ3NjYWxhcic6XG5cdFx0XHRjYXNlICdkb3VibGUnOlxuXHRcdFx0Y2FzZSAnZmxvYXQnOlxuXHRcdFx0Y2FzZSAnbnVtYmVyJzpcblx0XHRcdGNhc2UgJ2ludGVnZXInOlxuXG5cdFx0XHRcdHJldHVybiBOdW1iZXJLZXlmcmFtZVRyYWNrO1xuXG5cdFx0XHRjYXNlICd2ZWN0b3InOlxuXHRcdFx0Y2FzZSAndmVjdG9yMic6XG5cdFx0XHRjYXNlICd2ZWN0b3IzJzpcblx0XHRcdGNhc2UgJ3ZlY3RvcjQnOlxuXG5cdFx0XHRcdHJldHVybiBWZWN0b3JLZXlmcmFtZVRyYWNrO1xuXG5cdFx0XHRjYXNlICdjb2xvcic6XG5cblx0XHRcdFx0cmV0dXJuIENvbG9yS2V5ZnJhbWVUcmFjaztcblxuXHRcdFx0Y2FzZSAncXVhdGVybmlvbic6XG5cblx0XHRcdFx0cmV0dXJuIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrO1xuXG5cdFx0XHRjYXNlICdib29sJzpcblx0XHRcdGNhc2UgJ2Jvb2xlYW4nOlxuXG5cdFx0XHRcdHJldHVybiBCb29sZWFuS2V5ZnJhbWVUcmFjaztcblxuXHRcdFx0Y2FzZSAnc3RyaW5nJzpcblxuXHRcdFx0XHRyZXR1cm4gU3RyaW5nS2V5ZnJhbWVUcmFjaztcblxuXHRcdH1cblxuXHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFVuc3VwcG9ydGVkIHR5cGVOYW1lOiAnICsgdHlwZU5hbWUgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUsIHtcblxuXHRjb25zdHJ1Y3RvcjogS2V5ZnJhbWVUcmFjayxcblxuXHRUaW1lQnVmZmVyVHlwZTogRmxvYXQzMkFycmF5LFxuXG5cdFZhbHVlQnVmZmVyVHlwZTogRmxvYXQzMkFycmF5LFxuXG5cdERlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZUxpbmVhcixcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTogZnVuY3Rpb24gKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IERpc2NyZXRlSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9LFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjogZnVuY3Rpb24gKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IExpbmVhckludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XG5cblx0fSxcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IGZ1bmN0aW9uICggcmVzdWx0ICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDdWJpY0ludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XG5cblx0fSxcblxuXHRzZXRJbnRlcnBvbGF0aW9uOiBmdW5jdGlvbiAoIGludGVycG9sYXRpb24gKSB7XG5cblx0XHR2YXIgZmFjdG9yeU1ldGhvZDtcblxuXHRcdHN3aXRjaCAoIGludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdGNhc2UgSW50ZXJwb2xhdGVEaXNjcmV0ZTpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZUxpbmVhcjpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgSW50ZXJwb2xhdGVTbW9vdGg6XG5cblx0XHRcdFx0ZmFjdG9yeU1ldGhvZCA9IHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBmYWN0b3J5TWV0aG9kID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBtZXNzYWdlID0gXCJ1bnN1cHBvcnRlZCBpbnRlcnBvbGF0aW9uIGZvciBcIiArXG5cdFx0XHRcdHRoaXMuVmFsdWVUeXBlTmFtZSArIFwiIGtleWZyYW1lIHRyYWNrIG5hbWVkIFwiICsgdGhpcy5uYW1lO1xuXG5cdFx0XHRpZiAoIHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBmYWxsIGJhY2sgdG8gZGVmYXVsdCwgdW5sZXNzIHRoZSBkZWZhdWx0IGl0c2VsZiBpcyBtZXNzZWQgdXBcblx0XHRcdFx0aWYgKCBpbnRlcnBvbGF0aW9uICE9PSB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggbWVzc2FnZSApOyAvLyBmYXRhbCwgaW4gdGhpcyBjYXNlXG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLktleWZyYW1lVHJhY2s6JywgbWVzc2FnZSApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jcmVhdGVJbnRlcnBvbGFudCA9IGZhY3RvcnlNZXRob2Q7XG5cblx0fSxcblxuXHRnZXRJbnRlcnBvbGF0aW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRzd2l0Y2ggKCB0aGlzLmNyZWF0ZUludGVycG9sYW50ICkge1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGU6XG5cblx0XHRcdFx0cmV0dXJuIEludGVycG9sYXRlRGlzY3JldGU7XG5cblx0XHRcdGNhc2UgdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6XG5cblx0XHRcdFx0cmV0dXJuIEludGVycG9sYXRlTGluZWFyO1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZVNtb290aDtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGdldFZhbHVlU2l6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmxlbmd0aCAvIHRoaXMudGltZXMubGVuZ3RoO1xuXG5cdH0sXG5cblx0Ly8gbW92ZSBhbGwga2V5ZnJhbWVzIGVpdGhlciBmb3J3YXJkcyBvciBiYWNrd2FyZHMgaW4gdGltZVxuXHRzaGlmdDogZnVuY3Rpb24gKCB0aW1lT2Zmc2V0ICkge1xuXG5cdFx0aWYgKCB0aW1lT2Zmc2V0ICE9PSAwLjAgKSB7XG5cblx0XHRcdHZhciB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICs9IHRpbWVPZmZzZXQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gc2NhbGUgYWxsIGtleWZyYW1lIHRpbWVzIGJ5IGEgZmFjdG9yICh1c2VmdWwgZm9yIGZyYW1lIDwtPiBzZWNvbmRzIGNvbnZlcnNpb25zKVxuXHRzY2FsZTogZnVuY3Rpb24gKCB0aW1lU2NhbGUgKSB7XG5cblx0XHRpZiAoIHRpbWVTY2FsZSAhPT0gMS4wICkge1xuXG5cdFx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSB0aW1lcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dGltZXNbIGkgXSAqPSB0aW1lU2NhbGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gcmVtb3ZlcyBrZXlmcmFtZXMgYmVmb3JlIGFuZCBhZnRlciBhbmltYXRpb24gd2l0aG91dCBjaGFuZ2luZyBhbnkgdmFsdWVzIHdpdGhpbiB0aGUgcmFuZ2UgW3N0YXJ0VGltZSwgZW5kVGltZV0uXG5cdC8vIElNUE9SVEFOVDogV2UgZG8gbm90IHNoaWZ0IGFyb3VuZCBrZXlzIHRvIHRoZSBzdGFydCBvZiB0aGUgdHJhY2sgdGltZSwgYmVjYXVzZSBmb3IgaW50ZXJwb2xhdGVkIGtleXMgdGhpcyB3aWxsIGNoYW5nZSB0aGVpciB2YWx1ZXNcblx0dHJpbTogZnVuY3Rpb24gKCBzdGFydFRpbWUsIGVuZFRpbWUgKSB7XG5cblx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzLFxuXHRcdFx0bktleXMgPSB0aW1lcy5sZW5ndGgsXG5cdFx0XHRmcm9tID0gMCxcblx0XHRcdHRvID0gbktleXMgLSAxO1xuXG5cdFx0d2hpbGUgKCBmcm9tICE9PSBuS2V5cyAmJiB0aW1lc1sgZnJvbSBdIDwgc3RhcnRUaW1lICkge1xuXG5cdFx0XHQrKyBmcm9tO1xuXG5cdFx0fVxuXG5cdFx0d2hpbGUgKCB0byAhPT0gLSAxICYmIHRpbWVzWyB0byBdID4gZW5kVGltZSApIHtcblxuXHRcdFx0LS0gdG87XG5cblx0XHR9XG5cblx0XHQrKyB0bzsgLy8gaW5jbHVzaXZlIC0+IGV4Y2x1c2l2ZSBib3VuZFxuXG5cdFx0aWYgKCBmcm9tICE9PSAwIHx8IHRvICE9PSBuS2V5cyApIHtcblxuXHRcdFx0Ly8gZW1wdHkgdHJhY2tzIGFyZSBmb3JiaWRkZW4sIHNvIGtlZXAgYXQgbGVhc3Qgb25lIGtleWZyYW1lXG5cdFx0XHRpZiAoIGZyb20gPj0gdG8gKSB0byA9IE1hdGgubWF4KCB0bywgMSApLCBmcm9tID0gdG8gLSAxO1xuXG5cdFx0XHR2YXIgc3RyaWRlID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcblx0XHRcdHRoaXMudGltZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB0aW1lcywgZnJvbSwgdG8gKTtcblx0XHRcdHRoaXMudmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGhpcy52YWx1ZXMsIGZyb20gKiBzdHJpZGUsIHRvICogc3RyaWRlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIGVuc3VyZSB3ZSBkbyBub3QgZ2V0IGEgR2FyYmFnZUluR2FyYmFnZU91dCBzaXR1YXRpb24sIG1ha2Ugc3VyZSB0cmFja3MgYXJlIGF0IGxlYXN0IG1pbmltYWxseSB2aWFibGVcblx0dmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2YWxpZCA9IHRydWU7XG5cblx0XHR2YXIgdmFsdWVTaXplID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcblx0XHRpZiAoIHZhbHVlU2l6ZSAtIE1hdGguZmxvb3IoIHZhbHVlU2l6ZSApICE9PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogSW52YWxpZCB2YWx1ZSBzaXplIGluIHRyYWNrLicsIHRoaXMgKTtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzLFxuXHRcdFx0dmFsdWVzID0gdGhpcy52YWx1ZXMsXG5cblx0XHRcdG5LZXlzID0gdGltZXMubGVuZ3RoO1xuXG5cdFx0aWYgKCBuS2V5cyA9PT0gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFRyYWNrIGlzIGVtcHR5LicsIHRoaXMgKTtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR2YXIgcHJldlRpbWUgPSBudWxsO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuS2V5czsgaSArKyApIHtcblxuXHRcdFx0dmFyIGN1cnJUaW1lID0gdGltZXNbIGkgXTtcblxuXHRcdFx0aWYgKCB0eXBlb2YgY3VyclRpbWUgPT09ICdudW1iZXInICYmIGlzTmFOKCBjdXJyVGltZSApICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBUaW1lIGlzIG5vdCBhIHZhbGlkIG51bWJlci4nLCB0aGlzLCBpLCBjdXJyVGltZSApO1xuXHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHByZXZUaW1lICE9PSBudWxsICYmIHByZXZUaW1lID4gY3VyclRpbWUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IE91dCBvZiBvcmRlciBrZXlzLicsIHRoaXMsIGksIGN1cnJUaW1lLCBwcmV2VGltZSApO1xuXHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRwcmV2VGltZSA9IGN1cnJUaW1lO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBBbmltYXRpb25VdGlscy5pc1R5cGVkQXJyYXkoIHZhbHVlcyApICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IHZhbHVlcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmFsdWUgPSB2YWx1ZXNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggaXNOYU4oIHZhbHVlICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblxuXHR9LFxuXG5cdC8vIHJlbW92ZXMgZXF1aXZhbGVudCBzZXF1ZW50aWFsIGtleXMgYXMgY29tbW9uIGluIG1vcnBoIHRhcmdldCBzZXF1ZW5jZXNcblx0Ly8gKDAsMCwwLDAsMSwxLDEsMCwwLDAsMCwwLDAsMCkgLS0+ICgwLDAsMSwxLDAsMClcblx0b3B0aW1pemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0aW1lcyA9IHRoaXMudGltZXMsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCksXG5cblx0XHRcdHNtb290aEludGVycG9sYXRpb24gPSB0aGlzLmdldEludGVycG9sYXRpb24oKSA9PT0gSW50ZXJwb2xhdGVTbW9vdGgsXG5cblx0XHRcdHdyaXRlSW5kZXggPSAxLFxuXHRcdFx0bGFzdEluZGV4ID0gdGltZXMubGVuZ3RoIC0gMTtcblxuXHRcdGZvciAoIHZhciBpID0gMTsgaSA8IGxhc3RJbmRleDsgKysgaSApIHtcblxuXHRcdFx0dmFyIGtlZXAgPSBmYWxzZTtcblxuXHRcdFx0dmFyIHRpbWUgPSB0aW1lc1sgaSBdO1xuXHRcdFx0dmFyIHRpbWVOZXh0ID0gdGltZXNbIGkgKyAxIF07XG5cblx0XHRcdC8vIHJlbW92ZSBhZGphY2VudCBrZXlmcmFtZXMgc2NoZWR1bGVkIGF0IHRoZSBzYW1lIHRpbWVcblxuXHRcdFx0aWYgKCB0aW1lICE9PSB0aW1lTmV4dCAmJiAoIGkgIT09IDEgfHwgdGltZSAhPT0gdGltZVsgMCBdICkgKSB7XG5cblx0XHRcdFx0aWYgKCAhIHNtb290aEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0XHQvLyByZW1vdmUgdW5uZWNlc3Nhcnkga2V5ZnJhbWVzIHNhbWUgYXMgdGhlaXIgbmVpZ2hib3JzXG5cblx0XHRcdFx0XHR2YXIgb2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdG9mZnNldFAgPSBvZmZzZXQgLSBzdHJpZGUsXG5cdFx0XHRcdFx0XHRvZmZzZXROID0gb2Zmc2V0ICsgc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9IHZhbHVlc1sgb2Zmc2V0ICsgaiBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHZhbHVlICE9PSB2YWx1ZXNbIG9mZnNldFAgKyBqIF0gfHxcblx0XHRcdFx0XHRcdFx0dmFsdWUgIT09IHZhbHVlc1sgb2Zmc2V0TiArIGogXSApIHtcblxuXHRcdFx0XHRcdFx0XHRrZWVwID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0a2VlcCA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGluLXBsYWNlIGNvbXBhY3Rpb25cblxuXHRcdFx0aWYgKCBrZWVwICkge1xuXG5cdFx0XHRcdGlmICggaSAhPT0gd3JpdGVJbmRleCApIHtcblxuXHRcdFx0XHRcdHRpbWVzWyB3cml0ZUluZGV4IF0gPSB0aW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0dmFyIHJlYWRPZmZzZXQgPSBpICogc3RyaWRlLFxuXHRcdFx0XHRcdFx0d3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhbHVlc1sgd3JpdGVPZmZzZXQgKyBqIF0gPSB2YWx1ZXNbIHJlYWRPZmZzZXQgKyBqIF07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdCsrIHdyaXRlSW5kZXg7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGZsdXNoIGxhc3Qga2V5ZnJhbWUgKGNvbXBhY3Rpb24gbG9va3MgYWhlYWQpXG5cblx0XHRpZiAoIGxhc3RJbmRleCA+IDAgKSB7XG5cblx0XHRcdHRpbWVzWyB3cml0ZUluZGV4IF0gPSB0aW1lc1sgbGFzdEluZGV4IF07XG5cblx0XHRcdGZvciAoIHZhciByZWFkT2Zmc2V0ID0gbGFzdEluZGV4ICogc3RyaWRlLCB3cml0ZU9mZnNldCA9IHdyaXRlSW5kZXggKiBzdHJpZGUsIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0dmFsdWVzWyB3cml0ZU9mZnNldCArIGogXSA9IHZhbHVlc1sgcmVhZE9mZnNldCArIGogXTtcblxuXHRcdFx0fVxuXG5cdFx0XHQrKyB3cml0ZUluZGV4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB3cml0ZUluZGV4ICE9PSB0aW1lcy5sZW5ndGggKSB7XG5cblx0XHRcdHRoaXMudGltZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB0aW1lcywgMCwgd3JpdGVJbmRleCApO1xuXHRcdFx0dGhpcy52YWx1ZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB2YWx1ZXMsIDAsIHdyaXRlSW5kZXggKiBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIHZlY3RvcmVkIGtleWZyYW1lIHZhbHVlcy5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFZlY3RvcktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuVmVjdG9yS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFZlY3RvcktleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ3ZlY3RvcidcblxuXHQvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXG5cblx0Ly8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXG5cbn0gKTtcblxuLyoqXG4gKlxuICogUmV1c2FibGUgc2V0IG9mIFRyYWNrcyB0aGF0IHJlcHJlc2VudCBhbiBhbmltYXRpb24uXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbkNsaXAoIG5hbWUsIGR1cmF0aW9uLCB0cmFja3MgKSB7XG5cblx0dGhpcy5uYW1lID0gbmFtZTtcblx0dGhpcy50cmFja3MgPSB0cmFja3M7XG5cdHRoaXMuZHVyYXRpb24gPSAoIGR1cmF0aW9uICE9PSB1bmRlZmluZWQgKSA/IGR1cmF0aW9uIDogLSAxO1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdC8vIHRoaXMgbWVhbnMgaXQgc2hvdWxkIGZpZ3VyZSBvdXQgaXRzIGR1cmF0aW9uIGJ5IHNjYW5uaW5nIHRoZSB0cmFja3Ncblx0aWYgKCB0aGlzLmR1cmF0aW9uIDwgMCApIHtcblxuXHRcdHRoaXMucmVzZXREdXJhdGlvbigpO1xuXG5cdH1cblxuXHR0aGlzLm9wdGltaXplKCk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQW5pbWF0aW9uQ2xpcCwge1xuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHR2YXIgdHJhY2tzID0gW10sXG5cdFx0XHRqc29uVHJhY2tzID0ganNvbi50cmFja3MsXG5cdFx0XHRmcmFtZVRpbWUgPSAxLjAgLyAoIGpzb24uZnBzIHx8IDEuMCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBuID0ganNvblRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHRyYWNrcy5wdXNoKCBLZXlmcmFtZVRyYWNrLnBhcnNlKCBqc29uVHJhY2tzWyBpIF0gKS5zY2FsZSggZnJhbWVUaW1lICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgQW5pbWF0aW9uQ2xpcCgganNvbi5uYW1lLCBqc29uLmR1cmF0aW9uLCB0cmFja3MgKTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBjbGlwICkge1xuXG5cdFx0dmFyIHRyYWNrcyA9IFtdLFxuXHRcdFx0Y2xpcFRyYWNrcyA9IGNsaXAudHJhY2tzO1xuXG5cdFx0dmFyIGpzb24gPSB7XG5cblx0XHRcdCduYW1lJzogY2xpcC5uYW1lLFxuXHRcdFx0J2R1cmF0aW9uJzogY2xpcC5kdXJhdGlvbixcblx0XHRcdCd0cmFja3MnOiB0cmFja3MsXG5cdFx0XHQndXVpZCc6IGNsaXAudXVpZFxuXG5cdFx0fTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGNsaXBUcmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR0cmFja3MucHVzaCggS2V5ZnJhbWVUcmFjay50b0pTT04oIGNsaXBUcmFja3NbIGkgXSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ganNvbjtcblxuXHR9LFxuXG5cdENyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlOiBmdW5jdGlvbiAoIG5hbWUsIG1vcnBoVGFyZ2V0U2VxdWVuY2UsIGZwcywgbm9Mb29wICkge1xuXG5cdFx0dmFyIG51bU1vcnBoVGFyZ2V0cyA9IG1vcnBoVGFyZ2V0U2VxdWVuY2UubGVuZ3RoO1xuXHRcdHZhciB0cmFja3MgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG51bU1vcnBoVGFyZ2V0czsgaSArKyApIHtcblxuXHRcdFx0dmFyIHRpbWVzID0gW107XG5cdFx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRcdHRpbWVzLnB1c2goXG5cdFx0XHRcdCggaSArIG51bU1vcnBoVGFyZ2V0cyAtIDEgKSAlIG51bU1vcnBoVGFyZ2V0cyxcblx0XHRcdFx0aSxcblx0XHRcdFx0KCBpICsgMSApICUgbnVtTW9ycGhUYXJnZXRzICk7XG5cblx0XHRcdHZhbHVlcy5wdXNoKCAwLCAxLCAwICk7XG5cblx0XHRcdHZhciBvcmRlciA9IEFuaW1hdGlvblV0aWxzLmdldEtleWZyYW1lT3JkZXIoIHRpbWVzICk7XG5cdFx0XHR0aW1lcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB0aW1lcywgMSwgb3JkZXIgKTtcblx0XHRcdHZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB2YWx1ZXMsIDEsIG9yZGVyICk7XG5cblx0XHRcdC8vIGlmIHRoZXJlIGlzIGEga2V5IGF0IHRoZSBmaXJzdCBmcmFtZSwgZHVwbGljYXRlIGl0IGFzIHRoZVxuXHRcdFx0Ly8gbGFzdCBmcmFtZSBhcyB3ZWxsIGZvciBwZXJmZWN0IGxvb3AuXG5cdFx0XHRpZiAoICEgbm9Mb29wICYmIHRpbWVzWyAwIF0gPT09IDAgKSB7XG5cblx0XHRcdFx0dGltZXMucHVzaCggbnVtTW9ycGhUYXJnZXRzICk7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZXNbIDAgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRyYWNrcy5wdXNoKFxuXHRcdFx0XHRuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayhcblx0XHRcdFx0XHQnLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1snICsgbW9ycGhUYXJnZXRTZXF1ZW5jZVsgaSBdLm5hbWUgKyAnXScsXG5cdFx0XHRcdFx0dGltZXMsIHZhbHVlc1xuXHRcdFx0XHQpLnNjYWxlKCAxLjAgLyBmcHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKCBuYW1lLCAtIDEsIHRyYWNrcyApO1xuXG5cdH0sXG5cblx0ZmluZEJ5TmFtZTogZnVuY3Rpb24gKCBvYmplY3RPckNsaXBBcnJheSwgbmFtZSApIHtcblxuXHRcdHZhciBjbGlwQXJyYXkgPSBvYmplY3RPckNsaXBBcnJheTtcblxuXHRcdGlmICggISBBcnJheS5pc0FycmF5KCBvYmplY3RPckNsaXBBcnJheSApICkge1xuXG5cdFx0XHR2YXIgbyA9IG9iamVjdE9yQ2xpcEFycmF5O1xuXHRcdFx0Y2xpcEFycmF5ID0gby5nZW9tZXRyeSAmJiBvLmdlb21ldHJ5LmFuaW1hdGlvbnMgfHwgby5hbmltYXRpb25zO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2xpcEFycmF5Lmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBjbGlwQXJyYXlbIGkgXS5uYW1lID09PSBuYW1lICkge1xuXG5cdFx0XHRcdHJldHVybiBjbGlwQXJyYXlbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fSxcblxuXHRDcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlczogZnVuY3Rpb24gKCBtb3JwaFRhcmdldHMsIGZwcywgbm9Mb29wICkge1xuXG5cdFx0dmFyIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzID0ge307XG5cblx0XHQvLyB0ZXN0ZWQgd2l0aCBodHRwczovL3JlZ2V4MTAxLmNvbS8gb24gdHJpY2sgc2VxdWVuY2VzXG5cdFx0Ly8gc3VjaCBmbGFtaW5nb19mbHlBXzAwMywgZmxhbWluZ29fcnVuMV8wMDMsIGNyZGVhdGgwMDU5XG5cdFx0dmFyIHBhdHRlcm4gPSAvXihbXFx3LV0qPykoW1xcZF0rKSQvO1xuXG5cdFx0Ly8gc29ydCBtb3JwaCB0YXJnZXQgbmFtZXMgaW50byBhbmltYXRpb24gZ3JvdXBzIGJhc2VkXG5cdFx0Ly8gcGF0dGVybnMgbGlrZSBXYWxrXzAwMSwgV2Fsa18wMDIsIFJ1bl8wMDEsIFJ1bl8wMDJcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGkgXTtcblx0XHRcdHZhciBwYXJ0cyA9IG1vcnBoVGFyZ2V0Lm5hbWUubWF0Y2goIHBhdHRlcm4gKTtcblxuXHRcdFx0aWYgKCBwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdHZhciBuYW1lID0gcGFydHNbIDEgXTtcblxuXHRcdFx0XHR2YXIgYW5pbWF0aW9uTW9ycGhUYXJnZXRzID0gYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbIG5hbWUgXTtcblx0XHRcdFx0aWYgKCAhIGFuaW1hdGlvbk1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF0gPSBhbmltYXRpb25Nb3JwaFRhcmdldHMgPSBbXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YW5pbWF0aW9uTW9ycGhUYXJnZXRzLnB1c2goIG1vcnBoVGFyZ2V0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBjbGlwcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdGNsaXBzLnB1c2goIEFuaW1hdGlvbkNsaXAuQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UoIG5hbWUsIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF0sIGZwcywgbm9Mb29wICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjbGlwcztcblxuXHR9LFxuXG5cdC8vIHBhcnNlIHRoZSBhbmltYXRpb24uaGllcmFyY2h5IGZvcm1hdFxuXHRwYXJzZUFuaW1hdGlvbjogZnVuY3Rpb24gKCBhbmltYXRpb24sIGJvbmVzICkge1xuXG5cdFx0aWYgKCAhIGFuaW1hdGlvbiApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkFuaW1hdGlvbkNsaXA6IE5vIGFuaW1hdGlvbiBpbiBKU09OTG9hZGVyIGRhdGEuJyApO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHR2YXIgYWRkTm9uZW1wdHlUcmFjayA9IGZ1bmN0aW9uICggdHJhY2tUeXBlLCB0cmFja05hbWUsIGFuaW1hdGlvbktleXMsIHByb3BlcnR5TmFtZSwgZGVzdFRyYWNrcyApIHtcblxuXHRcdFx0Ly8gb25seSByZXR1cm4gdHJhY2sgaWYgdGhlcmUgYXJlIGFjdHVhbGx5IGtleXMuXG5cdFx0XHRpZiAoIGFuaW1hdGlvbktleXMubGVuZ3RoICE9PSAwICkge1xuXG5cdFx0XHRcdHZhciB0aW1lcyA9IFtdO1xuXHRcdFx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRcdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oIGFuaW1hdGlvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHByb3BlcnR5TmFtZSApO1xuXG5cdFx0XHRcdC8vIGVtcHR5IGtleXMgYXJlIGZpbHRlcmVkIG91dCwgc28gY2hlY2sgYWdhaW5cblx0XHRcdFx0aWYgKCB0aW1lcy5sZW5ndGggIT09IDAgKSB7XG5cblx0XHRcdFx0XHRkZXN0VHJhY2tzLnB1c2goIG5ldyB0cmFja1R5cGUoIHRyYWNrTmFtZSwgdGltZXMsIHZhbHVlcyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0dmFyIHRyYWNrcyA9IFtdO1xuXG5cdFx0dmFyIGNsaXBOYW1lID0gYW5pbWF0aW9uLm5hbWUgfHwgJ2RlZmF1bHQnO1xuXHRcdC8vIGF1dG9tYXRpYyBsZW5ndGggZGV0ZXJtaW5hdGlvbiBpbiBBbmltYXRpb25DbGlwLlxuXHRcdHZhciBkdXJhdGlvbiA9IGFuaW1hdGlvbi5sZW5ndGggfHwgLSAxO1xuXHRcdHZhciBmcHMgPSBhbmltYXRpb24uZnBzIHx8IDMwO1xuXG5cdFx0dmFyIGhpZXJhcmNoeVRyYWNrcyA9IGFuaW1hdGlvbi5oaWVyYXJjaHkgfHwgW107XG5cblx0XHRmb3IgKCB2YXIgaCA9IDA7IGggPCBoaWVyYXJjaHlUcmFja3MubGVuZ3RoOyBoICsrICkge1xuXG5cdFx0XHR2YXIgYW5pbWF0aW9uS2V5cyA9IGhpZXJhcmNoeVRyYWNrc1sgaCBdLmtleXM7XG5cblx0XHRcdC8vIHNraXAgZW1wdHkgdHJhY2tzXG5cdFx0XHRpZiAoICEgYW5pbWF0aW9uS2V5cyB8fCBhbmltYXRpb25LZXlzLmxlbmd0aCA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0XHQvLyBwcm9jZXNzIG1vcnBoIHRhcmdldHNcblx0XHRcdGlmICggYW5pbWF0aW9uS2V5c1sgMCBdLm1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHQvLyBmaWd1cmUgb3V0IGFsbCBtb3JwaCB0YXJnZXRzIHVzZWQgaW4gdGhpcyB0cmFja1xuXHRcdFx0XHR2YXIgbW9ycGhUYXJnZXROYW1lcyA9IHt9O1xuXG5cdFx0XHRcdGZvciAoIHZhciBrID0gMDsgayA8IGFuaW1hdGlvbktleXMubGVuZ3RoOyBrICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgbSA9IDA7IG0gPCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRtb3JwaFRhcmdldE5hbWVzWyBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzWyBtIF0gXSA9IC0gMTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBjcmVhdGUgYSB0cmFjayBmb3IgZWFjaCBtb3JwaCB0YXJnZXQgd2l0aCBhbGwgemVyb1xuXHRcdFx0XHQvLyBtb3JwaFRhcmdldEluZmx1ZW5jZXMgZXhjZXB0IGZvciB0aGUga2V5cyBpbiB3aGljaFxuXHRcdFx0XHQvLyB0aGUgbW9ycGhUYXJnZXQgaXMgbmFtZWQuXG5cdFx0XHRcdGZvciAoIHZhciBtb3JwaFRhcmdldE5hbWUgaW4gbW9ycGhUYXJnZXROYW1lcyApIHtcblxuXHRcdFx0XHRcdHZhciB0aW1lcyA9IFtdO1xuXHRcdFx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBtID0gMDsgbSAhPT0gYW5pbWF0aW9uS2V5c1sgayBdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ICsrIG0gKSB7XG5cblx0XHRcdFx0XHRcdHZhciBhbmltYXRpb25LZXkgPSBhbmltYXRpb25LZXlzWyBrIF07XG5cblx0XHRcdFx0XHRcdHRpbWVzLnB1c2goIGFuaW1hdGlvbktleS50aW1lICk7XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggKCBhbmltYXRpb25LZXkubW9ycGhUYXJnZXQgPT09IG1vcnBoVGFyZ2V0TmFtZSApID8gMSA6IDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRyYWNrcy5wdXNoKCBuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayggJy5tb3JwaFRhcmdldEluZmx1ZW5jZVsnICsgbW9ycGhUYXJnZXROYW1lICsgJ10nLCB0aW1lcywgdmFsdWVzICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZHVyYXRpb24gPSBtb3JwaFRhcmdldE5hbWVzLmxlbmd0aCAqICggZnBzIHx8IDEuMCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIC4uLmFzc3VtZSBza2VsZXRhbCBhbmltYXRpb25cblxuXHRcdFx0XHR2YXIgYm9uZU5hbWUgPSAnLmJvbmVzWycgKyBib25lc1sgaCBdLm5hbWUgKyAnXSc7XG5cblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcblx0XHRcdFx0XHRWZWN0b3JLZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcucG9zaXRpb24nLFxuXHRcdFx0XHRcdGFuaW1hdGlvbktleXMsICdwb3MnLCB0cmFja3MgKTtcblxuXHRcdFx0XHRhZGROb25lbXB0eVRyYWNrKFxuXHRcdFx0XHRcdFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcucXVhdGVybmlvbicsXG5cdFx0XHRcdFx0YW5pbWF0aW9uS2V5cywgJ3JvdCcsIHRyYWNrcyApO1xuXG5cdFx0XHRcdGFkZE5vbmVtcHR5VHJhY2soXG5cdFx0XHRcdFx0VmVjdG9yS2V5ZnJhbWVUcmFjaywgYm9uZU5hbWUgKyAnLnNjYWxlJyxcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAnc2NsJywgdHJhY2tzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdHJhY2tzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHR2YXIgY2xpcCA9IG5ldyBBbmltYXRpb25DbGlwKCBjbGlwTmFtZSwgZHVyYXRpb24sIHRyYWNrcyApO1xuXG5cdFx0cmV0dXJuIGNsaXA7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbkNsaXAucHJvdG90eXBlLCB7XG5cblx0cmVzZXREdXJhdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRyYWNrcyA9IHRoaXMudHJhY2tzLCBkdXJhdGlvbiA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSB0cmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgdHJhY2sgPSB0aGlzLnRyYWNrc1sgaSBdO1xuXG5cdFx0XHRkdXJhdGlvbiA9IE1hdGgubWF4KCBkdXJhdGlvbiwgdHJhY2sudGltZXNbIHRyYWNrLnRpbWVzLmxlbmd0aCAtIDEgXSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXG5cdH0sXG5cblx0dHJpbTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnRyYWNrc1sgaSBdLnRyaW0oIDAsIHRoaXMuZHVyYXRpb24gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0b3B0aW1pemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy50cmFja3NbIGkgXS5vcHRpbWl6ZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBNYXRlcmlhbExvYWRlciggbWFuYWdlciApIHtcblxuXHR0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcblx0dGhpcy50ZXh0dXJlcyA9IHt9O1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIE1hdGVyaWFsTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0c2V0VGV4dHVyZXM6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVzID0gdmFsdWU7XG5cblx0fSxcblxuXHRwYXJzZTogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0dmFyIHRleHR1cmVzID0gdGhpcy50ZXh0dXJlcztcblxuXHRcdGZ1bmN0aW9uIGdldFRleHR1cmUoIG5hbWUgKSB7XG5cblx0XHRcdGlmICggdGV4dHVyZXNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsTG9hZGVyOiBVbmRlZmluZWQgdGV4dHVyZScsIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGV4dHVyZXNbIG5hbWUgXTtcblxuXHRcdH1cblxuXHRcdHZhciBtYXRlcmlhbCA9IG5ldyBNYXRlcmlhbHNbIGpzb24udHlwZSBdKCk7XG5cblx0XHRpZiAoIGpzb24udXVpZCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudXVpZCA9IGpzb24udXVpZDtcblx0XHRpZiAoIGpzb24ubmFtZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubmFtZSA9IGpzb24ubmFtZTtcblx0XHRpZiAoIGpzb24uY29sb3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNvbG9yLnNldEhleCgganNvbi5jb2xvciApO1xuXHRcdGlmICgganNvbi5yb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdWdobmVzcyA9IGpzb24ucm91Z2huZXNzO1xuXHRcdGlmICgganNvbi5tZXRhbG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1ldGFsbmVzcyA9IGpzb24ubWV0YWxuZXNzO1xuXHRcdGlmICgganNvbi5lbWlzc2l2ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmUuc2V0SGV4KCBqc29uLmVtaXNzaXZlICk7XG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhci5zZXRIZXgoIGpzb24uc3BlY3VsYXIgKTtcblx0XHRpZiAoIGpzb24uc2hpbmluZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGluaW5lc3MgPSBqc29uLnNoaW5pbmVzcztcblx0XHRpZiAoIGpzb24uY2xlYXJDb2F0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhckNvYXQgPSBqc29uLmNsZWFyQ29hdDtcblx0XHRpZiAoIGpzb24uY2xlYXJDb2F0Um91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MgPSBqc29uLmNsZWFyQ29hdFJvdWdobmVzcztcblx0XHRpZiAoIGpzb24udW5pZm9ybXMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnVuaWZvcm1zID0ganNvbi51bmlmb3Jtcztcblx0XHRpZiAoIGpzb24udmVydGV4U2hhZGVyICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC52ZXJ0ZXhTaGFkZXIgPSBqc29uLnZlcnRleFNoYWRlcjtcblx0XHRpZiAoIGpzb24uZnJhZ21lbnRTaGFkZXIgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyID0ganNvbi5mcmFnbWVudFNoYWRlcjtcblx0XHRpZiAoIGpzb24udmVydGV4Q29sb3JzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSBqc29uLnZlcnRleENvbG9ycztcblx0XHRpZiAoIGpzb24uZm9nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mb2cgPSBqc29uLmZvZztcblx0XHRpZiAoIGpzb24uZmxhdFNoYWRpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZsYXRTaGFkaW5nID0ganNvbi5mbGF0U2hhZGluZztcblx0XHRpZiAoIGpzb24uYmxlbmRpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kaW5nID0ganNvbi5ibGVuZGluZztcblx0XHRpZiAoIGpzb24uc2lkZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2lkZSA9IGpzb24uc2lkZTtcblx0XHRpZiAoIGpzb24ub3BhY2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwub3BhY2l0eSA9IGpzb24ub3BhY2l0eTtcblx0XHRpZiAoIGpzb24udHJhbnNwYXJlbnQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnRyYW5zcGFyZW50ID0ganNvbi50cmFuc3BhcmVudDtcblx0XHRpZiAoIGpzb24uYWxwaGFUZXN0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbHBoYVRlc3QgPSBqc29uLmFscGhhVGVzdDtcblx0XHRpZiAoIGpzb24uZGVwdGhUZXN0ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZXB0aFRlc3QgPSBqc29uLmRlcHRoVGVzdDtcblx0XHRpZiAoIGpzb24uZGVwdGhXcml0ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGVwdGhXcml0ZSA9IGpzb24uZGVwdGhXcml0ZTtcblx0XHRpZiAoIGpzb24uY29sb3JXcml0ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY29sb3JXcml0ZSA9IGpzb24uY29sb3JXcml0ZTtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWUgPSBqc29uLndpcmVmcmFtZTtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lTGluZXdpZHRoICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWVMaW5ld2lkdGggPSBqc29uLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lTGluZWNhcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lTGluZWNhcCA9IGpzb24ud2lyZWZyYW1lTGluZWNhcDtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lTGluZWpvaW4gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmVqb2luID0ganNvbi53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdGlmICgganNvbi5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucm90YXRpb24gPSBqc29uLnJvdGF0aW9uO1xuXG5cdFx0aWYgKCBqc29uLmxpbmV3aWR0aCAhPT0gMSApIG1hdGVyaWFsLmxpbmV3aWR0aCA9IGpzb24ubGluZXdpZHRoO1xuXHRcdGlmICgganNvbi5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGFzaFNpemUgPSBqc29uLmRhc2hTaXplO1xuXHRcdGlmICgganNvbi5nYXBTaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5nYXBTaXplID0ganNvbi5nYXBTaXplO1xuXHRcdGlmICgganNvbi5zY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2NhbGUgPSBqc29uLnNjYWxlO1xuXG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQgPSBqc29uLnBvbHlnb25PZmZzZXQ7XG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXRGYWN0b3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IgPSBqc29uLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldFVuaXRzID0ganNvbi5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHRpZiAoIGpzb24uc2tpbm5pbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNraW5uaW5nID0ganNvbi5za2lubmluZztcblx0XHRpZiAoIGpzb24ubW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tb3JwaFRhcmdldHMgPSBqc29uLm1vcnBoVGFyZ2V0cztcblx0XHRpZiAoIGpzb24uZGl0aGVyaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXRoZXJpbmcgPSBqc29uLmRpdGhlcmluZztcblxuXHRcdGlmICgganNvbi52aXNpYmxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC52aXNpYmxlID0ganNvbi52aXNpYmxlO1xuXHRcdGlmICgganNvbi51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudXNlckRhdGEgPSBqc29uLnVzZXJEYXRhO1xuXG5cdFx0Ly8gRGVwcmVjYXRlZFxuXG5cdFx0aWYgKCBqc29uLnNoYWRpbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZsYXRTaGFkaW5nID0ganNvbi5zaGFkaW5nID09PSAxOyAvLyBUSFJFRS5GbGF0U2hhZGluZ1xuXG5cdFx0Ly8gZm9yIFBvaW50c01hdGVyaWFsXG5cblx0XHRpZiAoIGpzb24uc2l6ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2l6ZSA9IGpzb24uc2l6ZTtcblx0XHRpZiAoIGpzb24uc2l6ZUF0dGVudWF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPSBqc29uLnNpemVBdHRlbnVhdGlvbjtcblxuXHRcdC8vIG1hcHNcblxuXHRcdGlmICgganNvbi5tYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1hcCA9IGdldFRleHR1cmUoIGpzb24ubWFwICk7XG5cblx0XHRpZiAoIGpzb24uYWxwaGFNYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bWF0ZXJpYWwuYWxwaGFNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmFscGhhTWFwICk7XG5cdFx0XHRtYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24uYnVtcE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYnVtcE1hcCA9IGdldFRleHR1cmUoIGpzb24uYnVtcE1hcCApO1xuXHRcdGlmICgganNvbi5idW1wU2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJ1bXBTY2FsZSA9IGpzb24uYnVtcFNjYWxlO1xuXG5cdFx0aWYgKCBqc29uLm5vcm1hbE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubm9ybWFsTWFwID0gZ2V0VGV4dHVyZSgganNvbi5ub3JtYWxNYXAgKTtcblx0XHRpZiAoIGpzb24ubm9ybWFsTWFwVHlwZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9IGpzb24ubm9ybWFsTWFwVHlwZTtcblx0XHRpZiAoIGpzb24ubm9ybWFsU2NhbGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIG5vcm1hbFNjYWxlID0ganNvbi5ub3JtYWxTY2FsZTtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBub3JtYWxTY2FsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBCbGVuZGVyIGV4cG9ydGVyIHVzZWQgdG8gZXhwb3J0IGEgc2NhbGFyLiBTZWUgIzc0NTlcblxuXHRcdFx0XHRub3JtYWxTY2FsZSA9IFsgbm9ybWFsU2NhbGUsIG5vcm1hbFNjYWxlIF07XG5cblx0XHRcdH1cblxuXHRcdFx0bWF0ZXJpYWwubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggbm9ybWFsU2NhbGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5kaXNwbGFjZW1lbnRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCA9IGdldFRleHR1cmUoIGpzb24uZGlzcGxhY2VtZW50TWFwICk7XG5cdFx0aWYgKCBqc29uLmRpc3BsYWNlbWVudFNjYWxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSA9IGpzb24uZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0aWYgKCBqc29uLmRpc3BsYWNlbWVudEJpYXMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXMgPSBqc29uLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHRpZiAoIGpzb24ucm91Z2huZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnJvdWdobmVzc01hcCApO1xuXHRcdGlmICgganNvbi5tZXRhbG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1ldGFsbmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24ubWV0YWxuZXNzTWFwICk7XG5cblx0XHRpZiAoIGpzb24uZW1pc3NpdmVNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVtaXNzaXZlTWFwID0gZ2V0VGV4dHVyZSgganNvbi5lbWlzc2l2ZU1hcCApO1xuXHRcdGlmICgganNvbi5lbWlzc2l2ZUludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmVJbnRlbnNpdHkgPSBqc29uLmVtaXNzaXZlSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zcGVjdWxhck1hcCA9IGdldFRleHR1cmUoIGpzb24uc3BlY3VsYXJNYXAgKTtcblxuXHRcdGlmICgganNvbi5lbnZNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVudk1hcCA9IGdldFRleHR1cmUoIGpzb24uZW52TWFwICk7XG5cblx0XHRpZiAoIGpzb24ucmVmbGVjdGl2aXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yZWZsZWN0aXZpdHkgPSBqc29uLnJlZmxlY3Rpdml0eTtcblxuXHRcdGlmICgganNvbi5saWdodE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubGlnaHRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmxpZ2h0TWFwICk7XG5cdFx0aWYgKCBqc29uLmxpZ2h0TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eSA9IGpzb24ubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uYW9NYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFvTWFwID0gZ2V0VGV4dHVyZSgganNvbi5hb01hcCApO1xuXHRcdGlmICgganNvbi5hb01hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHkgPSBqc29uLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLmdyYWRpZW50TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ncmFkaWVudE1hcCA9IGdldFRleHR1cmUoIGpzb24uZ3JhZGllbnRNYXAgKTtcblxuXHRcdHJldHVybiBtYXRlcmlhbDtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlckdlb21ldHJ5TG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEJ1ZmZlckdlb21ldHJ5TG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0dmFyIGluZGV4ID0ganNvbi5kYXRhLmluZGV4O1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgdHlwZWRBcnJheSA9IG5ldyBUWVBFRF9BUlJBWVNbIGluZGV4LnR5cGUgXSggaW5kZXguYXJyYXkgKTtcblx0XHRcdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCB0eXBlZEFycmF5LCAxICkgKTtcblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGVzID0ganNvbi5kYXRhLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblx0XHRcdHZhciB0eXBlZEFycmF5ID0gbmV3IFRZUEVEX0FSUkFZU1sgYXR0cmlidXRlLnR5cGUgXSggYXR0cmlidXRlLmFycmF5ICk7XG5cblx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgga2V5LCBuZXcgQnVmZmVyQXR0cmlidXRlKCB0eXBlZEFycmF5LCBhdHRyaWJ1dGUuaXRlbVNpemUsIGF0dHJpYnV0ZS5ub3JtYWxpemVkICkgKTtcblxuXHRcdH1cblxuXHRcdHZhciBncm91cHMgPSBqc29uLmRhdGEuZ3JvdXBzIHx8IGpzb24uZGF0YS5kcmF3Y2FsbHMgfHwganNvbi5kYXRhLm9mZnNldHM7XG5cblx0XHRpZiAoIGdyb3VwcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBncm91cHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXG5cdFx0XHRcdGdlb21ldHJ5LmFkZEdyb3VwKCBncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGJvdW5kaW5nU3BoZXJlID0ganNvbi5kYXRhLmJvdW5kaW5nU3BoZXJlO1xuXG5cdFx0aWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0aWYgKCBib3VuZGluZ1NwaGVyZS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjZW50ZXIuZnJvbUFycmF5KCBib3VuZGluZ1NwaGVyZS5jZW50ZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoIGNlbnRlciwgYm91bmRpbmdTcGhlcmUucmFkaXVzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnk7XG5cblx0fVxuXG59ICk7XG5cbnZhciBUWVBFRF9BUlJBWVMgPSB7XG5cdEludDhBcnJheTogSW50OEFycmF5LFxuXHRVaW50OEFycmF5OiBVaW50OEFycmF5LFxuXHQvLyBXb3JrYXJvdW5kIGZvciBJRTExIHByZSBLQjI5Mjk0MzcuIFNlZSAjMTE0NDBcblx0VWludDhDbGFtcGVkQXJyYXk6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OENsYW1wZWRBcnJheSA6IFVpbnQ4QXJyYXksXG5cdEludDE2QXJyYXk6IEludDE2QXJyYXksXG5cdFVpbnQxNkFycmF5OiBVaW50MTZBcnJheSxcblx0SW50MzJBcnJheTogSW50MzJBcnJheSxcblx0VWludDMyQXJyYXk6IFVpbnQzMkFycmF5LFxuXHRGbG9hdDMyQXJyYXk6IEZsb2F0MzJBcnJheSxcblx0RmxvYXQ2NEFycmF5OiBGbG9hdDY0QXJyYXlcbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMb2FkZXIoKSB7fVxuXG5Mb2FkZXIuSGFuZGxlcnMgPSB7XG5cblx0aGFuZGxlcnM6IFtdLFxuXG5cdGFkZDogZnVuY3Rpb24gKCByZWdleCwgbG9hZGVyICkge1xuXG5cdFx0dGhpcy5oYW5kbGVycy5wdXNoKCByZWdleCwgbG9hZGVyICk7XG5cblx0fSxcblxuXHRnZXQ6IGZ1bmN0aW9uICggZmlsZSApIHtcblxuXHRcdHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBsOyBpICs9IDIgKSB7XG5cblx0XHRcdHZhciByZWdleCA9IGhhbmRsZXJzWyBpIF07XG5cdFx0XHR2YXIgbG9hZGVyID0gaGFuZGxlcnNbIGkgKyAxIF07XG5cblx0XHRcdGlmICggcmVnZXgudGVzdCggZmlsZSApICkge1xuXG5cdFx0XHRcdHJldHVybiBsb2FkZXI7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxufTtcblxuT2JqZWN0LmFzc2lnbiggTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcblxuXHRvbkxvYWRTdGFydDogZnVuY3Rpb24gKCkge30sXG5cblx0b25Mb2FkUHJvZ3Jlc3M6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdG9uTG9hZENvbXBsZXRlOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRpbml0TWF0ZXJpYWxzOiBmdW5jdGlvbiAoIG1hdGVyaWFscywgdGV4dHVyZVBhdGgsIGNyb3NzT3JpZ2luICkge1xuXG5cdFx0dmFyIGFycmF5ID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBtYXRlcmlhbHMubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0XHRhcnJheVsgaSBdID0gdGhpcy5jcmVhdGVNYXRlcmlhbCggbWF0ZXJpYWxzWyBpIF0sIHRleHR1cmVQYXRoLCBjcm9zc09yaWdpbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0Y3JlYXRlTWF0ZXJpYWw6ICggZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIEJsZW5kaW5nTW9kZSA9IHtcblx0XHRcdE5vQmxlbmRpbmc6IE5vQmxlbmRpbmcsXG5cdFx0XHROb3JtYWxCbGVuZGluZzogTm9ybWFsQmxlbmRpbmcsXG5cdFx0XHRBZGRpdGl2ZUJsZW5kaW5nOiBBZGRpdGl2ZUJsZW5kaW5nLFxuXHRcdFx0U3VidHJhY3RpdmVCbGVuZGluZzogU3VidHJhY3RpdmVCbGVuZGluZyxcblx0XHRcdE11bHRpcGx5QmxlbmRpbmc6IE11bHRpcGx5QmxlbmRpbmcsXG5cdFx0XHRDdXN0b21CbGVuZGluZzogQ3VzdG9tQmxlbmRpbmdcblx0XHR9O1xuXG5cdFx0dmFyIGNvbG9yID0gbmV3IENvbG9yKCk7XG5cdFx0dmFyIHRleHR1cmVMb2FkZXIgPSBuZXcgVGV4dHVyZUxvYWRlcigpO1xuXHRcdHZhciBtYXRlcmlhbExvYWRlciA9IG5ldyBNYXRlcmlhbExvYWRlcigpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZU1hdGVyaWFsKCBtLCB0ZXh0dXJlUGF0aCwgY3Jvc3NPcmlnaW4gKSB7XG5cblx0XHRcdC8vIGNvbnZlcnQgZnJvbSBvbGQgbWF0ZXJpYWwgZm9ybWF0XG5cblx0XHRcdHZhciB0ZXh0dXJlcyA9IHt9O1xuXG5cdFx0XHRmdW5jdGlvbiBsb2FkVGV4dHVyZSggcGF0aCwgcmVwZWF0LCBvZmZzZXQsIHdyYXAsIGFuaXNvdHJvcHkgKSB7XG5cblx0XHRcdFx0dmFyIGZ1bGxQYXRoID0gdGV4dHVyZVBhdGggKyBwYXRoO1xuXHRcdFx0XHR2YXIgbG9hZGVyID0gTG9hZGVyLkhhbmRsZXJzLmdldCggZnVsbFBhdGggKTtcblxuXHRcdFx0XHR2YXIgdGV4dHVyZTtcblxuXHRcdFx0XHRpZiAoIGxvYWRlciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUgPSBsb2FkZXIubG9hZCggZnVsbFBhdGggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGV4dHVyZUxvYWRlci5zZXRDcm9zc09yaWdpbiggY3Jvc3NPcmlnaW4gKTtcblx0XHRcdFx0XHR0ZXh0dXJlID0gdGV4dHVyZUxvYWRlci5sb2FkKCBmdWxsUGF0aCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHJlcGVhdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5yZXBlYXQuZnJvbUFycmF5KCByZXBlYXQgKTtcblxuXHRcdFx0XHRcdGlmICggcmVwZWF0WyAwIF0gIT09IDEgKSB0ZXh0dXJlLndyYXBTID0gUmVwZWF0V3JhcHBpbmc7XG5cdFx0XHRcdFx0aWYgKCByZXBlYXRbIDEgXSAhPT0gMSApIHRleHR1cmUud3JhcFQgPSBSZXBlYXRXcmFwcGluZztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBvZmZzZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUub2Zmc2V0LmZyb21BcnJheSggb2Zmc2V0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggd3JhcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCB3cmFwWyAwIF0gPT09ICdyZXBlYXQnICkgdGV4dHVyZS53cmFwUyA9IFJlcGVhdFdyYXBwaW5nO1xuXHRcdFx0XHRcdGlmICggd3JhcFsgMCBdID09PSAnbWlycm9yJyApIHRleHR1cmUud3JhcFMgPSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nO1xuXG5cdFx0XHRcdFx0aWYgKCB3cmFwWyAxIF0gPT09ICdyZXBlYXQnICkgdGV4dHVyZS53cmFwVCA9IFJlcGVhdFdyYXBwaW5nO1xuXHRcdFx0XHRcdGlmICggd3JhcFsgMSBdID09PSAnbWlycm9yJyApIHRleHR1cmUud3JhcFQgPSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUuYW5pc290cm9weSA9IGFuaXNvdHJvcHk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB1dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHRcdFx0dGV4dHVyZXNbIHV1aWQgXSA9IHRleHR1cmU7XG5cblx0XHRcdFx0cmV0dXJuIHV1aWQ7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0dmFyIGpzb24gPSB7XG5cdFx0XHRcdHV1aWQ6IF9NYXRoLmdlbmVyYXRlVVVJRCgpLFxuXHRcdFx0XHR0eXBlOiAnTWVzaExhbWJlcnRNYXRlcmlhbCdcblx0XHRcdH07XG5cblx0XHRcdGZvciAoIHZhciBuYW1lIGluIG0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbHVlID0gbVsgbmFtZSBdO1xuXG5cdFx0XHRcdHN3aXRjaCAoIG5hbWUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdEYmdDb2xvcic6XG5cdFx0XHRcdFx0Y2FzZSAnRGJnSW5kZXgnOlxuXHRcdFx0XHRcdGNhc2UgJ29wdGljYWxEZW5zaXR5Jzpcblx0XHRcdFx0XHRjYXNlICdpbGx1bWluYXRpb24nOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRGJnTmFtZSc6XG5cdFx0XHRcdFx0XHRqc29uLm5hbWUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2JsZW5kaW5nJzpcblx0XHRcdFx0XHRcdGpzb24uYmxlbmRpbmcgPSBCbGVuZGluZ01vZGVbIHZhbHVlIF07XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb2xvckFtYmllbnQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEFtYmllbnQnOlxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTG9hZGVyLmNyZWF0ZU1hdGVyaWFsOicsIG5hbWUsICdpcyBubyBsb25nZXIgc3VwcG9ydGVkLicgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2NvbG9yRGlmZnVzZSc6XG5cdFx0XHRcdFx0XHRqc29uLmNvbG9yID0gY29sb3IuZnJvbUFycmF5KCB2YWx1ZSApLmdldEhleCgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29sb3JTcGVjdWxhcic6XG5cdFx0XHRcdFx0XHRqc29uLnNwZWN1bGFyID0gY29sb3IuZnJvbUFycmF5KCB2YWx1ZSApLmdldEhleCgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnY29sb3JFbWlzc2l2ZSc6XG5cdFx0XHRcdFx0XHRqc29uLmVtaXNzaXZlID0gY29sb3IuZnJvbUFycmF5KCB2YWx1ZSApLmdldEhleCgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnc3BlY3VsYXJDb2VmJzpcblx0XHRcdFx0XHRcdGpzb24uc2hpbmluZXNzID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdzaGFkaW5nJzpcblx0XHRcdFx0XHRcdGlmICggdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ2Jhc2ljJyApIGpzb24udHlwZSA9ICdNZXNoQmFzaWNNYXRlcmlhbCc7XG5cdFx0XHRcdFx0XHRpZiAoIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICdwaG9uZycgKSBqc29uLnR5cGUgPSAnTWVzaFBob25nTWF0ZXJpYWwnO1xuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAnc3RhbmRhcmQnICkganNvbi50eXBlID0gJ01lc2hTdGFuZGFyZE1hdGVyaWFsJztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcERpZmZ1c2UnOlxuXHRcdFx0XHRcdFx0anNvbi5tYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwRGlmZnVzZVJlcGVhdCwgbS5tYXBEaWZmdXNlT2Zmc2V0LCBtLm1hcERpZmZ1c2VXcmFwLCBtLm1hcERpZmZ1c2VBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBEaWZmdXNlUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBEaWZmdXNlT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBEaWZmdXNlV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRGlmZnVzZUFuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRW1pc3NpdmUnOlxuXHRcdFx0XHRcdFx0anNvbi5lbWlzc2l2ZU1hcCA9IGxvYWRUZXh0dXJlKCB2YWx1ZSwgbS5tYXBFbWlzc2l2ZVJlcGVhdCwgbS5tYXBFbWlzc2l2ZU9mZnNldCwgbS5tYXBFbWlzc2l2ZVdyYXAsIG0ubWFwRW1pc3NpdmVBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBFbWlzc2l2ZVJlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRW1pc3NpdmVPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEVtaXNzaXZlV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwRW1pc3NpdmVBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcExpZ2h0Jzpcblx0XHRcdFx0XHRcdGpzb24ubGlnaHRNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwTGlnaHRSZXBlYXQsIG0ubWFwTGlnaHRPZmZzZXQsIG0ubWFwTGlnaHRXcmFwLCBtLm1hcExpZ2h0QW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTGlnaHRSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcExpZ2h0T2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBMaWdodFdyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcExpZ2h0QW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBBTyc6XG5cdFx0XHRcdFx0XHRqc29uLmFvTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcEFPUmVwZWF0LCBtLm1hcEFPT2Zmc2V0LCBtLm1hcEFPV3JhcCwgbS5tYXBBT0FuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEFPUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBBT09mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQU9XcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBBT0FuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQnVtcCc6XG5cdFx0XHRcdFx0XHRqc29uLmJ1bXBNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwQnVtcFJlcGVhdCwgbS5tYXBCdW1wT2Zmc2V0LCBtLm1hcEJ1bXBXcmFwLCBtLm1hcEJ1bXBBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBCdW1wU2NhbGUnOlxuXHRcdFx0XHRcdFx0anNvbi5idW1wU2NhbGUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEJ1bXBSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEJ1bXBPZmZzZXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEJ1bXBXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBCdW1wQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBOb3JtYWwnOlxuXHRcdFx0XHRcdFx0anNvbi5ub3JtYWxNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwTm9ybWFsUmVwZWF0LCBtLm1hcE5vcm1hbE9mZnNldCwgbS5tYXBOb3JtYWxXcmFwLCBtLm1hcE5vcm1hbEFuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcE5vcm1hbEZhY3Rvcic6XG5cdFx0XHRcdFx0XHRqc29uLm5vcm1hbFNjYWxlID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBOb3JtYWxSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcE5vcm1hbE9mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTm9ybWFsV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTm9ybWFsQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBTcGVjdWxhcic6XG5cdFx0XHRcdFx0XHRqc29uLnNwZWN1bGFyTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcFNwZWN1bGFyUmVwZWF0LCBtLm1hcFNwZWN1bGFyT2Zmc2V0LCBtLm1hcFNwZWN1bGFyV3JhcCwgbS5tYXBTcGVjdWxhckFuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcFNwZWN1bGFyUmVwZWF0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBTcGVjdWxhck9mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwU3BlY3VsYXJXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBTcGVjdWxhckFuaXNvdHJvcHknOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTWV0YWxuZXNzJzpcblx0XHRcdFx0XHRcdGpzb24ubWV0YWxuZXNzTWFwID0gbG9hZFRleHR1cmUoIHZhbHVlLCBtLm1hcE1ldGFsbmVzc1JlcGVhdCwgbS5tYXBNZXRhbG5lc3NPZmZzZXQsIG0ubWFwTWV0YWxuZXNzV3JhcCwgbS5tYXBNZXRhbG5lc3NBbmlzb3Ryb3B5ICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBNZXRhbG5lc3NSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcE1ldGFsbmVzc09mZnNldCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTWV0YWxuZXNzV3JhcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwTWV0YWxuZXNzQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdtYXBSb3VnaG5lc3MnOlxuXHRcdFx0XHRcdFx0anNvbi5yb3VnaG5lc3NNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwUm91Z2huZXNzUmVwZWF0LCBtLm1hcFJvdWdobmVzc09mZnNldCwgbS5tYXBSb3VnaG5lc3NXcmFwLCBtLm1hcFJvdWdobmVzc0FuaXNvdHJvcHkgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcFJvdWdobmVzc1JlcGVhdCc6XG5cdFx0XHRcdFx0Y2FzZSAnbWFwUm91Z2huZXNzT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBSb3VnaG5lc3NXcmFwJzpcblx0XHRcdFx0XHRjYXNlICdtYXBSb3VnaG5lc3NBbmlzb3Ryb3B5Jzpcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21hcEFscGhhJzpcblx0XHRcdFx0XHRcdGpzb24uYWxwaGFNYXAgPSBsb2FkVGV4dHVyZSggdmFsdWUsIG0ubWFwQWxwaGFSZXBlYXQsIG0ubWFwQWxwaGFPZmZzZXQsIG0ubWFwQWxwaGFXcmFwLCBtLm1hcEFscGhhQW5pc290cm9weSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnbWFwQWxwaGFSZXBlYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEFscGhhT2Zmc2V0Jzpcblx0XHRcdFx0XHRjYXNlICdtYXBBbHBoYVdyYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21hcEFscGhhQW5pc290cm9weSc6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdmbGlwU2lkZWQnOlxuXHRcdFx0XHRcdFx0anNvbi5zaWRlID0gQmFja1NpZGU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdkb3VibGVTaWRlZCc6XG5cdFx0XHRcdFx0XHRqc29uLnNpZGUgPSBEb3VibGVTaWRlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAndHJhbnNwYXJlbmN5Jzpcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxvYWRlci5jcmVhdGVNYXRlcmlhbDogdHJhbnNwYXJlbmN5IGhhcyBiZWVuIHJlbmFtZWQgdG8gb3BhY2l0eScgKTtcblx0XHRcdFx0XHRcdGpzb24ub3BhY2l0eSA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZGVwdGhUZXN0Jzpcblx0XHRcdFx0XHRjYXNlICdkZXB0aFdyaXRlJzpcblx0XHRcdFx0XHRjYXNlICdjb2xvcldyaXRlJzpcblx0XHRcdFx0XHRjYXNlICdvcGFjaXR5Jzpcblx0XHRcdFx0XHRjYXNlICdyZWZsZWN0aXZpdHknOlxuXHRcdFx0XHRcdGNhc2UgJ3RyYW5zcGFyZW50Jzpcblx0XHRcdFx0XHRjYXNlICd2aXNpYmxlJzpcblx0XHRcdFx0XHRjYXNlICd3aXJlZnJhbWUnOlxuXHRcdFx0XHRcdFx0anNvblsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICd2ZXJ0ZXhDb2xvcnMnOlxuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIGpzb24udmVydGV4Q29sb3JzID0gVmVydGV4Q29sb3JzO1xuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gJ2ZhY2UnICkganNvbi52ZXJ0ZXhDb2xvcnMgPSBGYWNlQ29sb3JzO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Mb2FkZXIuY3JlYXRlTWF0ZXJpYWw6IFVuc3VwcG9ydGVkJywgbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGpzb24udHlwZSA9PT0gJ01lc2hCYXNpY01hdGVyaWFsJyApIGRlbGV0ZSBqc29uLmVtaXNzaXZlO1xuXHRcdFx0aWYgKCBqc29uLnR5cGUgIT09ICdNZXNoUGhvbmdNYXRlcmlhbCcgKSBkZWxldGUganNvbi5zcGVjdWxhcjtcblxuXHRcdFx0aWYgKCBqc29uLm9wYWNpdHkgPCAxICkganNvbi50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0XHRcdG1hdGVyaWFsTG9hZGVyLnNldFRleHR1cmVzKCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWxMb2FkZXIucGFyc2UoIGpzb24gKTtcblxuXHRcdH07XG5cblx0fSApKClcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgRG9uIE1jQ3VyZHkgLyBodHRwczovL3d3dy5kb25tY2N1cmR5LmNvbVxuICovXG5cbnZhciBMb2FkZXJVdGlscyA9IHtcblxuXHRkZWNvZGVUZXh0OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKCBhcnJheSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQXZvaWQgdGhlIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYXJyYXkpIHNob3J0Y3V0LCB3aGljaFxuXHRcdC8vIHRocm93cyBhIFwibWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIiBlcnJvciBmb3IgbGFyZ2UgYXJyYXlzLlxuXG5cdFx0dmFyIHMgPSAnJztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBhcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Ly8gSW1wbGljaXRseSBhc3N1bWVzIGxpdHRsZS1lbmRpYW4uXG5cdFx0XHRzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoIGFycmF5WyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vIE1lcmdlcyBtdWx0aS1ieXRlIHV0Zi04IGNoYXJhY3RlcnMuXG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCggZXNjYXBlKCBzICkgKTtcblxuXHR9LFxuXG5cdGV4dHJhY3RVcmxCYXNlOiBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdHZhciBpbmRleCA9IHVybC5sYXN0SW5kZXhPZiggJy8nICk7XG5cblx0XHRpZiAoIGluZGV4ID09PSAtIDEgKSByZXR1cm4gJy4vJztcblxuXHRcdHJldHVybiB1cmwuc3Vic3RyKCAwLCBpbmRleCArIDEgKTtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gSlNPTkxvYWRlciggbWFuYWdlciApIHtcblxuXHRpZiAoIHR5cGVvZiBtYW5hZ2VyID09PSAnYm9vbGVhbicgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5KU09OTG9hZGVyOiBzaG93U3RhdHVzIHBhcmFtZXRlciBoYXMgYmVlbiByZW1vdmVkIGZyb20gY29uc3RydWN0b3IuJyApO1xuXHRcdG1hbmFnZXIgPSB1bmRlZmluZWQ7XG5cblx0fVxuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG5cdHRoaXMud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggSlNPTkxvYWRlci5wcm90b3R5cGUsIHtcblxuXHRjcm9zc09yaWdpbjogJ2Fub255bW91cycsXG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgdGV4dHVyZVBhdGggPSB0aGlzLnRleHR1cmVQYXRoICYmICggdHlwZW9mIHRoaXMudGV4dHVyZVBhdGggPT09ICdzdHJpbmcnICkgPyB0aGlzLnRleHR1cmVQYXRoIDogTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCB0aGlzLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0dmFyIGpzb24gPSBKU09OLnBhcnNlKCB0ZXh0ICk7XG5cdFx0XHR2YXIgbWV0YWRhdGEgPSBqc29uLm1ldGFkYXRhO1xuXG5cdFx0XHRpZiAoIG1ldGFkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIHR5cGUgPSBtZXRhZGF0YS50eXBlO1xuXG5cdFx0XHRcdGlmICggdHlwZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCB0eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdvYmplY3QnICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuSlNPTkxvYWRlcjogJyArIHVybCArICcgc2hvdWxkIGJlIGxvYWRlZCB3aXRoIFRIUkVFLk9iamVjdExvYWRlciBpbnN0ZWFkLicgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG9iamVjdCA9IHNjb3BlLnBhcnNlKCBqc29uLCB0ZXh0dXJlUGF0aCApO1xuXHRcdFx0b25Mb2FkKCBvYmplY3QuZ2VvbWV0cnksIG9iamVjdC5tYXRlcmlhbHMgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0VGV4dHVyZVBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnRleHR1cmVQYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRwYXJzZTogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHRmdW5jdGlvbiBwYXJzZU1vZGVsKCBqc29uLCBnZW9tZXRyeSApIHtcblxuXHRcdFx0ZnVuY3Rpb24gaXNCaXRTZXQoIHZhbHVlLCBwb3NpdGlvbiApIHtcblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgJiAoIDEgPDwgcG9zaXRpb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaSwgaiwgZmksXG5cblx0XHRcdFx0b2Zmc2V0LCB6TGVuZ3RoLFxuXG5cdFx0XHRcdGNvbG9ySW5kZXgsIG5vcm1hbEluZGV4LCB1dkluZGV4LCBtYXRlcmlhbEluZGV4LFxuXG5cdFx0XHRcdHR5cGUsXG5cdFx0XHRcdGlzUXVhZCxcblx0XHRcdFx0aGFzTWF0ZXJpYWwsXG5cdFx0XHRcdGhhc0ZhY2VWZXJ0ZXhVdixcblx0XHRcdFx0aGFzRmFjZU5vcm1hbCwgaGFzRmFjZVZlcnRleE5vcm1hbCxcblx0XHRcdFx0aGFzRmFjZUNvbG9yLCBoYXNGYWNlVmVydGV4Q29sb3IsXG5cblx0XHRcdFx0dmVydGV4LCBmYWNlLCBmYWNlQSwgZmFjZUIsIGhleCwgbm9ybWFsLFxuXG5cdFx0XHRcdHV2TGF5ZXIsIHV2LCB1LCB2LFxuXG5cdFx0XHRcdGZhY2VzID0ganNvbi5mYWNlcyxcblx0XHRcdFx0dmVydGljZXMgPSBqc29uLnZlcnRpY2VzLFxuXHRcdFx0XHRub3JtYWxzID0ganNvbi5ub3JtYWxzLFxuXHRcdFx0XHRjb2xvcnMgPSBqc29uLmNvbG9ycyxcblxuXHRcdFx0XHRzY2FsZSA9IGpzb24uc2NhbGUsXG5cblx0XHRcdFx0blV2TGF5ZXJzID0gMDtcblxuXG5cdFx0XHRpZiAoIGpzb24udXZzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gZGlzcmVnYXJkIGVtcHR5IGFycmF5c1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwganNvbi51dnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBqc29uLnV2c1sgaSBdLmxlbmd0aCApIG5VdkxheWVycyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBuVXZMYXllcnM7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRnZW9tZXRyeS5mYWNlVmVydGV4VXZzWyBpIF0gPSBbXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0b2Zmc2V0ID0gMDtcblx0XHRcdHpMZW5ndGggPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0IDwgekxlbmd0aCApIHtcblxuXHRcdFx0XHR2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRcdHZlcnRleC54ID0gdmVydGljZXNbIG9mZnNldCArKyBdICogc2NhbGU7XG5cdFx0XHRcdHZlcnRleC55ID0gdmVydGljZXNbIG9mZnNldCArKyBdICogc2NhbGU7XG5cdFx0XHRcdHZlcnRleC56ID0gdmVydGljZXNbIG9mZnNldCArKyBdICogc2NhbGU7XG5cblx0XHRcdFx0Z2VvbWV0cnkudmVydGljZXMucHVzaCggdmVydGV4ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0b2Zmc2V0ID0gMDtcblx0XHRcdHpMZW5ndGggPSBmYWNlcy5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0IDwgekxlbmd0aCApIHtcblxuXHRcdFx0XHR0eXBlID0gZmFjZXNbIG9mZnNldCArKyBdO1xuXG5cdFx0XHRcdGlzUXVhZCA9IGlzQml0U2V0KCB0eXBlLCAwICk7XG5cdFx0XHRcdGhhc01hdGVyaWFsID0gaXNCaXRTZXQoIHR5cGUsIDEgKTtcblx0XHRcdFx0aGFzRmFjZVZlcnRleFV2ID0gaXNCaXRTZXQoIHR5cGUsIDMgKTtcblx0XHRcdFx0aGFzRmFjZU5vcm1hbCA9IGlzQml0U2V0KCB0eXBlLCA0ICk7XG5cdFx0XHRcdGhhc0ZhY2VWZXJ0ZXhOb3JtYWwgPSBpc0JpdFNldCggdHlwZSwgNSApO1xuXHRcdFx0XHRoYXNGYWNlQ29sb3IgPSBpc0JpdFNldCggdHlwZSwgNiApO1xuXHRcdFx0XHRoYXNGYWNlVmVydGV4Q29sb3IgPSBpc0JpdFNldCggdHlwZSwgNyApO1xuXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwidHlwZVwiLCB0eXBlLCBcImJpdHNcIiwgaXNRdWFkLCBoYXNNYXRlcmlhbCwgaGFzRmFjZVZlcnRleFV2LCBoYXNGYWNlTm9ybWFsLCBoYXNGYWNlVmVydGV4Tm9ybWFsLCBoYXNGYWNlQ29sb3IsIGhhc0ZhY2VWZXJ0ZXhDb2xvcik7XG5cblx0XHRcdFx0aWYgKCBpc1F1YWQgKSB7XG5cblx0XHRcdFx0XHRmYWNlQSA9IG5ldyBGYWNlMygpO1xuXHRcdFx0XHRcdGZhY2VBLmEgPSBmYWNlc1sgb2Zmc2V0IF07XG5cdFx0XHRcdFx0ZmFjZUEuYiA9IGZhY2VzWyBvZmZzZXQgKyAxIF07XG5cdFx0XHRcdFx0ZmFjZUEuYyA9IGZhY2VzWyBvZmZzZXQgKyAzIF07XG5cblx0XHRcdFx0XHRmYWNlQiA9IG5ldyBGYWNlMygpO1xuXHRcdFx0XHRcdGZhY2VCLmEgPSBmYWNlc1sgb2Zmc2V0ICsgMSBdO1xuXHRcdFx0XHRcdGZhY2VCLmIgPSBmYWNlc1sgb2Zmc2V0ICsgMiBdO1xuXHRcdFx0XHRcdGZhY2VCLmMgPSBmYWNlc1sgb2Zmc2V0ICsgMyBdO1xuXG5cdFx0XHRcdFx0b2Zmc2V0ICs9IDQ7XG5cblx0XHRcdFx0XHRpZiAoIGhhc01hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0XHRtYXRlcmlhbEluZGV4ID0gZmFjZXNbIG9mZnNldCArKyBdO1xuXHRcdFx0XHRcdFx0ZmFjZUEubWF0ZXJpYWxJbmRleCA9IG1hdGVyaWFsSW5kZXg7XG5cdFx0XHRcdFx0XHRmYWNlQi5tYXRlcmlhbEluZGV4ID0gbWF0ZXJpYWxJbmRleDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHRvIGdldCBmYWNlIDw9PiB1diBpbmRleCBjb3JyZXNwb25kZW5jZVxuXG5cdFx0XHRcdFx0ZmkgPSBnZW9tZXRyeS5mYWNlcy5sZW5ndGg7XG5cblx0XHRcdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhVdiApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBuVXZMYXllcnM7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dXZMYXllciA9IGpzb24udXZzWyBpIF07XG5cblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkuZmFjZVZlcnRleFV2c1sgaSBdWyBmaSBdID0gW107XG5cdFx0XHRcdFx0XHRcdGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIGkgXVsgZmkgKyAxIF0gPSBbXTtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBqID0gMDsgaiA8IDQ7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHR1dkluZGV4ID0gZmFjZXNbIG9mZnNldCArKyBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0dSA9IHV2TGF5ZXJbIHV2SW5kZXggKiAyIF07XG5cdFx0XHRcdFx0XHRcdFx0diA9IHV2TGF5ZXJbIHV2SW5kZXggKiAyICsgMSBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0dXYgPSBuZXcgVmVjdG9yMiggdSwgdiApO1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqICE9PSAyICkgZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1sgaSBdWyBmaSBdLnB1c2goIHV2ICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqICE9PSAwICkgZ2VvbWV0cnkuZmFjZVZlcnRleFV2c1sgaSBdWyBmaSArIDEgXS5wdXNoKCB1diApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBoYXNGYWNlTm9ybWFsICkge1xuXG5cdFx0XHRcdFx0XHRub3JtYWxJbmRleCA9IGZhY2VzWyBvZmZzZXQgKysgXSAqIDM7XG5cblx0XHRcdFx0XHRcdGZhY2VBLm5vcm1hbC5zZXQoXG5cdFx0XHRcdFx0XHRcdG5vcm1hbHNbIG5vcm1hbEluZGV4ICsrIF0sXG5cdFx0XHRcdFx0XHRcdG5vcm1hbHNbIG5vcm1hbEluZGV4ICsrIF0sXG5cdFx0XHRcdFx0XHRcdG5vcm1hbHNbIG5vcm1hbEluZGV4IF1cblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGZhY2VCLm5vcm1hbC5jb3B5KCBmYWNlQS5ub3JtYWwgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaGFzRmFjZVZlcnRleE5vcm1hbCApIHtcblxuXHRcdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCA0OyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdG5vcm1hbEluZGV4ID0gZmFjZXNbIG9mZnNldCArKyBdICogMztcblxuXHRcdFx0XHRcdFx0XHRub3JtYWwgPSBuZXcgVmVjdG9yMyhcblx0XHRcdFx0XHRcdFx0XHRub3JtYWxzWyBub3JtYWxJbmRleCArKyBdLFxuXHRcdFx0XHRcdFx0XHRcdG5vcm1hbHNbIG5vcm1hbEluZGV4ICsrIF0sXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsc1sgbm9ybWFsSW5kZXggXVxuXHRcdFx0XHRcdFx0XHQpO1xuXG5cblx0XHRcdFx0XHRcdFx0aWYgKCBpICE9PSAyICkgZmFjZUEudmVydGV4Tm9ybWFscy5wdXNoKCBub3JtYWwgKTtcblx0XHRcdFx0XHRcdFx0aWYgKCBpICE9PSAwICkgZmFjZUIudmVydGV4Tm9ybWFscy5wdXNoKCBub3JtYWwgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cblx0XHRcdFx0XHRpZiAoIGhhc0ZhY2VDb2xvciApIHtcblxuXHRcdFx0XHRcdFx0Y29sb3JJbmRleCA9IGZhY2VzWyBvZmZzZXQgKysgXTtcblx0XHRcdFx0XHRcdGhleCA9IGNvbG9yc1sgY29sb3JJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRmYWNlQS5jb2xvci5zZXRIZXgoIGhleCApO1xuXHRcdFx0XHRcdFx0ZmFjZUIuY29sb3Iuc2V0SGV4KCBoZXggKTtcblxuXHRcdFx0XHRcdH1cblxuXG5cdFx0XHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4Q29sb3IgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgNDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRjb2xvckluZGV4ID0gZmFjZXNbIG9mZnNldCArKyBdO1xuXHRcdFx0XHRcdFx0XHRoZXggPSBjb2xvcnNbIGNvbG9ySW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGkgIT09IDIgKSBmYWNlQS52ZXJ0ZXhDb2xvcnMucHVzaCggbmV3IENvbG9yKCBoZXggKSApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGkgIT09IDAgKSBmYWNlQi52ZXJ0ZXhDb2xvcnMucHVzaCggbmV3IENvbG9yKCBoZXggKSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRnZW9tZXRyeS5mYWNlcy5wdXNoKCBmYWNlQSApO1xuXHRcdFx0XHRcdGdlb21ldHJ5LmZhY2VzLnB1c2goIGZhY2VCICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGZhY2UgPSBuZXcgRmFjZTMoKTtcblx0XHRcdFx0XHRmYWNlLmEgPSBmYWNlc1sgb2Zmc2V0ICsrIF07XG5cdFx0XHRcdFx0ZmFjZS5iID0gZmFjZXNbIG9mZnNldCArKyBdO1xuXHRcdFx0XHRcdGZhY2UuYyA9IGZhY2VzWyBvZmZzZXQgKysgXTtcblxuXHRcdFx0XHRcdGlmICggaGFzTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGVyaWFsSW5kZXggPSBmYWNlc1sgb2Zmc2V0ICsrIF07XG5cdFx0XHRcdFx0XHRmYWNlLm1hdGVyaWFsSW5kZXggPSBtYXRlcmlhbEluZGV4O1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gdG8gZ2V0IGZhY2UgPD0+IHV2IGluZGV4IGNvcnJlc3BvbmRlbmNlXG5cblx0XHRcdFx0XHRmaSA9IGdlb21ldHJ5LmZhY2VzLmxlbmd0aDtcblxuXHRcdFx0XHRcdGlmICggaGFzRmFjZVZlcnRleFV2ICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IG5VdkxheWVyczsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR1dkxheWVyID0ganNvbi51dnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeS5mYWNlVmVydGV4VXZzWyBpIF1bIGZpIF0gPSBbXTtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHR1dkluZGV4ID0gZmFjZXNbIG9mZnNldCArKyBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0dSA9IHV2TGF5ZXJbIHV2SW5kZXggKiAyIF07XG5cdFx0XHRcdFx0XHRcdFx0diA9IHV2TGF5ZXJbIHV2SW5kZXggKiAyICsgMSBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0dXYgPSBuZXcgVmVjdG9yMiggdSwgdiApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkuZmFjZVZlcnRleFV2c1sgaSBdWyBmaSBdLnB1c2goIHV2ICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGhhc0ZhY2VOb3JtYWwgKSB7XG5cblx0XHRcdFx0XHRcdG5vcm1hbEluZGV4ID0gZmFjZXNbIG9mZnNldCArKyBdICogMztcblxuXHRcdFx0XHRcdFx0ZmFjZS5ub3JtYWwuc2V0KFxuXHRcdFx0XHRcdFx0XHRub3JtYWxzWyBub3JtYWxJbmRleCArKyBdLFxuXHRcdFx0XHRcdFx0XHRub3JtYWxzWyBub3JtYWxJbmRleCArKyBdLFxuXHRcdFx0XHRcdFx0XHRub3JtYWxzWyBub3JtYWxJbmRleCBdXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4Tm9ybWFsICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IDM7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0bm9ybWFsSW5kZXggPSBmYWNlc1sgb2Zmc2V0ICsrIF0gKiAzO1xuXG5cdFx0XHRcdFx0XHRcdG5vcm1hbCA9IG5ldyBWZWN0b3IzKFxuXHRcdFx0XHRcdFx0XHRcdG5vcm1hbHNbIG5vcm1hbEluZGV4ICsrIF0sXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsc1sgbm9ybWFsSW5kZXggKysgXSxcblx0XHRcdFx0XHRcdFx0XHRub3JtYWxzWyBub3JtYWxJbmRleCBdXG5cdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0ZmFjZS52ZXJ0ZXhOb3JtYWxzLnB1c2goIG5vcm1hbCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblxuXHRcdFx0XHRcdGlmICggaGFzRmFjZUNvbG9yICkge1xuXG5cdFx0XHRcdFx0XHRjb2xvckluZGV4ID0gZmFjZXNbIG9mZnNldCArKyBdO1xuXHRcdFx0XHRcdFx0ZmFjZS5jb2xvci5zZXRIZXgoIGNvbG9yc1sgY29sb3JJbmRleCBdICk7XG5cblx0XHRcdFx0XHR9XG5cblxuXHRcdFx0XHRcdGlmICggaGFzRmFjZVZlcnRleENvbG9yICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IDM7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29sb3JJbmRleCA9IGZhY2VzWyBvZmZzZXQgKysgXTtcblx0XHRcdFx0XHRcdFx0ZmFjZS52ZXJ0ZXhDb2xvcnMucHVzaCggbmV3IENvbG9yKCBjb2xvcnNbIGNvbG9ySW5kZXggXSApICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGdlb21ldHJ5LmZhY2VzLnB1c2goIGZhY2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHBhcnNlU2tpbigganNvbiwgZ2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciBpbmZsdWVuY2VzUGVyVmVydGV4ID0gKCBqc29uLmluZmx1ZW5jZXNQZXJWZXJ0ZXggIT09IHVuZGVmaW5lZCApID8ganNvbi5pbmZsdWVuY2VzUGVyVmVydGV4IDogMjtcblxuXHRcdFx0aWYgKCBqc29uLnNraW5XZWlnaHRzICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24uc2tpbldlaWdodHMubGVuZ3RoOyBpIDwgbDsgaSArPSBpbmZsdWVuY2VzUGVyVmVydGV4ICkge1xuXG5cdFx0XHRcdFx0dmFyIHggPSBqc29uLnNraW5XZWlnaHRzWyBpIF07XG5cdFx0XHRcdFx0dmFyIHkgPSAoIGluZmx1ZW5jZXNQZXJWZXJ0ZXggPiAxICkgPyBqc29uLnNraW5XZWlnaHRzWyBpICsgMSBdIDogMDtcblx0XHRcdFx0XHR2YXIgeiA9ICggaW5mbHVlbmNlc1BlclZlcnRleCA+IDIgKSA/IGpzb24uc2tpbldlaWdodHNbIGkgKyAyIF0gOiAwO1xuXHRcdFx0XHRcdHZhciB3ID0gKCBpbmZsdWVuY2VzUGVyVmVydGV4ID4gMyApID8ganNvbi5za2luV2VpZ2h0c1sgaSArIDMgXSA6IDA7XG5cblx0XHRcdFx0XHRnZW9tZXRyeS5za2luV2VpZ2h0cy5wdXNoKCBuZXcgVmVjdG9yNCggeCwgeSwgeiwgdyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICgganNvbi5za2luSW5kaWNlcyApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLnNraW5JbmRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKz0gaW5mbHVlbmNlc1BlclZlcnRleCApIHtcblxuXHRcdFx0XHRcdHZhciBhID0ganNvbi5za2luSW5kaWNlc1sgaSBdO1xuXHRcdFx0XHRcdHZhciBiID0gKCBpbmZsdWVuY2VzUGVyVmVydGV4ID4gMSApID8ganNvbi5za2luSW5kaWNlc1sgaSArIDEgXSA6IDA7XG5cdFx0XHRcdFx0dmFyIGMgPSAoIGluZmx1ZW5jZXNQZXJWZXJ0ZXggPiAyICkgPyBqc29uLnNraW5JbmRpY2VzWyBpICsgMiBdIDogMDtcblx0XHRcdFx0XHR2YXIgZCA9ICggaW5mbHVlbmNlc1BlclZlcnRleCA+IDMgKSA/IGpzb24uc2tpbkluZGljZXNbIGkgKyAzIF0gOiAwO1xuXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2tpbkluZGljZXMucHVzaCggbmV3IFZlY3RvcjQoIGEsIGIsIGMsIGQgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS5ib25lcyA9IGpzb24uYm9uZXM7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYm9uZXMgJiYgZ2VvbWV0cnkuYm9uZXMubGVuZ3RoID4gMCAmJiAoIGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCAhPT0gZ2VvbWV0cnkuc2tpbkluZGljZXMubGVuZ3RoIHx8IGdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aCAhPT0gZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnV2hlbiBza2lubmluZywgbnVtYmVyIG9mIHZlcnRpY2VzICgnICsgZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICsgJyksIHNraW5JbmRpY2VzICgnICtcblx0XHRcdFx0XHRnZW9tZXRyeS5za2luSW5kaWNlcy5sZW5ndGggKyAnKSwgYW5kIHNraW5XZWlnaHRzICgnICsgZ2VvbWV0cnkuc2tpbldlaWdodHMubGVuZ3RoICsgJykgc2hvdWxkIG1hdGNoLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcGFyc2VNb3JwaGluZygganNvbiwgZ2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciBzY2FsZSA9IGpzb24uc2NhbGU7XG5cblx0XHRcdGlmICgganNvbi5tb3JwaFRhcmdldHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLm1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Z2VvbWV0cnkubW9ycGhUYXJnZXRzWyBpIF0gPSB7fTtcblx0XHRcdFx0XHRnZW9tZXRyeS5tb3JwaFRhcmdldHNbIGkgXS5uYW1lID0ganNvbi5tb3JwaFRhcmdldHNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdGdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzID0gW107XG5cblx0XHRcdFx0XHR2YXIgZHN0VmVydGljZXMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlcztcblx0XHRcdFx0XHR2YXIgc3JjVmVydGljZXMgPSBqc29uLm1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIHYgPSAwLCB2bCA9IHNyY1ZlcnRpY2VzLmxlbmd0aDsgdiA8IHZsOyB2ICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0XHRcdFx0dmVydGV4LnggPSBzcmNWZXJ0aWNlc1sgdiBdICogc2NhbGU7XG5cdFx0XHRcdFx0XHR2ZXJ0ZXgueSA9IHNyY1ZlcnRpY2VzWyB2ICsgMSBdICogc2NhbGU7XG5cdFx0XHRcdFx0XHR2ZXJ0ZXgueiA9IHNyY1ZlcnRpY2VzWyB2ICsgMiBdICogc2NhbGU7XG5cblx0XHRcdFx0XHRcdGRzdFZlcnRpY2VzLnB1c2goIHZlcnRleCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGpzb24ubW9ycGhDb2xvcnMgIT09IHVuZGVmaW5lZCAmJiBqc29uLm1vcnBoQ29sb3JzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSlNPTkxvYWRlcjogXCJtb3JwaENvbG9yc1wiIG5vIGxvbmdlciBzdXBwb3J0ZWQuIFVzaW5nIHRoZW0gYXMgZmFjZSBjb2xvcnMuJyApO1xuXG5cdFx0XHRcdHZhciBmYWNlcyA9IGdlb21ldHJ5LmZhY2VzO1xuXHRcdFx0XHR2YXIgbW9ycGhDb2xvcnMgPSBqc29uLm1vcnBoQ29sb3JzWyAwIF0uY29sb3JzO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlc1sgaSBdLmNvbG9yLmZyb21BcnJheSggbW9ycGhDb2xvcnMsIGkgKiAzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwYXJzZUFuaW1hdGlvbnMoIGpzb24sIGdlb21ldHJ5ICkge1xuXG5cdFx0XHR2YXIgb3V0cHV0QW5pbWF0aW9ucyA9IFtdO1xuXG5cdFx0XHQvLyBwYXJzZSBvbGQgc3R5bGUgQm9uZS9IaWVyYXJjaHkgYW5pbWF0aW9uc1xuXHRcdFx0dmFyIGFuaW1hdGlvbnMgPSBbXTtcblxuXHRcdFx0aWYgKCBqc29uLmFuaW1hdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGFuaW1hdGlvbnMucHVzaCgganNvbi5hbmltYXRpb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGpzb24uYW5pbWF0aW9ucyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICgganNvbi5hbmltYXRpb25zLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdGFuaW1hdGlvbnMgPSBhbmltYXRpb25zLmNvbmNhdCgganNvbi5hbmltYXRpb25zICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGFuaW1hdGlvbnMucHVzaCgganNvbi5hbmltYXRpb25zICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGFuaW1hdGlvbnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBjbGlwID0gQW5pbWF0aW9uQ2xpcC5wYXJzZUFuaW1hdGlvbiggYW5pbWF0aW9uc1sgaSBdLCBnZW9tZXRyeS5ib25lcyApO1xuXHRcdFx0XHRpZiAoIGNsaXAgKSBvdXRwdXRBbmltYXRpb25zLnB1c2goIGNsaXAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBwYXJzZSBpbXBsaWNpdCBtb3JwaCBhbmltYXRpb25zXG5cdFx0XHRpZiAoIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHQvLyBUT0RPOiBGaWd1cmUgb3V0IHdoYXQgYW4gYXBwcm9wcmFpdGUgRlBTIGlzIGZvciBtb3JwaCB0YXJnZXQgYW5pbWF0aW9ucyAtLSBkZWZhdWx0aW5nIHRvIDEwLCBidXQgcmVhbGx5IGl0IGlzIGNvbXBsZXRlbHkgYXJiaXRyYXJ5LlxuXHRcdFx0XHR2YXIgbW9ycGhBbmltYXRpb25DbGlwcyA9IEFuaW1hdGlvbkNsaXAuQ3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXMoIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cywgMTAgKTtcblx0XHRcdFx0b3V0cHV0QW5pbWF0aW9ucyA9IG91dHB1dEFuaW1hdGlvbnMuY29uY2F0KCBtb3JwaEFuaW1hdGlvbkNsaXBzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBvdXRwdXRBbmltYXRpb25zLmxlbmd0aCA+IDAgKSBnZW9tZXRyeS5hbmltYXRpb25zID0gb3V0cHV0QW5pbWF0aW9ucztcblxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBwYXJzZSgganNvbiwgdGV4dHVyZVBhdGggKSB7XG5cblx0XHRcdGlmICgganNvbi5kYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gR2VvbWV0cnkgNC4wIHNwZWNcblx0XHRcdFx0anNvbiA9IGpzb24uZGF0YTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGpzb24uc2NhbGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRqc29uLnNjYWxlID0gMS4wIC8ganNvbi5zY2FsZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRqc29uLnNjYWxlID0gMS4wO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeSgpO1xuXG5cdFx0XHRwYXJzZU1vZGVsKCBqc29uLCBnZW9tZXRyeSApO1xuXHRcdFx0cGFyc2VTa2luKCBqc29uLCBnZW9tZXRyeSApO1xuXHRcdFx0cGFyc2VNb3JwaGluZygganNvbiwgZ2VvbWV0cnkgKTtcblx0XHRcdHBhcnNlQW5pbWF0aW9ucygganNvbiwgZ2VvbWV0cnkgKTtcblxuXHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XG5cdFx0XHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdFx0aWYgKCBqc29uLm1hdGVyaWFscyA9PT0gdW5kZWZpbmVkIHx8IGpzb24ubWF0ZXJpYWxzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4geyBnZW9tZXRyeTogZ2VvbWV0cnkgfTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YXIgbWF0ZXJpYWxzID0gTG9hZGVyLnByb3RvdHlwZS5pbml0TWF0ZXJpYWxzKCBqc29uLm1hdGVyaWFscywgdGV4dHVyZVBhdGgsIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblxuXHRcdFx0XHRyZXR1cm4geyBnZW9tZXRyeTogZ2VvbWV0cnksIG1hdGVyaWFsczogbWF0ZXJpYWxzIH07XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSApKClcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gT2JqZWN0TG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXHR0aGlzLnRleHR1cmVQYXRoID0gJyc7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggT2JqZWN0TG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0aWYgKCB0aGlzLnRleHR1cmVQYXRoID09PSAnJyApIHtcblxuXHRcdFx0dGhpcy50ZXh0dXJlUGF0aCA9IHVybC5zdWJzdHJpbmcoIDAsIHVybC5sYXN0SW5kZXhPZiggJy8nICkgKyAxICk7XG5cblx0XHR9XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHR2YXIganNvbiA9IG51bGw7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0anNvbiA9IEpTT04ucGFyc2UoIHRleHQgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRcdGlmICggb25FcnJvciAhPT0gdW5kZWZpbmVkICkgb25FcnJvciggZXJyb3IgKTtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUU6T2JqZWN0TG9hZGVyOiBDYW5cXCd0IHBhcnNlICcgKyB1cmwgKyAnLicsIGVycm9yLm1lc3NhZ2UgKTtcblxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG1ldGFkYXRhID0ganNvbi5tZXRhZGF0YTtcblxuXHRcdFx0aWYgKCBtZXRhZGF0YSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdnZW9tZXRyeScgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwgKyAnLiBVc2UgVEhSRUUuSlNPTkxvYWRlciBpbnN0ZWFkLicgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNjb3BlLnBhcnNlKCBqc29uLCBvbkxvYWQgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHNldFRleHR1cmVQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlUGF0aCA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRwYXJzZTogZnVuY3Rpb24gKCBqc29uLCBvbkxvYWQgKSB7XG5cblx0XHR2YXIgc2hhcGVzID0gdGhpcy5wYXJzZVNoYXBlKCBqc29uLnNoYXBlcyApO1xuXHRcdHZhciBnZW9tZXRyaWVzID0gdGhpcy5wYXJzZUdlb21ldHJpZXMoIGpzb24uZ2VvbWV0cmllcywgc2hhcGVzICk7XG5cblx0XHR2YXIgaW1hZ2VzID0gdGhpcy5wYXJzZUltYWdlcygganNvbi5pbWFnZXMsIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIG9uTG9hZCggb2JqZWN0ICk7XG5cblx0XHR9ICk7XG5cblx0XHR2YXIgdGV4dHVyZXMgPSB0aGlzLnBhcnNlVGV4dHVyZXMoIGpzb24udGV4dHVyZXMsIGltYWdlcyApO1xuXHRcdHZhciBtYXRlcmlhbHMgPSB0aGlzLnBhcnNlTWF0ZXJpYWxzKCBqc29uLm1hdGVyaWFscywgdGV4dHVyZXMgKTtcblxuXHRcdHZhciBvYmplY3QgPSB0aGlzLnBhcnNlT2JqZWN0KCBqc29uLm9iamVjdCwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzICk7XG5cblx0XHRpZiAoIGpzb24uYW5pbWF0aW9ucyApIHtcblxuXHRcdFx0b2JqZWN0LmFuaW1hdGlvbnMgPSB0aGlzLnBhcnNlQW5pbWF0aW9ucygganNvbi5hbmltYXRpb25zICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24uaW1hZ2VzID09PSB1bmRlZmluZWQgfHwganNvbi5pbWFnZXMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkgb25Mb2FkKCBvYmplY3QgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBvYmplY3Q7XG5cblx0fSxcblxuXHRwYXJzZVNoYXBlOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHR2YXIgc2hhcGVzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBzaGFwZSA9IG5ldyBTaGFwZSgpLmZyb21KU09OKCBqc29uWyBpIF0gKTtcblxuXHRcdFx0XHRzaGFwZXNbIHNoYXBlLnV1aWQgXSA9IHNoYXBlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdH0sXG5cblx0cGFyc2VHZW9tZXRyaWVzOiBmdW5jdGlvbiAoIGpzb24sIHNoYXBlcyApIHtcblxuXHRcdHZhciBnZW9tZXRyaWVzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGdlb21ldHJ5TG9hZGVyID0gbmV3IEpTT05Mb2FkZXIoKTtcblx0XHRcdHZhciBidWZmZXJHZW9tZXRyeUxvYWRlciA9IG5ldyBCdWZmZXJHZW9tZXRyeUxvYWRlcigpO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGdlb21ldHJ5O1xuXHRcdFx0XHR2YXIgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdQbGFuZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdQbGFuZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGgsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnQm94R2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0JveEJ1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdDdWJlR2VvbWV0cnknOiAvLyBiYWNrd2FyZHMgY29tcGF0aWJsZVxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS53aWR0aCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHQsXG5cdFx0XHRcdFx0XHRcdGRhdGEuZGVwdGgsXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGhTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5kZXB0aFNlZ21lbnRzXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0NpcmNsZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdDaXJjbGVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5zZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhTGVuZ3RoXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0N5bGluZGVyR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0N5bGluZGVyQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXNUb3AsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzQm90dG9tLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodCxcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpYWxTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5vcGVuRW5kZWQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTdGFydCxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdDb25lR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0NvbmVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHQsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEub3BlbkVuZGVkLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnU3BoZXJlR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1NwaGVyZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEucGhpTGVuZ3RoLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ0RvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdJY29zYWhlZHJvbkdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdPY3RhaGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ09jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnVGV0cmFoZWRyb25HZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5kZXRhaWxcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnUmluZ0dlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdSaW5nQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5pbm5lclJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5vdXRlclJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YVNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaVNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnVG9ydXNHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnVG9ydXNCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50dWJlLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnR1YnVsYXJTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5hcmNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnVG9ydXNLbm90R2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1RvcnVzS25vdEJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnR1YmUsXG5cdFx0XHRcdFx0XHRcdGRhdGEudHVidWxhclNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnAsXG5cdFx0XHRcdFx0XHRcdGRhdGEucVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdMYXRoZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdMYXRoZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucG9pbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdQb2x5aGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1BvbHloZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnZlcnRpY2VzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmluZGljZXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmRldGFpbHNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnU2hhcGVHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnU2hhcGVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdHZhciBnZW9tZXRyeVNoYXBlcyA9IFtdO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZGF0YS5zaGFwZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBkYXRhLnNoYXBlc1sgaiBdIF07XG5cblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnlTaGFwZXMucHVzaCggc2hhcGUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnlTaGFwZXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuY3VydmVTZWdtZW50c1xuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblxuXHRcdFx0XHRcdGNhc2UgJ0V4dHJ1ZGVHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnRXh0cnVkZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0dmFyIGdlb21ldHJ5U2hhcGVzID0gW107XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgc2hhcGUgPSBzaGFwZXNbIGRhdGEuc2hhcGVzWyBqIF0gXTtcblxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcy5wdXNoKCBzaGFwZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhciBleHRydWRlUGF0aCA9IGRhdGEub3B0aW9ucy5leHRydWRlUGF0aDtcblxuXHRcdFx0XHRcdFx0aWYgKCBleHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdGRhdGEub3B0aW9ucy5leHRydWRlUGF0aCA9IG5ldyBDdXJ2ZXNbIGV4dHJ1ZGVQYXRoLnR5cGUgXSgpLmZyb21KU09OKCBleHRydWRlUGF0aCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5vcHRpb25zXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0J1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBidWZmZXJHZW9tZXRyeUxvYWRlci5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0dlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBnZW9tZXRyeUxvYWRlci5wYXJzZSggZGF0YSwgdGhpcy50ZXh0dXJlUGF0aCApLmdlb21ldHJ5O1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5zdXBwb3J0ZWQgZ2VvbWV0cnkgdHlwZSBcIicgKyBkYXRhLnR5cGUgKyAnXCInICk7XG5cblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnZW9tZXRyeS51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSBnZW9tZXRyeS5uYW1lID0gZGF0YS5uYW1lO1xuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgPT09IHRydWUgJiYgZGF0YS51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgZ2VvbWV0cnkudXNlckRhdGEgPSBkYXRhLnVzZXJEYXRhO1xuXG5cdFx0XHRcdGdlb21ldHJpZXNbIGRhdGEudXVpZCBdID0gZ2VvbWV0cnk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBnZW9tZXRyaWVzO1xuXG5cdH0sXG5cblx0cGFyc2VNYXRlcmlhbHM6IGZ1bmN0aW9uICgganNvbiwgdGV4dHVyZXMgKSB7XG5cblx0XHR2YXIgbWF0ZXJpYWxzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGxvYWRlciA9IG5ldyBNYXRlcmlhbExvYWRlcigpO1xuXHRcdFx0bG9hZGVyLnNldFRleHR1cmVzKCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdFx0aWYgKCBkYXRhLnR5cGUgPT09ICdNdWx0aU1hdGVyaWFsJyApIHtcblxuXHRcdFx0XHRcdC8vIERlcHJlY2F0ZWRcblxuXHRcdFx0XHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgZGF0YS5tYXRlcmlhbHMubGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRhcnJheS5wdXNoKCBsb2FkZXIucGFyc2UoIGRhdGEubWF0ZXJpYWxzWyBqIF0gKSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzWyBkYXRhLnV1aWQgXSA9IGFycmF5O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRtYXRlcmlhbHNbIGRhdGEudXVpZCBdID0gbG9hZGVyLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0ZXJpYWxzO1xuXG5cdH0sXG5cblx0cGFyc2VBbmltYXRpb25zOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHR2YXIgYW5pbWF0aW9ucyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwganNvbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHR2YXIgY2xpcCA9IEFuaW1hdGlvbkNsaXAucGFyc2UoIGRhdGEgKTtcblxuXHRcdFx0aWYgKCBkYXRhLnV1aWQgIT09IHVuZGVmaW5lZCApIGNsaXAudXVpZCA9IGRhdGEudXVpZDtcblxuXHRcdFx0YW5pbWF0aW9ucy5wdXNoKCBjbGlwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcblxuXHR9LFxuXG5cdHBhcnNlSW1hZ2VzOiBmdW5jdGlvbiAoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cdFx0dmFyIGltYWdlcyA9IHt9O1xuXG5cdFx0ZnVuY3Rpb24gbG9hZEltYWdlKCB1cmwgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0cmV0dXJuIGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICYmIGpzb24ubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIG1hbmFnZXIgPSBuZXcgTG9hZGluZ01hbmFnZXIoIG9uTG9hZCApO1xuXG5cdFx0XHR2YXIgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCBtYW5hZ2VyICk7XG5cdFx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGpzb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGltYWdlID0ganNvblsgaSBdO1xuXHRcdFx0XHR2YXIgdXJsID0gaW1hZ2UudXJsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdXJsICkgKSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIGFycmF5IG9mIGltYWdlcyBlLmcgQ3ViZVRleHR1cmVcblxuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gW107XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gdXJsLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgY3VycmVudFVybCA9IHVybFsgaiBdO1xuXG5cdFx0XHRcdFx0XHR2YXIgcGF0aCA9IC9eKFxcL1xcLyl8KFthLXpdKzooXFwvXFwvKT8pL2kudGVzdCggY3VycmVudFVybCApID8gY3VycmVudFVybCA6IHNjb3BlLnRleHR1cmVQYXRoICsgY3VycmVudFVybDtcblxuXHRcdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0ucHVzaCggbG9hZEltYWdlKCBwYXRoICkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gbG9hZCBzaW5nbGUgaW1hZ2VcblxuXHRcdFx0XHRcdHZhciBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCBpbWFnZS51cmwgKSA/IGltYWdlLnVybCA6IHNjb3BlLnRleHR1cmVQYXRoICsgaW1hZ2UudXJsO1xuXG5cdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0gPSBsb2FkSW1hZ2UoIHBhdGggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZXM7XG5cblx0fSxcblxuXHRwYXJzZVRleHR1cmVzOiBmdW5jdGlvbiAoIGpzb24sIGltYWdlcyApIHtcblxuXHRcdGZ1bmN0aW9uIHBhcnNlQ29uc3RhbnQoIHZhbHVlLCB0eXBlICkge1xuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSByZXR1cm4gdmFsdWU7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlci5wYXJzZVRleHR1cmU6IENvbnN0YW50IHNob3VsZCBiZSBpbiBudW1lcmljIGZvcm0uJywgdmFsdWUgKTtcblxuXHRcdFx0cmV0dXJuIHR5cGVbIHZhbHVlIF07XG5cblx0XHR9XG5cblx0XHR2YXIgdGV4dHVyZXMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdFx0aWYgKCBkYXRhLmltYWdlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IE5vIFwiaW1hZ2VcIiBzcGVjaWZpZWQgZm9yJywgZGF0YS51dWlkICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggaW1hZ2VzWyBkYXRhLmltYWdlIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGltYWdlJywgZGF0YS5pbWFnZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgdGV4dHVyZTtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGltYWdlc1sgZGF0YS5pbWFnZSBdICkgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IEN1YmVUZXh0dXJlKCBpbWFnZXNbIGRhdGEuaW1hZ2UgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IFRleHR1cmUoIGltYWdlc1sgZGF0YS5pbWFnZSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdHRleHR1cmUudXVpZCA9IGRhdGEudXVpZDtcblxuXHRcdFx0XHRpZiAoIGRhdGEubmFtZSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5uYW1lID0gZGF0YS5uYW1lO1xuXG5cdFx0XHRcdGlmICggZGF0YS5tYXBwaW5nICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm1hcHBpbmcgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1hcHBpbmcsIFRFWFRVUkVfTUFQUElORyApO1xuXG5cdFx0XHRcdGlmICggZGF0YS5vZmZzZXQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUub2Zmc2V0LmZyb21BcnJheSggZGF0YS5vZmZzZXQgKTtcblx0XHRcdFx0aWYgKCBkYXRhLnJlcGVhdCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5yZXBlYXQuZnJvbUFycmF5KCBkYXRhLnJlcGVhdCApO1xuXHRcdFx0XHRpZiAoIGRhdGEuY2VudGVyICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmNlbnRlci5mcm9tQXJyYXkoIGRhdGEuY2VudGVyICk7XG5cdFx0XHRcdGlmICggZGF0YS5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5yb3RhdGlvbiA9IGRhdGEucm90YXRpb247XG5cblx0XHRcdFx0aWYgKCBkYXRhLndyYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUud3JhcFMgPSBwYXJzZUNvbnN0YW50KCBkYXRhLndyYXBbIDAgXSwgVEVYVFVSRV9XUkFQUElORyApO1xuXHRcdFx0XHRcdHRleHR1cmUud3JhcFQgPSBwYXJzZUNvbnN0YW50KCBkYXRhLndyYXBbIDEgXSwgVEVYVFVSRV9XUkFQUElORyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRhdGEuZm9ybWF0ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmZvcm1hdCA9IGRhdGEuZm9ybWF0O1xuXG5cdFx0XHRcdGlmICggZGF0YS5taW5GaWx0ZXIgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWluRmlsdGVyID0gcGFyc2VDb25zdGFudCggZGF0YS5taW5GaWx0ZXIsIFRFWFRVUkVfRklMVEVSICk7XG5cdFx0XHRcdGlmICggZGF0YS5tYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWFnRmlsdGVyID0gcGFyc2VDb25zdGFudCggZGF0YS5tYWdGaWx0ZXIsIFRFWFRVUkVfRklMVEVSICk7XG5cdFx0XHRcdGlmICggZGF0YS5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmFuaXNvdHJvcHkgPSBkYXRhLmFuaXNvdHJvcHk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZsaXBZICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmZsaXBZID0gZGF0YS5mbGlwWTtcblxuXHRcdFx0XHR0ZXh0dXJlc1sgZGF0YS51dWlkIF0gPSB0ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZXM7XG5cblx0fSxcblxuXHRwYXJzZU9iamVjdDogZnVuY3Rpb24gKCBkYXRhLCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMgKSB7XG5cblx0XHR2YXIgb2JqZWN0O1xuXG5cdFx0ZnVuY3Rpb24gZ2V0R2VvbWV0cnkoIG5hbWUgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cmllc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgZ2VvbWV0cnknLCBuYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGdlb21ldHJpZXNbIG5hbWUgXTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldE1hdGVyaWFsKCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIG5hbWUgPT09IHVuZGVmaW5lZCApIHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXG5cdFx0XHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IG5hbWUubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciB1dWlkID0gbmFtZVsgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCBtYXRlcmlhbHNbIHV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIHV1aWQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGFycmF5LnB1c2goIG1hdGVyaWFsc1sgdXVpZCBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBhcnJheTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgbWF0ZXJpYWwnLCBuYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGVyaWFsc1sgbmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0c3dpdGNoICggZGF0YS50eXBlICkge1xuXG5cdFx0XHRjYXNlICdTY2VuZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFNjZW5lKCk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLmJhY2tncm91bmQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGlmICggTnVtYmVyLmlzSW50ZWdlciggZGF0YS5iYWNrZ3JvdW5kICkgKSB7XG5cblx0XHRcdFx0XHRcdG9iamVjdC5iYWNrZ3JvdW5kID0gbmV3IENvbG9yKCBkYXRhLmJhY2tncm91bmQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmZvZy50eXBlID09PSAnRm9nJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2coIGRhdGEuZm9nLmNvbG9yLCBkYXRhLmZvZy5uZWFyLCBkYXRhLmZvZy5mYXIgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGRhdGEuZm9nLnR5cGUgPT09ICdGb2dFeHAyJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2dFeHAyKCBkYXRhLmZvZy5jb2xvciwgZGF0YS5mb2cuZGVuc2l0eSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUGVyc3BlY3RpdmVDYW1lcmEnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZGF0YS5mb3YsIGRhdGEuYXNwZWN0LCBkYXRhLm5lYXIsIGRhdGEuZmFyICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvY3VzICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZm9jdXMgPSBkYXRhLmZvY3VzO1xuXHRcdFx0XHRpZiAoIGRhdGEuem9vbSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lnpvb20gPSBkYXRhLnpvb207XG5cdFx0XHRcdGlmICggZGF0YS5maWxtR2F1Z2UgIT09IHVuZGVmaW5lZCApIG9iamVjdC5maWxtR2F1Z2UgPSBkYXRhLmZpbG1HYXVnZTtcblx0XHRcdFx0aWYgKCBkYXRhLmZpbG1PZmZzZXQgIT09IHVuZGVmaW5lZCApIG9iamVjdC5maWxtT2Zmc2V0ID0gZGF0YS5maWxtT2Zmc2V0O1xuXHRcdFx0XHRpZiAoIGRhdGEudmlldyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgZGF0YS52aWV3ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ09ydGhvZ3JhcGhpY0NhbWVyYSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSggZGF0YS5sZWZ0LCBkYXRhLnJpZ2h0LCBkYXRhLnRvcCwgZGF0YS5ib3R0b20sIGRhdGEubmVhciwgZGF0YS5mYXIgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuem9vbSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lnpvb20gPSBkYXRhLnpvb207XG5cdFx0XHRcdGlmICggZGF0YS52aWV3ICE9PSB1bmRlZmluZWQgKSBvYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCBkYXRhLnZpZXcgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnQW1iaWVudExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgQW1iaWVudExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdEaXJlY3Rpb25hbExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgRGlyZWN0aW9uYWxMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUG9pbnRMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBvaW50TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLmRpc3RhbmNlLCBkYXRhLmRlY2F5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1JlY3RBcmVhTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBSZWN0QXJlYUxpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU3BvdExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3BvdExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS5kaXN0YW5jZSwgZGF0YS5hbmdsZSwgZGF0YS5wZW51bWJyYSwgZGF0YS5kZWNheSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdIZW1pc3BoZXJlTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBIZW1pc3BoZXJlTGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuZ3JvdW5kQ29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1NraW5uZWRNZXNoJzpcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXIucGFyc2VPYmplY3QoKSBkb2VzIG5vdCBzdXBwb3J0IFNraW5uZWRNZXNoIHlldC4nICk7XG5cblx0XHRcdGNhc2UgJ01lc2gnOlxuXG5cdFx0XHRcdHZhciBnZW9tZXRyeSA9IGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICk7XG5cdFx0XHRcdHZhciBtYXRlcmlhbCA9IGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICk7XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5ib25lcyAmJiBnZW9tZXRyeS5ib25lcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0ID0gbmV3IFNraW5uZWRNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0b2JqZWN0ID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTE9EJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTE9EKCk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xpbmUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApLCBkYXRhLm1vZGUgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZUxvb3AnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lTG9vcCggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMaW5lU2VnbWVudHMnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lU2VnbWVudHMoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUG9pbnRDbG91ZCc6XG5cdFx0XHRjYXNlICdQb2ludHMnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQb2ludHMoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU3ByaXRlJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3ByaXRlKCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0dyb3VwJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgR3JvdXAoKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdH1cblxuXHRcdG9iamVjdC51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5uYW1lID0gZGF0YS5uYW1lO1xuXG5cdFx0aWYgKCBkYXRhLm1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRvYmplY3QubWF0cml4LmZyb21BcnJheSggZGF0YS5tYXRyaXggKTtcblxuXHRcdFx0aWYgKCBkYXRhLm1hdHJpeEF1dG9VcGRhdGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZGF0YS5tYXRyaXhBdXRvVXBkYXRlO1xuXHRcdFx0aWYgKCBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSApIG9iamVjdC5tYXRyaXguZGVjb21wb3NlKCBvYmplY3QucG9zaXRpb24sIG9iamVjdC5xdWF0ZXJuaW9uLCBvYmplY3Quc2NhbGUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggZGF0YS5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnBvc2l0aW9uLmZyb21BcnJheSggZGF0YS5wb3NpdGlvbiApO1xuXHRcdFx0aWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBvYmplY3Qucm90YXRpb24uZnJvbUFycmF5KCBkYXRhLnJvdGF0aW9uICk7XG5cdFx0XHRpZiAoIGRhdGEucXVhdGVybmlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnF1YXRlcm5pb24uZnJvbUFycmF5KCBkYXRhLnF1YXRlcm5pb24gKTtcblx0XHRcdGlmICggZGF0YS5zY2FsZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNjYWxlLmZyb21BcnJheSggZGF0YS5zY2FsZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLmNhc3RTaGFkb3cgIT09IHVuZGVmaW5lZCApIG9iamVjdC5jYXN0U2hhZG93ID0gZGF0YS5jYXN0U2hhZG93O1xuXHRcdGlmICggZGF0YS5yZWNlaXZlU2hhZG93ICE9PSB1bmRlZmluZWQgKSBvYmplY3QucmVjZWl2ZVNoYWRvdyA9IGRhdGEucmVjZWl2ZVNoYWRvdztcblxuXHRcdGlmICggZGF0YS5zaGFkb3cgKSB7XG5cblx0XHRcdGlmICggZGF0YS5zaGFkb3cuYmlhcyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5iaWFzID0gZGF0YS5zaGFkb3cuYmlhcztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cucmFkaXVzICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93LnJhZGl1cyA9IGRhdGEuc2hhZG93LnJhZGl1cztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cubWFwU2l6ZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5tYXBTaXplLmZyb21BcnJheSggZGF0YS5zaGFkb3cubWFwU2l6ZSApO1xuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5jYW1lcmEgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cuY2FtZXJhID0gdGhpcy5wYXJzZU9iamVjdCggZGF0YS5zaGFkb3cuY2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEudmlzaWJsZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpc2libGUgPSBkYXRhLnZpc2libGU7XG5cdFx0aWYgKCBkYXRhLmZydXN0dW1DdWxsZWQgIT09IHVuZGVmaW5lZCApIG9iamVjdC5mcnVzdHVtQ3VsbGVkID0gZGF0YS5mcnVzdHVtQ3VsbGVkO1xuXHRcdGlmICggZGF0YS5yZW5kZXJPcmRlciAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJlbmRlck9yZGVyID0gZGF0YS5yZW5kZXJPcmRlcjtcblx0XHRpZiAoIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCApIG9iamVjdC51c2VyRGF0YSA9IGRhdGEudXNlckRhdGE7XG5cdFx0aWYgKCBkYXRhLmxheWVycyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmxheWVycy5tYXNrID0gZGF0YS5sYXllcnM7XG5cblx0XHRpZiAoIGRhdGEuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGNoaWxkcmVuID0gZGF0YS5jaGlsZHJlbjtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdG9iamVjdC5hZGQoIHRoaXMucGFyc2VPYmplY3QoIGNoaWxkcmVuWyBpIF0sIGdlb21ldHJpZXMsIG1hdGVyaWFscyApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS50eXBlID09PSAnTE9EJyApIHtcblxuXHRcdFx0dmFyIGxldmVscyA9IGRhdGEubGV2ZWxzO1xuXG5cdFx0XHRmb3IgKCB2YXIgbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsICsrICkge1xuXG5cdFx0XHRcdHZhciBsZXZlbCA9IGxldmVsc1sgbCBdO1xuXHRcdFx0XHR2YXIgY2hpbGQgPSBvYmplY3QuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggJ3V1aWQnLCBsZXZlbC5vYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIGNoaWxkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRvYmplY3QuYWRkTGV2ZWwoIGNoaWxkLCBsZXZlbC5kaXN0YW5jZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iamVjdDtcblxuXHR9XG5cbn0gKTtcblxudmFyIFRFWFRVUkVfTUFQUElORyA9IHtcblx0VVZNYXBwaW5nOiBVVk1hcHBpbmcsXG5cdEN1YmVSZWZsZWN0aW9uTWFwcGluZzogQ3ViZVJlZmxlY3Rpb25NYXBwaW5nLFxuXHRDdWJlUmVmcmFjdGlvbk1hcHBpbmc6IEN1YmVSZWZyYWN0aW9uTWFwcGluZyxcblx0RXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLFxuXHRFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZzogRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcsXG5cdFNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nOiBTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZyxcblx0Q3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLFxuXHRDdWJlVVZSZWZyYWN0aW9uTWFwcGluZzogQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmdcbn07XG5cbnZhciBURVhUVVJFX1dSQVBQSU5HID0ge1xuXHRSZXBlYXRXcmFwcGluZzogUmVwZWF0V3JhcHBpbmcsXG5cdENsYW1wVG9FZGdlV3JhcHBpbmc6IENsYW1wVG9FZGdlV3JhcHBpbmcsXG5cdE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmdcbn07XG5cbnZhciBURVhUVVJFX0ZJTFRFUiA9IHtcblx0TmVhcmVzdEZpbHRlcjogTmVhcmVzdEZpbHRlcixcblx0TmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXI6IE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyLFxuXHROZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyOiBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyLFxuXHRMaW5lYXJGaWx0ZXI6IExpbmVhckZpbHRlcixcblx0TGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlcjogTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlcixcblx0TGluZWFyTWlwTWFwTGluZWFyRmlsdGVyOiBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXJcbn07XG5cbi8qKlxuICogQGF1dGhvciB0aGVzcGl0ZSAvIGh0dHA6Ly9jbGlja3RvcmVsZWFzZS5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBJbWFnZUJpdG1hcExvYWRlciggbWFuYWdlciApIHtcblxuXHRpZiAoIHR5cGVvZiBjcmVhdGVJbWFnZUJpdG1hcCA9PT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZUJpdG1hcExvYWRlcjogY3JlYXRlSW1hZ2VCaXRtYXAoKSBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHR9XG5cblx0aWYgKCB0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGZldGNoKCkgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0fVxuXG5cdHRoaXMubWFuYWdlciA9IG1hbmFnZXIgIT09IHVuZGVmaW5lZCA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cdHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcblxufVxuXG5JbWFnZUJpdG1hcExvYWRlci5wcm90b3R5cGUgPSB7XG5cblx0Y29uc3RydWN0b3I6IEltYWdlQml0bWFwTG9hZGVyLFxuXG5cdHNldE9wdGlvbnM6IGZ1bmN0aW9uIHNldE9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0aWYgKCB1cmwgPT09IHVuZGVmaW5lZCApIHVybCA9ICcnO1xuXG5cdFx0aWYgKCB0aGlzLnBhdGggIT09IHVuZGVmaW5lZCApIHVybCA9IHRoaXMucGF0aCArIHVybDtcblxuXHRcdHVybCA9IHRoaXMubWFuYWdlci5yZXNvbHZlVVJMKCB1cmwgKTtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCAwICk7XG5cblx0XHRcdHJldHVybiBjYWNoZWQ7XG5cblx0XHR9XG5cblx0XHRmZXRjaCggdXJsICkudGhlbiggZnVuY3Rpb24gKCByZXMgKSB7XG5cblx0XHRcdHJldHVybiByZXMuYmxvYigpO1xuXG5cdFx0fSApLnRoZW4oIGZ1bmN0aW9uICggYmxvYiApIHtcblxuXHRcdFx0cmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKCBibG9iLCBzY29wZS5vcHRpb25zICk7XG5cblx0XHR9ICkudGhlbiggZnVuY3Rpb24gKCBpbWFnZUJpdG1hcCApIHtcblxuXHRcdFx0Q2FjaGUuYWRkKCB1cmwsIGltYWdlQml0bWFwICk7XG5cblx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBpbWFnZUJpdG1hcCApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0fSApLmNhdGNoKCBmdW5jdGlvbiAoIGUgKSB7XG5cblx0XHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoIGUgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdH0gKTtcblxuXHR9LFxuXG5cdHNldENyb3NzT3JpZ2luOiBmdW5jdGlvbiAoIC8qIHZhbHVlICovICkge1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIG1pbmltYWwgY2xhc3MgZm9yIHByb3hpbmcgZnVuY3Rpb25zIHRvIFBhdGguIFJlcGxhY2VzIG9sZCBcImV4dHJhY3RTdWJwYXRocygpXCJcbiAqKi9cblxuZnVuY3Rpb24gU2hhcGVQYXRoKCkge1xuXG5cdHRoaXMudHlwZSA9ICdTaGFwZVBhdGgnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoKTtcblxuXHR0aGlzLnN1YlBhdGhzID0gW107XG5cdHRoaXMuY3VycmVudFBhdGggPSBudWxsO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFNoYXBlUGF0aC5wcm90b3R5cGUsIHtcblxuXHRtb3ZlVG86IGZ1bmN0aW9uICggeCwgeSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGggPSBuZXcgUGF0aCgpO1xuXHRcdHRoaXMuc3ViUGF0aHMucHVzaCggdGhpcy5jdXJyZW50UGF0aCApO1xuXHRcdHRoaXMuY3VycmVudFBhdGgubW92ZVRvKCB4LCB5ICk7XG5cblx0fSxcblxuXHRsaW5lVG86IGZ1bmN0aW9uICggeCwgeSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGgubGluZVRvKCB4LCB5ICk7XG5cblx0fSxcblxuXHRxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbiAoIGFDUHgsIGFDUHksIGFYLCBhWSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGgucXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICk7XG5cblx0fSxcblxuXHRiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbiAoIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLmJlemllckN1cnZlVG8oIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKTtcblxuXHR9LFxuXG5cdHNwbGluZVRocnU6IGZ1bmN0aW9uICggcHRzICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5zcGxpbmVUaHJ1KCBwdHMgKTtcblxuXHR9LFxuXG5cdHRvU2hhcGVzOiBmdW5jdGlvbiAoIGlzQ0NXLCBub0hvbGVzICkge1xuXG5cdFx0ZnVuY3Rpb24gdG9TaGFwZXNOb0hvbGVzKCBpblN1YnBhdGhzICkge1xuXG5cdFx0XHR2YXIgc2hhcGVzID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGluU3VicGF0aHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgdG1wUGF0aCA9IGluU3VicGF0aHNbIGkgXTtcblxuXHRcdFx0XHR2YXIgdG1wU2hhcGUgPSBuZXcgU2hhcGUoKTtcblx0XHRcdFx0dG1wU2hhcGUuY3VydmVzID0gdG1wUGF0aC5jdXJ2ZXM7XG5cblx0XHRcdFx0c2hhcGVzLnB1c2goIHRtcFNoYXBlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNoYXBlcztcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGlzUG9pbnRJbnNpZGVQb2x5Z29uKCBpblB0LCBpblBvbHlnb24gKSB7XG5cblx0XHRcdHZhciBwb2x5TGVuID0gaW5Qb2x5Z29uLmxlbmd0aDtcblxuXHRcdFx0Ly8gaW5QdCBvbiBwb2x5Z29uIGNvbnRvdXIgPT4gaW1tZWRpYXRlIHN1Y2Nlc3MgICAgb3Jcblx0XHRcdC8vIHRvZ2dsaW5nIG9mIGluc2lkZS9vdXRzaWRlIGF0IGV2ZXJ5IHNpbmdsZSEgaW50ZXJzZWN0aW9uIHBvaW50IG9mIGFuIGVkZ2Vcblx0XHRcdC8vICB3aXRoIHRoZSBob3Jpem9udGFsIGxpbmUgdGhyb3VnaCBpblB0LCBsZWZ0IG9mIGluUHRcblx0XHRcdC8vICBub3QgY291bnRpbmcgbG93ZXJZIGVuZHBvaW50cyBvZiBlZGdlcyBhbmQgd2hvbGUgZWRnZXMgb24gdGhhdCBsaW5lXG5cdFx0XHR2YXIgaW5zaWRlID0gZmFsc2U7XG5cdFx0XHRmb3IgKCB2YXIgcCA9IHBvbHlMZW4gLSAxLCBxID0gMDsgcSA8IHBvbHlMZW47IHAgPSBxICsrICkge1xuXG5cdFx0XHRcdHZhciBlZGdlTG93UHQgPSBpblBvbHlnb25bIHAgXTtcblx0XHRcdFx0dmFyIGVkZ2VIaWdoUHQgPSBpblBvbHlnb25bIHEgXTtcblxuXHRcdFx0XHR2YXIgZWRnZUR4ID0gZWRnZUhpZ2hQdC54IC0gZWRnZUxvd1B0Lng7XG5cdFx0XHRcdHZhciBlZGdlRHkgPSBlZGdlSGlnaFB0LnkgLSBlZGdlTG93UHQueTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBlZGdlRHkgKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0Ly8gbm90IHBhcmFsbGVsXG5cdFx0XHRcdFx0aWYgKCBlZGdlRHkgPCAwICkge1xuXG5cdFx0XHRcdFx0XHRlZGdlTG93UHQgPSBpblBvbHlnb25bIHEgXTsgZWRnZUR4ID0gLSBlZGdlRHg7XG5cdFx0XHRcdFx0XHRlZGdlSGlnaFB0ID0gaW5Qb2x5Z29uWyBwIF07IGVkZ2VEeSA9IC0gZWRnZUR5O1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggKCBpblB0LnkgPCBlZGdlTG93UHQueSApIHx8ICggaW5QdC55ID4gZWRnZUhpZ2hQdC55ICkgKSBcdFx0Y29udGludWU7XG5cblx0XHRcdFx0XHRpZiAoIGluUHQueSA9PT0gZWRnZUxvd1B0LnkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggaW5QdC54ID09PSBlZGdlTG93UHQueCApXHRcdHJldHVyblx0dHJ1ZTtcdFx0Ly8gaW5QdCBpcyBvbiBjb250b3VyID9cblx0XHRcdFx0XHRcdC8vIGNvbnRpbnVlO1x0XHRcdFx0Ly8gbm8gaW50ZXJzZWN0aW9uIG9yIGVkZ2VMb3dQdCA9PiBkb2Vzbid0IGNvdW50ICEhIVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dmFyIHBlcnBFZGdlID0gZWRnZUR5ICogKCBpblB0LnggLSBlZGdlTG93UHQueCApIC0gZWRnZUR4ICogKCBpblB0LnkgLSBlZGdlTG93UHQueSApO1xuXHRcdFx0XHRcdFx0aWYgKCBwZXJwRWRnZSA9PT0gMCApXHRcdFx0XHRyZXR1cm5cdHRydWU7XHRcdC8vIGluUHQgaXMgb24gY29udG91ciA/XG5cdFx0XHRcdFx0XHRpZiAoIHBlcnBFZGdlIDwgMCApIFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHRpbnNpZGUgPSAhIGluc2lkZTtcdFx0Ly8gdHJ1ZSBpbnRlcnNlY3Rpb24gbGVmdCBvZiBpblB0XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHBhcmFsbGVsIG9yIGNvbGxpbmVhclxuXHRcdFx0XHRcdGlmICggaW5QdC55ICE9PSBlZGdlTG93UHQueSApIFx0XHRjb250aW51ZTtcdFx0XHQvLyBwYXJhbGxlbFxuXHRcdFx0XHRcdC8vIGVkZ2UgbGllcyBvbiB0aGUgc2FtZSBob3Jpem9udGFsIGxpbmUgYXMgaW5QdFxuXHRcdFx0XHRcdGlmICggKCAoIGVkZ2VIaWdoUHQueCA8PSBpblB0LnggKSAmJiAoIGluUHQueCA8PSBlZGdlTG93UHQueCApICkgfHxcblx0XHRcdFx0XHRcdCAoICggZWRnZUxvd1B0LnggPD0gaW5QdC54ICkgJiYgKCBpblB0LnggPD0gZWRnZUhpZ2hQdC54ICkgKSApXHRcdHJldHVyblx0dHJ1ZTtcdC8vIGluUHQ6IFBvaW50IG9uIGNvbnRvdXIgIVxuXHRcdFx0XHRcdC8vIGNvbnRpbnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm5cdGluc2lkZTtcblxuXHRcdH1cblxuXHRcdHZhciBpc0Nsb2NrV2lzZSA9IFNoYXBlVXRpbHMuaXNDbG9ja1dpc2U7XG5cblx0XHR2YXIgc3ViUGF0aHMgPSB0aGlzLnN1YlBhdGhzO1xuXHRcdGlmICggc3ViUGF0aHMubGVuZ3RoID09PSAwICkgcmV0dXJuIFtdO1xuXG5cdFx0aWYgKCBub0hvbGVzID09PSB0cnVlIClcdHJldHVyblx0dG9TaGFwZXNOb0hvbGVzKCBzdWJQYXRocyApO1xuXG5cblx0XHR2YXIgc29saWQsIHRtcFBhdGgsIHRtcFNoYXBlLCBzaGFwZXMgPSBbXTtcblxuXHRcdGlmICggc3ViUGF0aHMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHR0bXBQYXRoID0gc3ViUGF0aHNbIDAgXTtcblx0XHRcdHRtcFNoYXBlID0gbmV3IFNoYXBlKCk7XG5cdFx0XHR0bXBTaGFwZS5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcblx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXHRcdFx0cmV0dXJuIHNoYXBlcztcblxuXHRcdH1cblxuXHRcdHZhciBob2xlc0ZpcnN0ID0gISBpc0Nsb2NrV2lzZSggc3ViUGF0aHNbIDAgXS5nZXRQb2ludHMoKSApO1xuXHRcdGhvbGVzRmlyc3QgPSBpc0NDVyA/ICEgaG9sZXNGaXJzdCA6IGhvbGVzRmlyc3Q7XG5cblx0XHQvLyBjb25zb2xlLmxvZyhcIkhvbGVzIGZpcnN0XCIsIGhvbGVzRmlyc3QpO1xuXG5cdFx0dmFyIGJldHRlclNoYXBlSG9sZXMgPSBbXTtcblx0XHR2YXIgbmV3U2hhcGVzID0gW107XG5cdFx0dmFyIG5ld1NoYXBlSG9sZXMgPSBbXTtcblx0XHR2YXIgbWFpbklkeCA9IDA7XG5cdFx0dmFyIHRtcFBvaW50cztcblxuXHRcdG5ld1NoYXBlc1sgbWFpbklkeCBdID0gdW5kZWZpbmVkO1xuXHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXSA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc3ViUGF0aHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dG1wUGF0aCA9IHN1YlBhdGhzWyBpIF07XG5cdFx0XHR0bXBQb2ludHMgPSB0bXBQYXRoLmdldFBvaW50cygpO1xuXHRcdFx0c29saWQgPSBpc0Nsb2NrV2lzZSggdG1wUG9pbnRzICk7XG5cdFx0XHRzb2xpZCA9IGlzQ0NXID8gISBzb2xpZCA6IHNvbGlkO1xuXG5cdFx0XHRpZiAoIHNvbGlkICkge1xuXG5cdFx0XHRcdGlmICggKCAhIGhvbGVzRmlyc3QgKSAmJiAoIG5ld1NoYXBlc1sgbWFpbklkeCBdICkgKVx0bWFpbklkeCArKztcblxuXHRcdFx0XHRuZXdTaGFwZXNbIG1haW5JZHggXSA9IHsgczogbmV3IFNoYXBlKCksIHA6IHRtcFBvaW50cyB9O1xuXHRcdFx0XHRuZXdTaGFwZXNbIG1haW5JZHggXS5zLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXG5cdFx0XHRcdGlmICggaG9sZXNGaXJzdCApXHRtYWluSWR4ICsrO1xuXHRcdFx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0gPSBbXTtcblxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjdycsIGkpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXS5wdXNoKCB7IGg6IHRtcFBhdGgsIHA6IHRtcFBvaW50c1sgMCBdIH0gKTtcblxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjY3cnLCBpKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gb25seSBIb2xlcz8gLT4gcHJvYmFibHkgYWxsIFNoYXBlcyB3aXRoIHdyb25nIG9yaWVudGF0aW9uXG5cdFx0aWYgKCAhIG5ld1NoYXBlc1sgMCBdIClcdHJldHVyblx0dG9TaGFwZXNOb0hvbGVzKCBzdWJQYXRocyApO1xuXG5cblx0XHRpZiAoIG5ld1NoYXBlcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHR2YXIgYW1iaWd1b3VzID0gZmFsc2U7XG5cdFx0XHR2YXIgdG9DaGFuZ2UgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIHNJZHggPSAwLCBzTGVuID0gbmV3U2hhcGVzLmxlbmd0aDsgc0lkeCA8IHNMZW47IHNJZHggKysgKSB7XG5cblx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgc0lkeCBdID0gW107XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggdmFyIHNJZHggPSAwLCBzTGVuID0gbmV3U2hhcGVzLmxlbmd0aDsgc0lkeCA8IHNMZW47IHNJZHggKysgKSB7XG5cblx0XHRcdFx0dmFyIHNobyA9IG5ld1NoYXBlSG9sZXNbIHNJZHggXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaElkeCA9IDA7IGhJZHggPCBzaG8ubGVuZ3RoOyBoSWR4ICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGhvID0gc2hvWyBoSWR4IF07XG5cdFx0XHRcdFx0dmFyIGhvbGVfdW5hc3NpZ25lZCA9IHRydWU7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgczJJZHggPSAwOyBzMklkeCA8IG5ld1NoYXBlcy5sZW5ndGg7IHMySWR4ICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGlzUG9pbnRJbnNpZGVQb2x5Z29uKCBoby5wLCBuZXdTaGFwZXNbIHMySWR4IF0ucCApICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggc0lkeCAhPT0gczJJZHggKVx0dG9DaGFuZ2UucHVzaCggeyBmcm9tczogc0lkeCwgdG9zOiBzMklkeCwgaG9sZTogaElkeCB9ICk7XG5cdFx0XHRcdFx0XHRcdGlmICggaG9sZV91bmFzc2lnbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aG9sZV91bmFzc2lnbmVkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgczJJZHggXS5wdXNoKCBobyApO1xuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRhbWJpZ3VvdXMgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggaG9sZV91bmFzc2lnbmVkICkge1xuXG5cdFx0XHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzWyBzSWR4IF0ucHVzaCggaG8gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHRcdC8vIGNvbnNvbGUubG9nKFwiYW1iaWd1b3VzOiBcIiwgYW1iaWd1b3VzKTtcblx0XHRcdGlmICggdG9DaGFuZ2UubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcInRvIGNoYW5nZTogXCIsIHRvQ2hhbmdlKTtcblx0XHRcdFx0aWYgKCAhIGFtYmlndW91cyApXHRuZXdTaGFwZUhvbGVzID0gYmV0dGVyU2hhcGVIb2xlcztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIHRtcEhvbGVzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG5ld1NoYXBlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dG1wU2hhcGUgPSBuZXdTaGFwZXNbIGkgXS5zO1xuXHRcdFx0c2hhcGVzLnB1c2goIHRtcFNoYXBlICk7XG5cdFx0XHR0bXBIb2xlcyA9IG5ld1NoYXBlSG9sZXNbIGkgXTtcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IHRtcEhvbGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHRtcFNoYXBlLmhvbGVzLnB1c2goIHRtcEhvbGVzWyBqIF0uaCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL2NvbnNvbGUubG9nKFwic2hhcGVcIiwgc2hhcGVzKTtcblxuXHRcdHJldHVybiBzaGFwZXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5cbmZ1bmN0aW9uIEZvbnQoIGRhdGEgKSB7XG5cblx0dGhpcy50eXBlID0gJ0ZvbnQnO1xuXG5cdHRoaXMuZGF0YSA9IGRhdGE7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggRm9udC5wcm90b3R5cGUsIHtcblxuXHRpc0ZvbnQ6IHRydWUsXG5cblx0Z2VuZXJhdGVTaGFwZXM6IGZ1bmN0aW9uICggdGV4dCwgc2l6ZSApIHtcblxuXHRcdGlmICggc2l6ZSA9PT0gdW5kZWZpbmVkICkgc2l6ZSA9IDEwMDtcblxuXHRcdHZhciBzaGFwZXMgPSBbXTtcblx0XHR2YXIgcGF0aHMgPSBjcmVhdGVQYXRocyggdGV4dCwgc2l6ZSwgdGhpcy5kYXRhICk7XG5cblx0XHRmb3IgKCB2YXIgcCA9IDAsIHBsID0gcGF0aHMubGVuZ3RoOyBwIDwgcGw7IHAgKysgKSB7XG5cblx0XHRcdEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KCBzaGFwZXMsIHBhdGhzWyBwIF0udG9TaGFwZXMoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNoYXBlcztcblxuXHR9XG5cbn0gKTtcblxuZnVuY3Rpb24gY3JlYXRlUGF0aHMoIHRleHQsIHNpemUsIGRhdGEgKSB7XG5cblx0dmFyIGNoYXJzID0gQXJyYXkuZnJvbSA/IEFycmF5LmZyb20oIHRleHQgKSA6IFN0cmluZyggdGV4dCApLnNwbGl0KCAnJyApOyAvLyBzZWUgIzEzOTg4XG5cdHZhciBzY2FsZSA9IHNpemUgLyBkYXRhLnJlc29sdXRpb247XG5cdHZhciBsaW5lX2hlaWdodCA9ICggZGF0YS5ib3VuZGluZ0JveC55TWF4IC0gZGF0YS5ib3VuZGluZ0JveC55TWluICsgZGF0YS51bmRlcmxpbmVUaGlja25lc3MgKSAqIHNjYWxlO1xuXG5cdHZhciBwYXRocyA9IFtdO1xuXG5cdHZhciBvZmZzZXRYID0gMCwgb2Zmc2V0WSA9IDA7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0dmFyIGNoYXIgPSBjaGFyc1sgaSBdO1xuXG5cdFx0aWYgKCBjaGFyID09PSAnXFxuJyApIHtcblxuXHRcdFx0b2Zmc2V0WCA9IDA7XG5cdFx0XHRvZmZzZXRZIC09IGxpbmVfaGVpZ2h0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIHJldCA9IGNyZWF0ZVBhdGgoIGNoYXIsIHNjYWxlLCBvZmZzZXRYLCBvZmZzZXRZLCBkYXRhICk7XG5cdFx0XHRvZmZzZXRYICs9IHJldC5vZmZzZXRYO1xuXHRcdFx0cGF0aHMucHVzaCggcmV0LnBhdGggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHBhdGhzO1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgoIGNoYXIsIHNjYWxlLCBvZmZzZXRYLCBvZmZzZXRZLCBkYXRhICkge1xuXG5cdHZhciBnbHlwaCA9IGRhdGEuZ2x5cGhzWyBjaGFyIF0gfHwgZGF0YS5nbHlwaHNbICc/JyBdO1xuXG5cdGlmICggISBnbHlwaCApIHJldHVybjtcblxuXHR2YXIgcGF0aCA9IG5ldyBTaGFwZVBhdGgoKTtcblxuXHR2YXIgeCwgeSwgY3B4LCBjcHksIGNweDEsIGNweTEsIGNweDIsIGNweTI7XG5cblx0aWYgKCBnbHlwaC5vICkge1xuXG5cdFx0dmFyIG91dGxpbmUgPSBnbHlwaC5fY2FjaGVkT3V0bGluZSB8fCAoIGdseXBoLl9jYWNoZWRPdXRsaW5lID0gZ2x5cGguby5zcGxpdCggJyAnICkgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IG91dGxpbmUubGVuZ3RoOyBpIDwgbDsgKSB7XG5cblx0XHRcdHZhciBhY3Rpb24gPSBvdXRsaW5lWyBpICsrIF07XG5cblx0XHRcdHN3aXRjaCAoIGFjdGlvbiApIHtcblxuXHRcdFx0XHRjYXNlICdtJzogLy8gbW92ZVRvXG5cblx0XHRcdFx0XHR4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdHkgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cblx0XHRcdFx0XHRwYXRoLm1vdmVUbyggeCwgeSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnbCc6IC8vIGxpbmVUb1xuXG5cdFx0XHRcdFx0eCA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHR5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXG5cdFx0XHRcdFx0cGF0aC5saW5lVG8oIHgsIHkgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ3EnOiAvLyBxdWFkcmF0aWNDdXJ2ZVRvXG5cblx0XHRcdFx0XHRjcHggPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0Y3B5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXHRcdFx0XHRcdGNweDEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0Y3B5MSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblxuXHRcdFx0XHRcdHBhdGgucXVhZHJhdGljQ3VydmVUbyggY3B4MSwgY3B5MSwgY3B4LCBjcHkgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2InOiAvLyBiZXppZXJDdXJ2ZVRvXG5cblx0XHRcdFx0XHRjcHggPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0Y3B5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXHRcdFx0XHRcdGNweDEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0Y3B5MSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblx0XHRcdFx0XHRjcHgyID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweTIgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cblx0XHRcdFx0XHRwYXRoLmJlemllckN1cnZlVG8oIGNweDEsIGNweTEsIGNweDIsIGNweTIsIGNweCwgY3B5ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4geyBvZmZzZXRYOiBnbHlwaC5oYSAqIHNjYWxlLCBwYXRoOiBwYXRoIH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEZvbnRMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggRm9udExvYWRlci5wcm90b3R5cGUsIHtcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdFx0dmFyIGpzb247XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0anNvbiA9IEpTT04ucGFyc2UoIHRleHQgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRm9udExvYWRlcjogdHlwZWZhY2UuanMgc3VwcG9ydCBpcyBiZWluZyBkZXByZWNhdGVkLiBVc2UgdHlwZWZhY2UuanNvbiBpbnN0ZWFkLicgKTtcblx0XHRcdFx0anNvbiA9IEpTT04ucGFyc2UoIHRleHQuc3Vic3RyaW5nKCA2NSwgdGV4dC5sZW5ndGggLSAyICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZm9udCA9IHNjb3BlLnBhcnNlKCBqc29uICk7XG5cblx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBmb250ICk7XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0fSxcblxuXHRwYXJzZTogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0cmV0dXJuIG5ldyBGb250KCBqc29uICk7XG5cblx0fSxcblxuXHRzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYXRoID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgY29udGV4dDtcblxudmFyIEF1ZGlvQ29udGV4dCA9IHtcblxuXHRnZXRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGNvbnRleHQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29udGV4dCA9IG5ldyAoIHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCApKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29udGV4dDtcblxuXHR9LFxuXG5cdHNldENvbnRleHQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRjb250ZXh0ID0gdmFsdWU7XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgUmVlY2UgQWFyb24gTGVjcml2YWluIC8gaHR0cDovL3JlZWNlbm90ZXMuY29tL1xuICovXG5cbmZ1bmN0aW9uIEF1ZGlvTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEF1ZGlvTG9hZGVyLnByb3RvdHlwZSwge1xuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0Ly8gQ3JlYXRlIGEgY29weSBvZiB0aGUgYnVmZmVyLiBUaGUgYGRlY29kZUF1ZGlvRGF0YWAgbWV0aG9kXG5cdFx0XHQvLyBkZXRhY2hlcyB0aGUgYnVmZmVyIHdoZW4gY29tcGxldGUsIHByZXZlbnRpbmcgcmV1c2UuXG5cdFx0XHR2YXIgYnVmZmVyQ29weSA9IGJ1ZmZlci5zbGljZSggMCApO1xuXG5cdFx0XHR2YXIgY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cdFx0XHRjb250ZXh0LmRlY29kZUF1ZGlvRGF0YSggYnVmZmVyQ29weSwgZnVuY3Rpb24gKCBhdWRpb0J1ZmZlciApIHtcblxuXHRcdFx0XHRvbkxvYWQoIGF1ZGlvQnVmZmVyICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFN0ZXJlb0NhbWVyYSgpIHtcblxuXHR0aGlzLnR5cGUgPSAnU3RlcmVvQ2FtZXJhJztcblxuXHR0aGlzLmFzcGVjdCA9IDE7XG5cblx0dGhpcy5leWVTZXAgPSAwLjA2NDtcblxuXHR0aGlzLmNhbWVyYUwgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0dGhpcy5jYW1lcmFMLmxheWVycy5lbmFibGUoIDEgKTtcblx0dGhpcy5jYW1lcmFMLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0dGhpcy5jYW1lcmFSLmxheWVycy5lbmFibGUoIDIgKTtcblx0dGhpcy5jYW1lcmFSLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBTdGVyZW9DYW1lcmEucHJvdG90eXBlLCB7XG5cblx0dXBkYXRlOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBpbnN0YW5jZSwgZm9jdXMsIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIsIHpvb20sIGV5ZVNlcDtcblxuXHRcdHZhciBleWVSaWdodCA9IG5ldyBNYXRyaXg0KCk7XG5cdFx0dmFyIGV5ZUxlZnQgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSggY2FtZXJhICkge1xuXG5cdFx0XHR2YXIgbmVlZHNVcGRhdGUgPSBpbnN0YW5jZSAhPT0gdGhpcyB8fCBmb2N1cyAhPT0gY2FtZXJhLmZvY3VzIHx8IGZvdiAhPT0gY2FtZXJhLmZvdiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0ICogdGhpcy5hc3BlY3QgfHwgbmVhciAhPT0gY2FtZXJhLm5lYXIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZhciAhPT0gY2FtZXJhLmZhciB8fCB6b29tICE9PSBjYW1lcmEuem9vbSB8fCBleWVTZXAgIT09IHRoaXMuZXllU2VwO1xuXG5cdFx0XHRpZiAoIG5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRcdGluc3RhbmNlID0gdGhpcztcblx0XHRcdFx0Zm9jdXMgPSBjYW1lcmEuZm9jdXM7XG5cdFx0XHRcdGZvdiA9IGNhbWVyYS5mb3Y7XG5cdFx0XHRcdGFzcGVjdCA9IGNhbWVyYS5hc3BlY3QgKiB0aGlzLmFzcGVjdDtcblx0XHRcdFx0bmVhciA9IGNhbWVyYS5uZWFyO1xuXHRcdFx0XHRmYXIgPSBjYW1lcmEuZmFyO1xuXHRcdFx0XHR6b29tID0gY2FtZXJhLnpvb207XG5cblx0XHRcdFx0Ly8gT2ZmLWF4aXMgc3RlcmVvc2NvcGljIGVmZmVjdCBiYXNlZCBvblxuXHRcdFx0XHQvLyBodHRwOi8vcGF1bGJvdXJrZS5uZXQvc3RlcmVvZ3JhcGhpY3Mvc3RlcmVvcmVuZGVyL1xuXG5cdFx0XHRcdHZhciBwcm9qZWN0aW9uTWF0cml4ID0gY2FtZXJhLnByb2plY3Rpb25NYXRyaXguY2xvbmUoKTtcblx0XHRcdFx0ZXllU2VwID0gdGhpcy5leWVTZXAgLyAyO1xuXHRcdFx0XHR2YXIgZXllU2VwT25Qcm9qZWN0aW9uID0gZXllU2VwICogbmVhciAvIGZvY3VzO1xuXHRcdFx0XHR2YXIgeW1heCA9ICggbmVhciAqIE1hdGgudGFuKCBfTWF0aC5ERUcyUkFEICogZm92ICogMC41ICkgKSAvIHpvb207XG5cdFx0XHRcdHZhciB4bWluLCB4bWF4O1xuXG5cdFx0XHRcdC8vIHRyYW5zbGF0ZSB4T2Zmc2V0XG5cblx0XHRcdFx0ZXllTGVmdC5lbGVtZW50c1sgMTIgXSA9IC0gZXllU2VwO1xuXHRcdFx0XHRleWVSaWdodC5lbGVtZW50c1sgMTIgXSA9IGV5ZVNlcDtcblxuXHRcdFx0XHQvLyBmb3IgbGVmdCBleWVcblxuXHRcdFx0XHR4bWluID0gLSB5bWF4ICogYXNwZWN0ICsgZXllU2VwT25Qcm9qZWN0aW9uO1xuXHRcdFx0XHR4bWF4ID0geW1heCAqIGFzcGVjdCArIGV5ZVNlcE9uUHJvamVjdGlvbjtcblxuXHRcdFx0XHRwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF0gPSAyICogbmVhciAvICggeG1heCAtIHhtaW4gKTtcblx0XHRcdFx0cHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgOCBdID0gKCB4bWF4ICsgeG1pbiApIC8gKCB4bWF4IC0geG1pbiApO1xuXG5cdFx0XHRcdHRoaXMuY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIHByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdFx0XHQvLyBmb3IgcmlnaHQgZXllXG5cblx0XHRcdFx0eG1pbiA9IC0geW1heCAqIGFzcGVjdCAtIGV5ZVNlcE9uUHJvamVjdGlvbjtcblx0XHRcdFx0eG1heCA9IHltYXggKiBhc3BlY3QgLSBleWVTZXBPblByb2plY3Rpb247XG5cblx0XHRcdFx0cHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgMCBdID0gMiAqIG5lYXIgLyAoIHhtYXggLSB4bWluICk7XG5cdFx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDggXSA9ICggeG1heCArIHhtaW4gKSAvICggeG1heCAtIHhtaW4gKTtcblxuXHRcdFx0XHR0aGlzLmNhbWVyYVIucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBwcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5jYW1lcmFMLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZCApLm11bHRpcGx5KCBleWVMZWZ0ICk7XG5cdFx0XHR0aGlzLmNhbWVyYVIubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeFdvcmxkICkubXVsdGlwbHkoIGV5ZVJpZ2h0ICk7XG5cblx0XHR9O1xuXG5cdH0gKSgpXG5cbn0gKTtcblxuLyoqXG4gKiBDYW1lcmEgZm9yIHJlbmRlcmluZyBjdWJlIG1hcHNcbiAqXHQtIHJlbmRlcnMgc2NlbmUgaW50byBheGlzLWFsaWduZWQgY3ViZVxuICpcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gQ3ViZUNhbWVyYSggbmVhciwgZmFyLCBjdWJlUmVzb2x1dGlvbiApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0N1YmVDYW1lcmEnO1xuXG5cdHZhciBmb3YgPSA5MCwgYXNwZWN0ID0gMTtcblxuXHR2YXIgY2FtZXJhUFggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhUFgudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0Y2FtZXJhUFgubG9va0F0KCBuZXcgVmVjdG9yMyggMSwgMCwgMCApICk7XG5cdHRoaXMuYWRkKCBjYW1lcmFQWCApO1xuXG5cdHZhciBjYW1lcmFOWCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRjYW1lcmFOWC51cC5zZXQoIDAsIC0gMSwgMCApO1xuXHRjYW1lcmFOWC5sb29rQXQoIG5ldyBWZWN0b3IzKCAtIDEsIDAsIDAgKSApO1xuXHR0aGlzLmFkZCggY2FtZXJhTlggKTtcblxuXHR2YXIgY2FtZXJhUFkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhUFkudXAuc2V0KCAwLCAwLCAxICk7XG5cdGNhbWVyYVBZLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSApO1xuXHR0aGlzLmFkZCggY2FtZXJhUFkgKTtcblxuXHR2YXIgY2FtZXJhTlkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhTlkudXAuc2V0KCAwLCAwLCAtIDEgKTtcblx0Y2FtZXJhTlkubG9va0F0KCBuZXcgVmVjdG9yMyggMCwgLSAxLCAwICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYU5ZICk7XG5cblx0dmFyIGNhbWVyYVBaID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYVBaLnVwLnNldCggMCwgLSAxLCAwICk7XG5cdGNhbWVyYVBaLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSApO1xuXHR0aGlzLmFkZCggY2FtZXJhUFogKTtcblxuXHR2YXIgY2FtZXJhTlogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhTloudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0Y2FtZXJhTloubG9va0F0KCBuZXcgVmVjdG9yMyggMCwgMCwgLSAxICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYU5aICk7XG5cblx0dmFyIG9wdGlvbnMgPSB7IGZvcm1hdDogUkdCRm9ybWF0LCBtYWdGaWx0ZXI6IExpbmVhckZpbHRlciwgbWluRmlsdGVyOiBMaW5lYXJGaWx0ZXIgfTtcblxuXHR0aGlzLnJlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldEN1YmUoIGN1YmVSZXNvbHV0aW9uLCBjdWJlUmVzb2x1dGlvbiwgb3B0aW9ucyApO1xuXHR0aGlzLnJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWUgPSBcIkN1YmVDYW1lcmFcIjtcblxuXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lICkge1xuXG5cdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHRoaXMudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdHZhciByZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldDtcblx0XHR2YXIgZ2VuZXJhdGVNaXBtYXBzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRyZW5kZXJUYXJnZXQuYWN0aXZlQ3ViZUZhY2UgPSAwO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBYLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZSA9IDE7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlgsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LmFjdGl2ZUN1YmVGYWNlID0gMjtcblx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFQWSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZW5kZXJUYXJnZXQuYWN0aXZlQ3ViZUZhY2UgPSAzO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5ZLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdHJlbmRlclRhcmdldC5hY3RpdmVDdWJlRmFjZSA9IDQ7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFosIHJlbmRlclRhcmdldCApO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LmFjdGl2ZUN1YmVGYWNlID0gNTtcblx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFOWiwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG51bGwgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXIgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKSB7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQuYWN0aXZlQ3ViZUZhY2UgPSBpO1xuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0cmVuZGVyZXIuY2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBudWxsICk7XG5cblx0fTtcblxufVxuXG5DdWJlQ2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApO1xuQ3ViZUNhbWVyYS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlQ2FtZXJhO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQXVkaW9MaXN0ZW5lcigpIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0F1ZGlvTGlzdGVuZXInO1xuXG5cdHRoaXMuY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cblx0dGhpcy5nYWluID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdHRoaXMuZmlsdGVyID0gbnVsbDtcblxufVxuXG5BdWRpb0xpc3RlbmVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEF1ZGlvTGlzdGVuZXIsXG5cblx0Z2V0SW5wdXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW47XG5cblx0fSxcblxuXHRyZW1vdmVGaWx0ZXI6IGZ1bmN0aW9uICggKSB7XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVyICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5maWx0ZXIgKTtcblx0XHRcdHRoaXMuZmlsdGVyLmRpc2Nvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXHRcdFx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXHRcdFx0dGhpcy5maWx0ZXIgPSBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRGaWx0ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcjtcblxuXHR9LFxuXG5cdHNldEZpbHRlcjogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdFx0dGhpcy5maWx0ZXIuZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmZpbHRlciA9IHZhbHVlO1xuXHRcdHRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdHRoaXMuZmlsdGVyLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRNYXN0ZXJWb2x1bWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZTtcblxuXHR9LFxuXG5cdHNldE1hc3RlclZvbHVtZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZ2Fpbi5nYWluLnNldFRhcmdldEF0VGltZSggdmFsdWUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBxdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblx0XHR2YXIgc2NhbGUgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIG9yaWVudGF0aW9uID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiB1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRcdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKCB0aGlzLCBmb3JjZSApO1xuXG5cdFx0XHR2YXIgbGlzdGVuZXIgPSB0aGlzLmNvbnRleHQubGlzdGVuZXI7XG5cdFx0XHR2YXIgdXAgPSB0aGlzLnVwO1xuXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlICk7XG5cblx0XHRcdG9yaWVudGF0aW9uLnNldCggMCwgMCwgLSAxICkuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uICk7XG5cblx0XHRcdGlmICggbGlzdGVuZXIucG9zaXRpb25YICkge1xuXG5cdFx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWC5zZXRWYWx1ZUF0VGltZSggcG9zaXRpb24ueCwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWS5zZXRWYWx1ZUF0VGltZSggcG9zaXRpb24ueSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWi5zZXRWYWx1ZUF0VGltZSggcG9zaXRpb24ueiwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLmZvcndhcmRYLnNldFZhbHVlQXRUaW1lKCBvcmllbnRhdGlvbi54LCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKTtcblx0XHRcdFx0bGlzdGVuZXIuZm9yd2FyZFkuc2V0VmFsdWVBdFRpbWUoIG9yaWVudGF0aW9uLnksIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSApO1xuXHRcdFx0XHRsaXN0ZW5lci5mb3J3YXJkWi5zZXRWYWx1ZUF0VGltZSggb3JpZW50YXRpb24ueiwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLnVwWC5zZXRWYWx1ZUF0VGltZSggdXAueCwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLnVwWS5zZXRWYWx1ZUF0VGltZSggdXAueSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICk7XG5cdFx0XHRcdGxpc3RlbmVyLnVwWi5zZXRWYWx1ZUF0VGltZSggdXAueiwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bGlzdGVuZXIuc2V0UG9zaXRpb24oIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHBvc2l0aW9uLnogKTtcblx0XHRcdFx0bGlzdGVuZXIuc2V0T3JpZW50YXRpb24oIG9yaWVudGF0aW9uLngsIG9yaWVudGF0aW9uLnksIG9yaWVudGF0aW9uLnosIHVwLngsIHVwLnksIHVwLnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9ICkoKVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgUmVlY2UgQWFyb24gTGVjcml2YWluIC8gaHR0cDovL3JlZWNlbm90ZXMuY29tL1xuICovXG5cbmZ1bmN0aW9uIEF1ZGlvKCBsaXN0ZW5lciApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0F1ZGlvJztcblxuXHR0aGlzLmNvbnRleHQgPSBsaXN0ZW5lci5jb250ZXh0O1xuXG5cdHRoaXMuZ2FpbiA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cdHRoaXMuZ2Fpbi5jb25uZWN0KCBsaXN0ZW5lci5nZXRJbnB1dCgpICk7XG5cblx0dGhpcy5hdXRvcGxheSA9IGZhbHNlO1xuXG5cdHRoaXMuYnVmZmVyID0gbnVsbDtcblx0dGhpcy5sb29wID0gZmFsc2U7XG5cdHRoaXMuc3RhcnRUaW1lID0gMDtcblx0dGhpcy5vZmZzZXQgPSAwO1xuXHR0aGlzLnBsYXliYWNrUmF0ZSA9IDE7XG5cdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gdHJ1ZTtcblx0dGhpcy5zb3VyY2VUeXBlID0gJ2VtcHR5JztcblxuXHR0aGlzLmZpbHRlcnMgPSBbXTtcblxufVxuXG5BdWRpby5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBBdWRpbyxcblxuXHRnZXRPdXRwdXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdhaW47XG5cblx0fSxcblxuXHRzZXROb2RlU291cmNlOiBmdW5jdGlvbiAoIGF1ZGlvTm9kZSApIHtcblxuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gZmFsc2U7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2F1ZGlvTm9kZSc7XG5cdFx0dGhpcy5zb3VyY2UgPSBhdWRpb05vZGU7XG5cdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldE1lZGlhRWxlbWVudFNvdXJjZTogZnVuY3Rpb24gKCBtZWRpYUVsZW1lbnQgKSB7XG5cblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlO1xuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdtZWRpYU5vZGUnO1xuXHRcdHRoaXMuc291cmNlID0gdGhpcy5jb250ZXh0LmNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZSggbWVkaWFFbGVtZW50ICk7XG5cdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEJ1ZmZlcjogZnVuY3Rpb24gKCBhdWRpb0J1ZmZlciApIHtcblxuXHRcdHRoaXMuYnVmZmVyID0gYXVkaW9CdWZmZXI7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2J1ZmZlcic7XG5cblx0XHRpZiAoIHRoaXMuYXV0b3BsYXkgKSB0aGlzLnBsYXkoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cGxheTogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IEF1ZGlvIGlzIGFscmVhZHkgcGxheWluZy4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcblxuXHRcdHNvdXJjZS5idWZmZXIgPSB0aGlzLmJ1ZmZlcjtcblx0XHRzb3VyY2UubG9vcCA9IHRoaXMubG9vcDtcblx0XHRzb3VyY2Uub25lbmRlZCA9IHRoaXMub25FbmRlZC5iaW5kKCB0aGlzICk7XG5cdFx0c291cmNlLnBsYXliYWNrUmF0ZS5zZXRWYWx1ZUF0VGltZSggdGhpcy5wbGF5YmFja1JhdGUsIHRoaXMuc3RhcnRUaW1lICk7XG5cdFx0dGhpcy5zdGFydFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWU7XG5cdFx0c291cmNlLnN0YXJ0KCB0aGlzLnN0YXJ0VGltZSwgdGhpcy5vZmZzZXQgKTtcblxuXHRcdHRoaXMuaXNQbGF5aW5nID0gdHJ1ZTtcblxuXHRcdHRoaXMuc291cmNlID0gc291cmNlO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29ubmVjdCgpO1xuXG5cdH0sXG5cblx0cGF1c2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5zdG9wKCk7XG5cdFx0XHR0aGlzLm9mZnNldCArPSAoIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSAtIHRoaXMuc3RhcnRUaW1lICkgKiB0aGlzLnBsYXliYWNrUmF0ZTtcblx0XHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLnNvdXJjZS5zdG9wKCk7XG5cdFx0dGhpcy5vZmZzZXQgPSAwO1xuXHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbm5lY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXJzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmNvbm5lY3QoIHRoaXMuZmlsdGVyc1sgMCBdICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuZmlsdGVyc1sgaSAtIDEgXS5jb25uZWN0KCB0aGlzLmZpbHRlcnNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZmlsdGVyc1sgdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDEgXS5jb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5jb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpc2Nvbm5lY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXJzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmRpc2Nvbm5lY3QoIHRoaXMuZmlsdGVyc1sgMCBdICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuZmlsdGVyc1sgaSAtIDEgXS5kaXNjb25uZWN0KCB0aGlzLmZpbHRlcnNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZmlsdGVyc1sgdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDEgXS5kaXNjb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcnM7XG5cblx0fSxcblxuXHRzZXRGaWx0ZXJzOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCAhIHZhbHVlICkgdmFsdWUgPSBbXTtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuZGlzY29ubmVjdCgpO1xuXHRcdFx0dGhpcy5maWx0ZXJzID0gdmFsdWU7XG5cdFx0XHR0aGlzLmNvbm5lY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuZmlsdGVycyA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRGaWx0ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmdldEZpbHRlcnMoKVsgMCBdO1xuXG5cdH0sXG5cblx0c2V0RmlsdGVyOiBmdW5jdGlvbiAoIGZpbHRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZpbHRlcnMoIGZpbHRlciA/IFsgZmlsdGVyIF0gOiBbXSApO1xuXG5cdH0sXG5cblx0c2V0UGxheWJhY2tSYXRlOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMucGxheWJhY2tSYXRlID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5wbGF5YmFja1JhdGUuc2V0VmFsdWVBdFRpbWUoIHRoaXMucGxheWJhY2tSYXRlLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0UGxheWJhY2tSYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wbGF5YmFja1JhdGU7XG5cblx0fSxcblxuXHRvbkVuZGVkOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG5cdH0sXG5cblx0Z2V0TG9vcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmxvb3A7XG5cblx0fSxcblxuXHRzZXRMb29wOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMubG9vcCA9IHZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UubG9vcCA9IHRoaXMubG9vcDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0Vm9sdW1lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nYWluLmdhaW4udmFsdWU7XG5cblx0fSxcblxuXHRzZXRWb2x1bWU6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmdhaW4uZ2Fpbi5zZXRUYXJnZXRBdFRpbWUoIHZhbHVlLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUsIDAuMDEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gUG9zaXRpb25hbEF1ZGlvKCBsaXN0ZW5lciApIHtcblxuXHRBdWRpby5jYWxsKCB0aGlzLCBsaXN0ZW5lciApO1xuXG5cdHRoaXMucGFubmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZVBhbm5lcigpO1xuXHR0aGlzLnBhbm5lci5jb25uZWN0KCB0aGlzLmdhaW4gKTtcblxufVxuXG5Qb3NpdGlvbmFsQXVkaW8ucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQXVkaW8ucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUG9zaXRpb25hbEF1ZGlvLFxuXG5cdGdldE91dHB1dDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyO1xuXG5cdH0sXG5cblx0Z2V0UmVmRGlzdGFuY2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5yZWZEaXN0YW5jZTtcblxuXHR9LFxuXG5cdHNldFJlZkRpc3RhbmNlOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYW5uZXIucmVmRGlzdGFuY2UgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0Um9sbG9mZkZhY3RvcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLnJvbGxvZmZGYWN0b3I7XG5cblx0fSxcblxuXHRzZXRSb2xsb2ZmRmFjdG9yOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYW5uZXIucm9sbG9mZkZhY3RvciA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXREaXN0YW5jZU1vZGVsOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIuZGlzdGFuY2VNb2RlbDtcblxuXHR9LFxuXG5cdHNldERpc3RhbmNlTW9kZWw6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldE1heERpc3RhbmNlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIubWF4RGlzdGFuY2U7XG5cblx0fSxcblxuXHRzZXRNYXhEaXN0YW5jZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLm1heERpc3RhbmNlID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldERpcmVjdGlvbmFsQ29uZTogZnVuY3Rpb24gKCBjb25lSW5uZXJBbmdsZSwgY29uZU91dGVyQW5nbGUsIGNvbmVPdXRlckdhaW4gKSB7XG5cblx0XHR0aGlzLnBhbm5lci5jb25lSW5uZXJBbmdsZSA9IGNvbmVJbm5lckFuZ2xlO1xuXHRcdHRoaXMucGFubmVyLmNvbmVPdXRlckFuZ2xlID0gY29uZU91dGVyQW5nbGU7XG5cdFx0dGhpcy5wYW5uZXIuY29uZU91dGVyR2FpbiA9IGNvbmVPdXRlckdhaW47XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkOiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXHRcdHZhciBzY2FsZSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgb3JpZW50YXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdFx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cblx0XHRcdHZhciBwYW5uZXIgPSB0aGlzLnBhbm5lcjtcblx0XHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKTtcblxuXHRcdFx0b3JpZW50YXRpb24uc2V0KCAwLCAwLCAxICkuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uICk7XG5cblx0XHRcdHBhbm5lci5zZXRQb3NpdGlvbiggcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgcG9zaXRpb24ueiApO1xuXHRcdFx0cGFubmVyLnNldE9yaWVudGF0aW9uKCBvcmllbnRhdGlvbi54LCBvcmllbnRhdGlvbi55LCBvcmllbnRhdGlvbi56ICk7XG5cblx0XHR9O1xuXG5cdH0gKSgpXG5cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQXVkaW9BbmFseXNlciggYXVkaW8sIGZmdFNpemUgKSB7XG5cblx0dGhpcy5hbmFseXNlciA9IGF1ZGlvLmNvbnRleHQuY3JlYXRlQW5hbHlzZXIoKTtcblx0dGhpcy5hbmFseXNlci5mZnRTaXplID0gZmZ0U2l6ZSAhPT0gdW5kZWZpbmVkID8gZmZ0U2l6ZSA6IDIwNDg7XG5cblx0dGhpcy5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoIHRoaXMuYW5hbHlzZXIuZnJlcXVlbmN5QmluQ291bnQgKTtcblxuXHRhdWRpby5nZXRPdXRwdXQoKS5jb25uZWN0KCB0aGlzLmFuYWx5c2VyICk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQXVkaW9BbmFseXNlci5wcm90b3R5cGUsIHtcblxuXHRnZXRGcmVxdWVuY3lEYXRhOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmFuYWx5c2VyLmdldEJ5dGVGcmVxdWVuY3lEYXRhKCB0aGlzLmRhdGEgKTtcblxuXHRcdHJldHVybiB0aGlzLmRhdGE7XG5cblx0fSxcblxuXHRnZXRBdmVyYWdlRnJlcXVlbmN5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmFsdWUgPSAwLCBkYXRhID0gdGhpcy5nZXRGcmVxdWVuY3lEYXRhKCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFsdWUgKz0gZGF0YVsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlIC8gZGF0YS5sZW5ndGg7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEJ1ZmZlcmVkIHNjZW5lIGdyYXBoIHByb3BlcnR5IHRoYXQgYWxsb3dzIHdlaWdodGVkIGFjY3VtdWxhdGlvbi5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFByb3BlcnR5TWl4ZXIoIGJpbmRpbmcsIHR5cGVOYW1lLCB2YWx1ZVNpemUgKSB7XG5cblx0dGhpcy5iaW5kaW5nID0gYmluZGluZztcblx0dGhpcy52YWx1ZVNpemUgPSB2YWx1ZVNpemU7XG5cblx0dmFyIGJ1ZmZlclR5cGUgPSBGbG9hdDY0QXJyYXksXG5cdFx0bWl4RnVuY3Rpb247XG5cblx0c3dpdGNoICggdHlwZU5hbWUgKSB7XG5cblx0XHRjYXNlICdxdWF0ZXJuaW9uJzpcblx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fc2xlcnA7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ3N0cmluZyc6XG5cdFx0Y2FzZSAnYm9vbCc6XG5cdFx0XHRidWZmZXJUeXBlID0gQXJyYXk7XG5cdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX3NlbGVjdDtcblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fbGVycDtcblxuXHR9XG5cblx0dGhpcy5idWZmZXIgPSBuZXcgYnVmZmVyVHlwZSggdmFsdWVTaXplICogNCApO1xuXHQvLyBsYXlvdXQ6IFsgaW5jb21pbmcgfCBhY2N1MCB8IGFjY3UxIHwgb3JpZyBdXG5cdC8vXG5cdC8vIGludGVycG9sYXRvcnMgY2FuIHVzZSAuYnVmZmVyIGFzIHRoZWlyIC5yZXN1bHRcblx0Ly8gdGhlIGRhdGEgdGhlbiBnb2VzIHRvICdpbmNvbWluZydcblx0Ly9cblx0Ly8gJ2FjY3UwJyBhbmQgJ2FjY3UxJyBhcmUgdXNlZCBmcmFtZS1pbnRlcmxlYXZlZCBmb3Jcblx0Ly8gdGhlIGN1bXVsYXRpdmUgcmVzdWx0IGFuZCBhcmUgY29tcGFyZWQgdG8gZGV0ZWN0XG5cdC8vIGNoYW5nZXNcblx0Ly9cblx0Ly8gJ29yaWcnIHN0b3JlcyB0aGUgb3JpZ2luYWwgc3RhdGUgb2YgdGhlIHByb3BlcnR5XG5cblx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uID0gbWl4RnVuY3Rpb247XG5cblx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcblxuXHR0aGlzLnVzZUNvdW50ID0gMDtcblx0dGhpcy5yZWZlcmVuY2VDb3VudCA9IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggUHJvcGVydHlNaXhlci5wcm90b3R5cGUsIHtcblxuXHQvLyBhY2N1bXVsYXRlIGRhdGEgaW4gdGhlICdpbmNvbWluZycgcmVnaW9uIGludG8gJ2FjY3U8aT4nXG5cdGFjY3VtdWxhdGU6IGZ1bmN0aW9uICggYWNjdUluZGV4LCB3ZWlnaHQgKSB7XG5cblx0XHQvLyBub3RlOiBoYXBwaWx5IGFjY3VtdWxhdGluZyBub3RoaW5nIHdoZW4gd2VpZ2h0ID0gMCwgdGhlIGNhbGxlciBrbm93c1xuXHRcdC8vIHRoZSB3ZWlnaHQgYW5kIHNob3VsZG4ndCBoYXZlIG1hZGUgdGhlIGNhbGwgaW4gdGhlIGZpcnN0IHBsYWNlXG5cblx0XHR2YXIgYnVmZmVyID0gdGhpcy5idWZmZXIsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdG9mZnNldCA9IGFjY3VJbmRleCAqIHN0cmlkZSArIHN0cmlkZSxcblxuXHRcdFx0Y3VycmVudFdlaWdodCA9IHRoaXMuY3VtdWxhdGl2ZVdlaWdodDtcblxuXHRcdGlmICggY3VycmVudFdlaWdodCA9PT0gMCApIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gaW5jb21pbmcgKiB3ZWlnaHRcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBpIF0gPSBidWZmZXJbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50V2VpZ2h0ID0gd2VpZ2h0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBpbmNvbWluZyAqIHdlaWdodFxuXG5cdFx0XHRjdXJyZW50V2VpZ2h0ICs9IHdlaWdodDtcblx0XHRcdHZhciBtaXggPSB3ZWlnaHQgLyBjdXJyZW50V2VpZ2h0O1xuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uKCBidWZmZXIsIG9mZnNldCwgMCwgbWl4LCBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IGN1cnJlbnRXZWlnaHQ7XG5cblx0fSxcblxuXHQvLyBhcHBseSB0aGUgc3RhdGUgb2YgJ2FjY3U8aT4nIHRvIHRoZSBiaW5kaW5nIHdoZW4gYWNjdXMgZGlmZmVyXG5cdGFwcGx5OiBmdW5jdGlvbiAoIGFjY3VJbmRleCApIHtcblxuXHRcdHZhciBzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0b2Zmc2V0ID0gYWNjdUluZGV4ICogc3RyaWRlICsgc3RyaWRlLFxuXG5cdFx0XHR3ZWlnaHQgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHQsXG5cblx0XHRcdGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XG5cblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSAwO1xuXG5cdFx0aWYgKCB3ZWlnaHQgPCAxICkge1xuXG5cdFx0XHQvLyBhY2N1TiA6PSBhY2N1TiArIG9yaWdpbmFsICogKCAxIC0gY3VtdWxhdGl2ZVdlaWdodCApXG5cblx0XHRcdHZhciBvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gc3RyaWRlICogMztcblxuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uKFxuXHRcdFx0XHRidWZmZXIsIG9mZnNldCwgb3JpZ2luYWxWYWx1ZU9mZnNldCwgMSAtIHdlaWdodCwgc3RyaWRlICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IHN0cmlkZSwgZSA9IHN0cmlkZSArIHN0cmlkZTsgaSAhPT0gZTsgKysgaSApIHtcblxuXHRcdFx0aWYgKCBidWZmZXJbIGkgXSAhPT0gYnVmZmVyWyBpICsgc3RyaWRlIF0gKSB7XG5cblx0XHRcdFx0Ly8gdmFsdWUgaGFzIGNoYW5nZWQgLT4gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHRcdFx0YmluZGluZy5zZXRWYWx1ZSggYnVmZmVyLCBvZmZzZXQgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIHJlbWVtYmVyIHRoZSBzdGF0ZSBvZiB0aGUgYm91bmQgcHJvcGVydHkgYW5kIGNvcHkgaXQgdG8gYm90aCBhY2N1c1xuXHRzYXZlT3JpZ2luYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XG5cblx0XHR2YXIgYnVmZmVyID0gdGhpcy5idWZmZXIsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblxuXHRcdFx0b3JpZ2luYWxWYWx1ZU9mZnNldCA9IHN0cmlkZSAqIDM7XG5cblx0XHRiaW5kaW5nLmdldFZhbHVlKCBidWZmZXIsIG9yaWdpbmFsVmFsdWVPZmZzZXQgKTtcblxuXHRcdC8vIGFjY3VbMC4uMV0gOj0gb3JpZyAtLSBpbml0aWFsbHkgZGV0ZWN0IGNoYW5nZXMgYWdhaW5zdCB0aGUgb3JpZ2luYWxcblx0XHRmb3IgKCB2YXIgaSA9IHN0cmlkZSwgZSA9IG9yaWdpbmFsVmFsdWVPZmZzZXQ7IGkgIT09IGU7ICsrIGkgKSB7XG5cblx0XHRcdGJ1ZmZlclsgaSBdID0gYnVmZmVyWyBvcmlnaW5hbFZhbHVlT2Zmc2V0ICsgKCBpICUgc3RyaWRlICkgXTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XG5cblx0fSxcblxuXHQvLyBhcHBseSB0aGUgc3RhdGUgcHJldmlvdXNseSB0YWtlbiB2aWEgJ3NhdmVPcmlnaW5hbFN0YXRlJyB0byB0aGUgYmluZGluZ1xuXHRyZXN0b3JlT3JpZ2luYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9yaWdpbmFsVmFsdWVPZmZzZXQgPSB0aGlzLnZhbHVlU2l6ZSAqIDM7XG5cdFx0dGhpcy5iaW5kaW5nLnNldFZhbHVlKCB0aGlzLmJ1ZmZlciwgb3JpZ2luYWxWYWx1ZU9mZnNldCApO1xuXG5cdH0sXG5cblxuXHQvLyBtaXggZnVuY3Rpb25zXG5cblx0X3NlbGVjdDogZnVuY3Rpb24gKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHRpZiAoIHQgPj0gMC41ICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0XHRidWZmZXJbIGRzdE9mZnNldCArIGkgXSA9IGJ1ZmZlclsgc3JjT2Zmc2V0ICsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfc2xlcnA6IGZ1bmN0aW9uICggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCApIHtcblxuXHRcdFF1YXRlcm5pb24uc2xlcnBGbGF0KCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBkc3RPZmZzZXQsIGJ1ZmZlciwgc3JjT2Zmc2V0LCB0ICk7XG5cblx0fSxcblxuXHRfbGVycDogZnVuY3Rpb24gKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHR2YXIgcyA9IDEgLSB0O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHZhciBqID0gZHN0T2Zmc2V0ICsgaTtcblxuXHRcdFx0YnVmZmVyWyBqIF0gPSBidWZmZXJbIGogXSAqIHMgKyBidWZmZXJbIHNyY09mZnNldCArIGkgXSAqIHQ7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgcmVmZXJlbmNlIHRvIGEgcmVhbCBwcm9wZXJ0eSBpbiB0aGUgc2NlbmUgZ3JhcGguXG4gKlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG4vLyBDaGFyYWN0ZXJzIFtdLjovIGFyZSByZXNlcnZlZCBmb3IgdHJhY2sgYmluZGluZyBzeW50YXguXG52YXIgUkVTRVJWRURfQ0hBUlNfUkUgPSAnXFxcXFtcXFxcXVxcXFwuOlxcXFwvJztcblxuZnVuY3Rpb24gQ29tcG9zaXRlKCB0YXJnZXRHcm91cCwgcGF0aCwgb3B0aW9uYWxQYXJzZWRQYXRoICkge1xuXG5cdHZhciBwYXJzZWRQYXRoID0gb3B0aW9uYWxQYXJzZWRQYXRoIHx8IFByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZSggcGF0aCApO1xuXG5cdHRoaXMuX3RhcmdldEdyb3VwID0gdGFyZ2V0R3JvdXA7XG5cdHRoaXMuX2JpbmRpbmdzID0gdGFyZ2V0R3JvdXAuc3Vic2NyaWJlXyggcGF0aCwgcGFyc2VkUGF0aCApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENvbXBvc2l0ZS5wcm90b3R5cGUsIHtcblxuXHRnZXRWYWx1ZTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5iaW5kKCk7IC8vIGJpbmQgYWxsIGJpbmRpbmdcblxuXHRcdHZhciBmaXJzdFZhbGlkSW5kZXggPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRiaW5kaW5nID0gdGhpcy5fYmluZGluZ3NbIGZpcnN0VmFsaWRJbmRleCBdO1xuXG5cdFx0Ly8gYW5kIG9ubHkgY2FsbCAuZ2V0VmFsdWUgb24gdGhlIGZpcnN0XG5cdFx0aWYgKCBiaW5kaW5nICE9PSB1bmRlZmluZWQgKSBiaW5kaW5nLmdldFZhbHVlKCBhcnJheSwgb2Zmc2V0ICk7XG5cblx0fSxcblxuXHRzZXRWYWx1ZTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRmb3IgKCB2YXIgaSA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdFx0ICBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLnNldFZhbHVlKCBhcnJheSwgb2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRiaW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGZvciAoIHZhciBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0XHQgIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uYmluZCgpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dW5iaW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGZvciAoIHZhciBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0XHQgIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0udW5iaW5kKCk7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cblxuZnVuY3Rpb24gUHJvcGVydHlCaW5kaW5nKCByb290Tm9kZSwgcGF0aCwgcGFyc2VkUGF0aCApIHtcblxuXHR0aGlzLnBhdGggPSBwYXRoO1xuXHR0aGlzLnBhcnNlZFBhdGggPSBwYXJzZWRQYXRoIHx8IFByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZSggcGF0aCApO1xuXG5cdHRoaXMubm9kZSA9IFByb3BlcnR5QmluZGluZy5maW5kTm9kZSggcm9vdE5vZGUsIHRoaXMucGFyc2VkUGF0aC5ub2RlTmFtZSApIHx8IHJvb3ROb2RlO1xuXG5cdHRoaXMucm9vdE5vZGUgPSByb290Tm9kZTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBQcm9wZXJ0eUJpbmRpbmcsIHtcblxuXHRDb21wb3NpdGU6IENvbXBvc2l0ZSxcblxuXHRjcmVhdGU6IGZ1bmN0aW9uICggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApIHtcblxuXHRcdGlmICggISAoIHJvb3QgJiYgcm9vdC5pc0FuaW1hdGlvbk9iamVjdEdyb3VwICkgKSB7XG5cblx0XHRcdHJldHVybiBuZXcgUHJvcGVydHlCaW5kaW5nKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGUoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXBsYWNlcyBzcGFjZXMgd2l0aCB1bmRlcnNjb3JlcyBhbmQgcmVtb3ZlcyB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzIGZyb21cblx0ICogbm9kZSBuYW1lcywgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBwYXJzZVRyYWNrTmFtZSgpLlxuXHQgKlxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IG5hbWUgTm9kZSBuYW1lIHRvIGJlIHNhbml0aXplZC5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0c2FuaXRpemVOb2RlTmFtZTogKCBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgcmVzZXJ2ZWRSZSA9IG5ldyBSZWdFeHAoICdbJyArIFJFU0VSVkVEX0NIQVJTX1JFICsgJ10nLCAnZycgKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBzYW5pdGl6ZU5vZGVOYW1lKCBuYW1lICkge1xuXG5cdFx0XHRyZXR1cm4gbmFtZS5yZXBsYWNlKCAvXFxzL2csICdfJyApLnJlcGxhY2UoIHJlc2VydmVkUmUsICcnICk7XG5cblx0XHR9O1xuXG5cdH0oKSApLFxuXG5cdHBhcnNlVHJhY2tOYW1lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBBdHRlbXB0cyB0byBhbGxvdyBub2RlIG5hbWVzIGZyb20gYW55IGxhbmd1YWdlLiBFUzUncyBgXFx3YCByZWdleHAgbWF0Y2hlc1xuXHRcdC8vIG9ubHkgbGF0aW4gY2hhcmFjdGVycywgYW5kIHRoZSB1bmljb2RlIFxccHtMfSBpcyBub3QgeWV0IHN1cHBvcnRlZC4gU29cblx0XHQvLyBpbnN0ZWFkLCB3ZSBleGNsdWRlIHJlc2VydmVkIGNoYXJhY3RlcnMgYW5kIG1hdGNoIGV2ZXJ5dGhpbmcgZWxzZS5cblx0XHR2YXIgd29yZENoYXIgPSAnW14nICsgUkVTRVJWRURfQ0hBUlNfUkUgKyAnXSc7XG5cdFx0dmFyIHdvcmRDaGFyT3JEb3QgPSAnW14nICsgUkVTRVJWRURfQ0hBUlNfUkUucmVwbGFjZSggJ1xcXFwuJywgJycgKSArICddJztcblxuXHRcdC8vIFBhcmVudCBkaXJlY3RvcmllcywgZGVsaW1pdGVkIGJ5ICcvJyBvciAnOicuIEN1cnJlbnRseSB1bnVzZWQsIGJ1dCBtdXN0XG5cdFx0Ly8gYmUgbWF0Y2hlZCB0byBwYXJzZSB0aGUgcmVzdCBvZiB0aGUgdHJhY2sgbmFtZS5cblx0XHR2YXIgZGlyZWN0b3J5UmUgPSAvKCg/OldDK1tcXC86XSkqKS8uc291cmNlLnJlcGxhY2UoICdXQycsIHdvcmRDaGFyICk7XG5cblx0XHQvLyBUYXJnZXQgbm9kZS4gTWF5IGNvbnRhaW4gd29yZCBjaGFyYWN0ZXJzIChhLXpBLVowLTlfKSBhbmQgJy4nIG9yICctJy5cblx0XHR2YXIgbm9kZVJlID0gLyhXQ09EKyk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDT0QnLCB3b3JkQ2hhck9yRG90ICk7XG5cblx0XHQvLyBPYmplY3Qgb24gdGFyZ2V0IG5vZGUsIGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkXG5cdFx0Ly8gY2hhcmFjdGVycy4gQWNjZXNzb3IgbWF5IGNvbnRhaW4gYW55IGNoYXJhY3RlciBleGNlcHQgY2xvc2luZyBicmFja2V0LlxuXHRcdHZhciBvYmplY3RSZSA9IC8oPzpcXC4oV0MrKSg/OlxcWyguKylcXF0pPyk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDJywgd29yZENoYXIgKTtcblxuXHRcdC8vIFByb3BlcnR5IGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkIGNoYXJhY3RlcnMuIEFjY2Vzc29yIG1heVxuXHRcdC8vIGNvbnRhaW4gYW55IG5vbi1icmFja2V0IGNoYXJhY3RlcnMuXG5cdFx0dmFyIHByb3BlcnR5UmUgPSAvXFwuKFdDKykoPzpcXFsoLispXFxdKT8vLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCB3b3JkQ2hhciApO1xuXG5cdFx0dmFyIHRyYWNrUmUgPSBuZXcgUmVnRXhwKCAnJ1xuXHRcdFx0KyAnXidcblx0XHRcdCsgZGlyZWN0b3J5UmVcblx0XHRcdCsgbm9kZVJlXG5cdFx0XHQrIG9iamVjdFJlXG5cdFx0XHQrIHByb3BlcnR5UmVcblx0XHRcdCsgJyQnXG5cdFx0KTtcblxuXHRcdHZhciBzdXBwb3J0ZWRPYmplY3ROYW1lcyA9IFsgJ21hdGVyaWFsJywgJ21hdGVyaWFscycsICdib25lcycgXTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBwYXJzZVRyYWNrTmFtZSggdHJhY2tOYW1lICkge1xuXG5cdFx0XHR2YXIgbWF0Y2hlcyA9IHRyYWNrUmUuZXhlYyggdHJhY2tOYW1lICk7XG5cblx0XHRcdGlmICggISBtYXRjaGVzICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1Byb3BlcnR5QmluZGluZzogQ2Fubm90IHBhcnNlIHRyYWNrTmFtZTogJyArIHRyYWNrTmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciByZXN1bHRzID0ge1xuXHRcdFx0XHQvLyBkaXJlY3RvcnlOYW1lOiBtYXRjaGVzWyAxIF0sIC8vICh0c2NodykgY3VycmVudGx5IHVudXNlZFxuXHRcdFx0XHRub2RlTmFtZTogbWF0Y2hlc1sgMiBdLFxuXHRcdFx0XHRvYmplY3ROYW1lOiBtYXRjaGVzWyAzIF0sXG5cdFx0XHRcdG9iamVjdEluZGV4OiBtYXRjaGVzWyA0IF0sXG5cdFx0XHRcdHByb3BlcnR5TmFtZTogbWF0Y2hlc1sgNSBdLCAvLyByZXF1aXJlZFxuXHRcdFx0XHRwcm9wZXJ0eUluZGV4OiBtYXRjaGVzWyA2IF1cblx0XHRcdH07XG5cblx0XHRcdHZhciBsYXN0RG90ID0gcmVzdWx0cy5ub2RlTmFtZSAmJiByZXN1bHRzLm5vZGVOYW1lLmxhc3RJbmRleE9mKCAnLicgKTtcblxuXHRcdFx0aWYgKCBsYXN0RG90ICE9PSB1bmRlZmluZWQgJiYgbGFzdERvdCAhPT0gLSAxICkge1xuXG5cdFx0XHRcdHZhciBvYmplY3ROYW1lID0gcmVzdWx0cy5ub2RlTmFtZS5zdWJzdHJpbmcoIGxhc3REb3QgKyAxICk7XG5cblx0XHRcdFx0Ly8gT2JqZWN0IG5hbWVzIG11c3QgYmUgY2hlY2tlZCBhZ2FpbnN0IGEgd2hpdGVsaXN0LiBPdGhlcndpc2UsIHRoZXJlXG5cdFx0XHRcdC8vIGlzIG5vIHdheSB0byBwYXJzZSAnZm9vLmJhci5iYXonOiAnYmF6JyBtdXN0IGJlIGEgcHJvcGVydHksIGJ1dFxuXHRcdFx0XHQvLyAnYmFyJyBjb3VsZCBiZSB0aGUgb2JqZWN0TmFtZSwgb3IgcGFydCBvZiBhIG5vZGVOYW1lICh3aGljaCBjYW5cblx0XHRcdFx0Ly8gaW5jbHVkZSAnLicgY2hhcmFjdGVycykuXG5cdFx0XHRcdGlmICggc3VwcG9ydGVkT2JqZWN0TmFtZXMuaW5kZXhPZiggb2JqZWN0TmFtZSApICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0XHRyZXN1bHRzLm5vZGVOYW1lID0gcmVzdWx0cy5ub2RlTmFtZS5zdWJzdHJpbmcoIDAsIGxhc3REb3QgKTtcblx0XHRcdFx0XHRyZXN1bHRzLm9iamVjdE5hbWUgPSBvYmplY3ROYW1lO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHJlc3VsdHMucHJvcGVydHlOYW1lID09PSBudWxsIHx8IHJlc3VsdHMucHJvcGVydHlOYW1lLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdQcm9wZXJ0eUJpbmRpbmc6IGNhbiBub3QgcGFyc2UgcHJvcGVydHlOYW1lIGZyb20gdHJhY2tOYW1lOiAnICsgdHJhY2tOYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRmaW5kTm9kZTogZnVuY3Rpb24gKCByb290LCBub2RlTmFtZSApIHtcblxuXHRcdGlmICggISBub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gXCJcIiB8fCBub2RlTmFtZSA9PT0gXCJyb290XCIgfHwgbm9kZU5hbWUgPT09IFwiLlwiIHx8IG5vZGVOYW1lID09PSAtIDEgfHwgbm9kZU5hbWUgPT09IHJvb3QubmFtZSB8fCBub2RlTmFtZSA9PT0gcm9vdC51dWlkICkge1xuXG5cdFx0XHRyZXR1cm4gcm9vdDtcblxuXHRcdH1cblxuXHRcdC8vIHNlYXJjaCBpbnRvIHNrZWxldG9uIGJvbmVzLlxuXHRcdGlmICggcm9vdC5za2VsZXRvbiApIHtcblxuXHRcdFx0dmFyIGJvbmUgPSByb290LnNrZWxldG9uLmdldEJvbmVCeU5hbWUoIG5vZGVOYW1lICk7XG5cblx0XHRcdGlmICggYm9uZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBib25lO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBzZWFyY2ggaW50byBub2RlIHN1YnRyZWUuXG5cdFx0aWYgKCByb290LmNoaWxkcmVuICkge1xuXG5cdFx0XHR2YXIgc2VhcmNoTm9kZVN1YnRyZWUgPSBmdW5jdGlvbiAoIGNoaWxkcmVuICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBjaGlsZE5vZGUgPSBjaGlsZHJlblsgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCBjaGlsZE5vZGUubmFtZSA9PT0gbm9kZU5hbWUgfHwgY2hpbGROb2RlLnV1aWQgPT09IG5vZGVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gY2hpbGROb2RlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIHJlc3VsdCA9IHNlYXJjaE5vZGVTdWJ0cmVlKCBjaGlsZE5vZGUuY2hpbGRyZW4gKTtcblxuXHRcdFx0XHRcdGlmICggcmVzdWx0ICkgcmV0dXJuIHJlc3VsdDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH07XG5cblx0XHRcdHZhciBzdWJUcmVlTm9kZSA9IHNlYXJjaE5vZGVTdWJ0cmVlKCByb290LmNoaWxkcmVuICk7XG5cblx0XHRcdGlmICggc3ViVHJlZU5vZGUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHN1YlRyZWVOb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZSwgeyAvLyBwcm90b3R5cGUsIGNvbnRpbnVlZFxuXG5cdC8vIHRoZXNlIGFyZSB1c2VkIHRvIFwiYmluZFwiIGEgbm9uZXhpc3RlbnQgcHJvcGVydHlcblx0X2dldFZhbHVlX3VuYXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7fSxcblx0X3NldFZhbHVlX3VuYXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRCaW5kaW5nVHlwZToge1xuXHRcdERpcmVjdDogMCxcblx0XHRFbnRpcmVBcnJheTogMSxcblx0XHRBcnJheUVsZW1lbnQ6IDIsXG5cdFx0SGFzRnJvbVRvQXJyYXk6IDNcblx0fSxcblxuXHRWZXJzaW9uaW5nOiB7XG5cdFx0Tm9uZTogMCxcblx0XHROZWVkc1VwZGF0ZTogMSxcblx0XHRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlOiAyXG5cdH0sXG5cblx0R2V0dGVyQnlCaW5kaW5nVHlwZTogW1xuXG5cdFx0ZnVuY3Rpb24gZ2V0VmFsdWVfZGlyZWN0KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0YnVmZmVyWyBvZmZzZXQgXSA9IHRoaXMubm9kZVsgdGhpcy5wcm9wZXJ0eU5hbWUgXTtcblxuXHRcdH0sXG5cblx0XHRmdW5jdGlvbiBnZXRWYWx1ZV9hcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdHZhciBzb3VyY2UgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IHNvdXJjZS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKysgXSA9IHNvdXJjZVsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0ZnVuY3Rpb24gZ2V0VmFsdWVfYXJyYXlFbGVtZW50KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0YnVmZmVyWyBvZmZzZXQgXSA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF07XG5cblx0XHR9LFxuXG5cdFx0ZnVuY3Rpb24gZ2V0VmFsdWVfdG9BcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS50b0FycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXG5cdFx0fVxuXG5cdF0sXG5cblx0U2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmc6IFtcblxuXHRcdFtcblx0XHRcdC8vIERpcmVjdFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9kaXJlY3QoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZGlyZWN0X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdF0sIFtcblxuXHRcdFx0Ly8gRW50aXJlQXJyYXlcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHZhciBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0ZGVzdFsgaSBdID0gYnVmZmVyWyBvZmZzZXQgKysgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2FycmF5X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR2YXIgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBkZXN0Lmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHRcdGRlc3RbIGkgXSA9IGJ1ZmZlclsgb2Zmc2V0ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dmFyIGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XSwgW1xuXG5cdFx0XHQvLyBBcnJheUVsZW1lbnRcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlFbGVtZW50KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRdLCBbXG5cblx0XHRcdC8vIEhhc1RvRnJvbUFycmF5XG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2Zyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZnJvbUFycmF5X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2Zyb21BcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XVxuXG5cdF0sXG5cblx0Z2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlX3VuYm91bmQoIHRhcmdldEFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmJpbmQoKTtcblx0XHR0aGlzLmdldFZhbHVlKCB0YXJnZXRBcnJheSwgb2Zmc2V0ICk7XG5cblx0XHQvLyBOb3RlOiBUaGlzIGNsYXNzIHVzZXMgYSBTdGF0ZSBwYXR0ZXJuIG9uIGEgcGVyLW1ldGhvZCBiYXNpczpcblx0XHQvLyAnYmluZCcgc2V0cyAndGhpcy5nZXRWYWx1ZScgLyAnc2V0VmFsdWUnIGFuZCBzaGFkb3dzIHRoZVxuXHRcdC8vIHByb3RvdHlwZSB2ZXJzaW9uIG9mIHRoZXNlIG1ldGhvZHMgd2l0aCBvbmUgdGhhdCByZXByZXNlbnRzXG5cdFx0Ly8gdGhlIGJvdW5kIHN0YXRlLiBXaGVuIHRoZSBwcm9wZXJ0eSBpcyBub3QgZm91bmQsIHRoZSBtZXRob2RzXG5cdFx0Ly8gYmVjb21lIG5vLW9wcy5cblxuXHR9LFxuXG5cdHNldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZV91bmJvdW5kKCBzb3VyY2VBcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5iaW5kKCk7XG5cdFx0dGhpcy5zZXRWYWx1ZSggc291cmNlQXJyYXksIG9mZnNldCApO1xuXG5cdH0sXG5cblx0Ly8gY3JlYXRlIGdldHRlciAvIHNldHRlciBwYWlyIGZvciBhIHByb3BlcnR5IGluIHRoZSBzY2VuZSBncmFwaFxuXHRiaW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdGFyZ2V0T2JqZWN0ID0gdGhpcy5ub2RlLFxuXHRcdFx0cGFyc2VkUGF0aCA9IHRoaXMucGFyc2VkUGF0aCxcblxuXHRcdFx0b2JqZWN0TmFtZSA9IHBhcnNlZFBhdGgub2JqZWN0TmFtZSxcblx0XHRcdHByb3BlcnR5TmFtZSA9IHBhcnNlZFBhdGgucHJvcGVydHlOYW1lLFxuXHRcdFx0cHJvcGVydHlJbmRleCA9IHBhcnNlZFBhdGgucHJvcGVydHlJbmRleDtcblxuXHRcdGlmICggISB0YXJnZXRPYmplY3QgKSB7XG5cblx0XHRcdHRhcmdldE9iamVjdCA9IFByb3BlcnR5QmluZGluZy5maW5kTm9kZSggdGhpcy5yb290Tm9kZSwgcGFyc2VkUGF0aC5ub2RlTmFtZSApIHx8IHRoaXMucm9vdE5vZGU7XG5cblx0XHRcdHRoaXMubm9kZSA9IHRhcmdldE9iamVjdDtcblxuXHRcdH1cblxuXHRcdC8vIHNldCBmYWlsIHN0YXRlIHNvIHdlIGNhbiBqdXN0ICdyZXR1cm4nIG9uIGVycm9yXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuX2dldFZhbHVlX3VuYXZhaWxhYmxlO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmF2YWlsYWJsZTtcblxuXHRcdC8vIGVuc3VyZSB0aGVyZSBpcyBhIHZhbHVlIG5vZGVcblx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0ICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIG5vZGUgZm9yIHRyYWNrOiAnICsgdGhpcy5wYXRoICsgJyBidXQgaXQgd2FzblxcJ3QgZm91bmQuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3ROYW1lICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0SW5kZXggPSBwYXJzZWRQYXRoLm9iamVjdEluZGV4O1xuXG5cdFx0XHQvLyBzcGVjaWFsIGNhc2VzIHdlcmUgd2UgbmVlZCB0byByZWFjaCBkZWVwZXIgaW50byB0aGUgaGllcmFyY2h5IHRvIGdldCB0aGUgZmFjZSBtYXRlcmlhbHMuLi4uXG5cdFx0XHRzd2l0Y2ggKCBvYmplY3ROYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ21hdGVyaWFscyc6XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbWF0ZXJpYWwgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWwuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXRlcmlhbHMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbC5tYXRlcmlhbHMgYXMgbm9kZS5tYXRlcmlhbCBkb2VzIG5vdCBoYXZlIGEgbWF0ZXJpYWxzIGFycmF5LicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXRlcmlhbHM7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdib25lcyc6XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0LnNrZWxldG9uICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gYm9uZXMgYXMgbm9kZSBkb2VzIG5vdCBoYXZlIGEgc2tlbGV0b24uJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gcG90ZW50aWFsIGZ1dHVyZSBvcHRpbWl6YXRpb246IHNraXAgdGhpcyBpZiBwcm9wZXJ0eUluZGV4IGlzIGFscmVhZHkgYW4gaW50ZWdlclxuXHRcdFx0XHRcdC8vIGFuZCBjb252ZXJ0IHRoZSBpbnRlZ2VyIHN0cmluZyB0byBhIHRydWUgaW50ZWdlci5cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5za2VsZXRvbi5ib25lcztcblxuXHRcdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0YXJnZXRPYmplY3QubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdFsgaSBdLm5hbWUgPT09IG9iamVjdEluZGV4ICkge1xuXG5cdFx0XHRcdFx0XHRcdG9iamVjdEluZGV4ID0gaTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdFsgb2JqZWN0TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBvYmplY3ROYW1lIG9mIG5vZGUgdW5kZWZpbmVkLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdFsgb2JqZWN0TmFtZSBdO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0aWYgKCBvYmplY3RJbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0WyBvYmplY3RJbmRleCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gYmluZCB0byBvYmplY3RJbmRleCBvZiBvYmplY3ROYW1lLCBidXQgaXMgdW5kZWZpbmVkLicsIHRoaXMsIHRhcmdldE9iamVjdCApO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0WyBvYmplY3RJbmRleCBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyByZXNvbHZlIHByb3BlcnR5XG5cdFx0dmFyIG5vZGVQcm9wZXJ0eSA9IHRhcmdldE9iamVjdFsgcHJvcGVydHlOYW1lIF07XG5cblx0XHRpZiAoIG5vZGVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBwYXJzZWRQYXRoLm5vZGVOYW1lO1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIHByb3BlcnR5IGZvciB0cmFjazogJyArIG5vZGVOYW1lICtcblx0XHRcdFx0Jy4nICsgcHJvcGVydHlOYW1lICsgJyBidXQgaXQgd2FzblxcJ3QgZm91bmQuJywgdGFyZ2V0T2JqZWN0ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBkZXRlcm1pbmUgdmVyc2lvbmluZyBzY2hlbWVcblx0XHR2YXIgdmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5Ob25lO1xuXG5cdFx0aWYgKCB0YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgIT09IHVuZGVmaW5lZCApIHsgLy8gbWF0ZXJpYWxcblxuXHRcdFx0dmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5OZWVkc1VwZGF0ZTtcblx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0O1xuXG5cdFx0fSBlbHNlIGlmICggdGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgIT09IHVuZGVmaW5lZCApIHsgLy8gbm9kZSB0cmFuc2Zvcm1cblxuXHRcdFx0dmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5NYXRyaXhXb3JsZE5lZWRzVXBkYXRlO1xuXHRcdFx0dGhpcy50YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3Q7XG5cblx0XHR9XG5cblx0XHQvLyBkZXRlcm1pbmUgaG93IHRoZSBwcm9wZXJ0eSBnZXRzIGJvdW5kXG5cdFx0dmFyIGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5EaXJlY3Q7XG5cblx0XHRpZiAoIHByb3BlcnR5SW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gYWNjZXNzIGEgc3ViIGVsZW1lbnQgb2YgdGhlIHByb3BlcnR5IGFycmF5IChvbmx5IHByaW1pdGl2ZXMgYXJlIHN1cHBvcnRlZCByaWdodCBub3cpXG5cblx0XHRcdGlmICggcHJvcGVydHlOYW1lID09PSBcIm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1wiICkge1xuXG5cdFx0XHRcdC8vIHBvdGVudGlhbCBvcHRpbWl6YXRpb24sIHNraXAgdGhpcyBpZiBwcm9wZXJ0eUluZGV4IGlzIGFscmVhZHkgYW4gaW50ZWdlciwgYW5kIGNvbnZlcnQgdGhlIGludGVnZXIgc3RyaW5nIHRvIGEgdHJ1ZSBpbnRlZ2VyLlxuXG5cdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cblx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS4nLCB0aGlzICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdC5nZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5ub2RlLmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvblsgaSBdLm5hbWUgPT09IHByb3BlcnR5SW5kZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0cHJvcGVydHlJbmRleCA9IGk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5tb3JwaFRhcmdldHMuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5ub2RlLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1sgaSBdLm5hbWUgPT09IHByb3BlcnR5SW5kZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0cHJvcGVydHlJbmRleCA9IGk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5BcnJheUVsZW1lbnQ7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTtcblx0XHRcdHRoaXMucHJvcGVydHlJbmRleCA9IHByb3BlcnR5SW5kZXg7XG5cblx0XHR9IGVsc2UgaWYgKCBub2RlUHJvcGVydHkuZnJvbUFycmF5ICE9PSB1bmRlZmluZWQgJiYgbm9kZVByb3BlcnR5LnRvQXJyYXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gbXVzdCB1c2UgY29weSBmb3IgT2JqZWN0M0QuRXVsZXIvUXVhdGVybmlvblxuXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuSGFzRnJvbVRvQXJyYXk7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTtcblxuXHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIG5vZGVQcm9wZXJ0eSApICkge1xuXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuRW50aXJlQXJyYXk7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2VsZWN0IGdldHRlciAvIHNldHRlclxuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLkdldHRlckJ5QmluZGluZ1R5cGVbIGJpbmRpbmdUeXBlIF07XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmdbIGJpbmRpbmdUeXBlIF1bIHZlcnNpb25pbmcgXTtcblxuXHR9LFxuXG5cdHVuYmluZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5ub2RlID0gbnVsbDtcblxuXHRcdC8vIGJhY2sgdG8gdGhlIHByb3RvdHlwZSB2ZXJzaW9uIG9mIGdldFZhbHVlIC8gc2V0VmFsdWVcblx0XHQvLyBub3RlOiBhdm9pZGluZyB0byBtdXRhdGUgdGhlIHNoYXBlIG9mICd0aGlzJyB2aWEgJ2RlbGV0ZSdcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5fZ2V0VmFsdWVfdW5ib3VuZDtcblx0XHR0aGlzLnNldFZhbHVlID0gdGhpcy5fc2V0VmFsdWVfdW5ib3VuZDtcblxuXHR9XG5cbn0gKTtcblxuLy8hXFwgREVDTEFSRSBBTElBUyBBRlRFUiBhc3NpZ24gcHJvdG90eXBlICFcbk9iamVjdC5hc3NpZ24oIFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUsIHtcblxuXHQvLyBpbml0aWFsIHN0YXRlIG9mIHRoZXNlIG1ldGhvZHMgdGhhdCBjYWxscyAnYmluZCdcblx0X2dldFZhbHVlX3VuYm91bmQ6IFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuZ2V0VmFsdWUsXG5cdF9zZXRWYWx1ZV91bmJvdW5kOiBQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLnNldFZhbHVlLFxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgZ3JvdXAgb2Ygb2JqZWN0cyB0aGF0IHJlY2VpdmVzIGEgc2hhcmVkIGFuaW1hdGlvbiBzdGF0ZS5cbiAqXG4gKiBVc2FnZTpcbiAqXG4gKiBcdC1cdEFkZCBvYmplY3RzIHlvdSB3b3VsZCBvdGhlcndpc2UgcGFzcyBhcyAncm9vdCcgdG8gdGhlXG4gKiBcdFx0Y29uc3RydWN0b3Igb3IgdGhlIC5jbGlwQWN0aW9uIG1ldGhvZCBvZiBBbmltYXRpb25NaXhlci5cbiAqXG4gKiBcdC1cdEluc3RlYWQgcGFzcyB0aGlzIG9iamVjdCBhcyAncm9vdCcuXG4gKlxuICogXHQtXHRZb3UgY2FuIGFsc28gYWRkIGFuZCByZW1vdmUgb2JqZWN0cyBsYXRlciB3aGVuIHRoZSBtaXhlclxuICogXHRcdGlzIHJ1bm5pbmcuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgXHRPYmplY3RzIG9mIHRoaXMgY2xhc3MgYXBwZWFyIGFzIG9uZSBvYmplY3QgdG8gdGhlIG1peGVyLFxuICogIFx0c28gY2FjaGUgY29udHJvbCBvZiB0aGUgaW5kaXZpZHVhbCBvYmplY3RzIG11c3QgYmUgZG9uZVxuICogIFx0b24gdGhlIGdyb3VwLlxuICpcbiAqIExpbWl0YXRpb246XG4gKlxuICogXHQtIFx0VGhlIGFuaW1hdGVkIHByb3BlcnRpZXMgbXVzdCBiZSBjb21wYXRpYmxlIGFtb25nIHRoZVxuICogXHRcdGFsbCBvYmplY3RzIGluIHRoZSBncm91cC5cbiAqXG4gKiAgLVx0QSBzaW5nbGUgcHJvcGVydHkgY2FuIGVpdGhlciBiZSBjb250cm9sbGVkIHRocm91Z2ggYVxuICogIFx0dGFyZ2V0IGdyb3VwIG9yIGRpcmVjdGx5LCBidXQgbm90IGJvdGguXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbk9iamVjdEdyb3VwKCkge1xuXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xuXG5cdC8vIGNhY2hlZCBvYmplY3RzIGZvbGxvd2VkIGJ5IHRoZSBhY3RpdmUgb25lc1xuXHR0aGlzLl9vYmplY3RzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXG5cdHRoaXMubkNhY2hlZE9iamVjdHNfID0gMDtcdFx0XHQvLyB0aHJlc2hvbGRcblx0Ly8gbm90ZTogcmVhZCBieSBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlXG5cblx0dmFyIGluZGljZXMgPSB7fTtcblx0dGhpcy5faW5kaWNlc0J5VVVJRCA9IGluZGljZXM7XHRcdC8vIGZvciBib29ra2VlcGluZ1xuXG5cdGZvciAoIHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRpbmRpY2VzWyBhcmd1bWVudHNbIGkgXS51dWlkIF0gPSBpO1xuXG5cdH1cblxuXHR0aGlzLl9wYXRocyA9IFtdO1x0XHRcdFx0XHQvLyBpbnNpZGU6IHN0cmluZ1xuXHR0aGlzLl9wYXJzZWRQYXRocyA9IFtdO1x0XHRcdFx0Ly8gaW5zaWRlOiB7IHdlIGRvbid0IGNhcmUsIGhlcmUgfVxuXHR0aGlzLl9iaW5kaW5ncyA9IFtdOyBcdFx0XHRcdC8vIGluc2lkZTogQXJyYXk8IFByb3BlcnR5QmluZGluZyA+XG5cdHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCA9IHt9OyBcdC8vIGluc2lkZTogaW5kaWNlcyBpbiB0aGVzZSBhcnJheXNcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHRoaXMuc3RhdHMgPSB7XG5cblx0XHRvYmplY3RzOiB7XG5cdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0cmV0dXJuIHNjb3BlLl9vYmplY3RzLmxlbmd0aDtcblxuXHRcdFx0fSxcblx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcy50b3RhbCAtIHNjb3BlLm5DYWNoZWRPYmplY3RzXztcblxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0IGJpbmRpbmdzUGVyT2JqZWN0KCkge1xuXG5cdFx0XHRyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbk9iamVjdEdyb3VwLnByb3RvdHlwZSwge1xuXG5cdGlzQW5pbWF0aW9uT2JqZWN0R3JvdXA6IHRydWUsXG5cblx0YWRkOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0cGF0aHMgPSB0aGlzLl9wYXRocyxcblx0XHRcdHBhcnNlZFBhdGhzID0gdGhpcy5fcGFyc2VkUGF0aHMsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoLFxuXHRcdFx0a25vd25PYmplY3QgPSB1bmRlZmluZWQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZCxcblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdGlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyB1bmtub3duIG9iamVjdCAtPiBhZGQgaXQgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHRpbmRleCA9IG5PYmplY3RzICsrO1xuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0cy5wdXNoKCBvYmplY3QgKTtcblxuXHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0YmluZGluZ3NbIGogXS5wdXNoKCBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGhzWyBqIF0sIHBhcnNlZFBhdGhzWyBqIF0gKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHtcblxuXHRcdFx0XHRrbm93bk9iamVjdCA9IG9iamVjdHNbIGluZGV4IF07XG5cblx0XHRcdFx0Ly8gbW92ZSBleGlzdGluZyBvYmplY3QgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHR2YXIgZmlyc3RBY3RpdmVJbmRleCA9IC0tIG5DYWNoZWRPYmplY3RzLFxuXHRcdFx0XHRcdGxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdENhY2hlZE9iamVjdC51dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RDYWNoZWRPYmplY3Q7XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgdXVpZCBdID0gZmlyc3RBY3RpdmVJbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdID0gb2JqZWN0O1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHR2YXIgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXSxcblx0XHRcdFx0XHRcdGxhc3RDYWNoZWQgPSBiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF07XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBsYXN0Q2FjaGVkO1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHNpbmNlIHdlIGRvIG5vdCBib3RoZXIgdG8gY3JlYXRlIG5ldyBiaW5kaW5nc1xuXHRcdFx0XHRcdFx0Ly8gZm9yIG9iamVjdHMgdGhhdCBhcmUgY2FjaGVkLCB0aGUgYmluZGluZyBtYXlcblx0XHRcdFx0XHRcdC8vIG9yIG1heSBub3QgZXhpc3RcblxuXHRcdFx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aHNbIGogXSwgcGFyc2VkUGF0aHNbIGogXSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0c1sgaW5kZXggXSAhPT0ga25vd25PYmplY3QgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkFuaW1hdGlvbk9iamVjdEdyb3VwOiBEaWZmZXJlbnQgb2JqZWN0cyB3aXRoIHRoZSBzYW1lIFVVSUQgJyArXG5cdFx0XHRcdFx0XHQnZGV0ZWN0ZWQuIENsZWFuIHRoZSBjYWNoZXMgb3IgcmVjcmVhdGUgeW91ciBpbmZyYXN0cnVjdHVyZSB3aGVuIHJlbG9hZGluZyBzY2VuZXMuJyApO1xuXG5cdFx0XHR9IC8vIGVsc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IHdoZXJlIHdlIHdhbnQgaXQgdG8gYmVcblxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcblxuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHZhciBvYmplY3QgPSBhcmd1bWVudHNbIGkgXSxcblx0XHRcdFx0dXVpZCA9IG9iamVjdC51dWlkLFxuXHRcdFx0XHRpbmRleCA9IGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ID49IG5DYWNoZWRPYmplY3RzICkge1xuXG5cdFx0XHRcdC8vIG1vdmUgZXhpc3Rpbmcgb2JqZWN0IGludG8gdGhlIENBQ0hFRCByZWdpb25cblxuXHRcdFx0XHR2YXIgbGFzdENhY2hlZEluZGV4ID0gbkNhY2hlZE9iamVjdHMgKyssXG5cdFx0XHRcdFx0Zmlyc3RBY3RpdmVPYmplY3QgPSBvYmplY3RzWyBsYXN0Q2FjaGVkSW5kZXggXTtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBmaXJzdEFjdGl2ZU9iamVjdC51dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGZpcnN0QWN0aXZlT2JqZWN0O1xuXG5cdFx0XHRcdGluZGljZXNCeVVVSURbIHV1aWQgXSA9IGxhc3RDYWNoZWRJbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgbGFzdENhY2hlZEluZGV4IF0gPSBvYmplY3Q7XG5cblx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdHZhciBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0Zmlyc3RBY3RpdmUgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RDYWNoZWRJbmRleCBdLFxuXHRcdFx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTtcblxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGZpcnN0QWN0aXZlO1xuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgbGFzdENhY2hlZEluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXG5cblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xuXG5cdH0sXG5cblx0Ly8gcmVtb3ZlICYgZm9yZ2V0XG5cdHVuY2FjaGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcblx0XHRcdG5PYmplY3RzID0gb2JqZWN0cy5sZW5ndGgsXG5cdFx0XHRuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0aW5kaWNlc0J5VVVJRCA9IHRoaXMuX2luZGljZXNCeVVVSUQsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dmFyIG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLFxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQsXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGVsZXRlIGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgbkNhY2hlZE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgY2FjaGVkLCBzaHJpbmsgdGhlIENBQ0hFRCByZWdpb25cblxuXHRcdFx0XHRcdHZhciBmaXJzdEFjdGl2ZUluZGV4ID0gLS0gbkNhY2hlZE9iamVjdHMsXG5cdFx0XHRcdFx0XHRsYXN0Q2FjaGVkT2JqZWN0ID0gb2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdLFxuXHRcdFx0XHRcdFx0bGFzdEluZGV4ID0gLS0gbk9iamVjdHMsXG5cdFx0XHRcdFx0XHRsYXN0T2JqZWN0ID0gb2JqZWN0c1sgbGFzdEluZGV4IF07XG5cblx0XHRcdFx0XHQvLyBsYXN0IGNhY2hlZCBvYmplY3QgdGFrZXMgdGhpcyBvYmplY3QncyBwbGFjZVxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RDYWNoZWRPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RDYWNoZWRPYmplY3Q7XG5cblx0XHRcdFx0XHQvLyBsYXN0IG9iamVjdCBnb2VzIHRvIHRoZSBhY3RpdmF0ZWQgc2xvdCBhbmQgcG9wXG5cdFx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdE9iamVjdC51dWlkIF0gPSBmaXJzdEFjdGl2ZUluZGV4O1xuXHRcdFx0XHRcdG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3RPYmplY3Q7XG5cdFx0XHRcdFx0b2JqZWN0cy5wb3AoKTtcblxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF0sXG5cdFx0XHRcdFx0XHRcdGxhc3RDYWNoZWQgPSBiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdFx0bGFzdCA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGxhc3RDYWNoZWQ7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSA9IGxhc3Q7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGgucG9wKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIG9iamVjdCBpcyBhY3RpdmUsIGp1c3Qgc3dhcCB3aXRoIHRoZSBsYXN0IGFuZCBwb3BcblxuXHRcdFx0XHRcdHZhciBsYXN0SW5kZXggPSAtLSBuT2JqZWN0cyxcblx0XHRcdFx0XHRcdGxhc3RPYmplY3QgPSBvYmplY3RzWyBsYXN0SW5kZXggXTtcblxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RPYmplY3Q7XG5cdFx0XHRcdFx0b2JqZWN0cy5wb3AoKTtcblxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF07XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGgucG9wKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSAvLyBjYWNoZWQgb3IgYWN0aXZlXG5cblx0XHRcdH0gLy8gaWYgb2JqZWN0IGlzIGtub3duXG5cblx0XHR9IC8vIGZvciBhcmd1bWVudHNcblxuXHRcdHRoaXMubkNhY2hlZE9iamVjdHNfID0gbkNhY2hlZE9iamVjdHM7XG5cblx0fSxcblxuXHQvLyBJbnRlcm5hbCBpbnRlcmZhY2UgdXNlZCBieSBiZWZyaWVuZGVkIFByb3BlcnR5QmluZGluZy5Db21wb3NpdGU6XG5cblx0c3Vic2NyaWJlXzogZnVuY3Rpb24gKCBwYXRoLCBwYXJzZWRQYXRoICkge1xuXG5cdFx0Ly8gcmV0dXJucyBhbiBhcnJheSBvZiBiaW5kaW5ncyBmb3IgdGhlIGdpdmVuIHBhdGggdGhhdCBpcyBjaGFuZ2VkXG5cdFx0Ly8gYWNjb3JkaW5nIHRvIHRoZSBjb250YWluZWQgb2JqZWN0cyBpbiB0aGUgZ3JvdXBcblxuXHRcdHZhciBpbmRpY2VzQnlQYXRoID0gdGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoLFxuXHRcdFx0aW5kZXggPSBpbmRpY2VzQnlQYXRoWyBwYXRoIF0sXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIGJpbmRpbmdzWyBpbmRleCBdO1xuXG5cdFx0dmFyIHBhdGhzID0gdGhpcy5fcGF0aHMsXG5cdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0b2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGJpbmRpbmdzRm9yUGF0aCA9IG5ldyBBcnJheSggbk9iamVjdHMgKTtcblxuXHRcdGluZGV4ID0gYmluZGluZ3MubGVuZ3RoO1xuXG5cdFx0aW5kaWNlc0J5UGF0aFsgcGF0aCBdID0gaW5kZXg7XG5cblx0XHRwYXRocy5wdXNoKCBwYXRoICk7XG5cdFx0cGFyc2VkUGF0aHMucHVzaCggcGFyc2VkUGF0aCApO1xuXHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmdzRm9yUGF0aCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSBuQ2FjaGVkT2JqZWN0cywgbiA9IG9iamVjdHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gb2JqZWN0c1sgaSBdO1xuXHRcdFx0YmluZGluZ3NGb3JQYXRoWyBpIF0gPSBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBiaW5kaW5nc0ZvclBhdGg7XG5cblx0fSxcblxuXHR1bnN1YnNjcmliZV86IGZ1bmN0aW9uICggcGF0aCApIHtcblxuXHRcdC8vIHRlbGxzIHRoZSBncm91cCB0byBmb3JnZXQgYWJvdXQgYSBwcm9wZXJ0eSBwYXRoIGFuZCBubyBsb25nZXJcblx0XHQvLyB1cGRhdGUgdGhlIGFycmF5IHByZXZpb3VzbHkgb2J0YWluZWQgd2l0aCAnc3Vic2NyaWJlXydcblxuXHRcdHZhciBpbmRpY2VzQnlQYXRoID0gdGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoLFxuXHRcdFx0aW5kZXggPSBpbmRpY2VzQnlQYXRoWyBwYXRoIF07XG5cblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0XHRsYXN0QmluZGluZ3NJbmRleCA9IGJpbmRpbmdzLmxlbmd0aCAtIDEsXG5cdFx0XHRcdGxhc3RCaW5kaW5ncyA9IGJpbmRpbmdzWyBsYXN0QmluZGluZ3NJbmRleCBdLFxuXHRcdFx0XHRsYXN0QmluZGluZ3NQYXRoID0gcGF0aFsgbGFzdEJpbmRpbmdzSW5kZXggXTtcblxuXHRcdFx0aW5kaWNlc0J5UGF0aFsgbGFzdEJpbmRpbmdzUGF0aCBdID0gaW5kZXg7XG5cblx0XHRcdGJpbmRpbmdzWyBpbmRleCBdID0gbGFzdEJpbmRpbmdzO1xuXHRcdFx0YmluZGluZ3MucG9wKCk7XG5cblx0XHRcdHBhcnNlZFBhdGhzWyBpbmRleCBdID0gcGFyc2VkUGF0aHNbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cdFx0XHRwYXJzZWRQYXRocy5wb3AoKTtcblxuXHRcdFx0cGF0aHNbIGluZGV4IF0gPSBwYXRoc1sgbGFzdEJpbmRpbmdzSW5kZXggXTtcblx0XHRcdHBhdGhzLnBvcCgpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBY3Rpb24gcHJvdmlkZWQgYnkgQW5pbWF0aW9uTWl4ZXIgZm9yIHNjaGVkdWxpbmcgY2xpcCBwbGF5YmFjayBvbiBzcGVjaWZpY1xuICogb2JqZWN0cy5cbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKlxuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbkFjdGlvbiggbWl4ZXIsIGNsaXAsIGxvY2FsUm9vdCApIHtcblxuXHR0aGlzLl9taXhlciA9IG1peGVyO1xuXHR0aGlzLl9jbGlwID0gY2xpcDtcblx0dGhpcy5fbG9jYWxSb290ID0gbG9jYWxSb290IHx8IG51bGw7XG5cblx0dmFyIHRyYWNrcyA9IGNsaXAudHJhY2tzLFxuXHRcdG5UcmFja3MgPSB0cmFja3MubGVuZ3RoLFxuXHRcdGludGVycG9sYW50cyA9IG5ldyBBcnJheSggblRyYWNrcyApO1xuXG5cdHZhciBpbnRlcnBvbGFudFNldHRpbmdzID0ge1xuXHRcdGVuZGluZ1N0YXJ0OiBaZXJvQ3VydmF0dXJlRW5kaW5nLFxuXHRcdGVuZGluZ0VuZDogWmVyb0N1cnZhdHVyZUVuZGluZ1xuXHR9O1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHtcblxuXHRcdHZhciBpbnRlcnBvbGFudCA9IHRyYWNrc1sgaSBdLmNyZWF0ZUludGVycG9sYW50KCBudWxsICk7XG5cdFx0aW50ZXJwb2xhbnRzWyBpIF0gPSBpbnRlcnBvbGFudDtcblx0XHRpbnRlcnBvbGFudC5zZXR0aW5ncyA9IGludGVycG9sYW50U2V0dGluZ3M7XG5cblx0fVxuXG5cdHRoaXMuX2ludGVycG9sYW50U2V0dGluZ3MgPSBpbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdHRoaXMuX2ludGVycG9sYW50cyA9IGludGVycG9sYW50cztcdC8vIGJvdW5kIGJ5IHRoZSBtaXhlclxuXG5cdC8vIGluc2lkZTogUHJvcGVydHlNaXhlciAobWFuYWdlZCBieSB0aGUgbWl4ZXIpXG5cdHRoaXMuX3Byb3BlcnR5QmluZGluZ3MgPSBuZXcgQXJyYXkoIG5UcmFja3MgKTtcblxuXHR0aGlzLl9jYWNoZUluZGV4ID0gbnVsbDtcdFx0XHQvLyBmb3IgdGhlIG1lbW9yeSBtYW5hZ2VyXG5cdHRoaXMuX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1x0XHQvLyBmb3IgdGhlIG1lbW9yeSBtYW5hZ2VyXG5cblx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XG5cblx0dGhpcy5sb29wID0gTG9vcFJlcGVhdDtcblx0dGhpcy5fbG9vcENvdW50ID0gLSAxO1xuXG5cdC8vIGdsb2JhbCBtaXhlciB0aW1lIHdoZW4gdGhlIGFjdGlvbiBpcyB0byBiZSBzdGFydGVkXG5cdC8vIGl0J3Mgc2V0IGJhY2sgdG8gJ251bGwnIHVwb24gc3RhcnQgb2YgdGhlIGFjdGlvblxuXHR0aGlzLl9zdGFydFRpbWUgPSBudWxsO1xuXG5cdC8vIHNjYWxlZCBsb2NhbCB0aW1lIG9mIHRoZSBhY3Rpb25cblx0Ly8gZ2V0cyBjbGFtcGVkIG9yIHdyYXBwZWQgdG8gMC4uY2xpcC5kdXJhdGlvbiBhY2NvcmRpbmcgdG8gbG9vcFxuXHR0aGlzLnRpbWUgPSAwO1xuXG5cdHRoaXMudGltZVNjYWxlID0gMTtcblx0dGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlID0gMTtcblxuXHR0aGlzLndlaWdodCA9IDE7XG5cdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IDE7XG5cblx0dGhpcy5yZXBldGl0aW9ucyA9IEluZmluaXR5OyBcdFx0Ly8gbm8uIG9mIHJlcGV0aXRpb25zIHdoZW4gbG9vcGluZ1xuXG5cdHRoaXMucGF1c2VkID0gZmFsc2U7XHRcdFx0XHQvLyB0cnVlIC0+IHplcm8gZWZmZWN0aXZlIHRpbWUgc2NhbGVcblx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcdFx0XHRcdC8vIGZhbHNlIC0+IHplcm8gZWZmZWN0aXZlIHdlaWdodFxuXG5cdHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgXHQ9IGZhbHNlO1x0Ly8ga2VlcCBmZWVkaW5nIHRoZSBsYXN0IGZyYW1lP1xuXG5cdHRoaXMuemVyb1Nsb3BlQXRTdGFydCBcdD0gdHJ1ZTtcdFx0Ly8gZm9yIHNtb290aCBpbnRlcnBvbGF0aW9uIHcvbyBzZXBhcmF0ZVxuXHR0aGlzLnplcm9TbG9wZUF0RW5kXHRcdD0gdHJ1ZTtcdFx0Ly8gY2xpcHMgZm9yIHN0YXJ0LCBsb29wIGFuZCBlbmRcblxufVxuXG5PYmplY3QuYXNzaWduKCBBbmltYXRpb25BY3Rpb24ucHJvdG90eXBlLCB7XG5cblx0Ly8gU3RhdGUgJiBTY2hlZHVsaW5nXG5cblx0cGxheTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5fbWl4ZXIuX2FjdGl2YXRlQWN0aW9uKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuX21peGVyLl9kZWFjdGl2YXRlQWN0aW9uKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcy5yZXNldCgpO1xuXG5cdH0sXG5cblx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMucGF1c2VkID0gZmFsc2U7XG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHRcdHRoaXMudGltZSA9IDA7XHRcdFx0Ly8gcmVzdGFydCBjbGlwXG5cdFx0dGhpcy5fbG9vcENvdW50ID0gLSAxO1x0Ly8gZm9yZ2V0IHByZXZpb3VzIGxvb3BzXG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDtcdC8vIGZvcmdldCBzY2hlZHVsaW5nXG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCkuc3RvcFdhcnBpbmcoKTtcblxuXHR9LFxuXG5cdGlzUnVubmluZzogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZW5hYmxlZCAmJiAhIHRoaXMucGF1c2VkICYmIHRoaXMudGltZVNjYWxlICE9PSAwICYmXG5cdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9PT0gbnVsbCAmJiB0aGlzLl9taXhlci5faXNBY3RpdmVBY3Rpb24oIHRoaXMgKTtcblxuXHR9LFxuXG5cdC8vIHJldHVybiB0cnVlIHdoZW4gcGxheSBoYXMgYmVlbiBjYWxsZWRcblx0aXNTY2hlZHVsZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlci5faXNBY3RpdmVBY3Rpb24oIHRoaXMgKTtcblxuXHR9LFxuXG5cdHN0YXJ0QXQ6IGZ1bmN0aW9uICggdGltZSApIHtcblxuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IHRpbWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldExvb3A6IGZ1bmN0aW9uICggbW9kZSwgcmVwZXRpdGlvbnMgKSB7XG5cblx0XHR0aGlzLmxvb3AgPSBtb2RlO1xuXHRcdHRoaXMucmVwZXRpdGlvbnMgPSByZXBldGl0aW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gV2VpZ2h0XG5cblx0Ly8gc2V0IHRoZSB3ZWlnaHQgc3RvcHBpbmcgYW55IHNjaGVkdWxlZCBmYWRpbmdcblx0Ly8gYWx0aG91Z2ggLmVuYWJsZWQgPSBmYWxzZSB5aWVsZHMgYW4gZWZmZWN0aXZlIHdlaWdodCBvZiB6ZXJvLCB0aGlzXG5cdC8vIG1ldGhvZCBkb2VzICpub3QqIGNoYW5nZSAuZW5hYmxlZCwgYmVjYXVzZSBpdCB3b3VsZCBiZSBjb25mdXNpbmdcblx0c2V0RWZmZWN0aXZlV2VpZ2h0OiBmdW5jdGlvbiAoIHdlaWdodCApIHtcblxuXHRcdHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xuXG5cdFx0Ly8gbm90ZTogc2FtZSBsb2dpYyBhcyB3aGVuIHVwZGF0ZWQgYXQgcnVudGltZVxuXHRcdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IHRoaXMuZW5hYmxlZCA/IHdlaWdodCA6IDA7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCk7XG5cblx0fSxcblxuXHQvLyByZXR1cm4gdGhlIHdlaWdodCBjb25zaWRlcmluZyBmYWRpbmcgYW5kIC5lbmFibGVkXG5cdGdldEVmZmVjdGl2ZVdlaWdodDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2VmZmVjdGl2ZVdlaWdodDtcblxuXHR9LFxuXG5cdGZhZGVJbjogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyggZHVyYXRpb24sIDAsIDEgKTtcblxuXHR9LFxuXG5cdGZhZGVPdXQ6IGZ1bmN0aW9uICggZHVyYXRpb24gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fc2NoZWR1bGVGYWRpbmcoIGR1cmF0aW9uLCAxLCAwICk7XG5cblx0fSxcblxuXHRjcm9zc0ZhZGVGcm9tOiBmdW5jdGlvbiAoIGZhZGVPdXRBY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkge1xuXG5cdFx0ZmFkZU91dEFjdGlvbi5mYWRlT3V0KCBkdXJhdGlvbiApO1xuXHRcdHRoaXMuZmFkZUluKCBkdXJhdGlvbiApO1xuXG5cdFx0aWYgKCB3YXJwICkge1xuXG5cdFx0XHR2YXIgZmFkZUluRHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uLFxuXHRcdFx0XHRmYWRlT3V0RHVyYXRpb24gPSBmYWRlT3V0QWN0aW9uLl9jbGlwLmR1cmF0aW9uLFxuXG5cdFx0XHRcdHN0YXJ0RW5kUmF0aW8gPSBmYWRlT3V0RHVyYXRpb24gLyBmYWRlSW5EdXJhdGlvbixcblx0XHRcdFx0ZW5kU3RhcnRSYXRpbyA9IGZhZGVJbkR1cmF0aW9uIC8gZmFkZU91dER1cmF0aW9uO1xuXG5cdFx0XHRmYWRlT3V0QWN0aW9uLndhcnAoIDEuMCwgc3RhcnRFbmRSYXRpbywgZHVyYXRpb24gKTtcblx0XHRcdHRoaXMud2FycCggZW5kU3RhcnRSYXRpbywgMS4wLCBkdXJhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjcm9zc0ZhZGVUbzogZnVuY3Rpb24gKCBmYWRlSW5BY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkge1xuXG5cdFx0cmV0dXJuIGZhZGVJbkFjdGlvbi5jcm9zc0ZhZGVGcm9tKCB0aGlzLCBkdXJhdGlvbiwgd2FycCApO1xuXG5cdH0sXG5cblx0c3RvcEZhZGluZzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHdlaWdodEludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIHdlaWdodEludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIHdlaWdodEludGVycG9sYW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIFRpbWUgU2NhbGUgQ29udHJvbFxuXG5cdC8vIHNldCB0aGUgdGltZSBzY2FsZSBzdG9wcGluZyBhbnkgc2NoZWR1bGVkIHdhcnBpbmdcblx0Ly8gYWx0aG91Z2ggLnBhdXNlZCA9IHRydWUgeWllbGRzIGFuIGVmZmVjdGl2ZSB0aW1lIHNjYWxlIG9mIHplcm8sIHRoaXNcblx0Ly8gbWV0aG9kIGRvZXMgKm5vdCogY2hhbmdlIC5wYXVzZWQsIGJlY2F1c2UgaXQgd291bGQgYmUgY29uZnVzaW5nXG5cdHNldEVmZmVjdGl2ZVRpbWVTY2FsZTogZnVuY3Rpb24gKCB0aW1lU2NhbGUgKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHR0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUgPSB0aGlzLnBhdXNlZCA/IDAgOiB0aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH0sXG5cblx0Ly8gcmV0dXJuIHRoZSB0aW1lIHNjYWxlIGNvbnNpZGVyaW5nIHdhcnBpbmcgYW5kIC5wYXVzZWRcblx0Z2V0RWZmZWN0aXZlVGltZVNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlO1xuXG5cdH0sXG5cblx0c2V0RHVyYXRpb246IGZ1bmN0aW9uICggZHVyYXRpb24gKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRoaXMuX2NsaXAuZHVyYXRpb24gLyBkdXJhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fSxcblxuXHRzeW5jV2l0aDogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHR0aGlzLnRpbWUgPSBhY3Rpb24udGltZTtcblx0XHR0aGlzLnRpbWVTY2FsZSA9IGFjdGlvbi50aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH0sXG5cblx0aGFsdDogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLndhcnAoIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSwgMCwgZHVyYXRpb24gKTtcblxuXHR9LFxuXG5cdHdhcnA6IGZ1bmN0aW9uICggc3RhcnRUaW1lU2NhbGUsIGVuZFRpbWVTY2FsZSwgZHVyYXRpb24gKSB7XG5cblx0XHR2YXIgbWl4ZXIgPSB0aGlzLl9taXhlciwgbm93ID0gbWl4ZXIudGltZSxcblx0XHRcdGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQsXG5cblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdHZhciB0aW1lcyA9IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9ucyxcblx0XHRcdHZhbHVlcyA9IGludGVycG9sYW50LnNhbXBsZVZhbHVlcztcblxuXHRcdHRpbWVzWyAwIF0gPSBub3c7XG5cdFx0dGltZXNbIDEgXSA9IG5vdyArIGR1cmF0aW9uO1xuXG5cdFx0dmFsdWVzWyAwIF0gPSBzdGFydFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcblx0XHR2YWx1ZXNbIDEgXSA9IGVuZFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3RvcFdhcnBpbmc6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0aW1lU2NhbGVJbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O1xuXG5cdFx0aWYgKCB0aW1lU2NhbGVJbnRlcnBvbGFudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHRcdFx0dGhpcy5fbWl4ZXIuX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50KCB0aW1lU2NhbGVJbnRlcnBvbGFudCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyBPYmplY3QgQWNjZXNzb3JzXG5cblx0Z2V0TWl4ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlcjtcblxuXHR9LFxuXG5cdGdldENsaXA6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGlwO1xuXG5cdH0sXG5cblx0Z2V0Um9vdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2xvY2FsUm9vdCB8fCB0aGlzLl9taXhlci5fcm9vdDtcblxuXHR9LFxuXG5cdC8vIEludGVybmFcblxuXHRfdXBkYXRlOiBmdW5jdGlvbiAoIHRpbWUsIGRlbHRhVGltZSwgdGltZURpcmVjdGlvbiwgYWNjdUluZGV4ICkge1xuXG5cdFx0Ly8gY2FsbGVkIGJ5IHRoZSBtaXhlclxuXG5cdFx0aWYgKCAhIHRoaXMuZW5hYmxlZCApIHtcblxuXHRcdFx0Ly8gY2FsbCAuX3VwZGF0ZVdlaWdodCgpIHRvIHVwZGF0ZSAuX2VmZmVjdGl2ZVdlaWdodFxuXG5cdFx0XHR0aGlzLl91cGRhdGVXZWlnaHQoIHRpbWUgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHZhciBzdGFydFRpbWUgPSB0aGlzLl9zdGFydFRpbWU7XG5cblx0XHRpZiAoIHN0YXJ0VGltZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gY2hlY2sgZm9yIHNjaGVkdWxlZCBzdGFydCBvZiBhY3Rpb25cblxuXHRcdFx0dmFyIHRpbWVSdW5uaW5nID0gKCB0aW1lIC0gc3RhcnRUaW1lICkgKiB0aW1lRGlyZWN0aW9uO1xuXHRcdFx0aWYgKCB0aW1lUnVubmluZyA8IDAgfHwgdGltZURpcmVjdGlvbiA9PT0gMCApIHtcblxuXHRcdFx0XHRyZXR1cm47IC8vIHlldCB0byBjb21lIC8gZG9uJ3QgZGVjaWRlIHdoZW4gZGVsdGEgPSAwXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gc3RhcnRcblxuXHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDsgLy8gdW5zY2hlZHVsZVxuXHRcdFx0ZGVsdGFUaW1lID0gdGltZURpcmVjdGlvbiAqIHRpbWVSdW5uaW5nO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYXBwbHkgdGltZSBzY2FsZSBhbmQgYWR2YW5jZSB0aW1lXG5cblx0XHRkZWx0YVRpbWUgKj0gdGhpcy5fdXBkYXRlVGltZVNjYWxlKCB0aW1lICk7XG5cdFx0dmFyIGNsaXBUaW1lID0gdGhpcy5fdXBkYXRlVGltZSggZGVsdGFUaW1lICk7XG5cblx0XHQvLyBub3RlOiBfdXBkYXRlVGltZSBtYXkgZGlzYWJsZSB0aGUgYWN0aW9uIHJlc3VsdGluZyBpblxuXHRcdC8vIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgMFxuXG5cdFx0dmFyIHdlaWdodCA9IHRoaXMuX3VwZGF0ZVdlaWdodCggdGltZSApO1xuXG5cdFx0aWYgKCB3ZWlnaHQgPiAwICkge1xuXG5cdFx0XHR2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5faW50ZXJwb2xhbnRzO1xuXHRcdFx0dmFyIHByb3BlcnR5TWl4ZXJzID0gdGhpcy5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBtID0gaW50ZXJwb2xhbnRzLmxlbmd0aDsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRpbnRlcnBvbGFudHNbIGogXS5ldmFsdWF0ZSggY2xpcFRpbWUgKTtcblx0XHRcdFx0cHJvcGVydHlNaXhlcnNbIGogXS5hY2N1bXVsYXRlKCBhY2N1SW5kZXgsIHdlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfdXBkYXRlV2VpZ2h0OiBmdW5jdGlvbiAoIHRpbWUgKSB7XG5cblx0XHR2YXIgd2VpZ2h0ID0gMDtcblxuXHRcdGlmICggdGhpcy5lbmFibGVkICkge1xuXG5cdFx0XHR3ZWlnaHQgPSB0aGlzLndlaWdodDtcblx0XHRcdHZhciBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0XHRpZiAoIGludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHZhciBpbnRlcnBvbGFudFZhbHVlID0gaW50ZXJwb2xhbnQuZXZhbHVhdGUoIHRpbWUgKVsgMCBdO1xuXG5cdFx0XHRcdHdlaWdodCAqPSBpbnRlcnBvbGFudFZhbHVlO1xuXG5cdFx0XHRcdGlmICggdGltZSA+IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9uc1sgMSBdICkge1xuXG5cdFx0XHRcdFx0dGhpcy5zdG9wRmFkaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIGludGVycG9sYW50VmFsdWUgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGZhZGVkIG91dCwgZGlzYWJsZVxuXHRcdFx0XHRcdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLl9lZmZlY3RpdmVXZWlnaHQgPSB3ZWlnaHQ7XG5cdFx0cmV0dXJuIHdlaWdodDtcblxuXHR9LFxuXG5cdF91cGRhdGVUaW1lU2NhbGU6IGZ1bmN0aW9uICggdGltZSApIHtcblxuXHRcdHZhciB0aW1lU2NhbGUgPSAwO1xuXG5cdFx0aWYgKCAhIHRoaXMucGF1c2VkICkge1xuXG5cdFx0XHR0aW1lU2NhbGUgPSB0aGlzLnRpbWVTY2FsZTtcblxuXHRcdFx0dmFyIGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0dGltZVNjYWxlICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIHRpbWVTY2FsZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbW90aW9uIGhhcyBoYWx0ZWQsIHBhdXNlXG5cdFx0XHRcdFx0XHR0aGlzLnBhdXNlZCA9IHRydWU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyB3YXJwIGRvbmUgLSBhcHBseSBmaW5hbCB0aW1lIHNjYWxlXG5cdFx0XHRcdFx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHRyZXR1cm4gdGltZVNjYWxlO1xuXG5cdH0sXG5cblx0X3VwZGF0ZVRpbWU6IGZ1bmN0aW9uICggZGVsdGFUaW1lICkge1xuXG5cdFx0dmFyIHRpbWUgPSB0aGlzLnRpbWUgKyBkZWx0YVRpbWU7XG5cblx0XHRpZiAoIGRlbHRhVGltZSA9PT0gMCApIHJldHVybiB0aW1lO1xuXG5cdFx0dmFyIGR1cmF0aW9uID0gdGhpcy5fY2xpcC5kdXJhdGlvbixcblxuXHRcdFx0bG9vcCA9IHRoaXMubG9vcCxcblx0XHRcdGxvb3BDb3VudCA9IHRoaXMuX2xvb3BDb3VudDtcblxuXHRcdGlmICggbG9vcCA9PT0gTG9vcE9uY2UgKSB7XG5cblx0XHRcdGlmICggbG9vcENvdW50ID09PSAtIDEgKSB7XG5cblx0XHRcdFx0Ly8ganVzdCBzdGFydGVkXG5cblx0XHRcdFx0dGhpcy5fbG9vcENvdW50ID0gMDtcblx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggdHJ1ZSwgdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRoYW5kbGVfc3RvcDoge1xuXG5cdFx0XHRcdGlmICggdGltZSA+PSBkdXJhdGlvbiApIHtcblxuXHRcdFx0XHRcdHRpbWUgPSBkdXJhdGlvbjtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCB0aW1lIDwgMCApIHtcblxuXHRcdFx0XHRcdHRpbWUgPSAwO1xuXG5cdFx0XHRcdH0gZWxzZSBicmVhayBoYW5kbGVfc3RvcDtcblxuXHRcdFx0XHRpZiAoIHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgKSB0aGlzLnBhdXNlZCA9IHRydWU7XG5cdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdHR5cGU6ICdmaW5pc2hlZCcsIGFjdGlvbjogdGhpcyxcblx0XHRcdFx0XHRkaXJlY3Rpb246IGRlbHRhVGltZSA8IDAgPyAtIDEgOiAxXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHsgLy8gcmVwZXRpdGl2ZSBSZXBlYXQgb3IgUGluZ1BvbmdcblxuXHRcdFx0dmFyIHBpbmdQb25nID0gKCBsb29wID09PSBMb29wUGluZ1BvbmcgKTtcblxuXHRcdFx0aWYgKCBsb29wQ291bnQgPT09IC0gMSApIHtcblxuXHRcdFx0XHQvLyBqdXN0IHN0YXJ0ZWRcblxuXHRcdFx0XHRpZiAoIGRlbHRhVGltZSA+PSAwICkge1xuXG5cdFx0XHRcdFx0bG9vcENvdW50ID0gMDtcblxuXHRcdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIHRydWUsIHRoaXMucmVwZXRpdGlvbnMgPT09IDAsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHdoZW4gbG9vcGluZyBpbiByZXZlcnNlIGRpcmVjdGlvbiwgdGhlIGluaXRpYWxcblx0XHRcdFx0XHQvLyB0cmFuc2l0aW9uIHRocm91Z2ggemVybyBjb3VudHMgYXMgYSByZXBldGl0aW9uLFxuXHRcdFx0XHRcdC8vIHNvIGxlYXZlIGxvb3BDb3VudCBhdCAtMVxuXG5cdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggdGhpcy5yZXBldGl0aW9ucyA9PT0gMCwgdHJ1ZSwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0aW1lID49IGR1cmF0aW9uIHx8IHRpbWUgPCAwICkge1xuXG5cdFx0XHRcdC8vIHdyYXAgYXJvdW5kXG5cblx0XHRcdFx0dmFyIGxvb3BEZWx0YSA9IE1hdGguZmxvb3IoIHRpbWUgLyBkdXJhdGlvbiApOyAvLyBzaWduZWRcblx0XHRcdFx0dGltZSAtPSBkdXJhdGlvbiAqIGxvb3BEZWx0YTtcblxuXHRcdFx0XHRsb29wQ291bnQgKz0gTWF0aC5hYnMoIGxvb3BEZWx0YSApO1xuXG5cdFx0XHRcdHZhciBwZW5kaW5nID0gdGhpcy5yZXBldGl0aW9ucyAtIGxvb3BDb3VudDtcblxuXHRcdFx0XHRpZiAoIHBlbmRpbmcgPD0gMCApIHtcblxuXHRcdFx0XHRcdC8vIGhhdmUgdG8gc3RvcCAoc3dpdGNoIHN0YXRlLCBjbGFtcCB0aW1lLCBmaXJlIGV2ZW50KVxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmNsYW1wV2hlbkZpbmlzaGVkICkgdGhpcy5wYXVzZWQgPSB0cnVlO1xuXHRcdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0XHR0aW1lID0gZGVsdGFUaW1lID4gMCA/IGR1cmF0aW9uIDogMDtcblxuXHRcdFx0XHRcdHRoaXMuX21peGVyLmRpc3BhdGNoRXZlbnQoIHtcblx0XHRcdFx0XHRcdHR5cGU6ICdmaW5pc2hlZCcsIGFjdGlvbjogdGhpcyxcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogZGVsdGFUaW1lID4gMCA/IDEgOiAtIDFcblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGtlZXAgcnVubmluZ1xuXG5cdFx0XHRcdFx0aWYgKCBwZW5kaW5nID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHQvLyBlbnRlcmluZyB0aGUgbGFzdCByb3VuZFxuXG5cdFx0XHRcdFx0XHR2YXIgYXRTdGFydCA9IGRlbHRhVGltZSA8IDA7XG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBhdFN0YXJ0LCAhIGF0U3RhcnQsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBmYWxzZSwgZmFsc2UsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLl9sb29wQ291bnQgPSBsb29wQ291bnQ7XG5cblx0XHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnbG9vcCcsIGFjdGlvbjogdGhpcywgbG9vcERlbHRhOiBsb29wRGVsdGFcblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gaW52ZXJ0IHRpbWUgZm9yIHRoZSBcInBvbmcgcm91bmRcIlxuXG5cdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XG5cdFx0XHRcdHJldHVybiBkdXJhdGlvbiAtIHRpbWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMudGltZSA9IHRpbWU7XG5cdFx0cmV0dXJuIHRpbWU7XG5cblx0fSxcblxuXHRfc2V0RW5kaW5nczogZnVuY3Rpb24gKCBhdFN0YXJ0LCBhdEVuZCwgcGluZ1BvbmcgKSB7XG5cblx0XHR2YXIgc2V0dGluZ3MgPSB0aGlzLl9pbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdFx0aWYgKCBwaW5nUG9uZyApIHtcblxuXHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgXHQ9IFplcm9TbG9wZUVuZGluZztcblx0XHRcdHNldHRpbmdzLmVuZGluZ0VuZFx0XHQ9IFplcm9TbG9wZUVuZGluZztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGFzc3VtaW5nIGZvciBMb29wT25jZSBhdFN0YXJ0ID09IGF0RW5kID09IHRydWVcblxuXHRcdFx0aWYgKCBhdFN0YXJ0ICkge1xuXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gdGhpcy56ZXJvU2xvcGVBdFN0YXJ0ID8gWmVyb1Nsb3BlRW5kaW5nIDogWmVyb0N1cnZhdHVyZUVuZGluZztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdTdGFydCA9IFdyYXBBcm91bmRFbmRpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBhdEVuZCApIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgPSB0aGlzLnplcm9TbG9wZUF0RW5kID8gWmVyb1Nsb3BlRW5kaW5nIDogWmVyb0N1cnZhdHVyZUVuZGluZztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgXHQgPSBXcmFwQXJvdW5kRW5kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfc2NoZWR1bGVGYWRpbmc6IGZ1bmN0aW9uICggZHVyYXRpb24sIHdlaWdodE5vdywgd2VpZ2h0VGhlbiApIHtcblxuXHRcdHZhciBtaXhlciA9IHRoaXMuX21peGVyLCBub3cgPSBtaXhlci50aW1lLFxuXHRcdFx0aW50ZXJwb2xhbnQgPSB0aGlzLl93ZWlnaHRJbnRlcnBvbGFudDtcblxuXHRcdGlmICggaW50ZXJwb2xhbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdGludGVycG9sYW50ID0gbWl4ZXIuX2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKTtcblx0XHRcdHRoaXMuX3dlaWdodEludGVycG9sYW50ID0gaW50ZXJwb2xhbnQ7XG5cblx0XHR9XG5cblx0XHR2YXIgdGltZXMgPSBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnMsXG5cdFx0XHR2YWx1ZXMgPSBpbnRlcnBvbGFudC5zYW1wbGVWYWx1ZXM7XG5cblx0XHR0aW1lc1sgMCBdID0gbm93OyBcdFx0XHRcdHZhbHVlc1sgMCBdID0gd2VpZ2h0Tm93O1xuXHRcdHRpbWVzWyAxIF0gPSBub3cgKyBkdXJhdGlvbjtcdHZhbHVlc1sgMSBdID0gd2VpZ2h0VGhlbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBQbGF5ZXIgZm9yIEFuaW1hdGlvbkNsaXBzLlxuICpcbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gQW5pbWF0aW9uTWl4ZXIoIHJvb3QgKSB7XG5cblx0dGhpcy5fcm9vdCA9IHJvb3Q7XG5cdHRoaXMuX2luaXRNZW1vcnlNYW5hZ2VyKCk7XG5cdHRoaXMuX2FjY3VJbmRleCA9IDA7XG5cblx0dGhpcy50aW1lID0gMDtcblxuXHR0aGlzLnRpbWVTY2FsZSA9IDEuMDtcblxufVxuXG5BbmltYXRpb25NaXhlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQW5pbWF0aW9uTWl4ZXIsXG5cblx0X2JpbmRBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uLCBwcm90b3R5cGVBY3Rpb24gKSB7XG5cblx0XHR2YXIgcm9vdCA9IGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHR0cmFja3MgPSBhY3Rpb24uX2NsaXAudHJhY2tzLFxuXHRcdFx0blRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsXG5cdFx0XHRiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncyxcblx0XHRcdGludGVycG9sYW50cyA9IGFjdGlvbi5faW50ZXJwb2xhbnRzLFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQsXG5cdFx0XHRiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdzQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHRpZiAoIGJpbmRpbmdzQnlOYW1lID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJpbmRpbmdzQnlOYW1lID0ge307XG5cdFx0XHRiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSA9IGJpbmRpbmdzQnlOYW1lO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuVHJhY2tzOyArKyBpICkge1xuXG5cdFx0XHR2YXIgdHJhY2sgPSB0cmFja3NbIGkgXSxcblx0XHRcdFx0dHJhY2tOYW1lID0gdHJhY2submFtZSxcblx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzQnlOYW1lWyB0cmFja05hbWUgXTtcblxuXHRcdFx0aWYgKCBiaW5kaW5nICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0YmluZGluZ3NbIGkgXSA9IGJpbmRpbmc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCBiaW5kaW5nICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBleGlzdGluZyBiaW5kaW5nLCBtYWtlIHN1cmUgdGhlIGNhY2hlIGtub3dzXG5cblx0XHRcdFx0XHRpZiAoIGJpbmRpbmcuX2NhY2hlSW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdCsrIGJpbmRpbmcucmVmZXJlbmNlQ291bnQ7XG5cdFx0XHRcdFx0XHR0aGlzLl9hZGRJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgcGF0aCA9IHByb3RvdHlwZUFjdGlvbiAmJiBwcm90b3R5cGVBY3Rpb24uXG5cdFx0XHRcdFx0X3Byb3BlcnR5QmluZGluZ3NbIGkgXS5iaW5kaW5nLnBhcnNlZFBhdGg7XG5cblx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eU1peGVyKFxuXHRcdFx0XHRcdFByb3BlcnR5QmluZGluZy5jcmVhdGUoIHJvb3QsIHRyYWNrTmFtZSwgcGF0aCApLFxuXHRcdFx0XHRcdHRyYWNrLlZhbHVlVHlwZU5hbWUsIHRyYWNrLmdldFZhbHVlU2l6ZSgpICk7XG5cblx0XHRcdFx0KysgYmluZGluZy5yZWZlcmVuY2VDb3VudDtcblx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XG5cblx0XHRcdFx0YmluZGluZ3NbIGkgXSA9IGJpbmRpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0aW50ZXJwb2xhbnRzWyBpIF0ucmVzdWx0QnVmZmVyID0gYmluZGluZy5idWZmZXI7XG5cblx0XHR9XG5cblx0fSxcblxuXHRfYWN0aXZhdGVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0aWYgKCAhIHRoaXMuX2lzQWN0aXZlQWN0aW9uKCBhY3Rpb24gKSApIHtcblxuXHRcdFx0aWYgKCBhY3Rpb24uX2NhY2hlSW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gdGhpcyBhY3Rpb24gaGFzIGJlZW4gZm9yZ290dGVuIGJ5IHRoZSBjYWNoZSwgYnV0IHRoZSB1c2VyXG5cdFx0XHRcdC8vIGFwcGVhcnMgdG8gYmUgc3RpbGwgdXNpbmcgaXQgLT4gcmViaW5kXG5cblx0XHRcdFx0dmFyIHJvb3RVdWlkID0gKCBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290ICkudXVpZCxcblx0XHRcdFx0XHRjbGlwVXVpZCA9IGFjdGlvbi5fY2xpcC51dWlkLFxuXHRcdFx0XHRcdGFjdGlvbnNGb3JDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdFx0XHR0aGlzLl9iaW5kQWN0aW9uKCBhY3Rpb24sXG5cdFx0XHRcdFx0YWN0aW9uc0ZvckNsaXAgJiYgYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zWyAwIF0gKTtcblxuXHRcdFx0XHR0aGlzLl9hZGRJbmFjdGl2ZUFjdGlvbiggYWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgYmluZGluZ3MgPSBhY3Rpb24uX3Byb3BlcnR5QmluZGluZ3M7XG5cblx0XHRcdC8vIGluY3JlbWVudCByZWZlcmVuY2UgY291bnRzIC8gc29ydCBvdXQgc3RhdGVcblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR2YXIgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCBiaW5kaW5nLnVzZUNvdW50ICsrID09PSAwICkge1xuXG5cdFx0XHRcdFx0dGhpcy5fbGVuZEJpbmRpbmcoIGJpbmRpbmcgKTtcblx0XHRcdFx0XHRiaW5kaW5nLnNhdmVPcmlnaW5hbFN0YXRlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2xlbmRBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0X2RlYWN0aXZhdGVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkgKSB7XG5cblx0XHRcdHZhciBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0Ly8gZGVjcmVtZW50IHJlZmVyZW5jZSBjb3VudHMgLyBzb3J0IG91dCBzdGF0ZVxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0XHRpZiAoIC0tIGJpbmRpbmcudXNlQ291bnQgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRiaW5kaW5nLnJlc3RvcmVPcmlnaW5hbFN0YXRlKCk7XG5cdFx0XHRcdFx0dGhpcy5fdGFrZUJhY2tCaW5kaW5nKCBiaW5kaW5nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3Rha2VCYWNrQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VyXG5cblx0X2luaXRNZW1vcnlNYW5hZ2VyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLl9hY3Rpb25zID0gW107IC8vICduQWN0aXZlQWN0aW9ucycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xuXHRcdHRoaXMuX25BY3RpdmVBY3Rpb25zID0gMDtcblxuXHRcdHRoaXMuX2FjdGlvbnNCeUNsaXAgPSB7fTtcblx0XHQvLyBpbnNpZGU6XG5cdFx0Ly8ge1xuXHRcdC8vIFx0XHRrbm93bkFjdGlvbnM6IEFycmF5PCBBbmltYXRpb25BY3Rpb24gPlx0LSB1c2VkIGFzIHByb3RvdHlwZXNcblx0XHQvLyBcdFx0YWN0aW9uQnlSb290OiBBbmltYXRpb25BY3Rpb25cdFx0XHQtIGxvb2t1cFxuXHRcdC8vIH1cblxuXG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gJ25BY3RpdmVCaW5kaW5ncycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xuXHRcdHRoaXMuX25BY3RpdmVCaW5kaW5ncyA9IDA7XG5cblx0XHR0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUgPSB7fTsgLy8gaW5zaWRlOiBNYXA8IG5hbWUsIFByb3BlcnR5TWl4ZXIgPlxuXG5cblx0XHR0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzID0gW107IC8vIHNhbWUgZ2FtZSBhcyBhYm92ZVxuXHRcdHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzID0gMDtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR0aGlzLnN0YXRzID0ge1xuXG5cdFx0XHRhY3Rpb25zOiB7XG5cdFx0XHRcdGdldCB0b3RhbCgpIHtcblxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fYWN0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0IGluVXNlKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9uQWN0aXZlQWN0aW9ucztcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YmluZGluZ3M6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9iaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0IGluVXNlKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9uQWN0aXZlQmluZGluZ3M7XG5cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGNvbnRyb2xJbnRlcnBvbGFudHM6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9jb250cm9sSW50ZXJwb2xhbnRzLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzO1xuXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSxcblxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBmb3IgQW5pbWF0aW9uQWN0aW9uIG9iamVjdHNcblxuXHRfaXNBY3RpdmVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0dmFyIGluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4O1xuXHRcdHJldHVybiBpbmRleCAhPT0gbnVsbCAmJiBpbmRleCA8IHRoaXMuX25BY3RpdmVBY3Rpb25zO1xuXG5cdH0sXG5cblx0X2FkZEluYWN0aXZlQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkICkge1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGFjdGlvbnNGb3JDbGlwID0ge1xuXG5cdFx0XHRcdGtub3duQWN0aW9uczogWyBhY3Rpb24gXSxcblx0XHRcdFx0YWN0aW9uQnlSb290OiB7fVxuXG5cdFx0XHR9O1xuXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSAwO1xuXG5cdFx0XHRhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdID0gYWN0aW9uc0ZvckNsaXA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIga25vd25BY3Rpb25zID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xuXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBrbm93bkFjdGlvbnMubGVuZ3RoO1xuXHRcdFx0a25vd25BY3Rpb25zLnB1c2goIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gYWN0aW9ucy5sZW5ndGg7XG5cdFx0YWN0aW9ucy5wdXNoKCBhY3Rpb24gKTtcblxuXHRcdGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXSA9IGFjdGlvbjtcblxuXHR9LFxuXG5cdF9yZW1vdmVJbmFjdGl2ZUFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRsYXN0SW5hY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBhY3Rpb25zLmxlbmd0aCAtIDEgXSxcblx0XHRcdGNhY2hlSW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXg7XG5cblx0XHRsYXN0SW5hY3RpdmVBY3Rpb24uX2NhY2hlSW5kZXggPSBjYWNoZUluZGV4O1xuXHRcdGFjdGlvbnNbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjtcblx0XHRhY3Rpb25zLnBvcCgpO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gbnVsbDtcblxuXG5cdFx0dmFyIGNsaXBVdWlkID0gYWN0aW9uLl9jbGlwLnV1aWQsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCxcblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXSxcblx0XHRcdGtub3duQWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnMsXG5cblx0XHRcdGxhc3RLbm93bkFjdGlvbiA9XG5cdFx0XHRcdGtub3duQWN0aW9uc0ZvckNsaXBbIGtub3duQWN0aW9uc0ZvckNsaXAubGVuZ3RoIC0gMSBdLFxuXG5cdFx0XHRieUNsaXBDYWNoZUluZGV4ID0gYWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4O1xuXG5cdFx0bGFzdEtub3duQWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gYnlDbGlwQ2FjaGVJbmRleDtcblx0XHRrbm93bkFjdGlvbnNGb3JDbGlwWyBieUNsaXBDYWNoZUluZGV4IF0gPSBsYXN0S25vd25BY3Rpb247XG5cdFx0a25vd25BY3Rpb25zRm9yQ2xpcC5wb3AoKTtcblxuXHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7XG5cblxuXHRcdHZhciBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3QsXG5cdFx0XHRyb290VXVpZCA9ICggYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCApLnV1aWQ7XG5cblx0XHRkZWxldGUgYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0ZGVsZXRlIGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHR9LFxuXG5cdF9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0aWYgKCAtLSBiaW5kaW5nLnJlZmVyZW5jZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfbGVuZEFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHwgIGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyA+fCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyAgICAgICAgICAgICAgICAgcyAgICAgICAgYVxuXHRcdC8vICAgICAgICAgICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgICAgICAgICAgYSAgICAgICAgc1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0cHJldkluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyArKyxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdGFjdGlvbnNbIGxhc3RBY3RpdmVJbmRleCBdID0gYWN0aW9uO1xuXG5cdFx0Zmlyc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRhY3Rpb25zWyBwcmV2SW5kZXggXSA9IGZpcnN0SW5hY3RpdmVBY3Rpb247XG5cblx0fSxcblxuXHRfdGFrZUJhY2tBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0Ly8gWyAgYWN0aXZlIGFjdGlvbnMgIHwgaW5hY3RpdmUgYWN0aW9ucyBdXG5cdFx0Ly8gWyBhY3RpdmUgYWN0aW9ucyB8PCBpbmFjdGl2ZSBhY3Rpb25zICBdXG5cdFx0Ly8gICAgICAgIGEgICAgICAgIHNcblx0XHQvLyAgICAgICAgIDwtc3dhcC0+XG5cdFx0Ly8gICAgICAgIHMgICAgICAgIGFcblxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdHByZXZJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXG5cblx0XHRcdGxhc3RBY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IGZpcnN0SW5hY3RpdmVJbmRleDtcblx0XHRhY3Rpb25zWyBmaXJzdEluYWN0aXZlSW5kZXggXSA9IGFjdGlvbjtcblxuXHRcdGxhc3RBY3RpdmVBY3Rpb24uX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0YWN0aW9uc1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlQWN0aW9uO1xuXG5cdH0sXG5cblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIFByb3BlcnR5TWl4ZXIgb2JqZWN0c1xuXG5cdF9hZGRJbmFjdGl2ZUJpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZywgcm9vdFV1aWQsIHRyYWNrTmFtZSApIHtcblxuXHRcdHZhciBiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSxcblxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGlmICggYmluZGluZ0J5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0ge307XG5cdFx0XHRiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSA9IGJpbmRpbmdCeU5hbWU7XG5cblx0XHR9XG5cblx0XHRiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXSA9IGJpbmRpbmc7XG5cblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gYmluZGluZ3MubGVuZ3RoO1xuXHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmcgKTtcblxuXHR9LFxuXG5cdF9yZW1vdmVJbmFjdGl2ZUJpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZyApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJvcEJpbmRpbmcgPSBiaW5kaW5nLmJpbmRpbmcsXG5cdFx0XHRyb290VXVpZCA9IHByb3BCaW5kaW5nLnJvb3ROb2RlLnV1aWQsXG5cdFx0XHR0cmFja05hbWUgPSBwcm9wQmluZGluZy5wYXRoLFxuXHRcdFx0YmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0sXG5cblx0XHRcdGxhc3RJbmFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1sgYmluZGluZ3MubGVuZ3RoIC0gMSBdLFxuXHRcdFx0Y2FjaGVJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXg7XG5cblx0XHRsYXN0SW5hY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gY2FjaGVJbmRleDtcblx0XHRiaW5kaW5nc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQmluZGluZztcblx0XHRiaW5kaW5ncy5wb3AoKTtcblxuXHRcdGRlbGV0ZSBiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXTtcblxuXHRcdHJlbW92ZV9lbXB0eV9tYXA6IHtcblxuXHRcdFx0Zm9yICggdmFyIF8gaW4gYmluZGluZ0J5TmFtZSApIGJyZWFrIHJlbW92ZV9lbXB0eV9tYXA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXHRcdFx0ZGVsZXRlIGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0X2xlbmRCaW5kaW5nOiBmdW5jdGlvbiAoIGJpbmRpbmcgKSB7XG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdHByZXZJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXgsXG5cblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncyArKyxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1sgbGFzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdGJpbmRpbmdzWyBsYXN0QWN0aXZlSW5kZXggXSA9IGJpbmRpbmc7XG5cblx0XHRmaXJzdEluYWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRiaW5kaW5nc1sgcHJldkluZGV4IF0gPSBmaXJzdEluYWN0aXZlQmluZGluZztcblxuXHR9LFxuXG5cdF90YWtlQmFja0JpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZyApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJldkluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzLFxuXG5cdFx0XHRsYXN0QWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gYmluZGluZztcblxuXHRcdGxhc3RBY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGJpbmRpbmdzWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVCaW5kaW5nO1xuXG5cdH0sXG5cblxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBvZiBJbnRlcnBvbGFudHMgZm9yIHdlaWdodCBhbmQgdGltZSBzY2FsZVxuXG5cdF9sZW5kQ29udHJvbEludGVycG9sYW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5fY29udHJvbEludGVycG9sYW50cyxcblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzICsrLFxuXHRcdFx0aW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpbnRlcnBvbGFudCA9IG5ldyBMaW5lYXJJbnRlcnBvbGFudChcblx0XHRcdFx0bmV3IEZsb2F0MzJBcnJheSggMiApLCBuZXcgRmxvYXQzMkFycmF5KCAyICksXG5cdFx0XHRcdDEsIHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIgKTtcblxuXHRcdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdFx0aW50ZXJwb2xhbnRzWyBsYXN0QWN0aXZlSW5kZXggXSA9IGludGVycG9sYW50O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGludGVycG9sYW50O1xuXG5cdH0sXG5cblx0X3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50OiBmdW5jdGlvbiAoIGludGVycG9sYW50ICkge1xuXG5cdFx0dmFyIGludGVycG9sYW50cyA9IHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMsXG5cdFx0XHRwcmV2SW5kZXggPSBpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXgsXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzLFxuXG5cdFx0XHRsYXN0QWN0aXZlSW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbIGZpcnN0SW5hY3RpdmVJbmRleCBdO1xuXG5cdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xuXHRcdGludGVycG9sYW50c1sgZmlyc3RJbmFjdGl2ZUluZGV4IF0gPSBpbnRlcnBvbGFudDtcblxuXHRcdGxhc3RBY3RpdmVJbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0aW50ZXJwb2xhbnRzWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVJbnRlcnBvbGFudDtcblxuXHR9LFxuXG5cdF9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyOiBuZXcgRmxvYXQzMkFycmF5KCAxICksXG5cblx0Ly8gcmV0dXJuIGFuIGFjdGlvbiBmb3IgYSBjbGlwIG9wdGlvbmFsbHkgdXNpbmcgYSBjdXN0b20gcm9vdCB0YXJnZXRcblx0Ly8gb2JqZWN0ICh0aGlzIG1ldGhvZCBhbGxvY2F0ZXMgYSBsb3Qgb2YgZHluYW1pYyBtZW1vcnkgaW4gY2FzZSBhXG5cdC8vIHByZXZpb3VzbHkgdW5rbm93biBjbGlwL3Jvb3QgY29tYmluYXRpb24gaXMgc3BlY2lmaWVkKVxuXHRjbGlwQWN0aW9uOiBmdW5jdGlvbiAoIGNsaXAsIG9wdGlvbmFsUm9vdCApIHtcblxuXHRcdHZhciByb290ID0gb3B0aW9uYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHRyb290VXVpZCA9IHJvb3QudXVpZCxcblxuXHRcdFx0Y2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdEFuaW1hdGlvbkNsaXAuZmluZEJ5TmFtZSggcm9vdCwgY2xpcCApIDogY2xpcCxcblxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwT2JqZWN0ICE9PSBudWxsID8gY2xpcE9iamVjdC51dWlkIDogY2xpcCxcblxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLFxuXHRcdFx0cHJvdG90eXBlQWN0aW9uID0gbnVsbDtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGV4aXN0aW5nQWN0aW9uID1cblx0XHRcdFx0XHRhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHRcdGlmICggZXhpc3RpbmdBY3Rpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZXhpc3RpbmdBY3Rpb247XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gd2Uga25vdyB0aGUgY2xpcCwgc28gd2UgZG9uJ3QgaGF2ZSB0byBwYXJzZSBhbGxcblx0XHRcdC8vIHRoZSBiaW5kaW5ncyBhZ2FpbiBidXQgY2FuIGp1c3QgY29weVxuXHRcdFx0cHJvdG90eXBlQWN0aW9uID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zWyAwIF07XG5cblx0XHRcdC8vIGFsc28sIHRha2UgdGhlIGNsaXAgZnJvbSB0aGUgcHJvdG90eXBlIGFjdGlvblxuXHRcdFx0aWYgKCBjbGlwT2JqZWN0ID09PSBudWxsIClcblx0XHRcdFx0Y2xpcE9iamVjdCA9IHByb3RvdHlwZUFjdGlvbi5fY2xpcDtcblxuXHRcdH1cblxuXHRcdC8vIGNsaXAgbXVzdCBiZSBrbm93biB3aGVuIHNwZWNpZmllZCB2aWEgc3RyaW5nXG5cdFx0aWYgKCBjbGlwT2JqZWN0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0XHQvLyBhbGxvY2F0ZSBhbGwgcmVzb3VyY2VzIHJlcXVpcmVkIHRvIHJ1biBpdFxuXHRcdHZhciBuZXdBY3Rpb24gPSBuZXcgQW5pbWF0aW9uQWN0aW9uKCB0aGlzLCBjbGlwT2JqZWN0LCBvcHRpb25hbFJvb3QgKTtcblxuXHRcdHRoaXMuX2JpbmRBY3Rpb24oIG5ld0FjdGlvbiwgcHJvdG90eXBlQWN0aW9uICk7XG5cblx0XHQvLyBhbmQgbWFrZSB0aGUgYWN0aW9uIGtub3duIHRvIHRoZSBtZW1vcnkgbWFuYWdlclxuXHRcdHRoaXMuX2FkZEluYWN0aXZlQWN0aW9uKCBuZXdBY3Rpb24sIGNsaXBVdWlkLCByb290VXVpZCApO1xuXG5cdFx0cmV0dXJuIG5ld0FjdGlvbjtcblxuXHR9LFxuXG5cdC8vIGdldCBhbiBleGlzdGluZyBhY3Rpb25cblx0ZXhpc3RpbmdBY3Rpb246IGZ1bmN0aW9uICggY2xpcCwgb3B0aW9uYWxSb290ICkge1xuXG5cdFx0dmFyIHJvb3QgPSBvcHRpb25hbFJvb3QgfHwgdGhpcy5fcm9vdCxcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkLFxuXG5cdFx0XHRjbGlwT2JqZWN0ID0gdHlwZW9mIGNsaXAgPT09ICdzdHJpbmcnID9cblx0XHRcdFx0QW5pbWF0aW9uQ2xpcC5maW5kQnlOYW1lKCByb290LCBjbGlwICkgOiBjbGlwLFxuXG5cdFx0XHRjbGlwVXVpZCA9IGNsaXBPYmplY3QgPyBjbGlwT2JqZWN0LnV1aWQgOiBjbGlwLFxuXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJldHVybiBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF0gfHwgbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH0sXG5cblx0Ly8gZGVhY3RpdmF0ZXMgYWxsIHByZXZpb3VzbHkgc2NoZWR1bGVkIGFjdGlvbnNcblx0c3RvcEFsbEFjdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0bkFjdGlvbnMgPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSB0aGlzLl9uQWN0aXZlQmluZGluZ3M7XG5cblx0XHR0aGlzLl9uQWN0aXZlQWN0aW9ucyA9IDA7XG5cdFx0dGhpcy5fbkFjdGl2ZUJpbmRpbmdzID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbkFjdGlvbnM7ICsrIGkgKSB7XG5cblx0XHRcdGFjdGlvbnNbIGkgXS5yZXNldCgpO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuQmluZGluZ3M7ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0udXNlQ291bnQgPSAwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyBhZHZhbmNlIHRoZSB0aW1lIGFuZCB1cGRhdGUgYXBwbHkgdGhlIGFuaW1hdGlvblxuXHR1cGRhdGU6IGZ1bmN0aW9uICggZGVsdGFUaW1lICkge1xuXG5cdFx0ZGVsdGFUaW1lICo9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0bkFjdGlvbnMgPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyxcblxuXHRcdFx0dGltZSA9IHRoaXMudGltZSArPSBkZWx0YVRpbWUsXG5cdFx0XHR0aW1lRGlyZWN0aW9uID0gTWF0aC5zaWduKCBkZWx0YVRpbWUgKSxcblxuXHRcdFx0YWNjdUluZGV4ID0gdGhpcy5fYWNjdUluZGV4IF49IDE7XG5cblx0XHQvLyBydW4gYWN0aXZlIGFjdGlvbnNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbkFjdGlvbnM7ICsrIGkgKSB7XG5cblx0XHRcdHZhciBhY3Rpb24gPSBhY3Rpb25zWyBpIF07XG5cblx0XHRcdGFjdGlvbi5fdXBkYXRlKCB0aW1lLCBkZWx0YVRpbWUsIHRpbWVEaXJlY3Rpb24sIGFjY3VJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbkJpbmRpbmdzOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLmFwcGx5KCBhY2N1SW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gcmV0dXJuIHRoaXMgbWl4ZXIncyByb290IHRhcmdldCBvYmplY3Rcblx0Z2V0Um9vdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3Jvb3Q7XG5cblx0fSxcblxuXHQvLyBmcmVlIGFsbCByZXNvdXJjZXMgc3BlY2lmaWMgdG8gYSBwYXJ0aWN1bGFyIGNsaXBcblx0dW5jYWNoZUNsaXA6IGZ1bmN0aW9uICggY2xpcCApIHtcblxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGNsaXBVdWlkID0gY2xpcC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG5vdGU6IGp1c3QgY2FsbGluZyBfcmVtb3ZlSW5hY3RpdmVBY3Rpb24gd291bGQgbWVzcyB1cCB0aGVcblx0XHRcdC8vIGl0ZXJhdGlvbiBzdGF0ZSBhbmQgYWxzbyByZXF1aXJlIHVwZGF0aW5nIHRoZSBzdGF0ZSB3ZSBjYW5cblx0XHRcdC8vIGp1c3QgdGhyb3cgYXdheVxuXG5cdFx0XHR2YXIgYWN0aW9uc1RvUmVtb3ZlID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBhY3Rpb25zVG9SZW1vdmUubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdHZhciBhY3Rpb24gPSBhY3Rpb25zVG9SZW1vdmVbIGkgXTtcblxuXHRcdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdFx0XHR2YXIgY2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCxcblx0XHRcdFx0XHRsYXN0SW5hY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBhY3Rpb25zLmxlbmd0aCAtIDEgXTtcblxuXHRcdFx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsO1xuXHRcdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xuXG5cdFx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0XHRcdGFjdGlvbnNbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjtcblx0XHRcdFx0YWN0aW9ucy5wb3AoKTtcblxuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIGZyZWUgYWxsIHJlc291cmNlcyBzcGVjaWZpYyB0byBhIHBhcnRpY3VsYXIgcm9vdCB0YXJnZXQgb2JqZWN0XG5cdHVuY2FjaGVSb290OiBmdW5jdGlvbiAoIHJvb3QgKSB7XG5cblx0XHR2YXIgcm9vdFV1aWQgPSByb290LnV1aWQsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcDtcblxuXHRcdGZvciAoIHZhciBjbGlwVXVpZCBpbiBhY3Rpb25zQnlDbGlwICkge1xuXG5cdFx0XHR2YXIgYWN0aW9uQnlSb290ID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXS5hY3Rpb25CeVJvb3QsXG5cdFx0XHRcdGFjdGlvbiA9IGFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdFx0aWYgKCBhY3Rpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgYmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF07XG5cblx0XHRpZiAoIGJpbmRpbmdCeU5hbWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIHRyYWNrTmFtZSBpbiBiaW5kaW5nQnlOYW1lICkge1xuXG5cdFx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cdFx0XHRcdGJpbmRpbmcucmVzdG9yZU9yaWdpbmFsU3RhdGUoKTtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIHJlbW92ZSBhIHRhcmdldGVkIGNsaXAgZnJvbSB0aGUgY2FjaGVcblx0dW5jYWNoZUFjdGlvbjogZnVuY3Rpb24gKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7XG5cblx0XHR2YXIgYWN0aW9uID0gdGhpcy5leGlzdGluZ0FjdGlvbiggY2xpcCwgb3B0aW9uYWxSb290ICk7XG5cblx0XHRpZiAoIGFjdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fZGVhY3RpdmF0ZUFjdGlvbiggYWN0aW9uICk7XG5cdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBVbmlmb3JtKCB2YWx1ZSApIHtcblxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Vbmlmb3JtOiBUeXBlIHBhcmFtZXRlciBpcyBubyBsb25nZXIgbmVlZGVkLicgKTtcblx0XHR2YWx1ZSA9IGFyZ3VtZW50c1sgMSBdO1xuXG5cdH1cblxuXHR0aGlzLnZhbHVlID0gdmFsdWU7XG5cbn1cblxuVW5pZm9ybS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyBVbmlmb3JtKCB0aGlzLnZhbHVlLmNsb25lID09PSB1bmRlZmluZWQgPyB0aGlzLnZhbHVlIDogdGhpcy52YWx1ZS5jbG9uZSgpICk7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKi9cblxuZnVuY3Rpb24gSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkoKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSc7XG5cdHRoaXMubWF4SW5zdGFuY2VkQ291bnQgPSB1bmRlZmluZWQ7XG5cbn1cblxuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnksXG5cblx0aXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeTogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tYXhJbnN0YW5jZWRDb3VudCA9IHNvdXJjZS5tYXhJbnN0YW5jZWRDb3VudDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqL1xuXG5mdW5jdGlvbiBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaW50ZXJsZWF2ZWRCdWZmZXIsIGl0ZW1TaXplLCBvZmZzZXQsIG5vcm1hbGl6ZWQgKSB7XG5cblx0dGhpcy5kYXRhID0gaW50ZXJsZWF2ZWRCdWZmZXI7XG5cdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0dGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG5cblx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZCA9PT0gdHJ1ZTtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7XG5cblx0Y291bnQ6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5kYXRhLmNvdW50O1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0YXJyYXk6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5O1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsIHtcblxuXHRpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlOiB0cnVlLFxuXG5cdHNldFg6IGZ1bmN0aW9uICggaW5kZXgsIHggKSB7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0IF0gPSB4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbiAoIGluZGV4LCB5ICkge1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDEgXSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFo6IGZ1bmN0aW9uICggaW5kZXgsIHogKSB7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMiBdID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0VzogZnVuY3Rpb24gKCBpbmRleCwgdyApIHtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRYOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgXTtcblxuXHR9LFxuXG5cdGdldFk6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDEgXTtcblxuXHR9LFxuXG5cdGdldFo6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDIgXTtcblxuXHR9LFxuXG5cdGdldFc6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDMgXTtcblxuXHR9LFxuXG5cdHNldFhZOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5ICkge1xuXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYWVo6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHksIHogKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFhZWlc6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHksIHosIHcgKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDMgXSA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqL1xuXG5mdW5jdGlvbiBJbnRlcmxlYXZlZEJ1ZmZlciggYXJyYXksIHN0cmlkZSApIHtcblxuXHR0aGlzLmFycmF5ID0gYXJyYXk7XG5cdHRoaXMuc3RyaWRlID0gc3RyaWRlO1xuXHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIHN0cmlkZSA6IDA7XG5cblx0dGhpcy5keW5hbWljID0gZmFsc2U7XG5cdHRoaXMudXBkYXRlUmFuZ2UgPSB7IG9mZnNldDogMCwgY291bnQ6IC0gMSB9O1xuXG5cdHRoaXMudmVyc2lvbiA9IDA7XG5cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUsICduZWVkc1VwZGF0ZScsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUsIHtcblxuXHRpc0ludGVybGVhdmVkQnVmZmVyOiB0cnVlLFxuXG5cdG9uVXBsb2FkQ2FsbGJhY2s6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdHNldEFycmF5OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBhcnJheSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiBhcnJheSBzaG91bGQgYmUgYSBUeXBlZCBBcnJheS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIHRoaXMuc3RyaWRlIDogMDtcblx0XHR0aGlzLmFycmF5ID0gYXJyYXk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldER5bmFtaWM6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmR5bmFtaWMgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmFycmF5ID0gbmV3IHNvdXJjZS5hcnJheS5jb25zdHJ1Y3Rvciggc291cmNlLmFycmF5ICk7XG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblx0XHR0aGlzLnN0cmlkZSA9IHNvdXJjZS5zdHJpZGU7XG5cdFx0dGhpcy5keW5hbWljID0gc291cmNlLmR5bmFtaWM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlBdDogZnVuY3Rpb24gKCBpbmRleDEsIGF0dHJpYnV0ZSwgaW5kZXgyICkge1xuXG5cdFx0aW5kZXgxICo9IHRoaXMuc3RyaWRlO1xuXHRcdGluZGV4MiAqPSBhdHRyaWJ1dGUuc3RyaWRlO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5zdHJpZGU7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBhdHRyaWJ1dGUuYXJyYXlbIGluZGV4MiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlLCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMuYXJyYXkuc2V0KCB2YWx1ZSwgb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRvblVwbG9hZDogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMub25VcGxvYWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKi9cblxuZnVuY3Rpb24gSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIoIGFycmF5LCBzdHJpZGUsIG1lc2hQZXJBdHRyaWJ1dGUgKSB7XG5cblx0SW50ZXJsZWF2ZWRCdWZmZXIuY2FsbCggdGhpcywgYXJyYXksIHN0cmlkZSApO1xuXG5cdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGUgfHwgMTtcblxufVxuXG5JbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlcixcblxuXHRpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0SW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBzb3VyY2UubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xuICovXG5cbmZ1bmN0aW9uIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBtZXNoUGVyQXR0cmlidXRlICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBhcnJheSwgaXRlbVNpemUgKTtcblxuXHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBtZXNoUGVyQXR0cmlidXRlIHx8IDE7XG5cbn1cblxuSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUsXG5cblx0aXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBzb3VyY2UubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBzdGVwaG9taSAvIGh0dHA6Ly9zdGVwaGFuZWdpbmllci5jb20vXG4gKi9cblxuZnVuY3Rpb24gUmF5Y2FzdGVyKCBvcmlnaW4sIGRpcmVjdGlvbiwgbmVhciwgZmFyICkge1xuXG5cdHRoaXMucmF5ID0gbmV3IFJheSggb3JpZ2luLCBkaXJlY3Rpb24gKTtcblx0Ly8gZGlyZWN0aW9uIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZCAoZm9yIGFjY3VyYXRlIGRpc3RhbmNlIGNhbGN1bGF0aW9ucylcblxuXHR0aGlzLm5lYXIgPSBuZWFyIHx8IDA7XG5cdHRoaXMuZmFyID0gZmFyIHx8IEluZmluaXR5O1xuXG5cdHRoaXMucGFyYW1zID0ge1xuXHRcdE1lc2g6IHt9LFxuXHRcdExpbmU6IHt9LFxuXHRcdExPRDoge30sXG5cdFx0UG9pbnRzOiB7IHRocmVzaG9sZDogMSB9LFxuXHRcdFNwcml0ZToge31cblx0fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcy5wYXJhbXMsIHtcblx0XHRQb2ludENsb3VkOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXljYXN0ZXI6IHBhcmFtcy5Qb2ludENsb3VkIGhhcyBiZWVuIHJlbmFtZWQgdG8gcGFyYW1zLlBvaW50cy4nICk7XG5cdFx0XHRcdHJldHVybiB0aGlzLlBvaW50cztcblxuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xuXG59XG5cbmZ1bmN0aW9uIGFzY1NvcnQoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlO1xuXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdE9iamVjdCggb2JqZWN0LCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApIHtcblxuXHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRvYmplY3QucmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICk7XG5cblx0aWYgKCByZWN1cnNpdmUgPT09IHRydWUgKSB7XG5cblx0XHR2YXIgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpbnRlcnNlY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdHJ1ZSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5PYmplY3QuYXNzaWduKCBSYXljYXN0ZXIucHJvdG90eXBlLCB7XG5cblx0bGluZVByZWNpc2lvbjogMSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggb3JpZ2luLCBkaXJlY3Rpb24gKSB7XG5cblx0XHQvLyBkaXJlY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkIChmb3IgYWNjdXJhdGUgZGlzdGFuY2UgY2FsY3VsYXRpb25zKVxuXG5cdFx0dGhpcy5yYXkuc2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNhbWVyYTogZnVuY3Rpb24gKCBjb29yZHMsIGNhbWVyYSApIHtcblxuXHRcdGlmICggKCBjYW1lcmEgJiYgY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgKSApIHtcblxuXHRcdFx0dGhpcy5yYXkub3JpZ2luLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLnJheS5kaXJlY3Rpb24uc2V0KCBjb29yZHMueCwgY29vcmRzLnksIDAuNSApLnVucHJvamVjdCggY2FtZXJhICkuc3ViKCB0aGlzLnJheS5vcmlnaW4gKS5ub3JtYWxpemUoKTtcblxuXHRcdH0gZWxzZSBpZiAoICggY2FtZXJhICYmIGNhbWVyYS5pc09ydGhvZ3JhcGhpY0NhbWVyYSApICkge1xuXG5cdFx0XHR0aGlzLnJheS5vcmlnaW4uc2V0KCBjb29yZHMueCwgY29vcmRzLnksICggY2FtZXJhLm5lYXIgKyBjYW1lcmEuZmFyICkgLyAoIGNhbWVyYS5uZWFyIC0gY2FtZXJhLmZhciApICkudW5wcm9qZWN0KCBjYW1lcmEgKTsgLy8gc2V0IG9yaWdpbiBpbiBwbGFuZSBvZiBjYW1lcmFcblx0XHRcdHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUmF5Y2FzdGVyOiBVbnN1cHBvcnRlZCBjYW1lcmEgdHlwZS4nICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRpbnRlcnNlY3RPYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0LCByZWN1cnNpdmUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0dmFyIGludGVyc2VjdHMgPSBvcHRpb25hbFRhcmdldCB8fCBbXTtcblxuXHRcdGludGVyc2VjdE9iamVjdCggb2JqZWN0LCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTtcblxuXHRcdGludGVyc2VjdHMuc29ydCggYXNjU29ydCApO1xuXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RPYmplY3RzOiBmdW5jdGlvbiAoIG9iamVjdHMsIHJlY3Vyc2l2ZSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHR2YXIgaW50ZXJzZWN0cyA9IG9wdGlvbmFsVGFyZ2V0IHx8IFtdO1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmplY3RzICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0czogb2JqZWN0cyBpcyBub3QgYW4gQXJyYXkuJyApO1xuXHRcdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBvYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGludGVyc2VjdE9iamVjdCggb2JqZWN0c1sgaSBdLCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTtcblxuXHRcdH1cblxuXHRcdGludGVyc2VjdHMuc29ydCggYXNjU29ydCApO1xuXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBDbG9jayggYXV0b1N0YXJ0ICkge1xuXG5cdHRoaXMuYXV0b1N0YXJ0ID0gKCBhdXRvU3RhcnQgIT09IHVuZGVmaW5lZCApID8gYXV0b1N0YXJ0IDogdHJ1ZTtcblxuXHR0aGlzLnN0YXJ0VGltZSA9IDA7XG5cdHRoaXMub2xkVGltZSA9IDA7XG5cdHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xuXG5cdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENsb2NrLnByb3RvdHlwZSwge1xuXG5cdHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnN0YXJ0VGltZSA9ICggdHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJyA/IERhdGUgOiBwZXJmb3JtYW5jZSApLm5vdygpOyAvLyBzZWUgIzEwNzMyXG5cblx0XHR0aGlzLm9sZFRpbWUgPSB0aGlzLnN0YXJ0VGltZTtcblx0XHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcblx0XHR0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuXG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5nZXRFbGFwc2VkVGltZSgpO1xuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXHRcdHRoaXMuYXV0b1N0YXJ0ID0gZmFsc2U7XG5cblx0fSxcblxuXHRnZXRFbGFwc2VkVGltZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5nZXREZWx0YSgpO1xuXHRcdHJldHVybiB0aGlzLmVsYXBzZWRUaW1lO1xuXG5cdH0sXG5cblx0Z2V0RGVsdGE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkaWZmID0gMDtcblxuXHRcdGlmICggdGhpcy5hdXRvU3RhcnQgJiYgISB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdHRoaXMuc3RhcnQoKTtcblx0XHRcdHJldHVybiAwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdHZhciBuZXdUaW1lID0gKCB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICd1bmRlZmluZWQnID8gRGF0ZSA6IHBlcmZvcm1hbmNlICkubm93KCk7XG5cblx0XHRcdGRpZmYgPSAoIG5ld1RpbWUgLSB0aGlzLm9sZFRpbWUgKSAvIDEwMDA7XG5cdFx0XHR0aGlzLm9sZFRpbWUgPSBuZXdUaW1lO1xuXG5cdFx0XHR0aGlzLmVsYXBzZWRUaW1lICs9IGRpZmY7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGlmZjtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBSZWY6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NwaGVyaWNhbF9jb29yZGluYXRlX3N5c3RlbVxuICpcbiAqIFRoZSBwb2xlcyAocGhpKSBhcmUgYXQgdGhlIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB5IGF4aXMuXG4gKiBUaGUgZXF1YXRvciBzdGFydHMgYXQgcG9zaXRpdmUgei5cbiAqL1xuXG5mdW5jdGlvbiBTcGhlcmljYWwoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcblxuXHR0aGlzLnJhZGl1cyA9ICggcmFkaXVzICE9PSB1bmRlZmluZWQgKSA/IHJhZGl1cyA6IDEuMDtcblx0dGhpcy5waGkgPSAoIHBoaSAhPT0gdW5kZWZpbmVkICkgPyBwaGkgOiAwOyAvLyB1cCAvIGRvd24gdG93YXJkcyB0b3AgYW5kIGJvdHRvbSBwb2xlXG5cdHRoaXMudGhldGEgPSAoIHRoZXRhICE9PSB1bmRlZmluZWQgKSA/IHRoZXRhIDogMDsgLy8gYXJvdW5kIHRoZSBlcXVhdG9yIG9mIHRoZSBzcGhlcmVcblxuXHRyZXR1cm4gdGhpcztcblxufVxuXG5PYmplY3QuYXNzaWduKCBTcGhlcmljYWwucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdHRoaXMucGhpID0gcGhpO1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggb3RoZXIgKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IG90aGVyLnJhZGl1cztcblx0XHR0aGlzLnBoaSA9IG90aGVyLnBoaTtcblx0XHR0aGlzLnRoZXRhID0gb3RoZXIudGhldGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIHJlc3RyaWN0IHBoaSB0byBiZSBiZXR3ZWUgRVBTIGFuZCBQSS1FUFNcblx0bWFrZVNhZmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBFUFMgPSAwLjAwMDAwMTtcblx0XHR0aGlzLnBoaSA9IE1hdGgubWF4KCBFUFMsIE1hdGgubWluKCBNYXRoLlBJIC0gRVBTLCB0aGlzLnBoaSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21WZWN0b3IzOiBmdW5jdGlvbiAoIHZlYzMgKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IHZlYzMubGVuZ3RoKCk7XG5cblx0XHRpZiAoIHRoaXMucmFkaXVzID09PSAwICkge1xuXG5cdFx0XHR0aGlzLnRoZXRhID0gMDtcblx0XHRcdHRoaXMucGhpID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMudGhldGEgPSBNYXRoLmF0YW4yKCB2ZWMzLngsIHZlYzMueiApOyAvLyBlcXVhdG9yIGFuZ2xlIGFyb3VuZCB5LXVwIGF4aXNcblx0XHRcdHRoaXMucGhpID0gTWF0aC5hY29zKCBfTWF0aC5jbGFtcCggdmVjMy55IC8gdGhpcy5yYWRpdXMsIC0gMSwgMSApICk7IC8vIHBvbGFyIGFuZ2xlXG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICpcbiAqIFJlZjogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3lsaW5kcmljYWxfY29vcmRpbmF0ZV9zeXN0ZW1cbiAqXG4gKi9cblxuZnVuY3Rpb24gQ3lsaW5kcmljYWwoIHJhZGl1cywgdGhldGEsIHkgKSB7XG5cblx0dGhpcy5yYWRpdXMgPSAoIHJhZGl1cyAhPT0gdW5kZWZpbmVkICkgPyByYWRpdXMgOiAxLjA7IC8vIGRpc3RhbmNlIGZyb20gdGhlIG9yaWdpbiB0byBhIHBvaW50IGluIHRoZSB4LXogcGxhbmVcblx0dGhpcy50aGV0YSA9ICggdGhldGEgIT09IHVuZGVmaW5lZCApID8gdGhldGEgOiAwOyAvLyBjb3VudGVyY2xvY2t3aXNlIGFuZ2xlIGluIHRoZSB4LXogcGxhbmUgbWVhc3VyZWQgaW4gcmFkaWFucyBmcm9tIHRoZSBwb3NpdGl2ZSB6LWF4aXNcblx0dGhpcy55ID0gKCB5ICE9PSB1bmRlZmluZWQgKSA/IHkgOiAwOyAvLyBoZWlnaHQgYWJvdmUgdGhlIHgteiBwbGFuZVxuXG5cdHJldHVybiB0aGlzO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEN5bGluZHJpY2FsLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCByYWRpdXMsIHRoZXRhLCB5ICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhO1xuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIG90aGVyICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBvdGhlci5yYWRpdXM7XG5cdFx0dGhpcy50aGV0YSA9IG90aGVyLnRoZXRhO1xuXHRcdHRoaXMueSA9IG90aGVyLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21WZWN0b3IzOiBmdW5jdGlvbiAoIHZlYzMgKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggdmVjMy54ICogdmVjMy54ICsgdmVjMy56ICogdmVjMy56ICk7XG5cdFx0dGhpcy50aGV0YSA9IE1hdGguYXRhbjIoIHZlYzMueCwgdmVjMy56ICk7XG5cdFx0dGhpcy55ID0gdmVjMy55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbmZ1bmN0aW9uIEJveDIoIG1pbiwgbWF4ICkge1xuXG5cdHRoaXMubWluID0gKCBtaW4gIT09IHVuZGVmaW5lZCApID8gbWluIDogbmV3IFZlY3RvcjIoICsgSW5maW5pdHksICsgSW5maW5pdHkgKTtcblx0dGhpcy5tYXggPSAoIG1heCAhPT0gdW5kZWZpbmVkICkgPyBtYXggOiBuZXcgVmVjdG9yMiggLSBJbmZpbml0eSwgLSBJbmZpbml0eSApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEJveDIucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNlbnRlckFuZFNpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2V0RnJvbUNlbnRlckFuZFNpemUoIGNlbnRlciwgc2l6ZSApIHtcblxuXHRcdFx0dmFyIGhhbGZTaXplID0gdjEuY29weSggc2l6ZSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblx0XHRcdHRoaXMubWluLmNvcHkoIGNlbnRlciApLnN1YiggaGFsZlNpemUgKTtcblx0XHRcdHRoaXMubWF4LmNvcHkoIGNlbnRlciApLmFkZCggaGFsZlNpemUgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5jb3B5KCBib3gubWluICk7XG5cdFx0dGhpcy5tYXguY29weSggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlRW1wdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gKyBJbmZpbml0eTtcblx0XHR0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IC0gSW5maW5pdHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGlzRW1wdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRoaXMgaXMgYSBtb3JlIHJvYnVzdCBjaGVjayBmb3IgZW1wdHkgdGhhbiAoIHZvbHVtZSA8PSAwICkgYmVjYXVzZSB2b2x1bWUgY2FuIGdldCBwb3NpdGl2ZSB3aXRoIHR3byBuZWdhdGl2ZSBheGVzXG5cblx0XHRyZXR1cm4gKCB0aGlzLm1heC54IDwgdGhpcy5taW4ueCApIHx8ICggdGhpcy5tYXgueSA8IHRoaXMubWluLnkgKTtcblxuXHR9LFxuXG5cdGdldENlbnRlcjogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuZ2V0Q2VudGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwICkgOiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5taW4sIHRoaXMubWF4ICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH0sXG5cblx0Z2V0U2l6ZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuZ2V0U2l6ZSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCApIDogdGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMubWF4LCB0aGlzLm1pbiApO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHRoaXMubWluLm1pbiggcG9pbnQgKTtcblx0XHR0aGlzLm1heC5tYXgoIHBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGV4cGFuZEJ5VmVjdG9yOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdHRoaXMubWluLnN1YiggdmVjdG9yICk7XG5cdFx0dGhpcy5tYXguYWRkKCB2ZWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXhwYW5kQnlTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0dGhpcy5taW4uYWRkU2NhbGFyKCAtIHNjYWxhciApO1xuXHRcdHRoaXMubWF4LmFkZFNjYWxhciggc2NhbGFyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gcG9pbnQueCA8IHRoaXMubWluLnggfHwgcG9pbnQueCA+IHRoaXMubWF4LnggfHxcblx0XHRcdHBvaW50LnkgPCB0aGlzLm1pbi55IHx8IHBvaW50LnkgPiB0aGlzLm1heC55ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH0sXG5cblx0Y29udGFpbnNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWluLnggPD0gYm94Lm1pbi54ICYmIGJveC5tYXgueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueTtcblxuXHR9LFxuXG5cdGdldFBhcmFtZXRlcjogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0Ly8gVGhpcyBjYW4gcG90ZW50aWFsbHkgaGF2ZSBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBib3hcblx0XHQvLyBoYXMgYSBzaXplIGRpbWVuc2lvbiBvZiAwLlxuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmdldFBhcmFtZXRlcigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoXG5cdFx0XHQoIHBvaW50LnggLSB0aGlzLm1pbi54ICkgLyAoIHRoaXMubWF4LnggLSB0aGlzLm1pbi54ICksXG5cdFx0XHQoIHBvaW50LnkgLSB0aGlzLm1pbi55ICkgLyAoIHRoaXMubWF4LnkgLSB0aGlzLm1pbi55IClcblx0XHQpO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHQvLyB1c2luZyA0IHNwbGl0dGluZyBwbGFuZXMgdG8gcnVsZSBvdXQgaW50ZXJzZWN0aW9uc1xuXG5cdFx0cmV0dXJuIGJveC5tYXgueCA8IHRoaXMubWluLnggfHwgYm94Lm1pbi54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0Ym94Lm1heC55IDwgdGhpcy5taW4ueSB8fCBib3gubWluLnkgPiB0aGlzLm1heC55ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH0sXG5cblx0Y2xhbXBQb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmNsYW1wUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2MSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdFx0dmFyIGNsYW1wZWRQb2ludCA9IHYxLmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXHRcdFx0cmV0dXJuIGNsYW1wZWRQb2ludC5zdWIoIHBvaW50ICkubGVuZ3RoKCk7XG5cblx0XHR9O1xuXG5cdH0oKSxcblxuXHRpbnRlcnNlY3Q6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0dGhpcy5taW4ubWF4KCBib3gubWluICk7XG5cdFx0dGhpcy5tYXgubWluKCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHVuaW9uOiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1pbiggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1heCggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICggb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5taW4uYWRkKCBvZmZzZXQgKTtcblx0XHR0aGlzLm1heC5hZGQoIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5taW4uZXF1YWxzKCB0aGlzLm1pbiApICYmIGJveC5tYXguZXF1YWxzKCB0aGlzLm1heCApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gSW1tZWRpYXRlUmVuZGVyT2JqZWN0KCBtYXRlcmlhbCApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXHR0aGlzLnJlbmRlciA9IGZ1bmN0aW9uICggLyogcmVuZGVyQ2FsbGJhY2sgKi8gKSB7fTtcblxufVxuXG5JbW1lZGlhdGVSZW5kZXJPYmplY3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5JbW1lZGlhdGVSZW5kZXJPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW1tZWRpYXRlUmVuZGVyT2JqZWN0O1xuXG5JbW1lZGlhdGVSZW5kZXJPYmplY3QucHJvdG90eXBlLmlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0ID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gVmVydGV4Tm9ybWFsc0hlbHBlciggb2JqZWN0LCBzaXplLCBoZXgsIGxpbmV3aWR0aCApIHtcblxuXHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblxuXHR0aGlzLnNpemUgPSAoIHNpemUgIT09IHVuZGVmaW5lZCApID8gc2l6ZSA6IDE7XG5cblx0dmFyIGNvbG9yID0gKCBoZXggIT09IHVuZGVmaW5lZCApID8gaGV4IDogMHhmZjAwMDA7XG5cblx0dmFyIHdpZHRoID0gKCBsaW5ld2lkdGggIT09IHVuZGVmaW5lZCApID8gbGluZXdpZHRoIDogMTtcblxuXHQvL1xuXG5cdHZhciBuTm9ybWFscyA9IDA7XG5cblx0dmFyIG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7XG5cblx0aWYgKCBvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0bk5vcm1hbHMgPSBvYmpHZW9tZXRyeS5mYWNlcy5sZW5ndGggKiAzO1xuXG5cdH0gZWxzZSBpZiAoIG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRuTm9ybWFscyA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsLmNvdW50O1xuXG5cdH1cblxuXHQvL1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbk5vcm1hbHMgKiAyICogMywgMyApO1xuXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgcG9zaXRpb25zICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCBsaW5ld2lkdGg6IHdpZHRoIH0gKSApO1xuXG5cdC8vXG5cblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTtcblZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVmVydGV4Tm9ybWFsc0hlbHBlcjtcblxuVmVydGV4Tm9ybWFsc0hlbHBlci5wcm90b3R5cGUudXBkYXRlID0gKCBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHYyID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuXHRcdHZhciBrZXlzID0gWyAnYScsICdiJywgJ2MnIF07XG5cblx0XHR0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0bm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggdGhpcy5vYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdHZhciBtYXRyaXhXb3JsZCA9IHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkO1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0Ly9cblxuXHRcdHZhciBvYmpHZW9tZXRyeSA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0aWYgKCBvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHR2YXIgdmVydGljZXMgPSBvYmpHZW9tZXRyeS52ZXJ0aWNlcztcblxuXHRcdFx0dmFyIGZhY2VzID0gb2JqR2VvbWV0cnkuZmFjZXM7XG5cblx0XHRcdHZhciBpZHggPSAwO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZmFjZS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIHZlcnRleCA9IHZlcnRpY2VzWyBmYWNlWyBrZXlzWyBqIF0gXSBdO1xuXG5cdFx0XHRcdFx0dmFyIG5vcm1hbCA9IGZhY2UudmVydGV4Tm9ybWFsc1sgaiBdO1xuXG5cdFx0XHRcdFx0djEuY29weSggdmVydGV4ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdFx0djIuY29weSggbm9ybWFsICkuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggdGhpcy5zaXplICkuYWRkKCB2MSApO1xuXG5cdFx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKCBpZHgsIHYxLngsIHYxLnksIHYxLnogKTtcblxuXHRcdFx0XHRcdGlkeCA9IGlkeCArIDE7XG5cblx0XHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGlkeCwgdjIueCwgdjIueSwgdjIueiApO1xuXG5cdFx0XHRcdFx0aWR4ID0gaWR4ICsgMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciBvYmpQb3MgPSBvYmpHZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHR2YXIgb2JqTm9ybSA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0XHR2YXIgaWR4ID0gMDtcblxuXHRcdFx0Ly8gZm9yIHNpbXBsaWNpdHksIGlnbm9yZSBpbmRleCBhbmQgZHJhd2NhbGxzLCBhbmQgcmVuZGVyIGV2ZXJ5IG5vcm1hbFxuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gb2JqUG9zLmNvdW50OyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0djEuc2V0KCBvYmpQb3MuZ2V0WCggaiApLCBvYmpQb3MuZ2V0WSggaiApLCBvYmpQb3MuZ2V0WiggaiApICkuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdHYyLnNldCggb2JqTm9ybS5nZXRYKCBqICksIG9iak5vcm0uZ2V0WSggaiApLCBvYmpOb3JtLmdldFooIGogKSApO1xuXG5cdFx0XHRcdHYyLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIHRoaXMuc2l6ZSApLmFkZCggdjEgKTtcblxuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGlkeCwgdjEueCwgdjEueSwgdjEueiApO1xuXG5cdFx0XHRcdGlkeCA9IGlkeCArIDE7XG5cblx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKCBpZHgsIHYyLngsIHYyLnksIHYyLnogKTtcblxuXHRcdFx0XHRpZHggPSBpZHggKyAxO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fTtcblxufSgpICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBTcG90TGlnaHRIZWxwZXIoIGxpZ2h0LCBjb2xvciApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXHR0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0dGhpcy5tYXRyaXggPSBsaWdodC5tYXRyaXhXb3JsZDtcblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy5jb2xvciA9IGNvbG9yO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdHZhciBwb3NpdGlvbnMgPSBbXG5cdFx0MCwgMCwgMCwgXHQwLCAwLCAxLFxuXHRcdDAsIDAsIDAsIFx0MSwgMCwgMSxcblx0XHQwLCAwLCAwLFx0LSAxLCAwLCAxLFxuXHRcdDAsIDAsIDAsIFx0MCwgMSwgMSxcblx0XHQwLCAwLCAwLCBcdDAsIC0gMSwgMVxuXHRdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgaiA9IDEsIGwgPSAzMjsgaSA8IGw7IGkgKyssIGogKysgKSB7XG5cblx0XHR2YXIgcDEgPSAoIGkgLyBsICkgKiBNYXRoLlBJICogMjtcblx0XHR2YXIgcDIgPSAoIGogLyBsICkgKiBNYXRoLlBJICogMjtcblxuXHRcdHBvc2l0aW9ucy5wdXNoKFxuXHRcdFx0TWF0aC5jb3MoIHAxICksIE1hdGguc2luKCBwMSApLCAxLFxuXHRcdFx0TWF0aC5jb3MoIHAyICksIE1hdGguc2luKCBwMiApLCAxXG5cdFx0KTtcblxuXHR9XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgZm9nOiBmYWxzZSB9ICk7XG5cblx0dGhpcy5jb25lID0gbmV3IExpbmVTZWdtZW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdHRoaXMuYWRkKCB0aGlzLmNvbmUgKTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cblNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTtcblNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcG90TGlnaHRIZWxwZXI7XG5cblNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmNvbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHR0aGlzLmNvbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG59O1xuXG5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHZlY3RvcjIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cblx0XHR0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHR2YXIgY29uZUxlbmd0aCA9IHRoaXMubGlnaHQuZGlzdGFuY2UgPyB0aGlzLmxpZ2h0LmRpc3RhbmNlIDogMTAwMDtcblx0XHR2YXIgY29uZVdpZHRoID0gY29uZUxlbmd0aCAqIE1hdGgudGFuKCB0aGlzLmxpZ2h0LmFuZ2xlICk7XG5cblx0XHR0aGlzLmNvbmUuc2NhbGUuc2V0KCBjb25lV2lkdGgsIGNvbmVXaWR0aCwgY29uZUxlbmd0aCApO1xuXG5cdFx0dmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdHZlY3RvcjIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0dGhpcy5jb25lLmxvb2tBdCggdmVjdG9yMi5zdWIoIHZlY3RvciApICk7XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHRcdH1cblxuXHR9O1xuXG59KCk7XG5cbi8qKlxuICogQGF1dGhvciBTZWFuIEdyaWZmaW4gLyBodHRwOi8vdHdpdHRlci5jb20vc2dyaWZcbiAqIEBhdXRob3IgTWljaGFlbCBHdWVycmVybyAvIGh0dHA6Ly9yZWFsaXR5bWVsdGRvd24uY29tXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbmZ1bmN0aW9uIGdldEJvbmVMaXN0KCBvYmplY3QgKSB7XG5cblx0dmFyIGJvbmVMaXN0ID0gW107XG5cblx0aWYgKCBvYmplY3QgJiYgb2JqZWN0LmlzQm9uZSApIHtcblxuXHRcdGJvbmVMaXN0LnB1c2goIG9iamVjdCApO1xuXG5cdH1cblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBvYmplY3QuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0Ym9uZUxpc3QucHVzaC5hcHBseSggYm9uZUxpc3QsIGdldEJvbmVMaXN0KCBvYmplY3QuY2hpbGRyZW5bIGkgXSApICk7XG5cblx0fVxuXG5cdHJldHVybiBib25lTGlzdDtcblxufVxuXG5mdW5jdGlvbiBTa2VsZXRvbkhlbHBlciggb2JqZWN0ICkge1xuXG5cdHZhciBib25lcyA9IGdldEJvbmVMaXN0KCBvYmplY3QgKTtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIGNvbG9ycyA9IFtdO1xuXG5cdHZhciBjb2xvcjEgPSBuZXcgQ29sb3IoIDAsIDAsIDEgKTtcblx0dmFyIGNvbG9yMiA9IG5ldyBDb2xvciggMCwgMSwgMCApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdHZhciBib25lID0gYm9uZXNbIGkgXTtcblxuXHRcdGlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkge1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0XHRjb2xvcnMucHVzaCggY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYiApO1xuXHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yMi5yLCBjb2xvcjIuZywgY29sb3IyLmIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IFZlcnRleENvbG9ycywgZGVwdGhUZXN0OiBmYWxzZSwgZGVwdGhXcml0ZTogZmFsc2UsIHRyYW5zcGFyZW50OiB0cnVlIH0gKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0dGhpcy5yb290ID0gb2JqZWN0O1xuXHR0aGlzLmJvbmVzID0gYm9uZXM7XG5cblx0dGhpcy5tYXRyaXggPSBvYmplY3QubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG59XG5cblNrZWxldG9uSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTtcblNrZWxldG9uSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNrZWxldG9uSGVscGVyO1xuXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGJvbmVNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHR2YXIgbWF0cml4V29ybGRJbnYgPSBuZXcgTWF0cml4NCgpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHR2YXIgYm9uZXMgPSB0aGlzLmJvbmVzO1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHR2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcblxuXHRcdG1hdHJpeFdvcmxkSW52LmdldEludmVyc2UoIHRoaXMucm9vdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBqID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGJvbmUgPSBib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUucGFyZW50ICYmIGJvbmUucGFyZW50LmlzQm9uZSApIHtcblxuXHRcdFx0XHRib25lTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeFdvcmxkSW52LCBib25lLm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3Rvci5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGJvbmVNYXRyaXggKTtcblx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKCBqLCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICk7XG5cblx0XHRcdFx0Ym9uZU1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBtYXRyaXhXb3JsZEludiwgYm9uZS5wYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbiggYm9uZU1hdHJpeCApO1xuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGogKyAxLCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICk7XG5cblx0XHRcdFx0aiArPSAyO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxuXHR9O1xuXG59KCk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gUG9pbnRMaWdodEhlbHBlciggbGlnaHQsIHNwaGVyZVNpemUsIGNvbG9yICkge1xuXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgU3BoZXJlQnVmZmVyR2VvbWV0cnkoIHNwaGVyZVNpemUsIDQsIDIgKTtcblx0dmFyIG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHdpcmVmcmFtZTogdHJ1ZSwgZm9nOiBmYWxzZSB9ICk7XG5cblx0TWVzaC5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLm1hdHJpeCA9IHRoaXMubGlnaHQubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMudXBkYXRlKCk7XG5cblxuXHQvKlxuXHR2YXIgZGlzdGFuY2VHZW9tZXRyeSA9IG5ldyBUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5KCAxLCAyICk7XG5cdHZhciBkaXN0YW5jZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBoZXhDb2xvciwgZm9nOiBmYWxzZSwgd2lyZWZyYW1lOiB0cnVlLCBvcGFjaXR5OiAwLjEsIHRyYW5zcGFyZW50OiB0cnVlIH0gKTtcblxuXHR0aGlzLmxpZ2h0U3BoZXJlID0gbmV3IFRIUkVFLk1lc2goIGJ1bGJHZW9tZXRyeSwgYnVsYk1hdGVyaWFsICk7XG5cdHRoaXMubGlnaHREaXN0YW5jZSA9IG5ldyBUSFJFRS5NZXNoKCBkaXN0YW5jZUdlb21ldHJ5LCBkaXN0YW5jZU1hdGVyaWFsICk7XG5cblx0dmFyIGQgPSBsaWdodC5kaXN0YW5jZTtcblxuXHRpZiAoIGQgPT09IDAuMCApIHtcblxuXHRcdHRoaXMubGlnaHREaXN0YW5jZS52aXNpYmxlID0gZmFsc2U7XG5cblx0fSBlbHNlIHtcblxuXHRcdHRoaXMubGlnaHREaXN0YW5jZS5zY2FsZS5zZXQoIGQsIGQsIGQgKTtcblxuXHR9XG5cblx0dGhpcy5hZGQoIHRoaXMubGlnaHREaXN0YW5jZSApO1xuXHQqL1xuXG59XG5cblBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWVzaC5wcm90b3R5cGUgKTtcblBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9pbnRMaWdodEhlbHBlcjtcblxuUG9pbnRMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cbn07XG5cblBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHRoaXMubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXG5cdH1cblxuXHQvKlxuXHR2YXIgZCA9IHRoaXMubGlnaHQuZGlzdGFuY2U7XG5cblx0aWYgKCBkID09PSAwLjAgKSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IHRydWU7XG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnNjYWxlLnNldCggZCwgZCwgZCApO1xuXG5cdH1cblx0Ki9cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFiZWxuYXRpb24gLyBodHRwOi8vZ2l0aHViLmNvbS9hYmVsbmF0aW9uXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBSZWN0QXJlYUxpZ2h0SGVscGVyKCBsaWdodCwgY29sb3IgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgZm9nOiBmYWxzZSB9ICk7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCA1ICogMyApLCAzICkgKTtcblxuXHR0aGlzLmxpbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdHRoaXMuYWRkKCB0aGlzLmxpbmUgKTtcblxuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuUmVjdEFyZWFMaWdodEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTtcblJlY3RBcmVhTGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVjdEFyZWFMaWdodEhlbHBlcjtcblxuUmVjdEFyZWFMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmNoaWxkcmVuWyAwIF0uZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHR0aGlzLmNoaWxkcmVuWyAwIF0ubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG59O1xuXG5SZWN0QXJlYUxpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Ly8gY2FsY3VsYXRlIG5ldyBkaW1lbnNpb25zIG9mIHRoZSBoZWxwZXJcblxuXHR2YXIgaHggPSB0aGlzLmxpZ2h0LndpZHRoICogMC41O1xuXHR2YXIgaHkgPSB0aGlzLmxpZ2h0LmhlaWdodCAqIDAuNTtcblxuXHR2YXIgcG9zaXRpb24gPSB0aGlzLmxpbmUuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0dmFyIGFycmF5ID0gcG9zaXRpb24uYXJyYXk7XG5cblx0Ly8gdXBkYXRlIHZlcnRpY2VzXG5cblx0YXJyYXlbIDAgXSA9IGh4OyBhcnJheVsgMSBdID0gLSBoeTsgYXJyYXlbIDIgXSA9IDA7XG5cdGFycmF5WyAzIF0gPSBoeDsgYXJyYXlbIDQgXSA9IGh5OyBhcnJheVsgNSBdID0gMDtcblx0YXJyYXlbIDYgXSA9IC0gaHg7IGFycmF5WyA3IF0gPSBoeTsgYXJyYXlbIDggXSA9IDA7XG5cdGFycmF5WyA5IF0gPSAtIGh4OyBhcnJheVsgMTAgXSA9IC0gaHk7IGFycmF5WyAxMSBdID0gMDtcblx0YXJyYXlbIDEyIF0gPSBoeDsgYXJyYXlbIDEzIF0gPSAtIGh5OyBhcnJheVsgMTQgXSA9IDA7XG5cblx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdGlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0dGhpcy5saW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLmxpbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuZnVuY3Rpb24gSGVtaXNwaGVyZUxpZ2h0SGVscGVyKCBsaWdodCwgc2l6ZSwgY29sb3IgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCBzaXplICk7XG5cdGdlb21ldHJ5LnJvdGF0ZVkoIE1hdGguUEkgKiAwLjUgKTtcblxuXHR0aGlzLm1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHdpcmVmcmFtZTogdHJ1ZSwgZm9nOiBmYWxzZSB9ICk7XG5cdGlmICggdGhpcy5jb2xvciA9PT0gdW5kZWZpbmVkICkgdGhpcy5tYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSBWZXJ0ZXhDb2xvcnM7XG5cblx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cdHZhciBjb2xvcnMgPSBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvbi5jb3VudCAqIDMgKTtcblxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0dGhpcy5hZGQoIG5ldyBNZXNoKCBnZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApICk7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5IZW1pc3BoZXJlTGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5IZW1pc3BoZXJlTGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSGVtaXNwaGVyZUxpZ2h0SGVscGVyO1xuXG5IZW1pc3BoZXJlTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5jaGlsZHJlblsgMCBdLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxufTtcblxuSGVtaXNwaGVyZUxpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGNvbG9yMSA9IG5ldyBDb2xvcigpO1xuXHR2YXIgY29sb3IyID0gbmV3IENvbG9yKCk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcblxuXHRcdHZhciBtZXNoID0gdGhpcy5jaGlsZHJlblsgMCBdO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgY29sb3JzID0gbWVzaC5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdjb2xvcicgKTtcblxuXHRcdFx0Y29sb3IxLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblx0XHRcdGNvbG9yMi5jb3B5KCB0aGlzLmxpZ2h0Lmdyb3VuZENvbG9yICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGNvbG9ycy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGNvbG9yID0gKCBpIDwgKCBsIC8gMiApICkgPyBjb2xvcjEgOiBjb2xvcjI7XG5cblx0XHRcdFx0Y29sb3JzLnNldFhZWiggaSwgY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbG9ycy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRtZXNoLmxvb2tBdCggdmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApLm5lZ2F0ZSgpICk7XG5cblx0fTtcblxufSgpO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gR3JpZEhlbHBlciggc2l6ZSwgZGl2aXNpb25zLCBjb2xvcjEsIGNvbG9yMiApIHtcblxuXHRzaXplID0gc2l6ZSB8fCAxMDtcblx0ZGl2aXNpb25zID0gZGl2aXNpb25zIHx8IDEwO1xuXHRjb2xvcjEgPSBuZXcgQ29sb3IoIGNvbG9yMSAhPT0gdW5kZWZpbmVkID8gY29sb3IxIDogMHg0NDQ0NDQgKTtcblx0Y29sb3IyID0gbmV3IENvbG9yKCBjb2xvcjIgIT09IHVuZGVmaW5lZCA/IGNvbG9yMiA6IDB4ODg4ODg4ICk7XG5cblx0dmFyIGNlbnRlciA9IGRpdmlzaW9ucyAvIDI7XG5cdHZhciBzdGVwID0gc2l6ZSAvIGRpdmlzaW9ucztcblx0dmFyIGhhbGZTaXplID0gc2l6ZSAvIDI7XG5cblx0dmFyIHZlcnRpY2VzID0gW10sIGNvbG9ycyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgaiA9IDAsIGsgPSAtIGhhbGZTaXplOyBpIDw9IGRpdmlzaW9uczsgaSArKywgayArPSBzdGVwICkge1xuXG5cdFx0dmVydGljZXMucHVzaCggLSBoYWxmU2l6ZSwgMCwgaywgaGFsZlNpemUsIDAsIGsgKTtcblx0XHR2ZXJ0aWNlcy5wdXNoKCBrLCAwLCAtIGhhbGZTaXplLCBrLCAwLCBoYWxmU2l6ZSApO1xuXG5cdFx0dmFyIGNvbG9yID0gaSA9PT0gY2VudGVyID8gY29sb3IxIDogY29sb3IyO1xuXG5cdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblx0XHRjb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblxuXHR9XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMgfSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5HcmlkSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTtcbkdyaWRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR3JpZEhlbHBlcjtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cDovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBIZWN0YXRlIC8gaHR0cDovL3d3dy5naXRodWIuY29tL0hlY3RhdGVcbiAqL1xuXG5mdW5jdGlvbiBQb2xhckdyaWRIZWxwZXIoIHJhZGl1cywgcmFkaWFscywgY2lyY2xlcywgZGl2aXNpb25zLCBjb2xvcjEsIGNvbG9yMiApIHtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTA7XG5cdHJhZGlhbHMgPSByYWRpYWxzIHx8IDE2O1xuXHRjaXJjbGVzID0gY2lyY2xlcyB8fCA4O1xuXHRkaXZpc2lvbnMgPSBkaXZpc2lvbnMgfHwgNjQ7XG5cdGNvbG9yMSA9IG5ldyBDb2xvciggY29sb3IxICE9PSB1bmRlZmluZWQgPyBjb2xvcjEgOiAweDQ0NDQ0NCApO1xuXHRjb2xvcjIgPSBuZXcgQ29sb3IoIGNvbG9yMiAhPT0gdW5kZWZpbmVkID8gY29sb3IyIDogMHg4ODg4ODggKTtcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIGNvbG9ycyA9IFtdO1xuXG5cdHZhciB4LCB6O1xuXHR2YXIgdiwgaSwgaiwgciwgY29sb3I7XG5cblx0Ly8gY3JlYXRlIHRoZSByYWRpYWxzXG5cblx0Zm9yICggaSA9IDA7IGkgPD0gcmFkaWFsczsgaSArKyApIHtcblxuXHRcdHYgPSAoIGkgLyByYWRpYWxzICkgKiAoIE1hdGguUEkgKiAyICk7XG5cblx0XHR4ID0gTWF0aC5zaW4oIHYgKSAqIHJhZGl1cztcblx0XHR6ID0gTWF0aC5jb3MoIHYgKSAqIHJhZGl1cztcblxuXHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XG5cblx0XHRjb2xvciA9ICggaSAmIDEgKSA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHR9XG5cblx0Ly8gY3JlYXRlIHRoZSBjaXJjbGVzXG5cblx0Zm9yICggaSA9IDA7IGkgPD0gY2lyY2xlczsgaSArKyApIHtcblxuXHRcdGNvbG9yID0gKCBpICYgMSApID8gY29sb3IxIDogY29sb3IyO1xuXG5cdFx0ciA9IHJhZGl1cyAtICggcmFkaXVzIC8gY2lyY2xlcyAqIGkgKTtcblxuXHRcdGZvciAoIGogPSAwOyBqIDwgZGl2aXNpb25zOyBqICsrICkge1xuXG5cdFx0XHQvLyBmaXJzdCB2ZXJ0ZXhcblxuXHRcdFx0diA9ICggaiAvIGRpdmlzaW9ucyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0XHR4ID0gTWF0aC5zaW4oIHYgKSAqIHI7XG5cdFx0XHR6ID0gTWF0aC5jb3MoIHYgKSAqIHI7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIDAsIHogKTtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRcdC8vIHNlY29uZCB2ZXJ0ZXhcblxuXHRcdFx0diA9ICggKCBqICsgMSApIC8gZGl2aXNpb25zICkgKiAoIE1hdGguUEkgKiAyICk7XG5cblx0XHRcdHggPSBNYXRoLnNpbiggdiApICogcjtcblx0XHRcdHogPSBNYXRoLmNvcyggdiApICogcjtcblxuXHRcdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xuXHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMgfSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5Qb2xhckdyaWRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuUG9sYXJHcmlkSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvbGFyR3JpZEhlbHBlcjtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gRmFjZU5vcm1hbHNIZWxwZXIoIG9iamVjdCwgc2l6ZSwgaGV4LCBsaW5ld2lkdGggKSB7XG5cblx0Ly8gRmFjZU5vcm1hbHNIZWxwZXIgb25seSBzdXBwb3J0cyBUSFJFRS5HZW9tZXRyeVxuXG5cdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXG5cdHRoaXMuc2l6ZSA9ICggc2l6ZSAhPT0gdW5kZWZpbmVkICkgPyBzaXplIDogMTtcblxuXHR2YXIgY29sb3IgPSAoIGhleCAhPT0gdW5kZWZpbmVkICkgPyBoZXggOiAweGZmZmYwMDtcblxuXHR2YXIgd2lkdGggPSAoIGxpbmV3aWR0aCAhPT0gdW5kZWZpbmVkICkgPyBsaW5ld2lkdGggOiAxO1xuXG5cdC8vXG5cblx0dmFyIG5Ob3JtYWxzID0gMDtcblxuXHR2YXIgb2JqR2VvbWV0cnkgPSB0aGlzLm9iamVjdC5nZW9tZXRyeTtcblxuXHRpZiAoIG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRuTm9ybWFscyA9IG9iakdlb21ldHJ5LmZhY2VzLmxlbmd0aDtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRmFjZU5vcm1hbHNIZWxwZXI6IG9ubHkgVEhSRUUuR2VvbWV0cnkgaXMgc3VwcG9ydGVkLiBVc2UgVEhSRUUuVmVydGV4Tm9ybWFsc0hlbHBlciwgaW5zdGVhZC4nICk7XG5cblx0fVxuXG5cdC8vXG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0dmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBuTm9ybWFscyAqIDIgKiAzLCAzICk7XG5cblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBwb3NpdGlvbnMgKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIGxpbmV3aWR0aDogd2lkdGggfSApICk7XG5cblx0Ly9cblxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5GYWNlTm9ybWFsc0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5GYWNlTm9ybWFsc0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGYWNlTm9ybWFsc0hlbHBlcjtcblxuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9ICggZnVuY3Rpb24gKCkge1xuXG5cdHZhciB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB2MiA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoKSB7XG5cblx0XHR0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0bm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggdGhpcy5vYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdHZhciBtYXRyaXhXb3JsZCA9IHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkO1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0Ly9cblxuXHRcdHZhciBvYmpHZW9tZXRyeSA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5O1xuXG5cdFx0dmFyIHZlcnRpY2VzID0gb2JqR2VvbWV0cnkudmVydGljZXM7XG5cblx0XHR2YXIgZmFjZXMgPSBvYmpHZW9tZXRyeS5mYWNlcztcblxuXHRcdHZhciBpZHggPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gZmFjZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0XHR2YXIgbm9ybWFsID0gZmFjZS5ub3JtYWw7XG5cblx0XHRcdHYxLmNvcHkoIHZlcnRpY2VzWyBmYWNlLmEgXSApXG5cdFx0XHRcdC5hZGQoIHZlcnRpY2VzWyBmYWNlLmIgXSApXG5cdFx0XHRcdC5hZGQoIHZlcnRpY2VzWyBmYWNlLmMgXSApXG5cdFx0XHRcdC5kaXZpZGVTY2FsYXIoIDMgKVxuXHRcdFx0XHQuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXG5cdFx0XHR2Mi5jb3B5KCBub3JtYWwgKS5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCB0aGlzLnNpemUgKS5hZGQoIHYxICk7XG5cblx0XHRcdHBvc2l0aW9uLnNldFhZWiggaWR4LCB2MS54LCB2MS55LCB2MS56ICk7XG5cblx0XHRcdGlkeCA9IGlkeCArIDE7XG5cblx0XHRcdHBvc2l0aW9uLnNldFhZWiggaWR4LCB2Mi54LCB2Mi55LCB2Mi56ICk7XG5cblx0XHRcdGlkeCA9IGlkeCArIDE7XG5cblx0XHR9XG5cblx0XHRwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fTtcblxufSgpICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBEaXJlY3Rpb25hbExpZ2h0SGVscGVyKCBsaWdodCwgc2l6ZSwgY29sb3IgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHNpemUgPSAxO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbXG5cdFx0LSBzaXplLCBzaXplLCAwLFxuXHRcdHNpemUsIHNpemUsIDAsXG5cdFx0c2l6ZSwgLSBzaXplLCAwLFxuXHRcdC0gc2l6ZSwgLSBzaXplLCAwLFxuXHRcdC0gc2l6ZSwgc2l6ZSwgMFxuXHRdLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgZm9nOiBmYWxzZSB9ICk7XG5cblx0dGhpcy5saWdodFBsYW5lID0gbmV3IExpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHR0aGlzLmFkZCggdGhpcy5saWdodFBsYW5lICk7XG5cblx0Z2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggWyAwLCAwLCAwLCAwLCAwLCAxIF0sIDMgKSApO1xuXG5cdHRoaXMudGFyZ2V0TGluZSA9IG5ldyBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0dGhpcy5hZGQoIHRoaXMudGFyZ2V0TGluZSApO1xuXG5cdHRoaXMudXBkYXRlKCk7XG5cbn1cblxuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTtcbkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGlyZWN0aW9uYWxMaWdodEhlbHBlcjtcblxuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmxpZ2h0UGxhbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXHR0aGlzLnRhcmdldExpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHR0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG59O1xuXG5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIHYxID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHYyID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHYzID0gbmV3IFZlY3RvcjMoKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0djEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0djIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXHRcdHYzLnN1YlZlY3RvcnMoIHYyLCB2MSApO1xuXG5cdFx0dGhpcy5saWdodFBsYW5lLmxvb2tBdCggdjMgKTtcblxuXHRcdGlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cdFx0XHR0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXHRcdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudGFyZ2V0TGluZS5sb29rQXQoIHYzICk7XG5cdFx0dGhpcy50YXJnZXRMaW5lLnNjYWxlLnogPSB2My5sZW5ndGgoKTtcblxuXHR9O1xuXG59KCk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKlxuICpcdC0gc2hvd3MgZnJ1c3R1bSwgbGluZSBvZiBzaWdodCBhbmQgdXAgb2YgdGhlIGNhbWVyYVxuICpcdC0gc3VpdGFibGUgZm9yIGZhc3QgdXBkYXRlc1xuICogXHQtIGJhc2VkIG9uIGZydXN0dW0gdmlzdWFsaXphdGlvbiBpbiBsaWdodGdsLmpzIHNoYWRvd21hcCBleGFtcGxlXG4gKlx0XHRodHRwOi8vZXZhbncuZ2l0aHViLmNvbS9saWdodGdsLmpzL3Rlc3RzL3NoYWRvd21hcC5odG1sXG4gKi9cblxuZnVuY3Rpb24gQ2FtZXJhSGVscGVyKCBjYW1lcmEgKSB7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmZmYsIHZlcnRleENvbG9yczogRmFjZUNvbG9ycyB9ICk7XG5cblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBjb2xvcnMgPSBbXTtcblxuXHR2YXIgcG9pbnRNYXAgPSB7fTtcblxuXHQvLyBjb2xvcnNcblxuXHR2YXIgY29sb3JGcnVzdHVtID0gbmV3IENvbG9yKCAweGZmYWEwMCApO1xuXHR2YXIgY29sb3JDb25lID0gbmV3IENvbG9yKCAweGZmMDAwMCApO1xuXHR2YXIgY29sb3JVcCA9IG5ldyBDb2xvciggMHgwMGFhZmYgKTtcblx0dmFyIGNvbG9yVGFyZ2V0ID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXHR2YXIgY29sb3JDcm9zcyA9IG5ldyBDb2xvciggMHgzMzMzMzMgKTtcblxuXHQvLyBuZWFyXG5cblx0YWRkTGluZSggJ24xJywgJ24yJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICduMicsICduNCcsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnbjQnLCAnbjMnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ24zJywgJ24xJywgY29sb3JGcnVzdHVtICk7XG5cblx0Ly8gZmFyXG5cblx0YWRkTGluZSggJ2YxJywgJ2YyJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICdmMicsICdmNCcsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnZjQnLCAnZjMnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ2YzJywgJ2YxJywgY29sb3JGcnVzdHVtICk7XG5cblx0Ly8gc2lkZXNcblxuXHRhZGRMaW5lKCAnbjEnLCAnZjEnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ24yJywgJ2YyJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICduMycsICdmMycsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnbjQnLCAnZjQnLCBjb2xvckZydXN0dW0gKTtcblxuXHQvLyBjb25lXG5cblx0YWRkTGluZSggJ3AnLCAnbjEnLCBjb2xvckNvbmUgKTtcblx0YWRkTGluZSggJ3AnLCAnbjInLCBjb2xvckNvbmUgKTtcblx0YWRkTGluZSggJ3AnLCAnbjMnLCBjb2xvckNvbmUgKTtcblx0YWRkTGluZSggJ3AnLCAnbjQnLCBjb2xvckNvbmUgKTtcblxuXHQvLyB1cFxuXG5cdGFkZExpbmUoICd1MScsICd1MicsIGNvbG9yVXAgKTtcblx0YWRkTGluZSggJ3UyJywgJ3UzJywgY29sb3JVcCApO1xuXHRhZGRMaW5lKCAndTMnLCAndTEnLCBjb2xvclVwICk7XG5cblx0Ly8gdGFyZ2V0XG5cblx0YWRkTGluZSggJ2MnLCAndCcsIGNvbG9yVGFyZ2V0ICk7XG5cdGFkZExpbmUoICdwJywgJ2MnLCBjb2xvckNyb3NzICk7XG5cblx0Ly8gY3Jvc3NcblxuXHRhZGRMaW5lKCAnY24xJywgJ2NuMicsIGNvbG9yQ3Jvc3MgKTtcblx0YWRkTGluZSggJ2NuMycsICdjbjQnLCBjb2xvckNyb3NzICk7XG5cblx0YWRkTGluZSggJ2NmMScsICdjZjInLCBjb2xvckNyb3NzICk7XG5cdGFkZExpbmUoICdjZjMnLCAnY2Y0JywgY29sb3JDcm9zcyApO1xuXG5cdGZ1bmN0aW9uIGFkZExpbmUoIGEsIGIsIGNvbG9yICkge1xuXG5cdFx0YWRkUG9pbnQoIGEsIGNvbG9yICk7XG5cdFx0YWRkUG9pbnQoIGIsIGNvbG9yICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZFBvaW50KCBpZCwgY29sb3IgKSB7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdGlmICggcG9pbnRNYXBbIGlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cG9pbnRNYXBbIGlkIF0gPSBbXTtcblxuXHRcdH1cblxuXHRcdHBvaW50TWFwWyBpZCBdLnB1c2goICggdmVydGljZXMubGVuZ3RoIC8gMyApIC0gMSApO1xuXG5cdH1cblxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXHRpZiAoIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXggKSB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0dGhpcy5tYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMucG9pbnRNYXAgPSBwb2ludE1hcDtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cbkNhbWVyYUhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5DYW1lcmFIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2FtZXJhSGVscGVyO1xuXG5DYW1lcmFIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZ2VvbWV0cnksIHBvaW50TWFwO1xuXG5cdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgY2FtZXJhID0gbmV3IENhbWVyYSgpO1xuXG5cdGZ1bmN0aW9uIHNldFBvaW50KCBwb2ludCwgeCwgeSwgeiApIHtcblxuXHRcdHZlY3Rvci5zZXQoIHgsIHksIHogKS51bnByb2plY3QoIGNhbWVyYSApO1xuXG5cdFx0dmFyIHBvaW50cyA9IHBvaW50TWFwWyBwb2ludCBdO1xuXG5cdFx0aWYgKCBwb2ludHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWiggcG9pbnRzWyBpIF0sIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0Z2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdHBvaW50TWFwID0gdGhpcy5wb2ludE1hcDtcblxuXHRcdHZhciB3ID0gMSwgaCA9IDE7XG5cblx0XHQvLyB3ZSBuZWVkIGp1c3QgY2FtZXJhIHByb2plY3Rpb24gbWF0cml4XG5cdFx0Ly8gd29ybGQgbWF0cml4IG11c3QgYmUgaWRlbnRpdHlcblxuXHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIHRoaXMuY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHRcdC8vIGNlbnRlciAvIHRhcmdldFxuXG5cdFx0c2V0UG9pbnQoICdjJywgMCwgMCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICd0JywgMCwgMCwgMSApO1xuXG5cdFx0Ly8gbmVhclxuXG5cdFx0c2V0UG9pbnQoICduMScsIC0gdywgLSBoLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ24yJywgdywgLSBoLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ24zJywgLSB3LCBoLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ240JywgdywgaCwgLSAxICk7XG5cblx0XHQvLyBmYXJcblxuXHRcdHNldFBvaW50KCAnZjEnLCAtIHcsIC0gaCwgMSApO1xuXHRcdHNldFBvaW50KCAnZjInLCB3LCAtIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2YzJywgLSB3LCBoLCAxICk7XG5cdFx0c2V0UG9pbnQoICdmNCcsIHcsIGgsIDEgKTtcblxuXHRcdC8vIHVwXG5cblx0XHRzZXRQb2ludCggJ3UxJywgdyAqIDAuNywgaCAqIDEuMSwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICd1MicsIC0gdyAqIDAuNywgaCAqIDEuMSwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICd1MycsIDAsIGggKiAyLCAtIDEgKTtcblxuXHRcdC8vIGNyb3NzXG5cblx0XHRzZXRQb2ludCggJ2NmMScsIC0gdywgMCwgMSApO1xuXHRcdHNldFBvaW50KCAnY2YyJywgdywgMCwgMSApO1xuXHRcdHNldFBvaW50KCAnY2YzJywgMCwgLSBoLCAxICk7XG5cdFx0c2V0UG9pbnQoICdjZjQnLCAwLCBoLCAxICk7XG5cblx0XHRzZXRQb2ludCggJ2NuMScsIC0gdywgMCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICdjbjInLCB3LCAwLCAtIDEgKTtcblx0XHRzZXRQb2ludCggJ2NuMycsIDAsIC0gaCwgLSAxICk7XG5cdFx0c2V0UG9pbnQoICdjbjQnLCAwLCBoLCAtIDEgKTtcblxuXHRcdGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9O1xuXG59KCk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHA6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBCb3hIZWxwZXIoIG9iamVjdCwgY29sb3IgKSB7XG5cblx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cblx0aWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkICkgY29sb3IgPSAweGZmZmYwMDtcblxuXHR2YXIgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSggWyAwLCAxLCAxLCAyLCAyLCAzLCAzLCAwLCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA0LCAwLCA0LCAxLCA1LCAyLCA2LCAzLCA3IF0gKTtcblx0dmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoIDggKiAzICk7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTtcblxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cbkJveEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5Cb3hIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQm94SGVscGVyO1xuXG5Cb3hIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9ICggZnVuY3Rpb24gKCkge1xuXG5cdHZhciBib3ggPSBuZXcgQm94MygpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCApIHtcblxuXHRcdGlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveEhlbHBlcjogLnVwZGF0ZSgpIGhhcyBubyBsb25nZXIgYXJndW1lbnRzLicgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5vYmplY3QgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ym94LnNldEZyb21PYmplY3QoIHRoaXMub2JqZWN0ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJveC5pc0VtcHR5KCkgKSByZXR1cm47XG5cblx0XHR2YXIgbWluID0gYm94Lm1pbjtcblx0XHR2YXIgbWF4ID0gYm94Lm1heDtcblxuXHRcdC8qXG5cdFx0ICA1X19fXzRcblx0XHQxL19fXzAvfFxuXHRcdHwgNl9ffF83XG5cdFx0Mi9fX18zL1xuXG5cdFx0MDogbWF4LngsIG1heC55LCBtYXguelxuXHRcdDE6IG1pbi54LCBtYXgueSwgbWF4Lnpcblx0XHQyOiBtaW4ueCwgbWluLnksIG1heC56XG5cdFx0MzogbWF4LngsIG1pbi55LCBtYXguelxuXHRcdDQ6IG1heC54LCBtYXgueSwgbWluLnpcblx0XHQ1OiBtaW4ueCwgbWF4LnksIG1pbi56XG5cdFx0NjogbWluLngsIG1pbi55LCBtaW4uelxuXHRcdDc6IG1heC54LCBtaW4ueSwgbWluLnpcblx0XHQqL1xuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdHZhciBhcnJheSA9IHBvc2l0aW9uLmFycmF5O1xuXG5cdFx0YXJyYXlbIDAgXSA9IG1heC54OyBhcnJheVsgMSBdID0gbWF4Lnk7IGFycmF5WyAyIF0gPSBtYXguejtcblx0XHRhcnJheVsgMyBdID0gbWluLng7IGFycmF5WyA0IF0gPSBtYXgueTsgYXJyYXlbIDUgXSA9IG1heC56O1xuXHRcdGFycmF5WyA2IF0gPSBtaW4ueDsgYXJyYXlbIDcgXSA9IG1pbi55OyBhcnJheVsgOCBdID0gbWF4Lno7XG5cdFx0YXJyYXlbIDkgXSA9IG1heC54OyBhcnJheVsgMTAgXSA9IG1pbi55OyBhcnJheVsgMTEgXSA9IG1heC56O1xuXHRcdGFycmF5WyAxMiBdID0gbWF4Lng7IGFycmF5WyAxMyBdID0gbWF4Lnk7IGFycmF5WyAxNCBdID0gbWluLno7XG5cdFx0YXJyYXlbIDE1IF0gPSBtaW4ueDsgYXJyYXlbIDE2IF0gPSBtYXgueTsgYXJyYXlbIDE3IF0gPSBtaW4uejtcblx0XHRhcnJheVsgMTggXSA9IG1pbi54OyBhcnJheVsgMTkgXSA9IG1pbi55OyBhcnJheVsgMjAgXSA9IG1pbi56O1xuXHRcdGFycmF5WyAyMSBdID0gbWF4Lng7IGFycmF5WyAyMiBdID0gbWluLnk7IGFycmF5WyAyMyBdID0gbWluLno7XG5cblx0XHRwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdH07XG5cbn0gKSgpO1xuXG5Cb3hIZWxwZXIucHJvdG90eXBlLnNldEZyb21PYmplY3QgPSBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblx0dGhpcy51cGRhdGUoKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBCb3gzSGVscGVyKCBib3gsIGhleCApIHtcblxuXHR0aGlzLnR5cGUgPSAnQm94M0hlbHBlcic7XG5cblx0dGhpcy5ib3ggPSBib3g7XG5cblx0dmFyIGNvbG9yID0gKCBoZXggIT09IHVuZGVmaW5lZCApID8gaGV4IDogMHhmZmZmMDA7XG5cblx0dmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoIFsgMCwgMSwgMSwgMiwgMiwgMywgMywgMCwgNCwgNSwgNSwgNiwgNiwgNywgNywgNCwgMCwgNCwgMSwgNSwgMiwgNiwgMywgNyBdICk7XG5cblx0dmFyIHBvc2l0aW9ucyA9IFsgMSwgMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAxLCAtIDEsIC0gMSBdO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTtcblxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTtcblxuXHR0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG59XG5cbkJveDNIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuQm94M0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCb3gzSGVscGVyO1xuXG5Cb3gzSGVscGVyLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZCA9IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0dmFyIGJveCA9IHRoaXMuYm94O1xuXG5cdGlmICggYm94LmlzRW1wdHkoKSApIHJldHVybjtcblxuXHRib3guZ2V0Q2VudGVyKCB0aGlzLnBvc2l0aW9uICk7XG5cblx0Ym94LmdldFNpemUoIHRoaXMuc2NhbGUgKTtcblxuXHR0aGlzLnNjYWxlLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBQbGFuZUhlbHBlciggcGxhbmUsIHNpemUsIGhleCApIHtcblxuXHR0aGlzLnR5cGUgPSAnUGxhbmVIZWxwZXInO1xuXG5cdHRoaXMucGxhbmUgPSBwbGFuZTtcblxuXHR0aGlzLnNpemUgPSAoIHNpemUgPT09IHVuZGVmaW5lZCApID8gMSA6IHNpemU7XG5cblx0dmFyIGNvbG9yID0gKCBoZXggIT09IHVuZGVmaW5lZCApID8gaGV4IDogMHhmZmZmMDA7XG5cblx0dmFyIHBvc2l0aW9ucyA9IFsgMSwgLSAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAtIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDEsIDAsIDAsIDAgXTtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcblx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0TGluZS5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTtcblxuXHQvL1xuXG5cdHZhciBwb3NpdGlvbnMyID0gWyAxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxIF07XG5cblx0dmFyIGdlb21ldHJ5MiA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeTIuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zMiwgMyApICk7XG5cdGdlb21ldHJ5Mi5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHR0aGlzLmFkZCggbmV3IE1lc2goIGdlb21ldHJ5MiwgbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgb3BhY2l0eTogMC4yLCB0cmFuc3BhcmVudDogdHJ1ZSwgZGVwdGhXcml0ZTogZmFsc2UgfSApICkgKTtcblxufVxuXG5QbGFuZUhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lLnByb3RvdHlwZSApO1xuUGxhbmVIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGxhbmVIZWxwZXI7XG5cblBsYW5lSGVscGVyLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZCA9IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0dmFyIHNjYWxlID0gLSB0aGlzLnBsYW5lLmNvbnN0YW50O1xuXG5cdGlmICggTWF0aC5hYnMoIHNjYWxlICkgPCAxZS04ICkgc2NhbGUgPSAxZS04OyAvLyBzaWduIGRvZXMgbm90IG1hdHRlclxuXG5cdHRoaXMuc2NhbGUuc2V0KCAwLjUgKiB0aGlzLnNpemUsIDAuNSAqIHRoaXMuc2l6ZSwgc2NhbGUgKTtcblxuXHR0aGlzLmNoaWxkcmVuWyAwIF0ubWF0ZXJpYWwuc2lkZSA9ICggc2NhbGUgPCAwICkgPyBCYWNrU2lkZSA6IEZyb250U2lkZTsgLy8gcmVuZGVyZXIgZmxpcHMgc2lkZSB3aGVuIGRldGVybWluYW50IDwgMDsgZmxpcHBpbmcgbm90IHdhbnRlZCBoZXJlXG5cblx0dGhpcy5sb29rQXQoIHRoaXMucGxhbmUubm9ybWFsICk7XG5cblx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vZ2l0aHViLmNvbS96ejg1XG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJvdyBmb3IgdmlzdWFsaXppbmcgZGlyZWN0aW9uc1xuICpcbiAqIFBhcmFtZXRlcnM6XG4gKiAgZGlyIC0gVmVjdG9yM1xuICogIG9yaWdpbiAtIFZlY3RvcjNcbiAqICBsZW5ndGggLSBOdW1iZXJcbiAqICBjb2xvciAtIGNvbG9yIGluIGhleCB2YWx1ZVxuICogIGhlYWRMZW5ndGggLSBOdW1iZXJcbiAqICBoZWFkV2lkdGggLSBOdW1iZXJcbiAqL1xuXG52YXIgbGluZUdlb21ldHJ5LCBjb25lR2VvbWV0cnk7XG5cbmZ1bmN0aW9uIEFycm93SGVscGVyKCBkaXIsIG9yaWdpbiwgbGVuZ3RoLCBjb2xvciwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICkge1xuXG5cdC8vIGRpciBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0aWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkICkgY29sb3IgPSAweGZmZmYwMDtcblx0aWYgKCBsZW5ndGggPT09IHVuZGVmaW5lZCApIGxlbmd0aCA9IDE7XG5cdGlmICggaGVhZExlbmd0aCA9PT0gdW5kZWZpbmVkICkgaGVhZExlbmd0aCA9IDAuMiAqIGxlbmd0aDtcblx0aWYgKCBoZWFkV2lkdGggPT09IHVuZGVmaW5lZCApIGhlYWRXaWR0aCA9IDAuMiAqIGhlYWRMZW5ndGg7XG5cblx0aWYgKCBsaW5lR2VvbWV0cnkgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGxpbmVHZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGxpbmVHZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbIDAsIDAsIDAsIDAsIDEsIDAgXSwgMyApICk7XG5cblx0XHRjb25lR2VvbWV0cnkgPSBuZXcgQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSggMCwgMC41LCAxLCA1LCAxICk7XG5cdFx0Y29uZUdlb21ldHJ5LnRyYW5zbGF0ZSggMCwgLSAwLjUsIDAgKTtcblxuXHR9XG5cblx0dGhpcy5wb3NpdGlvbi5jb3B5KCBvcmlnaW4gKTtcblxuXHR0aGlzLmxpbmUgPSBuZXcgTGluZSggbGluZUdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yIH0gKSApO1xuXHR0aGlzLmxpbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmFkZCggdGhpcy5saW5lICk7XG5cblx0dGhpcy5jb25lID0gbmV3IE1lc2goIGNvbmVHZW9tZXRyeSwgbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciB9ICkgKTtcblx0dGhpcy5jb25lLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5hZGQoIHRoaXMuY29uZSApO1xuXG5cdHRoaXMuc2V0RGlyZWN0aW9uKCBkaXIgKTtcblx0dGhpcy5zZXRMZW5ndGgoIGxlbmd0aCwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICk7XG5cbn1cblxuQXJyb3dIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5BcnJvd0hlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBcnJvd0hlbHBlcjtcblxuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldERpcmVjdGlvbiA9ICggZnVuY3Rpb24gKCkge1xuXG5cdHZhciBheGlzID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIHJhZGlhbnM7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHNldERpcmVjdGlvbiggZGlyICkge1xuXG5cdFx0Ly8gZGlyIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0aWYgKCBkaXIueSA+IDAuOTk5OTkgKSB7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5zZXQoIDAsIDAsIDAsIDEgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGRpci55IDwgLSAwLjk5OTk5ICkge1xuXG5cdFx0XHR0aGlzLnF1YXRlcm5pb24uc2V0KCAxLCAwLCAwLCAwICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRheGlzLnNldCggZGlyLnosIDAsIC0gZGlyLnggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0cmFkaWFucyA9IE1hdGguYWNvcyggZGlyLnkgKTtcblxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIHJhZGlhbnMgKTtcblxuXHRcdH1cblxuXHR9O1xuXG59KCkgKTtcblxuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldExlbmd0aCA9IGZ1bmN0aW9uICggbGVuZ3RoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKSB7XG5cblx0aWYgKCBoZWFkTGVuZ3RoID09PSB1bmRlZmluZWQgKSBoZWFkTGVuZ3RoID0gMC4yICogbGVuZ3RoO1xuXHRpZiAoIGhlYWRXaWR0aCA9PT0gdW5kZWZpbmVkICkgaGVhZFdpZHRoID0gMC4yICogaGVhZExlbmd0aDtcblxuXHR0aGlzLmxpbmUuc2NhbGUuc2V0KCAxLCBNYXRoLm1heCggMCwgbGVuZ3RoIC0gaGVhZExlbmd0aCApLCAxICk7XG5cdHRoaXMubGluZS51cGRhdGVNYXRyaXgoKTtcblxuXHR0aGlzLmNvbmUuc2NhbGUuc2V0KCBoZWFkV2lkdGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCApO1xuXHR0aGlzLmNvbmUucG9zaXRpb24ueSA9IGxlbmd0aDtcblx0dGhpcy5jb25lLnVwZGF0ZU1hdHJpeCgpO1xuXG59O1xuXG5BcnJvd0hlbHBlci5wcm90b3R5cGUuc2V0Q29sb3IgPSBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdHRoaXMubGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KCBjb2xvciApO1xuXHR0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3IuY29weSggY29sb3IgKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIHNyb3VjaGVyYXkgLyBodHRwOi8vc3JvdWNoZXJheS5vcmcvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEF4ZXNIZWxwZXIoIHNpemUgKSB7XG5cblx0c2l6ZSA9IHNpemUgfHwgMTtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0MCwgMCwgMCxcdHNpemUsIDAsIDAsXG5cdFx0MCwgMCwgMCxcdDAsIHNpemUsIDAsXG5cdFx0MCwgMCwgMCxcdDAsIDAsIHNpemVcblx0XTtcblxuXHR2YXIgY29sb3JzID0gW1xuXHRcdDEsIDAsIDAsXHQxLCAwLjYsIDAsXG5cdFx0MCwgMSwgMCxcdDAuNiwgMSwgMCxcblx0XHQwLCAwLCAxLFx0MCwgMC42LCAxXG5cdF07XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMgfSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5BeGVzSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTtcbkF4ZXNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXhlc0hlbHBlcjtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEZhY2U0KCBhLCBiLCBjLCBkLCBub3JtYWwsIGNvbG9yLCBtYXRlcmlhbEluZGV4ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZhY2U0IGhhcyBiZWVuIHJlbW92ZWQuIEEgVEhSRUUuRmFjZTMgd2lsbCBiZSBjcmVhdGVkIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IEZhY2UzKCBhLCBiLCBjLCBub3JtYWwsIGNvbG9yLCBtYXRlcmlhbEluZGV4ICk7XG5cbn1cblxudmFyIExpbmVTdHJpcCA9IDA7XG5cbnZhciBMaW5lUGllY2VzID0gMTtcblxuZnVuY3Rpb24gTWVzaEZhY2VNYXRlcmlhbCggbWF0ZXJpYWxzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLk1lc2hGYWNlTWF0ZXJpYWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGFuIEFycmF5IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbWF0ZXJpYWxzO1xuXG59XG5cbmZ1bmN0aW9uIE11bHRpTWF0ZXJpYWwoIG1hdGVyaWFscyApIHtcblxuXHRpZiAoIG1hdGVyaWFscyA9PT0gdW5kZWZpbmVkICkgbWF0ZXJpYWxzID0gW107XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTXVsdGlNYXRlcmlhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYW4gQXJyYXkgaW5zdGVhZC4nICk7XG5cdG1hdGVyaWFscy5pc011bHRpTWF0ZXJpYWwgPSB0cnVlO1xuXHRtYXRlcmlhbHMubWF0ZXJpYWxzID0gbWF0ZXJpYWxzO1xuXHRtYXRlcmlhbHMuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbWF0ZXJpYWxzLnNsaWNlKCk7XG5cblx0fTtcblx0cmV0dXJuIG1hdGVyaWFscztcblxufVxuXG5mdW5jdGlvbiBQb2ludENsb3VkKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUG9pbnRDbG91ZCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50cy4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZSggbWF0ZXJpYWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGUgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5TcHJpdGUuJyApO1xuXHRyZXR1cm4gbmV3IFNwcml0ZSggbWF0ZXJpYWwgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZVN5c3RlbSggZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlBhcnRpY2xlU3lzdGVtIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzLicgKTtcblx0cmV0dXJuIG5ldyBQb2ludHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG59XG5cbmZ1bmN0aW9uIFBvaW50Q2xvdWRNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZUJhc2ljTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGVCYXNpY01hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApO1xuXHRyZXR1cm4gbmV3IFBvaW50c01hdGVyaWFsKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuZnVuY3Rpb24gUGFydGljbGVTeXN0ZW1NYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuJyApO1xuXHRyZXR1cm4gbmV3IFBvaW50c01hdGVyaWFsKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuZnVuY3Rpb24gVmVydGV4KCB4LCB5LCB6ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlcnRleCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuVmVjdG9yMyBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBWZWN0b3IzKCB4LCB5LCB6ICk7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoKS5zZXREeW5hbWljKCB0cnVlICkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKS5zZXREeW5hbWljKCB0cnVlICk7XG5cbn1cblxuZnVuY3Rpb24gSW50OEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgSW50OEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gVWludDhBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5VaW50OEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgVWludDhCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gSW50MTZBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDE2QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgSW50MTZCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIFVpbnQxNkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gSW50MzJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbnQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgSW50MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIFVpbnQzMkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlVpbnQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gRmxvYXQzMkF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZsb2F0MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuZnVuY3Rpb24gRmxvYXQ2NEF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkZsb2F0NjRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5GbG9hdDY0QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplICk7XG5cbn1cblxuLy9cblxuQ3VydmUuY3JlYXRlID0gZnVuY3Rpb24gKCBjb25zdHJ1Y3QsIGdldFBvaW50ICkge1xuXG5cdGNvbnNvbGUubG9nKCAnVEhSRUUuQ3VydmUuY3JlYXRlKCkgaGFzIGJlZW4gZGVwcmVjYXRlZCcgKTtcblxuXHRjb25zdHJ1Y3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5cdGNvbnN0cnVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Q7XG5cdGNvbnN0cnVjdC5wcm90b3R5cGUuZ2V0UG9pbnQgPSBnZXRQb2ludDtcblxuXHRyZXR1cm4gY29uc3RydWN0O1xuXG59O1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBDdXJ2ZVBhdGgucHJvdG90eXBlLCB7XG5cblx0Y3JlYXRlUG9pbnRzR2VvbWV0cnk6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmVQYXRoOiAuY3JlYXRlUG9pbnRzR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICkgaW5zdGVhZC4nICk7XG5cblx0XHQvLyBnZW5lcmF0ZSBnZW9tZXRyeSBmcm9tIHBhdGggcG9pbnRzIChmb3IgTGluZSBvciBQb2ludHMgb2JqZWN0cylcblxuXHRcdHZhciBwdHMgPSB0aGlzLmdldFBvaW50cyggZGl2aXNpb25zICk7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkoIHB0cyApO1xuXG5cdH0sXG5cblx0Y3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnk6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmVQYXRoOiAuY3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICkgaW5zdGVhZC4nICk7XG5cblx0XHQvLyBnZW5lcmF0ZSBnZW9tZXRyeSBmcm9tIGVxdWlkaXN0YW50IHNhbXBsaW5nIGFsb25nIHRoZSBwYXRoXG5cblx0XHR2YXIgcHRzID0gdGhpcy5nZXRTcGFjZWRQb2ludHMoIGRpdmlzaW9ucyApO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5KCBwdHMgKTtcblxuXHR9LFxuXG5cdGNyZWF0ZUdlb21ldHJ5OiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlUGF0aDogLmNyZWF0ZUdlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5HZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApIGluc3RlYWQuJyApO1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHBvaW50ID0gcG9pbnRzWyBpIF07XG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKCBuZXcgVmVjdG9yMyggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBnZW9tZXRyeTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggUGF0aC5wcm90b3R5cGUsIHtcblxuXHRmcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlBhdGg6IC5mcm9tUG9pbnRzKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbVBvaW50cygpLicgKTtcblx0XHR0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5mdW5jdGlvbiBDbG9zZWRTcGxpbmVDdXJ2ZTMoIHBvaW50cyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5DbG9zZWRTcGxpbmVDdXJ2ZTMgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMgaW5zdGVhZC4nICk7XG5cblx0Q2F0bXVsbFJvbUN1cnZlMy5jYWxsKCB0aGlzLCBwb2ludHMgKTtcblx0dGhpcy50eXBlID0gJ2NhdG11bGxyb20nO1xuXHR0aGlzLmNsb3NlZCA9IHRydWU7XG5cbn1cblxuQ2xvc2VkU3BsaW5lQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlICk7XG5cbi8vXG5cbmZ1bmN0aW9uIFNwbGluZUN1cnZlMyggcG9pbnRzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwbGluZUN1cnZlMyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicgKTtcblxuXHRDYXRtdWxsUm9tQ3VydmUzLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXHR0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7XG5cbn1cblxuU3BsaW5lQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlICk7XG5cbi8vXG5cbmZ1bmN0aW9uIFNwbGluZSggcG9pbnRzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwbGluZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicgKTtcblxuXHRDYXRtdWxsUm9tQ3VydmUzLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXHR0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7XG5cbn1cblxuU3BsaW5lLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlICk7XG5cbk9iamVjdC5hc3NpZ24oIFNwbGluZS5wcm90b3R5cGUsIHtcblxuXHRpbml0RnJvbUFycmF5OiBmdW5jdGlvbiAoIC8qIGEgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU3BsaW5lOiAuaW5pdEZyb21BcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGdldENvbnRyb2xQb2ludHNBcnJheTogZnVuY3Rpb24gKCAvKiBvcHRpb25hbFRhcmdldCAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TcGxpbmU6IC5nZXRDb250cm9sUG9pbnRzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRyZXBhcmFtZXRyaXplQnlBcmNMZW5ndGg6IGZ1bmN0aW9uICggLyogc2FtcGxpbmdDb2VmICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNwbGluZTogLnJlcGFyYW1ldHJpemVCeUFyY0xlbmd0aCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5mdW5jdGlvbiBBeGlzSGVscGVyKCBzaXplICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkF4aXNIZWxwZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5BeGVzSGVscGVyLicgKTtcblx0cmV0dXJuIG5ldyBBeGVzSGVscGVyKCBzaXplICk7XG5cbn1cblxuZnVuY3Rpb24gQm91bmRpbmdCb3hIZWxwZXIoIG9iamVjdCwgY29sb3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm91bmRpbmdCb3hIZWxwZXIgaGFzIGJlZW4gZGVwcmVjYXRlZC4gQ3JlYXRpbmcgYSBUSFJFRS5Cb3hIZWxwZXIgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgQm94SGVscGVyKCBvYmplY3QsIGNvbG9yICk7XG5cbn1cblxuZnVuY3Rpb24gRWRnZXNIZWxwZXIoIG9iamVjdCwgaGV4ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkVkZ2VzSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5FZGdlc0dlb21ldHJ5IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IExpbmVTZWdtZW50cyggbmV3IEVkZ2VzR2VvbWV0cnkoIG9iamVjdC5nZW9tZXRyeSApLCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGhleCAhPT0gdW5kZWZpbmVkID8gaGV4IDogMHhmZmZmZmYgfSApICk7XG5cbn1cblxuR3JpZEhlbHBlci5wcm90b3R5cGUuc2V0Q29sb3JzID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5HcmlkSGVscGVyOiBzZXRDb2xvcnMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwYXNzIHRoZW0gaW4gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQuJyApO1xuXG59O1xuXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Ta2VsZXRvbkhlbHBlcjogdXBkYXRlKCkgbm8gbG9uZ2VyIG5lZWRzIHRvIGJlIGNhbGxlZC4nICk7XG5cbn07XG5cbmZ1bmN0aW9uIFdpcmVmcmFtZUhlbHBlciggb2JqZWN0LCBoZXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2lyZWZyYW1lSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBMaW5lU2VnbWVudHMoIG5ldyBXaXJlZnJhbWVHZW9tZXRyeSggb2JqZWN0Lmdlb21ldHJ5ICksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4ICE9PSB1bmRlZmluZWQgPyBoZXggOiAweGZmZmZmZiB9ICkgKTtcblxufVxuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0ZXh0cmFjdFVybEJhc2U6IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTG9hZGVyOiAuZXh0cmFjdFVybEJhc2UoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApO1xuXG5cdH1cblxufSApO1xuXG5mdW5jdGlvbiBYSFJMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuWEhSTG9hZGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuRmlsZUxvYWRlci4nICk7XG5cdHJldHVybiBuZXcgRmlsZUxvYWRlciggbWFuYWdlciApO1xuXG59XG5cbmZ1bmN0aW9uIEJpbmFyeVRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQmluYXJ5VGV4dHVyZUxvYWRlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkRhdGFUZXh0dXJlTG9hZGVyLicgKTtcblx0cmV0dXJuIG5ldyBEYXRhVGV4dHVyZUxvYWRlciggbWFuYWdlciApO1xuXG59XG5cbi8vXG5cbk9iamVjdC5hc3NpZ24oIEJveDIucHJvdG90eXBlLCB7XG5cblx0Y2VudGVyOiBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmNlbnRlcigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldENlbnRlcigpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRDZW50ZXIoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fSxcblx0ZW1wdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5lbXB0eSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmlzRW1wdHkoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpO1xuXG5cdH0sXG5cdGlzSW50ZXJzZWN0aW9uQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveCggYm94ICk7XG5cblx0fSxcblx0c2l6ZTogZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5zaXplKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0U2l6ZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRTaXplKCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH1cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggQm94My5wcm90b3R5cGUsIHtcblxuXHRjZW50ZXI6IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldENlbnRlciggb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9LFxuXHRlbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCk7XG5cblx0fSxcblx0aXNJbnRlcnNlY3Rpb25Cb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KCBib3ggKTtcblxuXHR9LFxuXHRpc0ludGVyc2VjdGlvblNwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuaXNJbnRlcnNlY3Rpb25TcGhlcmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzU3BoZXJlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApO1xuXG5cdH0sXG5cdHNpemU6IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuc2l6ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFNpemUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2l6ZSggb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG59ICk7XG5cbkxpbmUzLnByb3RvdHlwZS5jZW50ZXIgPSBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRDZW50ZXIoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbk9iamVjdC5hc3NpZ24oIF9NYXRoLCB7XG5cblx0cmFuZG9tMTY6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGg6IC5yYW5kb20xNigpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBNYXRoLnJhbmRvbSgpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBNYXRoLnJhbmRvbSgpO1xuXG5cdH0sXG5cblx0bmVhcmVzdFBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRoOiAubmVhcmVzdFBvd2VyT2ZUd28oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mbG9vclBvd2VyT2ZUd28oKS4nICk7XG5cdFx0cmV0dXJuIF9NYXRoLmZsb29yUG93ZXJPZlR3byggdmFsdWUgKTtcblxuXHR9LFxuXG5cdG5leHRQb3dlck9mVHdvOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0aDogLm5leHRQb3dlck9mVHdvKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuY2VpbFBvd2VyT2ZUd28oKS4nICk7XG5cdFx0cmV0dXJuIF9NYXRoLmNlaWxQb3dlck9mVHdvKCB2YWx1ZSApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBNYXRyaXgzLnByb3RvdHlwZSwge1xuXG5cdGZsYXR0ZW5Ub0FycmF5T2Zmc2V0OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuTWF0cml4MzogLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC50b0FycmF5KCkgaW5zdGVhZC5cIiApO1xuXHRcdHJldHVybiB0aGlzLnRvQXJyYXkoIGFycmF5LCBvZmZzZXQgKTtcblxuXHR9LFxuXHRtdWx0aXBseVZlY3RvcjM6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXgzKCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4MyggdGhpcyApO1xuXG5cdH0sXG5cdG11bHRpcGx5VmVjdG9yM0FycmF5OiBmdW5jdGlvbiAoIC8qIGEgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0YXBwbHlUb0J1ZmZlcjogZnVuY3Rpb24gKCBidWZmZXIgLyosIG9mZnNldCwgbGVuZ3RoICovICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4MzogLmFwcGx5VG9CdWZmZXIoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIGJ1ZmZlciApO1xuXG5cdH0sXG5cdGFwcGx5VG9WZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYXJyYXksIG9mZnNldCwgbGVuZ3RoICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDM6IC5hcHBseVRvVmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIE1hdHJpeDQucHJvdG90eXBlLCB7XG5cblx0ZXh0cmFjdFBvc2l0aW9uOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuZXh0cmFjdFBvc2l0aW9uKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuY29weVBvc2l0aW9uKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmNvcHlQb3NpdGlvbiggbSApO1xuXG5cdH0sXG5cdGZsYXR0ZW5Ub0FycmF5T2Zmc2V0OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuTWF0cml4NDogLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC50b0FycmF5KCkgaW5zdGVhZC5cIiApO1xuXHRcdHJldHVybiB0aGlzLnRvQXJyYXkoIGFycmF5LCBvZmZzZXQgKTtcblxuXHR9LFxuXHRnZXRQb3NpdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHYxO1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGdldFBvc2l0aW9uKCkge1xuXG5cdFx0XHRpZiAoIHYxID09PSB1bmRlZmluZWQgKSB2MSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuZ2V0UG9zaXRpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHYxLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDMgKTtcblxuXHRcdH07XG5cblx0fSgpLFxuXHRzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICk7XG5cblx0fSxcblx0bXVsdGlwbHlUb0FycmF5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlUb0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0bXVsdGlwbHlWZWN0b3IzOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxuXHR9LFxuXHRtdWx0aXBseVZlY3RvcjQ6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yNCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCggdGhpcyApO1xuXG5cdH0sXG5cdG11bHRpcGx5VmVjdG9yM0FycmF5OiBmdW5jdGlvbiAoIC8qIGEgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0cm90YXRlQXhpczogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLnJvdGF0ZUF4aXMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVmVjdG9yMy50cmFuc2Zvcm1EaXJlY3Rpb24oIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRcdHYudHJhbnNmb3JtRGlyZWN0aW9uKCB0aGlzICk7XG5cblx0fSxcblx0Y3Jvc3NWZWN0b3I6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLmNyb3NzVmVjdG9yKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDQoIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzICk7XG5cblx0fSxcblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJvdGF0ZVg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJvdGF0ZVk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJvdGF0ZVo6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAucm90YXRlWigpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJvdGF0ZUJ5QXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVCeUF4aXMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRhcHBseVRvQnVmZmVyOiBmdW5jdGlvbiAoIGJ1ZmZlciAvKiwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuYXBwbHlUb0J1ZmZlcigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBtYXRyaXguYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSggYnVmZmVyICk7XG5cblx0fSxcblx0YXBwbHlUb1ZlY3RvcjNBcnJheTogZnVuY3Rpb24gKCAvKiBhcnJheSwgb2Zmc2V0LCBsZW5ndGggKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLmFwcGx5VG9WZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRtYWtlRnJ1c3R1bTogZnVuY3Rpb24gKCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tYWtlRnJ1c3R1bSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgKTtcblxuXHR9XG5cbn0gKTtcblxuUGxhbmUucHJvdG90eXBlLmlzSW50ZXJzZWN0aW9uTGluZSA9IGZ1bmN0aW9uICggbGluZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QbGFuZTogLmlzSW50ZXJzZWN0aW9uTGluZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNMaW5lKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzTGluZSggbGluZSApO1xuXG59O1xuXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS5tdWx0aXBseVZlY3RvcjMgPSBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5RdWF0ZXJuaW9uOiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGlzIG5vdyB2ZWN0b3IuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uICkgaW5zdGVhZC4nICk7XG5cdHJldHVybiB2ZWN0b3IuYXBwbHlRdWF0ZXJuaW9uKCB0aGlzICk7XG5cbn07XG5cbk9iamVjdC5hc3NpZ24oIFJheS5wcm90b3R5cGUsIHtcblxuXHRpc0ludGVyc2VjdGlvbkJveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXk6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveCggYm94ICk7XG5cblx0fSxcblx0aXNJbnRlcnNlY3Rpb25QbGFuZTogZnVuY3Rpb24gKCBwbGFuZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uUGxhbmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzUGxhbmUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1BsYW5lKCBwbGFuZSApO1xuXG5cdH0sXG5cdGlzSW50ZXJzZWN0aW9uU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uU3BoZXJlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c1NwaGVyZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUucHJvdG90eXBlLCB7XG5cblx0YXJlYTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5hcmVhKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QXJlYSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRBcmVhKCk7XG5cblx0fSxcblx0YmFyeWNvb3JkRnJvbVBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmJhcnljb29yZEZyb21Qb2ludCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldEJhcnljb29yZCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRCYXJ5Y29vcmQoIHBvaW50LCB0YXJnZXQgKTtcblxuXHR9LFxuXHRtaWRwb2ludDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLm1pZHBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0TWlkcG9pbnQoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0TWlkcG9pbnQoIHRhcmdldCApO1xuXG5cdH0sXG5cdG5vcm1hbDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLm5vcm1hbCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE5vcm1hbCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXROb3JtYWwoIHRhcmdldCApO1xuXG5cdH0sXG5cdHBsYW5lOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAucGxhbmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRQbGFuZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRQbGFuZSggdGFyZ2V0ICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFRyaWFuZ2xlLCB7XG5cblx0YmFyeWNvb3JkRnJvbVBvaW50OiBmdW5jdGlvbiAoIHBvaW50LCBhLCBiLCBjLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmJhcnljb29yZEZyb21Qb2ludCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldEJhcnljb29yZCgpLicgKTtcblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgdGFyZ2V0ICk7XG5cblx0fSxcblx0bm9ybWFsOiBmdW5jdGlvbiAoIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAubm9ybWFsKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Tm9ybWFsKCkuJyApO1xuXHRcdHJldHVybiBUcmlhbmdsZS5nZXROb3JtYWwoIGEsIGIsIGMsIHRhcmdldCApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBTaGFwZS5wcm90b3R5cGUsIHtcblxuXHRleHRyYWN0QWxsUG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNoYXBlOiAuZXh0cmFjdEFsbFBvaW50cygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuZXh0cmFjdFBvaW50cygpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dHJhY3RQb2ludHMoIGRpdmlzaW9ucyApO1xuXG5cdH0sXG5cdGV4dHJ1ZGU6IGZ1bmN0aW9uICggb3B0aW9ucyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNoYXBlOiAuZXh0cnVkZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFeHRydWRlR2VvbWV0cnkoKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gbmV3IEV4dHJ1ZGVHZW9tZXRyeSggdGhpcywgb3B0aW9ucyApO1xuXG5cdH0sXG5cdG1ha2VHZW9tZXRyeTogZnVuY3Rpb24gKCBvcHRpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhcGU6IC5tYWtlR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgU2hhcGVHZW9tZXRyeSgpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBuZXcgU2hhcGVHZW9tZXRyeSggdGhpcywgb3B0aW9ucyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3IyLnByb3RvdHlwZSwge1xuXG5cdGZyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApO1xuXG5cdH0sXG5cdGRpc3RhbmNlVG9NYW5oYXR0YW46IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5kaXN0YW5jZVRvTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuRGlzdGFuY2VUbygpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICk7XG5cblx0fSxcblx0bGVuZ3RoTWFuaGF0dGFuOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3IzLnByb3RvdHlwZSwge1xuXG5cdHNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuVmVjdG9yMzogLnNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21Sb3RhdGlvbk1hdHJpeCgpIGluc3RlYWQuJyApO1xuXG5cdH0sXG5cdHNldEV1bGVyRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5WZWN0b3IzOiAuc2V0RXVsZXJGcm9tUXVhdGVybmlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBFdWxlci5zZXRGcm9tUXVhdGVybmlvbigpIGluc3RlYWQuJyApO1xuXG5cdH0sXG5cdGdldFBvc2l0aW9uRnJvbU1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmdldFBvc2l0aW9uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhQb3NpdGlvbigpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG0gKTtcblxuXHR9LFxuXHRnZXRTY2FsZUZyb21NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5nZXRTY2FsZUZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4U2NhbGUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeFNjYWxlKCBtICk7XG5cblx0fSxcblx0Z2V0Q29sdW1uRnJvbU1hdHJpeDogZnVuY3Rpb24gKCBpbmRleCwgbWF0cml4ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmdldENvbHVtbkZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4Q29sdW1uKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG1hdHJpeCwgaW5kZXggKTtcblxuXHR9LFxuXHRhcHBseVByb2plY3Rpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5hcHBseVByb2plY3Rpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmFwcGx5TWF0cml4NCggbSApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggbSApO1xuXG5cdH0sXG5cdGZyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApO1xuXG5cdH0sXG5cdGRpc3RhbmNlVG9NYW5oYXR0YW46IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5kaXN0YW5jZVRvTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuRGlzdGFuY2VUbygpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICk7XG5cblx0fSxcblx0bGVuZ3RoTWFuaGF0dGFuOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3I0LnByb3RvdHlwZSwge1xuXG5cdGZyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApO1xuXG5cdH0sXG5cdGxlbmd0aE1hbmhhdHRhbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogLmxlbmd0aE1hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkxlbmd0aCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggR2VvbWV0cnkucHJvdG90eXBlLCB7XG5cblx0Y29tcHV0ZVRhbmdlbnRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuR2VvbWV0cnk6IC5jb21wdXRlVGFuZ2VudHMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRjb21wdXRlTGluZURpc3RhbmNlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5OiAuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuTGluZS5jb21wdXRlTGluZURpc3RhbmNlcygpIGluc3RlYWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBPYmplY3QzRC5wcm90b3R5cGUsIHtcblxuXHRnZXRDaGlsZEJ5TmFtZTogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRDaGlsZEJ5TmFtZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE9iamVjdEJ5TmFtZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeU5hbWUoIG5hbWUgKTtcblxuXHR9LFxuXHRyZW5kZXJEZXB0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5yZW5kZXJEZXB0aCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnJlbmRlck9yZGVyLCBpbnN0ZWFkLicgKTtcblxuXHR9LFxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICggZGlzdGFuY2UsIGF4aXMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAudHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKTtcblxuXHR9LFxuXHRnZXRXb3JsZFJvdGF0aW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFJvdGF0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk9iamVjdDNELmdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkgaW5zdGVhZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBPYmplY3QzRC5wcm90b3R5cGUsIHtcblxuXHRldWxlck9yZGVyOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnJvdGF0aW9uLm9yZGVyO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicgKTtcblx0XHRcdHRoaXMucm90YXRpb24ub3JkZXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0dXNlUXVhdGVybmlvbjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC4nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTE9ELnByb3RvdHlwZSwge1xuXG5cdG9iamVjdHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTE9EOiAub2JqZWN0cyBoYXMgYmVlbiByZW5hbWVkIHRvIC5sZXZlbHMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMubGV2ZWxzO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBTa2VsZXRvbi5wcm90b3R5cGUsICd1c2VWZXJ0ZXhUZXh0dXJlJywge1xuXG5cdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tlbGV0b246IHVzZVZlcnRleFRleHR1cmUgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbjogdXNlVmVydGV4VGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBDdXJ2ZS5wcm90b3R5cGUsICdfX2FyY0xlbmd0aERpdmlzaW9ucycsIHtcblxuXHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlOiAuX19hcmNMZW5ndGhEaXZpc2lvbnMgaXMgbm93IC5hcmNMZW5ndGhEaXZpc2lvbnMuJyApO1xuXHRcdHJldHVybiB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLl9fYXJjTGVuZ3RoRGl2aXNpb25zIGlzIG5vdyAuYXJjTGVuZ3RoRGl2aXNpb25zLicgKTtcblx0XHR0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyA9IHZhbHVlO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUuc2V0TGVucyA9IGZ1bmN0aW9uICggZm9jYWxMZW5ndGgsIGZpbG1HYXVnZSApIHtcblxuXHRjb25zb2xlLndhcm4oIFwiVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEuc2V0TGVucyBpcyBkZXByZWNhdGVkLiBcIiArXG5cdFx0XHRcIlVzZSAuc2V0Rm9jYWxMZW5ndGggYW5kIC5maWxtR2F1Z2UgZm9yIGEgcGhvdG9ncmFwaGljIHNldHVwLlwiICk7XG5cblx0aWYgKCBmaWxtR2F1Z2UgIT09IHVuZGVmaW5lZCApIHRoaXMuZmlsbUdhdWdlID0gZmlsbUdhdWdlO1xuXHR0aGlzLnNldEZvY2FsTGVuZ3RoKCBmb2NhbExlbmd0aCApO1xuXG59O1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTGlnaHQucHJvdG90eXBlLCB7XG5cdG9ubHlTaGFkb3c6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5vbmx5U2hhZG93IGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFGb3Y6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhRm92IGlzIG5vdyAuc2hhZG93LmNhbWVyYS5mb3YuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmZvdiA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFMZWZ0OiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUxlZnQgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmxlZnQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmxlZnQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhUmlnaHQ6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhUmlnaHQgaXMgbm93IC5zaGFkb3cuY2FtZXJhLnJpZ2h0LicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5yaWdodCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFUb3A6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhVG9wIGlzIG5vdyAuc2hhZG93LmNhbWVyYS50b3AuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLnRvcCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFCb3R0b206IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhQm90dG9tIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5ib3R0b20uJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFOZWFyOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYU5lYXIgaXMgbm93IC5zaGFkb3cuY2FtZXJhLm5lYXIuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLm5lYXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhRmFyOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYUZhciBpcyBub3cgLnNoYWRvdy5jYW1lcmEuZmFyLicgKTtcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5mYXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Q2FtZXJhVmlzaWJsZToge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0NhbWVyYVZpc2libGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5DYW1lcmFIZWxwZXIoIGxpZ2h0LnNoYWRvdy5jYW1lcmEgKSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93Qmlhczoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dCaWFzIGlzIG5vdyAuc2hhZG93LmJpYXMuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuYmlhcyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dEYXJrbmVzczoge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0RhcmtuZXNzIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBXaWR0aDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dNYXBXaWR0aCBpcyBub3cgLnNoYWRvdy5tYXBTaXplLndpZHRoLicgKTtcblx0XHRcdHRoaXMuc2hhZG93Lm1hcFNpemUud2lkdGggPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0c2hhZG93TWFwSGVpZ2h0OiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd01hcEhlaWdodCBpcyBub3cgLnNoYWRvdy5tYXBTaXplLmhlaWdodC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7XG5cblx0bGVuZ3RoOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogLmxlbmd0aCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmNvdW50IGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoO1xuXG5cdFx0fVxuXHR9LFxuXHRjb3B5SW5kaWNlc0FycmF5OiBmdW5jdGlvbiAoIC8qIGluZGljZXMgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuY29weUluZGljZXNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRhZGRJbmRleDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkSW5kZXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRJbmRleCgpLicgKTtcblx0XHR0aGlzLnNldEluZGV4KCBpbmRleCApO1xuXG5cdH0sXG5cdGFkZERyYXdDYWxsOiBmdW5jdGlvbiAoIHN0YXJ0LCBjb3VudCwgaW5kZXhPZmZzZXQgKSB7XG5cblx0XHRpZiAoIGluZGV4T2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkRHJhd0NhbGwoKSBubyBsb25nZXIgc3VwcG9ydHMgaW5kZXhPZmZzZXQuJyApO1xuXG5cdFx0fVxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkRHJhd0NhbGwoKSBpcyBub3cgLmFkZEdyb3VwKCkuJyApO1xuXHRcdHRoaXMuYWRkR3JvdXAoIHN0YXJ0LCBjb3VudCApO1xuXG5cdH0sXG5cdGNsZWFyRHJhd0NhbGxzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNsZWFyRHJhd0NhbGxzKCkgaXMgbm93IC5jbGVhckdyb3VwcygpLicgKTtcblx0XHR0aGlzLmNsZWFyR3JvdXBzKCk7XG5cblx0fSxcblx0Y29tcHV0ZVRhbmdlbnRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVUYW5nZW50cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGNvbXB1dGVPZmZzZXRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNvbXB1dGVPZmZzZXRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRkcmF3Y2FsbHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuZHJhd2NhbGxzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91cHM7XG5cblx0XHR9XG5cdH0sXG5cdG9mZnNldHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5vZmZzZXRzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91cHM7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBFeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLCB7XG5cblx0Z2V0QXJyYXlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiAuZ2V0QXJyYXlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblxuXHRhZGRTaGFwZUxpc3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5FeHRydWRlQnVmZmVyR2VvbWV0cnk6IC5hZGRTaGFwZUxpc3QoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXG5cdGFkZFNoYXBlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiAuYWRkU2hhcGUoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFVuaWZvcm0ucHJvdG90eXBlLCB7XG5cblx0ZHluYW1pYzoge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Vbmlmb3JtOiAuZHluYW1pYyBoYXMgYmVlbiByZW1vdmVkLiBVc2Ugb2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdG9uVXBkYXRlOiB7XG5cdFx0dmFsdWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVW5pZm9ybTogLm9uVXBkYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG9iamVjdC5vbkJlZm9yZVJlbmRlcigpIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTWF0ZXJpYWwucHJvdG90eXBlLCB7XG5cblx0d3JhcEFyb3VuZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHdyYXBSR0I6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC53cmFwUkdCIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXHRcdFx0cmV0dXJuIG5ldyBDb2xvcigpO1xuXG5cdFx0fVxuXHR9LFxuXG5cdHNoYWRpbmc6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5mbGF0U2hhZGluZyA9ICggdmFsdWUgPT09IEZsYXRTaGFkaW5nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLCB7XG5cblx0bWV0YWw6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw6IC5tZXRhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbDogLm1ldGFsIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCBpbnN0ZWFkJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSwge1xuXG5cdGRlcml2YXRpdmVzOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNoYWRlck1hdGVyaWFsOiAuZGVyaXZhdGl2ZXMgaGFzIGJlZW4gbW92ZWQgdG8gLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcztcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS4gU2hhZGVyTWF0ZXJpYWw6IC5kZXJpdmF0aXZlcyBoYXMgYmVlbiBtb3ZlZCB0byAuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcy4nICk7XG5cdFx0XHR0aGlzLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMgPSB2YWx1ZTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbi8vXG5cbk9iamVjdC5hc3NpZ24oIFdlYkdMUmVuZGVyZXIucHJvdG90eXBlLCB7XG5cblx0YW5pbWF0ZTogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5hbmltYXRlKCkgaXMgbm93IC5zZXRBbmltYXRpb25Mb29wKCkuJyApO1xuXHRcdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCggY2FsbGJhY2sgKTtcblxuXHR9LFxuXG5cdGdldEN1cnJlbnRSZW5kZXJUYXJnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRDdXJyZW50UmVuZGVyVGFyZ2V0KCkgaXMgbm93IC5nZXRSZW5kZXJUYXJnZXQoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0fSxcblxuXHRnZXRNYXhBbmlzb3Ryb3B5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2V0TWF4QW5pc290cm9weSgpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKTtcblxuXHR9LFxuXG5cdGdldFByZWNpc2lvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdldFByZWNpc2lvbigpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLnByZWNpc2lvbi4nICk7XG5cdFx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLnByZWNpc2lvbjtcblxuXHR9LFxuXG5cdHJlc2V0R0xTdGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnJlc2V0R0xTdGF0ZSgpIGlzIG5vdyAuc3RhdGUucmVzZXQoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuc3RhdGUucmVzZXQoKTtcblxuXHR9LFxuXG5cdHN1cHBvcnRzRmxvYXRUZXh0dXJlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzRmxvYXRUZXh0dXJlcygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ09FU190ZXh0dXJlX2Zsb2F0XFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICk7XG5cblx0fSxcblx0c3VwcG9ydHNIYWxmRmxvYXRUZXh0dXJlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcgKTtcblxuXHR9LFxuXHRzdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcXCcgKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnICk7XG5cblx0fSxcblx0c3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cblx0fSxcblx0c3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzQmxlbmRNaW5NYXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0JsZW5kTWluTWF4KCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnRVhUX2JsZW5kX21pbm1heFxcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ0VYVF9ibGVuZF9taW5tYXgnICk7XG5cblx0fSxcblx0c3VwcG9ydHNWZXJ0ZXhUZXh0dXJlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMoKSBpcyBub3cgLmNhcGFiaWxpdGllcy52ZXJ0ZXhUZXh0dXJlcy4nICk7XG5cdFx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzO1xuXG5cdH0sXG5cdHN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNJbnN0YW5jZWRBcnJheXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTtcblxuXHR9LFxuXHRlbmFibGVTY2lzc29yVGVzdDogZnVuY3Rpb24gKCBib29sZWFuICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmVuYWJsZVNjaXNzb3JUZXN0KCkgaXMgbm93IC5zZXRTY2lzc29yVGVzdCgpLicgKTtcblx0XHR0aGlzLnNldFNjaXNzb3JUZXN0KCBib29sZWFuICk7XG5cblx0fSxcblx0aW5pdE1hdGVyaWFsOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuaW5pdE1hdGVyaWFsKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0YWRkUHJlUGx1Z2luOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWRkUHJlUGx1Z2luKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0YWRkUG9zdFBsdWdpbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFkZFBvc3RQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHR1cGRhdGVTaGFkb3dNYXA6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC51cGRhdGVTaGFkb3dNYXAoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRzZXRGYWNlQ3VsbGluZzogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNldEZhY2VDdWxsaW5nKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJHTFJlbmRlcmVyLnByb3RvdHlwZSwge1xuXG5cdHNoYWRvd01hcEVuYWJsZWQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc2hhZG93TWFwLmVuYWJsZWQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcEVuYWJsZWQgaXMgbm93IC5zaGFkb3dNYXAuZW5hYmxlZC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvd01hcC5lbmFibGVkID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd01hcFR5cGU6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc2hhZG93TWFwLnR5cGU7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcFR5cGUgaXMgbm93IC5zaGFkb3dNYXAudHlwZS4nICk7XG5cdFx0XHR0aGlzLnNoYWRvd01hcC50eXBlID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd01hcEN1bGxGYWNlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBDdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcEN1bGxGYWNlIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9XG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJHTFNoYWRvd01hcC5wcm90b3R5cGUsIHtcblxuXHRjdWxsRmFjZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLmN1bGxGYWNlIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIGN1bGxGYWNlICovICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLmN1bGxGYWNlIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRyZW5kZXJSZXZlcnNlU2lkZWQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJSZXZlcnNlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJSZXZlcnNlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHJlbmRlclNpbmdsZVNpZGVkOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAucmVuZGVyU2luZ2xlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJTaW5nbGVTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUsIHtcblxuXHR3cmFwUzoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLndyYXBTO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFMgaXMgbm93IC50ZXh0dXJlLndyYXBTLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS53cmFwUyA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHR3cmFwVDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBUIGlzIG5vdyAudGV4dHVyZS53cmFwVC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLndyYXBUO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFQgaXMgbm93IC50ZXh0dXJlLndyYXBULicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS53cmFwVCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRtYWdGaWx0ZXI6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5tYWdGaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1hZ0ZpbHRlci4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLm1hZ0ZpbHRlcjtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1hZ0ZpbHRlciBpcyBub3cgLnRleHR1cmUubWFnRmlsdGVyLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5tYWdGaWx0ZXIgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0bWluRmlsdGVyOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5taW5GaWx0ZXI7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5taW5GaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1pbkZpbHRlci4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUubWluRmlsdGVyID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdGFuaXNvdHJvcHk6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5hbmlzb3Ryb3B5IGlzIG5vdyAudGV4dHVyZS5hbmlzb3Ryb3B5LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUuYW5pc290cm9weTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmFuaXNvdHJvcHkgaXMgbm93IC50ZXh0dXJlLmFuaXNvdHJvcHkuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLmFuaXNvdHJvcHkgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0b2Zmc2V0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAub2Zmc2V0IGlzIG5vdyAudGV4dHVyZS5vZmZzZXQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5vZmZzZXQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5vZmZzZXQgaXMgbm93IC50ZXh0dXJlLm9mZnNldC4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUub2Zmc2V0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHJlcGVhdDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUucmVwZWF0O1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAucmVwZWF0IGlzIG5vdyAudGV4dHVyZS5yZXBlYXQuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLnJlcGVhdCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRmb3JtYXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5mb3JtYXQgaXMgbm93IC50ZXh0dXJlLmZvcm1hdC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLmZvcm1hdDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmZvcm1hdCBpcyBub3cgLnRleHR1cmUuZm9ybWF0LicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5mb3JtYXQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0dHlwZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS50eXBlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAudHlwZSBpcyBub3cgLnRleHR1cmUudHlwZS4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUudHlwZSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRnZW5lcmF0ZU1pcG1hcHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmdlbmVyYXRlTWlwbWFwcyBpcyBub3cgLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzLicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB2YWx1ZTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJWUk1hbmFnZXIucHJvdG90eXBlLCB7XG5cblx0c3RhbmRpbmc6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogdmFsdWUgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYlZSTWFuYWdlcjogLnN0YW5kaW5nIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuLy9cblxuQXVkaW8ucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoIGZpbGUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IC5sb2FkIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5BdWRpb0xvYWRlciBpbnN0ZWFkLicgKTtcblx0dmFyIHNjb3BlID0gdGhpcztcblx0dmFyIGF1ZGlvTG9hZGVyID0gbmV3IEF1ZGlvTG9hZGVyKCk7XG5cdGF1ZGlvTG9hZGVyLmxvYWQoIGZpbGUsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0c2NvcGUuc2V0QnVmZmVyKCBidWZmZXIgKTtcblxuXHR9ICk7XG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5BdWRpb0FuYWx5c2VyLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvQW5hbHlzZXI6IC5nZXREYXRhKCkgaXMgbm93IC5nZXRGcmVxdWVuY3lEYXRhKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRGcmVxdWVuY3lEYXRhKCk7XG5cbn07XG5cbi8vXG5cbkN1YmVDYW1lcmEucHJvdG90eXBlLnVwZGF0ZUN1YmVNYXAgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBzY2VuZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5DdWJlQ2FtZXJhOiAudXBkYXRlQ3ViZU1hcCgpIGlzIG5vdyAudXBkYXRlKCkuJyApO1xuXHRyZXR1cm4gdGhpcy51cGRhdGUoIHJlbmRlcmVyLCBzY2VuZSApO1xuXG59O1xuXG4vL1xuXG52YXIgR2VvbWV0cnlVdGlscyA9IHtcblxuXHRtZXJnZTogZnVuY3Rpb24gKCBnZW9tZXRyeTEsIGdlb21ldHJ5MiwgbWF0ZXJpYWxJbmRleE9mZnNldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkdlb21ldHJ5VXRpbHM6IC5tZXJnZSgpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkubWVyZ2UoIGdlb21ldHJ5MiwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkgaW5zdGVhZC4nICk7XG5cdFx0dmFyIG1hdHJpeDtcblxuXHRcdGlmICggZ2VvbWV0cnkyLmlzTWVzaCApIHtcblxuXHRcdFx0Z2VvbWV0cnkyLm1hdHJpeEF1dG9VcGRhdGUgJiYgZ2VvbWV0cnkyLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHRtYXRyaXggPSBnZW9tZXRyeTIubWF0cml4O1xuXHRcdFx0Z2VvbWV0cnkyID0gZ2VvbWV0cnkyLmdlb21ldHJ5O1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkxLm1lcmdlKCBnZW9tZXRyeTIsIG1hdHJpeCwgbWF0ZXJpYWxJbmRleE9mZnNldCApO1xuXG5cdH0sXG5cblx0Y2VudGVyOiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuR2VvbWV0cnlVdGlsczogLmNlbnRlcigpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkuY2VudGVyKCkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIGdlb21ldHJ5LmNlbnRlcigpO1xuXG5cdH1cblxufTtcblxudmFyIEltYWdlVXRpbHMgPSB7XG5cblx0Y3Jvc3NPcmlnaW46IHVuZGVmaW5lZCxcblxuXHRsb2FkVGV4dHVyZTogZnVuY3Rpb24gKCB1cmwsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLlRleHR1cmVMb2FkZXIoKSBpbnN0ZWFkLicgKTtcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgVGV4dHVyZUxvYWRlcigpO1xuXHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdFx0dmFyIHRleHR1cmUgPSBsb2FkZXIubG9hZCggdXJsLCBvbkxvYWQsIHVuZGVmaW5lZCwgb25FcnJvciApO1xuXG5cdFx0aWYgKCBtYXBwaW5nICkgdGV4dHVyZS5tYXBwaW5nID0gbWFwcGluZztcblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH0sXG5cblx0bG9hZFRleHR1cmVDdWJlOiBmdW5jdGlvbiAoIHVybHMsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmVDdWJlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5DdWJlVGV4dHVyZUxvYWRlcigpIGluc3RlYWQuJyApO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBDdWJlVGV4dHVyZUxvYWRlcigpO1xuXHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdFx0dmFyIHRleHR1cmUgPSBsb2FkZXIubG9hZCggdXJscywgb25Mb2FkLCB1bmRlZmluZWQsIG9uRXJyb3IgKTtcblxuXHRcdGlmICggbWFwcGluZyApIHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9LFxuXG5cdGxvYWRDb21wcmVzc2VkVGV4dHVyZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5ERFNMb2FkZXIgaW5zdGVhZC4nICk7XG5cblx0fSxcblxuXHRsb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5ERFNMb2FkZXIgaW5zdGVhZC4nICk7XG5cblx0fVxuXG59O1xuXG4vL1xuXG5mdW5jdGlvbiBQcm9qZWN0b3IoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb2plY3RvciBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvcmVuZGVyZXJzL1Byb2plY3Rvci5qcy4nICk7XG5cblx0dGhpcy5wcm9qZWN0VmVjdG9yID0gZnVuY3Rpb24gKCB2ZWN0b3IsIGNhbWVyYSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlByb2plY3RvcjogLnByb2plY3RWZWN0b3IoKSBpcyBub3cgdmVjdG9yLnByb2plY3QoKS4nICk7XG5cdFx0dmVjdG9yLnByb2plY3QoIGNhbWVyYSApO1xuXG5cdH07XG5cblx0dGhpcy51bnByb2plY3RWZWN0b3IgPSBmdW5jdGlvbiAoIHZlY3RvciwgY2FtZXJhICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUHJvamVjdG9yOiAudW5wcm9qZWN0VmVjdG9yKCkgaXMgbm93IHZlY3Rvci51bnByb2plY3QoKS4nICk7XG5cdFx0dmVjdG9yLnVucHJvamVjdCggY2FtZXJhICk7XG5cblx0fTtcblxuXHR0aGlzLnBpY2tpbmdSYXkgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvamVjdG9yOiAucGlja2luZ1JheSgpIGlzIG5vdyByYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSgpLicgKTtcblxuXHR9O1xuXG59XG5cbi8vXG5cbmZ1bmN0aW9uIENhbnZhc1JlbmRlcmVyKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5DYW52YXNSZW5kZXJlciBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvcmVuZGVyZXJzL0NhbnZhc1JlbmRlcmVyLmpzJyApO1xuXG5cdHRoaXMuZG9tRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnY2FudmFzJyApO1xuXHR0aGlzLmNsZWFyID0gZnVuY3Rpb24gKCkge307XG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCkge307XG5cdHRoaXMuc2V0Q2xlYXJDb2xvciA9IGZ1bmN0aW9uICgpIHt9O1xuXHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbiAoKSB7fTtcblxufVxuXG4vL1xuXG52YXIgU2NlbmVVdGlscyA9IHtcblxuXHRjcmVhdGVNdWx0aU1hdGVyaWFsT2JqZWN0OiBmdW5jdGlvbiAoIC8qIGdlb21ldHJ5LCBtYXRlcmlhbHMgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU2NlbmVVdGlscyBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvdXRpbHMvU2NlbmVVdGlscy5qcycgKTtcblxuXHR9LFxuXG5cdGRldGFjaDogZnVuY3Rpb24gKCAvKiBjaGlsZCwgcGFyZW50LCBzY2VuZSAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TY2VuZVV0aWxzIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH0sXG5cblx0YXR0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBzY2VuZSwgcGFyZW50ICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3V0aWxzL1NjZW5lVXRpbHMuanMnICk7XG5cblx0fVxuXG59O1xuXG4vL1xuXG5mdW5jdGlvbiBMZW5zRmxhcmUoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxlbnNGbGFyZSBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvb2JqZWN0cy9MZW5zZmxhcmUuanMnICk7XG5cbn1cblxuZXhwb3J0IHsgV2ViR0xSZW5kZXJUYXJnZXRDdWJlLCBXZWJHTFJlbmRlclRhcmdldCwgV2ViR0xSZW5kZXJlciwgU2hhZGVyTGliLCBVbmlmb3Jtc0xpYiwgVW5pZm9ybXNVdGlscywgU2hhZGVyQ2h1bmssIEZvZ0V4cDIsIEZvZywgU2NlbmUsIFNwcml0ZSwgTE9ELCBTa2lubmVkTWVzaCwgU2tlbGV0b24sIEJvbmUsIE1lc2gsIExpbmVTZWdtZW50cywgTGluZUxvb3AsIExpbmUsIFBvaW50cywgR3JvdXAsIFZpZGVvVGV4dHVyZSwgRGF0YVRleHR1cmUsIENvbXByZXNzZWRUZXh0dXJlLCBDdWJlVGV4dHVyZSwgQ2FudmFzVGV4dHVyZSwgRGVwdGhUZXh0dXJlLCBUZXh0dXJlLCBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciwgRGF0YVRleHR1cmVMb2FkZXIsIEN1YmVUZXh0dXJlTG9hZGVyLCBUZXh0dXJlTG9hZGVyLCBPYmplY3RMb2FkZXIsIE1hdGVyaWFsTG9hZGVyLCBCdWZmZXJHZW9tZXRyeUxvYWRlciwgRGVmYXVsdExvYWRpbmdNYW5hZ2VyLCBMb2FkaW5nTWFuYWdlciwgSlNPTkxvYWRlciwgSW1hZ2VMb2FkZXIsIEltYWdlQml0bWFwTG9hZGVyLCBGb250TG9hZGVyLCBGaWxlTG9hZGVyLCBMb2FkZXIsIExvYWRlclV0aWxzLCBDYWNoZSwgQXVkaW9Mb2FkZXIsIFNwb3RMaWdodFNoYWRvdywgU3BvdExpZ2h0LCBQb2ludExpZ2h0LCBSZWN0QXJlYUxpZ2h0LCBIZW1pc3BoZXJlTGlnaHQsIERpcmVjdGlvbmFsTGlnaHRTaGFkb3csIERpcmVjdGlvbmFsTGlnaHQsIEFtYmllbnRMaWdodCwgTGlnaHRTaGFkb3csIExpZ2h0LCBTdGVyZW9DYW1lcmEsIFBlcnNwZWN0aXZlQ2FtZXJhLCBPcnRob2dyYXBoaWNDYW1lcmEsIEN1YmVDYW1lcmEsIEFycmF5Q2FtZXJhLCBDYW1lcmEsIEF1ZGlvTGlzdGVuZXIsIFBvc2l0aW9uYWxBdWRpbywgQXVkaW9Db250ZXh0LCBBdWRpb0FuYWx5c2VyLCBBdWRpbywgVmVjdG9yS2V5ZnJhbWVUcmFjaywgU3RyaW5nS2V5ZnJhbWVUcmFjaywgUXVhdGVybmlvbktleWZyYW1lVHJhY2ssIE51bWJlcktleWZyYW1lVHJhY2ssIENvbG9yS2V5ZnJhbWVUcmFjaywgQm9vbGVhbktleWZyYW1lVHJhY2ssIFByb3BlcnR5TWl4ZXIsIFByb3BlcnR5QmluZGluZywgS2V5ZnJhbWVUcmFjaywgQW5pbWF0aW9uVXRpbHMsIEFuaW1hdGlvbk9iamVjdEdyb3VwLCBBbmltYXRpb25NaXhlciwgQW5pbWF0aW9uQ2xpcCwgVW5pZm9ybSwgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnksIEJ1ZmZlckdlb21ldHJ5LCBHZW9tZXRyeSwgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUsIEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLCBJbnRlcmxlYXZlZEJ1ZmZlciwgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlLCBGYWNlMywgT2JqZWN0M0QsIFJheWNhc3RlciwgTGF5ZXJzLCBFdmVudERpc3BhdGNoZXIsIENsb2NrLCBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQsIExpbmVhckludGVycG9sYW50LCBEaXNjcmV0ZUludGVycG9sYW50LCBDdWJpY0ludGVycG9sYW50LCBJbnRlcnBvbGFudCwgVHJpYW5nbGUsIF9NYXRoIGFzIE1hdGgsIFNwaGVyaWNhbCwgQ3lsaW5kcmljYWwsIFBsYW5lLCBGcnVzdHVtLCBTcGhlcmUsIFJheSwgTWF0cml4NCwgTWF0cml4MywgQm94MywgQm94MiwgTGluZTMsIEV1bGVyLCBWZWN0b3I0LCBWZWN0b3IzLCBWZWN0b3IyLCBRdWF0ZXJuaW9uLCBDb2xvciwgSW1tZWRpYXRlUmVuZGVyT2JqZWN0LCBWZXJ0ZXhOb3JtYWxzSGVscGVyLCBTcG90TGlnaHRIZWxwZXIsIFNrZWxldG9uSGVscGVyLCBQb2ludExpZ2h0SGVscGVyLCBSZWN0QXJlYUxpZ2h0SGVscGVyLCBIZW1pc3BoZXJlTGlnaHRIZWxwZXIsIEdyaWRIZWxwZXIsIFBvbGFyR3JpZEhlbHBlciwgRmFjZU5vcm1hbHNIZWxwZXIsIERpcmVjdGlvbmFsTGlnaHRIZWxwZXIsIENhbWVyYUhlbHBlciwgQm94SGVscGVyLCBCb3gzSGVscGVyLCBQbGFuZUhlbHBlciwgQXJyb3dIZWxwZXIsIEF4ZXNIZWxwZXIsIFNoYXBlLCBQYXRoLCBTaGFwZVBhdGgsIEZvbnQsIEN1cnZlUGF0aCwgQ3VydmUsIFNoYXBlVXRpbHMsIFdlYkdMVXRpbHMsIFdpcmVmcmFtZUdlb21ldHJ5LCBQYXJhbWV0cmljR2VvbWV0cnksIFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSwgVGV0cmFoZWRyb25HZW9tZXRyeSwgVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSwgT2N0YWhlZHJvbkdlb21ldHJ5LCBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnksIEljb3NhaGVkcm9uR2VvbWV0cnksIEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnksIERvZGVjYWhlZHJvbkdlb21ldHJ5LCBEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSwgUG9seWhlZHJvbkdlb21ldHJ5LCBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnksIFR1YmVHZW9tZXRyeSwgVHViZUJ1ZmZlckdlb21ldHJ5LCBUb3J1c0tub3RHZW9tZXRyeSwgVG9ydXNLbm90QnVmZmVyR2VvbWV0cnksIFRvcnVzR2VvbWV0cnksIFRvcnVzQnVmZmVyR2VvbWV0cnksIFRleHRHZW9tZXRyeSwgVGV4dEJ1ZmZlckdlb21ldHJ5LCBTcGhlcmVHZW9tZXRyeSwgU3BoZXJlQnVmZmVyR2VvbWV0cnksIFJpbmdHZW9tZXRyeSwgUmluZ0J1ZmZlckdlb21ldHJ5LCBQbGFuZUdlb21ldHJ5LCBQbGFuZUJ1ZmZlckdlb21ldHJ5LCBMYXRoZUdlb21ldHJ5LCBMYXRoZUJ1ZmZlckdlb21ldHJ5LCBTaGFwZUdlb21ldHJ5LCBTaGFwZUJ1ZmZlckdlb21ldHJ5LCBFeHRydWRlR2VvbWV0cnksIEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeSwgRWRnZXNHZW9tZXRyeSwgQ29uZUdlb21ldHJ5LCBDb25lQnVmZmVyR2VvbWV0cnksIEN5bGluZGVyR2VvbWV0cnksIEN5bGluZGVyQnVmZmVyR2VvbWV0cnksIENpcmNsZUdlb21ldHJ5LCBDaXJjbGVCdWZmZXJHZW9tZXRyeSwgQm94R2VvbWV0cnksIEJveEJ1ZmZlckdlb21ldHJ5LCBTaGFkb3dNYXRlcmlhbCwgU3ByaXRlTWF0ZXJpYWwsIFJhd1NoYWRlck1hdGVyaWFsLCBTaGFkZXJNYXRlcmlhbCwgUG9pbnRzTWF0ZXJpYWwsIE1lc2hQaHlzaWNhbE1hdGVyaWFsLCBNZXNoU3RhbmRhcmRNYXRlcmlhbCwgTWVzaFBob25nTWF0ZXJpYWwsIE1lc2hUb29uTWF0ZXJpYWwsIE1lc2hOb3JtYWxNYXRlcmlhbCwgTWVzaExhbWJlcnRNYXRlcmlhbCwgTWVzaERlcHRoTWF0ZXJpYWwsIE1lc2hEaXN0YW5jZU1hdGVyaWFsLCBNZXNoQmFzaWNNYXRlcmlhbCwgTGluZURhc2hlZE1hdGVyaWFsLCBMaW5lQmFzaWNNYXRlcmlhbCwgTWF0ZXJpYWwsIEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUsIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSwgSW50MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgSW50MTZCdWZmZXJBdHRyaWJ1dGUsIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSwgVWludDhCdWZmZXJBdHRyaWJ1dGUsIEludDhCdWZmZXJBdHRyaWJ1dGUsIEJ1ZmZlckF0dHJpYnV0ZSwgQXJjQ3VydmUsIENhdG11bGxSb21DdXJ2ZTMsIEN1YmljQmV6aWVyQ3VydmUsIEN1YmljQmV6aWVyQ3VydmUzLCBFbGxpcHNlQ3VydmUsIExpbmVDdXJ2ZSwgTGluZUN1cnZlMywgUXVhZHJhdGljQmV6aWVyQ3VydmUsIFF1YWRyYXRpY0JlemllckN1cnZlMywgU3BsaW5lQ3VydmUsIFJFVklTSU9OLCBNT1VTRSwgQ3VsbEZhY2VOb25lLCBDdWxsRmFjZUJhY2ssIEN1bGxGYWNlRnJvbnQsIEN1bGxGYWNlRnJvbnRCYWNrLCBGcm9udEZhY2VEaXJlY3Rpb25DVywgRnJvbnRGYWNlRGlyZWN0aW9uQ0NXLCBCYXNpY1NoYWRvd01hcCwgUENGU2hhZG93TWFwLCBQQ0ZTb2Z0U2hhZG93TWFwLCBGcm9udFNpZGUsIEJhY2tTaWRlLCBEb3VibGVTaWRlLCBGbGF0U2hhZGluZywgU21vb3RoU2hhZGluZywgTm9Db2xvcnMsIEZhY2VDb2xvcnMsIFZlcnRleENvbG9ycywgTm9CbGVuZGluZywgTm9ybWFsQmxlbmRpbmcsIEFkZGl0aXZlQmxlbmRpbmcsIFN1YnRyYWN0aXZlQmxlbmRpbmcsIE11bHRpcGx5QmxlbmRpbmcsIEN1c3RvbUJsZW5kaW5nLCBBZGRFcXVhdGlvbiwgU3VidHJhY3RFcXVhdGlvbiwgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24sIE1pbkVxdWF0aW9uLCBNYXhFcXVhdGlvbiwgWmVyb0ZhY3RvciwgT25lRmFjdG9yLCBTcmNDb2xvckZhY3RvciwgT25lTWludXNTcmNDb2xvckZhY3RvciwgU3JjQWxwaGFGYWN0b3IsIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IsIERzdEFscGhhRmFjdG9yLCBPbmVNaW51c0RzdEFscGhhRmFjdG9yLCBEc3RDb2xvckZhY3RvciwgT25lTWludXNEc3RDb2xvckZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciwgTmV2ZXJEZXB0aCwgQWx3YXlzRGVwdGgsIExlc3NEZXB0aCwgTGVzc0VxdWFsRGVwdGgsIEVxdWFsRGVwdGgsIEdyZWF0ZXJFcXVhbERlcHRoLCBHcmVhdGVyRGVwdGgsIE5vdEVxdWFsRGVwdGgsIE11bHRpcGx5T3BlcmF0aW9uLCBNaXhPcGVyYXRpb24sIEFkZE9wZXJhdGlvbiwgTm9Ub25lTWFwcGluZywgTGluZWFyVG9uZU1hcHBpbmcsIFJlaW5oYXJkVG9uZU1hcHBpbmcsIFVuY2hhcnRlZDJUb25lTWFwcGluZywgQ2luZW9uVG9uZU1hcHBpbmcsIFVWTWFwcGluZywgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nLCBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZywgU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmcsIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLCBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZywgUmVwZWF0V3JhcHBpbmcsIENsYW1wVG9FZGdlV3JhcHBpbmcsIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsIE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyLCBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyLCBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIsIExpbmVhck1pcE1hcExpbmVhckZpbHRlciwgVW5zaWduZWRCeXRlVHlwZSwgQnl0ZVR5cGUsIFNob3J0VHlwZSwgVW5zaWduZWRTaG9ydFR5cGUsIEludFR5cGUsIFVuc2lnbmVkSW50VHlwZSwgRmxvYXRUeXBlLCBIYWxmRmxvYXRUeXBlLCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUsIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSwgVW5zaWduZWRTaG9ydDU2NVR5cGUsIFVuc2lnbmVkSW50MjQ4VHlwZSwgQWxwaGFGb3JtYXQsIFJHQkZvcm1hdCwgUkdCQUZvcm1hdCwgTHVtaW5hbmNlRm9ybWF0LCBMdW1pbmFuY2VBbHBoYUZvcm1hdCwgUkdCRUZvcm1hdCwgRGVwdGhGb3JtYXQsIERlcHRoU3RlbmNpbEZvcm1hdCwgUkdCX1MzVENfRFhUMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDNfRm9ybWF0LCBSR0JBX1MzVENfRFhUNV9Gb3JtYXQsIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQl9FVEMxX0Zvcm1hdCwgUkdCQV9BU1RDXzR4NF9Gb3JtYXQsIFJHQkFfQVNUQ181eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg1X0Zvcm1hdCwgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg1X0Zvcm1hdCwgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQsIFJHQkFfQVNUQ184eDhfRm9ybWF0LCBSR0JBX0FTVENfMTB4NV9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDhfRm9ybWF0LCBSR0JBX0FTVENfMTB4MTBfRm9ybWF0LCBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0LCBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0LCBMb29wT25jZSwgTG9vcFJlcGVhdCwgTG9vcFBpbmdQb25nLCBJbnRlcnBvbGF0ZURpc2NyZXRlLCBJbnRlcnBvbGF0ZUxpbmVhciwgSW50ZXJwb2xhdGVTbW9vdGgsIFplcm9DdXJ2YXR1cmVFbmRpbmcsIFplcm9TbG9wZUVuZGluZywgV3JhcEFyb3VuZEVuZGluZywgVHJpYW5nbGVzRHJhd01vZGUsIFRyaWFuZ2xlU3RyaXBEcmF3TW9kZSwgVHJpYW5nbGVGYW5EcmF3TW9kZSwgTGluZWFyRW5jb2RpbmcsIHNSR0JFbmNvZGluZywgR2FtbWFFbmNvZGluZywgUkdCRUVuY29kaW5nLCBMb2dMdXZFbmNvZGluZywgUkdCTTdFbmNvZGluZywgUkdCTTE2RW5jb2RpbmcsIFJHQkRFbmNvZGluZywgQmFzaWNEZXB0aFBhY2tpbmcsIFJHQkFEZXB0aFBhY2tpbmcsIFRhbmdlbnRTcGFjZU5vcm1hbE1hcCwgT2JqZWN0U3BhY2VOb3JtYWxNYXAsIEJveEdlb21ldHJ5IGFzIEN1YmVHZW9tZXRyeSwgRmFjZTQsIExpbmVTdHJpcCwgTGluZVBpZWNlcywgTWVzaEZhY2VNYXRlcmlhbCwgTXVsdGlNYXRlcmlhbCwgUG9pbnRDbG91ZCwgUGFydGljbGUsIFBhcnRpY2xlU3lzdGVtLCBQb2ludENsb3VkTWF0ZXJpYWwsIFBhcnRpY2xlQmFzaWNNYXRlcmlhbCwgUGFydGljbGVTeXN0ZW1NYXRlcmlhbCwgVmVydGV4LCBEeW5hbWljQnVmZmVyQXR0cmlidXRlLCBJbnQ4QXR0cmlidXRlLCBVaW50OEF0dHJpYnV0ZSwgVWludDhDbGFtcGVkQXR0cmlidXRlLCBJbnQxNkF0dHJpYnV0ZSwgVWludDE2QXR0cmlidXRlLCBJbnQzMkF0dHJpYnV0ZSwgVWludDMyQXR0cmlidXRlLCBGbG9hdDMyQXR0cmlidXRlLCBGbG9hdDY0QXR0cmlidXRlLCBDbG9zZWRTcGxpbmVDdXJ2ZTMsIFNwbGluZUN1cnZlMywgU3BsaW5lLCBBeGlzSGVscGVyLCBCb3VuZGluZ0JveEhlbHBlciwgRWRnZXNIZWxwZXIsIFdpcmVmcmFtZUhlbHBlciwgWEhSTG9hZGVyLCBCaW5hcnlUZXh0dXJlTG9hZGVyLCBHZW9tZXRyeVV0aWxzLCBJbWFnZVV0aWxzLCBQcm9qZWN0b3IsIENhbnZhc1JlbmRlcmVyLCBTY2VuZVV0aWxzLCBMZW5zRmxhcmUgfTtcbiIsImltcG9ydCB7IFdlYkdMUmVuZGVyZXIsIENhbWVyYSwgU2NlbmUgYXMgVGhyZWVKU1NjZW5lIH0gZnJvbSAndGhyZWUnXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NlbmUgaW1wbGVtZW50cyBDb21wb25lbnQ8VGhyZWVKU1NjZW5lPiB7XG5cbiAgcHJpdmF0ZSBfaW5zdGFuY2U6IFRocmVlSlNTY2VuZVxuICBwcml2YXRlIF9yZW5kZXJlcjogV2ViR0xSZW5kZXJlclxuICBwcml2YXRlIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZDogbnVtYmVyXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfc2NlbmVOYW1lOiBzdHJpbmcsXG4gICAgIHByaXZhdGUgX2NhbWVyYTogQ2FtZXJhLFxuICApIHtcbiAgICB0aGlzLl9zY2VuZU5hbWUgPSBfc2NlbmVOYW1lXG4gICAgdGhpcy5fY2FtZXJhID0gX2NhbWVyYVxuXG4gICAgdGhpcy5zdGFydCgpXG4gIH1cblxuICBzdGFydCA9ICgpID0+IHtcbiAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBUaHJlZUpTU2NlbmUoKVxuXG4gICAgdGhpcy5fcmVuZGVyZXIgPSBuZXcgV2ViR0xSZW5kZXJlcigpXG4gICAgdGhpcy5fcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fcmVuZGVyZXIuZG9tRWxlbWVudClcblxuICAgIHRoaXMudXBkYXRlKClcbiAgfVxuXG4gIHVwZGF0ZSA9ICgpID0+IHtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXIodGhpcy5nZXQoKSwgdGhpcy5fY2FtZXJhKVxuXG4gICAgdGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlKVxuICB9XG5cbiAgZGVzdHJveSA9ICgpID0+IHtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQpXG4gIH1cblxuICBnZXQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlXG4gIH1cblxuICBnZXRSZW5kZXJlciA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyZXJcbiAgfVxuXG4gIGdldENhbWVyYSA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5fY2FtZXJhXG4gIH1cblxuICBnZXROYW1lID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl9zY2VuZU5hbWVcbiAgfVxuXG4gIHNldE5hbWUgPSAoc2NlbmVOYW1lOiBzdHJpbmcpID0+IHtcbiAgICB0aGlzLl9zY2VuZU5hbWUgPSBzY2VuZU5hbWVcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvcmUvY29tcG9uZW50J1xuXG4vLyBAdHMtaWdub3JlXG5jb25zdCBPcmJpdENvbnRyb2xzID0gcmVxdWlyZSgndGhyZWUtb3JiaXQtY29udHJvbHMnKShUSFJFRSlcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3JiaXRDb250cm9sIGltcGxlbWVudHMgQ29tcG9uZW50PFRIUkVFLk9yYml0Q29udHJvbHM+IHtcblxuICBwcml2YXRlIF9pbnN0YW5jZTogVEhSRUUuT3JiaXRDb250cm9sc1xuICBwcml2YXRlIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZDogbnVtYmVyXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfY2FtZXJhOiBUSFJFRS5DYW1lcmEsXG4gICAgcHJpdmF0ZSBfZG9tRWxlbWVudDogSFRNTENhbnZhc0VsZW1lbnQsXG4gICkge1xuICAgIHRoaXMuX2NhbWVyYSA9IF9jYW1lcmFcbiAgICB0aGlzLl9kb21FbGVtZW50ID0gX2RvbUVsZW1lbnRcblxuICAgIHRoaXMuc3RhcnQoKVxuICB9XG5cbiAgc3RhcnQgPSAoKSA9PiB7XG4gICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgT3JiaXRDb250cm9scyh0aGlzLl9jYW1lcmEsIHRoaXMuX2RvbUVsZW1lbnQpXG5cbiAgICB0aGlzLnVwZGF0ZSgpXG4gIH1cblxuICB1cGRhdGUgPSAoKSA9PiB7XG4gICAgdGhpcy5faW5zdGFuY2UudXBkYXRlKClcblxuICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZSlcbiAgfVxuXG4gIGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkKVxuICB9XG5cbiAgZ2V0ID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiLi4vY29yZS9jb21wb25lbnRcIlxuaW1wb3J0IHsgQ2hhbmdlRXZlbnQgfSBmcm9tIFwiLi4vdHlwZXNjcmlwdC90eXBpbmdzXCJcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgbmFtZT86IHN0cmluZ1xuICBwbGFjZWhvbGRlcj86IHN0cmluZ1xuICBkZWZhdWx0VmFsdWU/OiBzdHJpbmdcbiAgc3R5bGU/OiBzdHJpbmdcbiAgb25DaGFuZ2U/OiAoZXZlbnQ6IENoYW5nZUV2ZW50KSA9PiB2b2lkLFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnB1dCBpbXBsZW1lbnRzIENvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfaW5zdGFuY2U6IEhUTUxJbnB1dEVsZW1lbnRcblxuICBwcml2YXRlIF9uYW1lOiBzdHJpbmdcbiAgcHJpdmF0ZSBfcGxhY2Vob2xkZXI6IHN0cmluZ1xuICBwcml2YXRlIF9kZWZhdWx0VmFsdWU6IHN0cmluZ1xuICBwcml2YXRlIF9zdHlsZTogc3RyaW5nXG4gIHByaXZhdGUgX29uQ2hhbmdlOiAoZXZlbnQ6IENoYW5nZUV2ZW50KSA9PiB2b2lkXG5cbiAgY29uc3RydWN0b3IoeyBuYW1lLCBwbGFjZWhvbGRlciwgZGVmYXVsdFZhbHVlLCBzdHlsZSwgb25DaGFuZ2UgfTogUHJvcHMpIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZVxuICAgIHRoaXMuX3BsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXJcbiAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWVcbiAgICB0aGlzLl9zdHlsZSA9IHN0eWxlXG4gICAgdGhpcy5fb25DaGFuZ2UgPSBvbkNoYW5nZVxuXG4gICAgdGhpcy5zdGFydCgpXG4gIH1cblxuICBzdGFydCAoKSB7XG4gICAgdGhpcy5faW5zdGFuY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpXG4gICAgdGhpcy5faW5zdGFuY2Uuc2V0QXR0cmlidXRlKCduYW1lJywgdGhpcy5fbmFtZSlcbiAgICB0aGlzLl9pbnN0YW5jZS5zZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJywgdGhpcy5fcGxhY2Vob2xkZXIpXG4gICAgdGhpcy5faW5zdGFuY2Uuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKVxuICAgIHRoaXMuX2luc3RhbmNlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCB0aGlzLl9zdHlsZSlcbiAgICBcbiAgICBpZiAodGhpcy5fZGVmYXVsdFZhbHVlKSB7XG4gICAgICB0aGlzLl9pbnN0YW5jZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdGhpcy5fZGVmYXVsdFZhbHVlKVxuICAgIH1cblxuICAgIHRoaXMuX2luc3RhbmNlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5fb25DaGFuZ2UpXG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2luc3RhbmNlKVxuICB9XG5cbiAgZGVzdHJveSAoKSB7XG4gICAgdGhpcy5faW5zdGFuY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbkNoYW5nZSlcblxuICAgIGRvY3VtZW50LnJlbW92ZUNoaWxkKHRoaXMuX2luc3RhbmNlKVxuICB9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuLi9jb3JlL2NvbXBvbmVudFwiO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL3VpL2lucHV0J1xuaW1wb3J0IHsgQ2hhbmdlRXZlbnQgfSBmcm9tIFwiLi4vdHlwZXNjcmlwdC90eXBpbmdzXCI7XG5pbXBvcnQgU2NlbmUgZnJvbSBcIi4uL2NvcmUvc2NlbmVcIjtcbmltcG9ydCBFZGl0b3JHcmlkIGZyb20gXCIuL2VkaXRvci1ncmlkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvclRvb2xiYXIgaW1wbGVtZW50cyBDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX3NjZW5lTmFtZUlucHV0OiBJbnB1dFxuICBwcml2YXRlIF9ncmlkV2lkdGhJbnB1dDogSW5wdXRcbiAgcHJpdmF0ZSBfZ3JpZERlcHRoSW5wdXQ6IElucHV0XG5cbiAgcHJpdmF0ZSBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQ6IG51bWJlclxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2VkaXRvclNjZW5lOiBTY2VuZSxcbiAgICBwcml2YXRlIF9lZGl0b3JHcmlkOiBFZGl0b3JHcmlkXG4gICkge1xuICAgIHRoaXMuX2VkaXRvclNjZW5lID0gX2VkaXRvclNjZW5lXG4gICAgdGhpcy5fZWRpdG9yR3JpZCA9IF9lZGl0b3JHcmlkXG4gICAgICBcbiAgICB0aGlzLnN0YXJ0KClcbiAgfVxuXG4gIHN0YXJ0ID0gKCkgPT4ge1xuICAgIHRoaXMucmVuZGVyU2NlbmVOYW1lSW5wdXQoKVxuXG4gICAgdGhpcy5yZW5kZXJHcmlkSW5wdXRzKClcbiAgfVxuXG4gIGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgLy8gQ2xlYW51cFxuICAgIHRoaXMuX3NjZW5lTmFtZUlucHV0LmRlc3Ryb3koKVxuXG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkKVxuICB9XG5cbiAgcmVuZGVyU2NlbmVOYW1lSW5wdXQgPSAoKSA9PiB7XG4gICAgdGhpcy5fc2NlbmVOYW1lSW5wdXQgPSBuZXcgSW5wdXQoe1xuICAgICAgbmFtZTogJ3NjZW5lTmFtZScsXG4gICAgICBwbGFjZWhvbGRlcjogJ0luc2VydCBhIHNjZW5lIG5hbWUuLi4nLFxuICAgICAgc3R5bGU6IGBcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDEwcHg7XG4gICAgICAgIGxlZnQ6IDEwcHg7XG4gICAgICAgIHdpZHRoOiAxODBweDtcbiAgICAgIGAsXG4gICAgICBvbkNoYW5nZTogKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuX2VkaXRvclNjZW5lLnNldE5hbWUoZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICByZW5kZXJHcmlkSW5wdXRzID0gKCkgPT4ge1xuICAgIHRoaXMuX2dyaWRXaWR0aElucHV0ID0gbmV3IElucHV0KHtcbiAgICAgIG5hbWU6ICdncmlkV2lkdGgnLFxuICAgICAgcGxhY2Vob2xkZXI6ICdHcmlkIHdpZHRoLi4uJyxcbiAgICAgIHN0eWxlOiBgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiA0MHB4O1xuICAgICAgICBsZWZ0OiAxMHB4O1xuICAgICAgICB3aWR0aDogODBweDtcbiAgICAgIGAsXG4gICAgICBkZWZhdWx0VmFsdWU6IGAke3RoaXMuX2VkaXRvckdyaWQuZ2V0V2lkdGgoKX1gLFxuICAgICAgb25DaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLl9lZGl0b3JHcmlkLnNldFdpZHRoKE51bWJlcihldmVudC50YXJnZXQudmFsdWUpKVxuICAgICAgfSxcbiAgICB9KVxuXG4gICAgdGhpcy5fZ3JpZERlcHRoSW5wdXQgPSBuZXcgSW5wdXQoe1xuICAgICAgbmFtZTogJ2dyaWREZXB0aCcsXG4gICAgICBwbGFjZWhvbGRlcjogJ0dyaWQgZGVwdGguLi4nLFxuICAgICAgc3R5bGU6IGBcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDQwcHg7XG4gICAgICAgIGxlZnQ6IDExMHB4O1xuICAgICAgICB3aWR0aDogODBweDtcbiAgICAgIGAsXG4gICAgICBkZWZhdWx0VmFsdWU6IGAke3RoaXMuX2VkaXRvckdyaWQuZ2V0RGVwdGgoKX1gLFxuICAgICAgb25DaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLl9lZGl0b3JHcmlkLnNldERlcHRoKE51bWJlcihldmVudC50YXJnZXQudmFsdWUpKVxuICAgICAgfSxcbiAgICB9KVxuICB9XG59XG4iLCJpbXBvcnQgeyBSYXljYXN0ZXIsIFZlY3RvcjIsIENhbWVyYSwgSW50ZXJzZWN0aW9uIH0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuLi9jb3JlL2NvbXBvbmVudFwiO1xuaW1wb3J0IFNjZW5lIGZyb20gXCIuLi9jb3JlL3NjZW5lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdXNlUmF5Y2FzdCBpbXBsZW1lbnRzIENvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQ6IG51bWJlclxuXG4gIHByaXZhdGUgX2NhbWVyYTogQ2FtZXJhXG4gIHByaXZhdGUgX3JheWNhc3RlcjogUmF5Y2FzdGVyXG4gIHByaXZhdGUgX21vdXNlOiBWZWN0b3IyXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfc2NlbmU6IFNjZW5lLFxuICAgIHByaXZhdGUgX29uUmF5Y2FzdDogKGludGVyc2VjdGlvbnM6IEludGVyc2VjdGlvbltdKSA9PiB2b2lkXG4gICkge1xuICAgIHRoaXMuX3NjZW5lID0gX3NjZW5lXG4gICAgdGhpcy5fY2FtZXJhID0gX3NjZW5lLmdldENhbWVyYSgpXG5cbiAgICB0aGlzLnN0YXJ0KClcbiAgfVxuXG5cbiAgc3RhcnQgPSAoKSA9PiB7XG4gICAgdGhpcy5fcmF5Y2FzdGVyID0gbmV3IFJheWNhc3RlcigpXG4gICAgdGhpcy5fbW91c2UgPSBuZXcgVmVjdG9yMigpXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUsIGZhbHNlKTtcblxuICAgIHRoaXMudXBkYXRlKClcbiAgfVxuXG4gIHVwZGF0ZSA9ICgpID0+IHtcbiAgICB0aGlzLnJheWNhc3QoKVxuICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZSlcbiAgfVxuXG4gIGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlLCBmYWxzZSApO1xuXG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkKVxuICB9XG5cbiAgcmF5Y2FzdCA9ICgpID0+IHtcbiAgICB0aGlzLl9yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSh0aGlzLl9tb3VzZSwgdGhpcy5fY2FtZXJhKVxuXG4gICAgY29uc3QgaW50ZXJzZWN0cyA9IHRoaXMuX3JheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMuX3NjZW5lLmdldCgpLmNoaWxkcmVuLCBmYWxzZSlcblxuICAgIGlmICh0aGlzLl9vblJheWNhc3QpIHtcbiAgICAgIHRoaXMuX29uUmF5Y2FzdChpbnRlcnNlY3RzKVxuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VNb3ZlID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgLy8gY2FsY3VsYXRlIG1vdXNlIHBvc2l0aW9uIGluIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGVzXG4gIFx0Ly8gKC0xIHRvICsxKSBmb3IgYm90aCBjb21wb25lbnRzXG4gICAgdGhpcy5fbW91c2UueCA9IChldmVudC5jbGllbnRYIC8gd2luZG93LmlubmVyV2lkdGgpICogMiAtIDFcbiAgICB0aGlzLl9tb3VzZS55ID0gLShldmVudC5jbGllbnRZIC8gd2luZG93LmlubmVySGVpZ2h0KSAqIDIgKyAxXG4gIH1cblxufSIsImltcG9ydCBDb21wb25lbnQgZnJvbSBcIi4uL2NvcmUvY29tcG9uZW50XCI7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vdWkvaW5wdXQnXG5pbXBvcnQgeyBDaGFuZ2VFdmVudCB9IGZyb20gXCIuLi90eXBlc2NyaXB0L3R5cGluZ3NcIjtcbmltcG9ydCBTY2VuZSBmcm9tIFwiLi4vY29yZS9zY2VuZVwiO1xuaW1wb3J0IHsgR3JpZEhlbHBlciwgT2JqZWN0M0QsIExpbmVCYXNpY01hdGVyaWFsLCBDb2xvciwgR2VvbWV0cnksIFZlY3RvcjMsIExpbmUsIExpbmVQaWVjZXMsIEludGVyc2VjdGlvbiwgTWVzaCwgQm94R2VvbWV0cnksIE1hdGVyaWFsLCBNZXNoQmFzaWNNYXRlcmlhbCB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IE1vdXNlUmF5Y2FzdCBmcm9tIFwiLi4vY29udHJvbHMvbW91c2UtcmF5Y2FzdFwiO1xuXG5jb25zdCBERUZBVUxUX0NPTE9SID0gJ3JnYmEoNTAsIDEwMCwgMjU1LCAwLjEpJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFZGl0b3JHcmlkIGltcGxlbWVudHMgQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF93aWR0aDogbnVtYmVyID0gMTBcbiAgcHJpdmF0ZSBfZGVwdGg6IG51bWJlciA9IDEwXG4gIHByaXZhdGUgX2xpbmVXaWR0aDogbnVtYmVyID0gMTBcbiAgcHJpdmF0ZSBfbGluZURlcHRoOiBudW1iZXIgPSAxMFxuICBwcml2YXRlIF9ncmlkOiBPYmplY3QzRFtdID0gW11cbiAgcHJpdmF0ZSBfbW91c2VSYXljYXN0OiBNb3VzZVJheWNhc3RcbiAgcHJpdmF0ZSBfcHJldmlvdXNJbnRlcnNlY3Rpb25zOiBJbnRlcnNlY3Rpb25bXVxuICBwcml2YXRlIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZDogbnVtYmVyXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfc2NlbmU6IFNjZW5lLFxuICAgIHByaXZhdGUgX2dyaWRDb2xvcjogc3RyaW5nIHwgbnVtYmVyIHwgQ29sb3IgPSBuZXcgQ29sb3IoXCJyZ2JhKDAsIDAsIDApXCIpXG4gICkge1xuICAgIHRoaXMuX3NjZW5lID0gX3NjZW5lXG5cbiAgICB0aGlzLnN0YXJ0KClcbiAgfVxuXG4gIHN0YXJ0ID0gKCkgPT4ge1xuICAgIHRoaXMuX21vdXNlUmF5Y2FzdCA9IG5ldyBNb3VzZVJheWNhc3QodGhpcy5fc2NlbmUsIHRoaXMub25SYXljYXN0KVxuXG4gICAgdGhpcy5nZW5lcmF0ZUdyaWQoKVxuICB9XG5cbiAgZGVzdHJveSA9ICgpID0+IHtcbiAgICAvLyBDbGVhbnVwXG4gICAgdGhpcy5jbGVhbnVwKClcblxuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZClcbiAgfVxuXG4gIGdldEdyaWQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMuX2dyaWRcbiAgfVxuXG4gIGdldFdpZHRoID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl93aWR0aFxuICB9XG4gIHNldFdpZHRoID0gKHdpZHRoOiBudW1iZXIpID0+IHtcbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoXG4gICAgdGhpcy5fbGluZVdpZHRoID0gd2lkdGhcblxuICAgIHRoaXMuZ2VuZXJhdGVHcmlkKClcbiAgfVxuXG4gIGdldERlcHRoID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLl9kZXB0aFxuICB9XG4gIHNldERlcHRoID0gKGRlcHRoOiBudW1iZXIpID0+IHtcbiAgICB0aGlzLl9kZXB0aCA9IGRlcHRoXG4gICAgdGhpcy5fbGluZURlcHRoID0gZGVwdGhcblxuICAgIHRoaXMuZ2VuZXJhdGVHcmlkKClcbiAgfVxuXG4gIGdlbmVyYXRlVW5pdCA9ICh7IHgsIHksIHp9OiB7IHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIgfSkgPT4ge1xuICAgIGNvbnN0IHVuaXQgPSBuZXcgTWVzaChuZXcgQm94R2VvbWV0cnkoMSwgMSwgMSkpXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHVuaXQubWF0ZXJpYWwuY29sb3Iuc2V0KERFRkFVTFRfQ09MT1IpXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIC8vIHVuaXQubWF0ZXJpYWwud2lyZWZyYW1lID0gdHJ1ZVxuICAgIHVuaXQucG9zaXRpb24ueCA9IHhcbiAgICB1bml0LnBvc2l0aW9uLnkgPSB5XG4gICAgdW5pdC5wb3NpdGlvbi56ID0gelxuXG4gICAgcmV0dXJuIHVuaXRcbiAgfVxuXG4gIGNsZWFudXAgPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2NsZWFudXAnKVxuICAgIHRoaXMuX2dyaWQuZm9yRWFjaChvYmplY3QgPT4ge1xuICAgICAgdGhpcy5fc2NlbmUuZ2V0KCkucmVtb3ZlKG9iamVjdClcbiAgICB9KVxuXG4gICAgdGhpcy5fZ3JpZCA9IFtdXG4gIH1cblxuICBnZW5lcmF0ZUdyaWQgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuX2dyaWQubGVuZ3RoKSB7XG4gICAgICB0aGlzLmNsZWFudXAoKVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAtdGhpcy5fd2lkdGg7IGkgPCB0aGlzLl93aWR0aCArIDE7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IC10aGlzLl9kZXB0aDsgaiA8IHRoaXMuX2RlcHRoICsgMTsgaisrKSB7XG4gICAgICAgIHRoaXMuX2dyaWQucHVzaCh0aGlzLmdlbmVyYXRlVW5pdCh7IHg6IGksIHk6IDAsIHo6IGogfSkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZ3JpZC5mb3JFYWNoKG9iamVjdCA9PiB7XG4gICAgICB0aGlzLl9zY2VuZS5nZXQoKS5hZGQob2JqZWN0KVxuICAgIH0pXG4gIH1cblxuICBvblJheWNhc3QgPSAoaW50ZXJzZWN0aW9uczogSW50ZXJzZWN0aW9uW10pID0+IHtcbiAgICBpZiAodGhpcy5fcHJldmlvdXNJbnRlcnNlY3Rpb25zICYmIHRoaXMuX3ByZXZpb3VzSW50ZXJzZWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3ByZXZpb3VzSW50ZXJzZWN0aW9ucy5mb3JFYWNoKChpbnRlcnNlY3Rpb246IGFueSkgPT4ge1xuICAgICAgICBpbnRlcnNlY3Rpb24ub2JqZWN0Lm1hdGVyaWFsLmNvbG9yLnNldChERUZBVUxUX0NPTE9SKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoaW50ZXJzZWN0aW9ucyAmJiBpbnRlcnNlY3Rpb25zLmxlbmd0aCkge1xuICAgICAgaW50ZXJzZWN0aW9ucy5mb3JFYWNoKChpbnRlcnNlY3Rpb246IGFueSkgPT4ge1xuICAgICAgICBpbnRlcnNlY3Rpb24ub2JqZWN0Lm1hdGVyaWFsLmNvbG9yLnNldCgncmVkJylcbiAgICAgIH0pXG4gICAgfVxuICAgICAgXG4gICAgdGhpcy5fcHJldmlvdXNJbnRlcnNlY3Rpb25zID0gaW50ZXJzZWN0aW9uc1xuICB9XG59XG4iLCJpbXBvcnQgRWRpdG9yIGZyb20gJy4vZWRpdG9yL2VkaXRvcidcblxubmV3IEVkaXRvcigpXG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuLi9jb3JlL2NvbXBvbmVudFwiO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL3VpL2lucHV0J1xuaW1wb3J0IHsgQ2hhbmdlRXZlbnQgfSBmcm9tIFwiLi4vdHlwZXNjcmlwdC90eXBpbmdzXCI7XG5pbXBvcnQgU2NlbmUgZnJvbSBcIi4uL2NvcmUvc2NlbmVcIjtcbmltcG9ydCB7IFBlcnNwZWN0aXZlQ2FtZXJhLCBCb3hHZW9tZXRyeSwgTWVzaCwgTWVzaE5vcm1hbE1hdGVyaWFsLCBDb2xvciB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IE9yYml0Q29udHJvbCBmcm9tIFwiLi4vY29udHJvbHMvb3JiaXQtY29udHJvbFwiO1xuaW1wb3J0IEVkaXRvclRvb2xiYXIgZnJvbSBcIi4vZWRpdG9yLXRvb2xiYXJcIjtcbmltcG9ydCBFZGl0b3JHcmlkIGZyb20gXCIuL2VkaXRvci1ncmlkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvciBpbXBsZW1lbnRzIENvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfc2NlbmU6IFNjZW5lXG4gIHByaXZhdGUgX2NhbWVyYTogUGVyc3BlY3RpdmVDYW1lcmFcbiAgcHJpdmF0ZSBfY29udHJvbHM6IE9yYml0Q29udHJvbFxuICBwcml2YXRlIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZDogbnVtYmVyXG5cbiAgcHJpdmF0ZSBfZWRpdG9yVG9vbGJhcjogRWRpdG9yVG9vbGJhclxuXG4gIHByaXZhdGUgX2VkaXRvckdyaWQ6IEVkaXRvckdyaWRcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXJ0KClcbiAgfVxuXG4gIHN0YXJ0ID0gKCkgPT4ge1xuICAgIHRoaXMuX2NhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSg3NSwgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsIDAuMSwgMTAwMClcbiAgICB0aGlzLl9zY2VuZSA9IG5ldyBTY2VuZSgncHJvdG90eXBlJywgdGhpcy5fY2FtZXJhKVxuICAgIHRoaXMuX2NvbnRyb2xzID0gbmV3IE9yYml0Q29udHJvbCh0aGlzLl9jYW1lcmEsIHRoaXMuX3NjZW5lLmdldFJlbmRlcmVyKCkuZG9tRWxlbWVudClcblxuICAgIHRoaXMuX2NhbWVyYS5wb3NpdGlvbi5zZXQoMCwgMjAwLCAyMDApXG4gICAgdGhpcy5fY2FtZXJhLmxvb2tBdCgwLCAwLCAwKVxuXG4gICAgdGhpcy5fc2NlbmUuZ2V0UmVuZGVyZXIoKS5zZXRDbGVhckNvbG9yKG5ldyBDb2xvcihcInJnYmEoMCwgMCwgMCxcIikpXG5cbiAgICAvLyBJbnN0YW50aWF0ZSBlZGl0b3IgdG9vbHNldHNcbiAgICB0aGlzLl9lZGl0b3JHcmlkID0gbmV3IEVkaXRvckdyaWQodGhpcy5fc2NlbmUpXG4gICAgdGhpcy5fZWRpdG9yVG9vbGJhciA9IG5ldyBFZGl0b3JUb29sYmFyKHRoaXMuX3NjZW5lLCB0aGlzLl9lZGl0b3JHcmlkKVxuXG4gICAgdGhpcy51cGRhdGUoKVxuICB9XG5cbiAgdXBkYXRlID0gKCkgPT4ge1xuICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZSlcbiAgfVxuXG4gIGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkKVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9